diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/0-cfg.dot	2023-06-07 19:35:14.427385879 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/0-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,1197 @@
-digraph "anonymous_lambda_3" {  
-"3" [label = <(METHOD,anonymous_lambda_3)<SUB>91</SUB>> ]
-"5" [label = <(METHOD_RETURN,ANY)<SUB>91</SUB>> ]
-  "3" -> "5" 
+digraph "&lt;global&gt;" {  
+"99" [label = <(UNKNOWN,),))<SUB>110</SUB>> ]
+"100" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>111</SUB>> ]
+"101" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>116</SUB>> ]
+"102" [label = <(UNKNOWN,},})<SUB>120</SUB>> ]
+"109" [label = <(UNKNOWN,),))<SUB>122</SUB>> ]
+"110" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>123</SUB>> ]
+"117" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>128</SUB>> ]
+"123" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>129</SUB>> ]
+"124" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>132</SUB>> ]
+"125" [label = <(UNKNOWN,},})<SUB>133</SUB>> ]
+"135" [label = <(UNKNOWN,),))<SUB>136</SUB>> ]
+"136" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>137</SUB>> ]
+"137" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>139</SUB>> ]
+"139" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>142</SUB>> ]
+"143" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>143</SUB>> ]
+"155" [label = <(UNKNOWN,if (is_static) {\012    method = c-&gt;FindDirectMethod(name, sig, pointer_size);\012 },if (is_static) {\012    method = c-&gt;FindDirectMethod(name, sig, pointer_size);\012 })<SUB>144</SUB>> ]
+"156" [label = <(UNKNOWN,else if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },else if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>146</SUB>> ]
+"157" [label = <(UNKNOWN,else {\012    method = c-&gt;FindVirtualMethod(name, sig, pointer_size);\012 if (method == nullptr) {\012 // No virtual method matching the signature.  Search declared\012 // private methods and constructors.\012      method = c-&gt;FindDeclaredDirectMethod(name, sig, pointer_size);\012 }\012 },else {\012    method = c-&gt;FindVirtualMethod(name, sig, pointer_size);\012 if (method == nullptr) {\012 // No virtual method matching the signature.  Search declared\012 // private methods and constructors.\012      method = c-&gt;FindDeclaredDirectMethod(name, sig, pointer_size);\012 }\012 })<SUB>148</SUB>> ]
+"158" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>156</SUB>> ]
+"159" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>160</SUB>> ]
+"160" [label = <(UNKNOWN,},})<SUB>161</SUB>> ]
+"166" [label = <(UNKNOWN,),))<SUB>163</SUB>> ]
+"167" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>164</SUB>> ]
+"168" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>167</SUB>> ]
+"169" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>171</SUB>> ]
+"171" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>175</SUB>> ]
+"188" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>177</SUB>> ]
+"189" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>181</SUB>> ]
+"190" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>182</SUB>> ]
+"191" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>190</SUB>> ]
+"192" [label = <(UNKNOWN,},})<SUB>191</SUB>> ]
+"202" [label = <(UNKNOWN,),))<SUB>194</SUB>> ]
+"203" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>195</SUB>> ]
+"205" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>197</SUB>> ]
+"224" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>199</SUB>> ]
+"226" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>202</SUB>> ]
+"231" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>204</SUB>> ]
+"240" [label = <(UNKNOWN,if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>205</SUB>> ]
+"241" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>208</SUB>> ]
+"242" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 })<SUB>211</SUB>> ]
+"244" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>226</SUB>> ]
+"245" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>229</SUB>> ]
+"246" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>232</SUB>> ]
+"247" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>238</SUB>> ]
+"248" [label = <(UNKNOWN,},})<SUB>239</SUB>> ]
+"258" [label = <(UNKNOWN,),))<SUB>242</SUB>> ]
+"259" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>243</SUB>> ]
+"260" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>245</SUB>> ]
+"261" [label = <(UNKNOWN,},})<SUB>248</SUB>> ]
+"270" [label = <(UNKNOWN,),))<SUB>251</SUB>> ]
+"271" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>252</SUB>> ]
+"272" [label = <(UNKNOWN,},})<SUB>256</SUB>> ]
+"281" [label = <(UNKNOWN,),))<SUB>258</SUB>> ]
+"282" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>259</SUB>> ]
+"301" [label = <(UNKNOWN,),))<SUB>329</SUB>> ]
+"302" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>330</SUB>> ]
+"303" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>332</SUB>> ]
+"304" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>337</SUB>> ]
+"305" [label = <(UNKNOWN,},})<SUB>338</SUB>> ]
+"12692" [label = <(UNKNOWN,},})<SUB>2422</SUB>> ]
+"12748" [label = <(UNKNOWN,),))<SUB>2437</SUB>> ]
+"12749" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2438</SUB>> ]
+"12750" [label = <(UNKNOWN,if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2440</SUB>> ]
+"12751" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2449</SUB>> ]
+"12752" [label = <(UNKNOWN,return array.Ptr();,return array.Ptr();)<SUB>2450</SUB>> ]
+"12753" [label = <(UNKNOWN,},})<SUB>2451</SUB>> ]
+"12926" [label = <(UNKNOWN,),))<SUB>2495</SUB>> ]
+"12927" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2496</SUB>> ]
+"12929" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2498</SUB>> ]
+"12939" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2499</SUB>> ]
+"12945" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2500</SUB>> ]
+"12953" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2501</SUB>> ]
+"12954" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2519</SUB>> ]
+"12955" [label = <(UNKNOWN,},})<SUB>2531</SUB>> ]
+"13168" [label = <(UNKNOWN,};,};)<SUB>2572</SUB>> ]
+"13170" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2574</SUB>> ]
+"13875" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2814</SUB>> ]
+"14165" [label = <(UNKNOWN,},})<SUB>3063</SUB>> ]
+"9" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>65</SUB>> ]
+"87" [label = <(UNKNOWN,),))<SUB>95</SUB>> ]
+"88" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>96</SUB>> ]
+"89" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>98</SUB>> ]
+"118" [label = <(NewHandle,hs.NewHandle(klass))<SUB>128</SUB>> ]
+"145" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>143</SUB>> ]
+"173" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>176</SUB>> ]
+"206" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>198</SUB>> ]
+"233" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>204</SUB>> ]
+"12931" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2498</SUB>> ]
+"12941" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2499</SUB>> ]
+"12947" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2500</SUB>> ]
+"13172" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2574</SUB>> ]
+"13877" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2814</SUB>> ]
+"119" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>128</SUB>> ]
+"146" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>143</SUB>> ]
+"174" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>176</SUB>> ]
+"181" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>176</SUB>> ]
+"207" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>198</SUB>> ]
+"210" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>198</SUB>> ]
+"234" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>204</SUB>> ]
+"12932" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2498</SUB>> ]
+"12948" [label = <(GetLength,array-&gt;GetLength())<SUB>2500</SUB>> ]
+"13177" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>2579</SUB>> ]
+"13180" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>2580</SUB>> ]
+"13183" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>2581</SUB>> ]
+"13186" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>2582</SUB>> ]
+"13189" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>2583</SUB>> ]
+"13192" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>2584</SUB>> ]
+"13195" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>2585</SUB>> ]
+"13198" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>2586</SUB>> ]
+"13201" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>2587</SUB>> ]
+"13204" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>2588</SUB>> ]
+"13207" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>2589</SUB>> ]
+"13210" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>2590</SUB>> ]
+"13213" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>2591</SUB>> ]
+"13216" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>2592</SUB>> ]
+"13219" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>2593</SUB>> ]
+"13222" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>2594</SUB>> ]
+"13225" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>2595</SUB>> ]
+"13228" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>2596</SUB>> ]
+"13231" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>2597</SUB>> ]
+"13234" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>2598</SUB>> ]
+"13237" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>2599</SUB>> ]
+"13240" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>2600</SUB>> ]
+"13243" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>2601</SUB>> ]
+"13246" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>2602</SUB>> ]
+"13249" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>2603</SUB>> ]
+"13252" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>2604</SUB>> ]
+"13255" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>2605</SUB>> ]
+"13258" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>2606</SUB>> ]
+"13261" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>2607</SUB>> ]
+"13264" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>2608</SUB>> ]
+"13267" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>2609</SUB>> ]
+"13270" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>2610</SUB>> ]
+"13273" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>2611</SUB>> ]
+"13276" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>2612</SUB>> ]
+"13279" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>2613</SUB>> ]
+"13282" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>2614</SUB>> ]
+"13285" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>2615</SUB>> ]
+"13288" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>2616</SUB>> ]
+"13291" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>2617</SUB>> ]
+"13294" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>2618</SUB>> ]
+"13297" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>2619</SUB>> ]
+"13300" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>2620</SUB>> ]
+"13303" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>2621</SUB>> ]
+"13306" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>2622</SUB>> ]
+"13309" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>2623</SUB>> ]
+"13312" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>2624</SUB>> ]
+"13315" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>2625</SUB>> ]
+"13318" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>2626</SUB>> ]
+"13321" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>2627</SUB>> ]
+"13324" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>2628</SUB>> ]
+"13327" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>2629</SUB>> ]
+"13330" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>2630</SUB>> ]
+"13333" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>2631</SUB>> ]
+"13336" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>2632</SUB>> ]
+"13339" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>2633</SUB>> ]
+"13342" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>2634</SUB>> ]
+"13345" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>2635</SUB>> ]
+"13348" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>2636</SUB>> ]
+"13351" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>2637</SUB>> ]
+"13354" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>2638</SUB>> ]
+"13357" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>2639</SUB>> ]
+"13360" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>2640</SUB>> ]
+"13363" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>2641</SUB>> ]
+"13366" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>2642</SUB>> ]
+"13369" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>2643</SUB>> ]
+"13372" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>2644</SUB>> ]
+"13375" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>2645</SUB>> ]
+"13378" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>2646</SUB>> ]
+"13381" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>2647</SUB>> ]
+"13384" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>2648</SUB>> ]
+"13387" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>2649</SUB>> ]
+"13390" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>2650</SUB>> ]
+"13393" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>2651</SUB>> ]
+"13396" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>2652</SUB>> ]
+"13399" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>2653</SUB>> ]
+"13402" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>2654</SUB>> ]
+"13405" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>2655</SUB>> ]
+"13408" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>2656</SUB>> ]
+"13411" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>2657</SUB>> ]
+"13414" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>2658</SUB>> ]
+"13417" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>2659</SUB>> ]
+"13420" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>2660</SUB>> ]
+"13423" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>2661</SUB>> ]
+"13426" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>2662</SUB>> ]
+"13429" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>2663</SUB>> ]
+"13432" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>2664</SUB>> ]
+"13435" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>2665</SUB>> ]
+"13438" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>2666</SUB>> ]
+"13441" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>2667</SUB>> ]
+"13444" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>2668</SUB>> ]
+"13447" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>2669</SUB>> ]
+"13450" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>2670</SUB>> ]
+"13453" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>2671</SUB>> ]
+"13456" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>2672</SUB>> ]
+"13459" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>2673</SUB>> ]
+"13462" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>2674</SUB>> ]
+"13465" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>2675</SUB>> ]
+"13468" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>2676</SUB>> ]
+"13471" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>2677</SUB>> ]
+"13474" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>2678</SUB>> ]
+"13477" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>2679</SUB>> ]
+"13480" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>2680</SUB>> ]
+"13483" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>2681</SUB>> ]
+"13486" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>2682</SUB>> ]
+"13489" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>2683</SUB>> ]
+"13492" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>2684</SUB>> ]
+"13495" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>2685</SUB>> ]
+"13498" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>2686</SUB>> ]
+"13501" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>2687</SUB>> ]
+"13504" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>2688</SUB>> ]
+"13507" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>2689</SUB>> ]
+"13510" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>2690</SUB>> ]
+"13513" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>2691</SUB>> ]
+"13516" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>2692</SUB>> ]
+"13519" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>2693</SUB>> ]
+"13522" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>2694</SUB>> ]
+"13525" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>2695</SUB>> ]
+"13528" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>2696</SUB>> ]
+"13531" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>2697</SUB>> ]
+"13534" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>2698</SUB>> ]
+"13537" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>2699</SUB>> ]
+"13540" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>2700</SUB>> ]
+"13543" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>2701</SUB>> ]
+"13546" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>2702</SUB>> ]
+"13549" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>2703</SUB>> ]
+"13552" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>2704</SUB>> ]
+"13555" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>2705</SUB>> ]
+"13558" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>2706</SUB>> ]
+"13561" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>2707</SUB>> ]
+"13564" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>2708</SUB>> ]
+"13567" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>2709</SUB>> ]
+"13570" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>2710</SUB>> ]
+"13573" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>2711</SUB>> ]
+"13576" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>2712</SUB>> ]
+"13579" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>2713</SUB>> ]
+"13582" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>2714</SUB>> ]
+"13585" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>2715</SUB>> ]
+"13588" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>2716</SUB>> ]
+"13591" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>2717</SUB>> ]
+"13594" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>2718</SUB>> ]
+"13597" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>2719</SUB>> ]
+"13600" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>2720</SUB>> ]
+"13603" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>2721</SUB>> ]
+"13606" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>2722</SUB>> ]
+"13609" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>2723</SUB>> ]
+"13612" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>2724</SUB>> ]
+"13615" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>2725</SUB>> ]
+"13618" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>2726</SUB>> ]
+"13621" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>2727</SUB>> ]
+"13624" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>2728</SUB>> ]
+"13627" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>2729</SUB>> ]
+"13630" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>2730</SUB>> ]
+"13633" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>2731</SUB>> ]
+"13636" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>2732</SUB>> ]
+"13639" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>2733</SUB>> ]
+"13642" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>2734</SUB>> ]
+"13645" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>2735</SUB>> ]
+"13648" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>2736</SUB>> ]
+"13651" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>2737</SUB>> ]
+"13654" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>2738</SUB>> ]
+"13657" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>2739</SUB>> ]
+"13660" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>2740</SUB>> ]
+"13663" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>2741</SUB>> ]
+"13666" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>2742</SUB>> ]
+"13669" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>2743</SUB>> ]
+"13672" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>2744</SUB>> ]
+"13675" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>2745</SUB>> ]
+"13678" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>2746</SUB>> ]
+"13681" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>2747</SUB>> ]
+"13684" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>2748</SUB>> ]
+"13687" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>2749</SUB>> ]
+"13690" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>2750</SUB>> ]
+"13693" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>2751</SUB>> ]
+"13696" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>2752</SUB>> ]
+"13699" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>2753</SUB>> ]
+"13702" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>2754</SUB>> ]
+"13705" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>2755</SUB>> ]
+"13708" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>2756</SUB>> ]
+"13711" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>2757</SUB>> ]
+"13714" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>2758</SUB>> ]
+"13717" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>2759</SUB>> ]
+"13720" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>2760</SUB>> ]
+"13723" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>2761</SUB>> ]
+"13726" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>2762</SUB>> ]
+"13729" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>2763</SUB>> ]
+"13732" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>2764</SUB>> ]
+"13735" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>2765</SUB>> ]
+"13738" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>2766</SUB>> ]
+"13741" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>2767</SUB>> ]
+"13744" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>2768</SUB>> ]
+"13747" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>2769</SUB>> ]
+"13750" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>2770</SUB>> ]
+"13753" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>2771</SUB>> ]
+"13756" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>2772</SUB>> ]
+"13759" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>2773</SUB>> ]
+"13762" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>2774</SUB>> ]
+"13765" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>2775</SUB>> ]
+"13768" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>2776</SUB>> ]
+"13771" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>2777</SUB>> ]
+"13774" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>2778</SUB>> ]
+"13777" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>2779</SUB>> ]
+"13780" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>2780</SUB>> ]
+"13783" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>2781</SUB>> ]
+"13786" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>2782</SUB>> ]
+"13789" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>2783</SUB>> ]
+"13792" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>2784</SUB>> ]
+"13795" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>2785</SUB>> ]
+"13798" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>2786</SUB>> ]
+"13801" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>2787</SUB>> ]
+"13804" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>2788</SUB>> ]
+"13807" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>2789</SUB>> ]
+"13810" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>2790</SUB>> ]
+"13813" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>2791</SUB>> ]
+"13816" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>2792</SUB>> ]
+"13819" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>2793</SUB>> ]
+"13822" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>2794</SUB>> ]
+"13825" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>2795</SUB>> ]
+"13828" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>2796</SUB>> ]
+"13831" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>2797</SUB>> ]
+"13834" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>2798</SUB>> ]
+"13837" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>2799</SUB>> ]
+"13840" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>2800</SUB>> ]
+"13843" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>2801</SUB>> ]
+"13846" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>2802</SUB>> ]
+"13849" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>2803</SUB>> ]
+"13852" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>2804</SUB>> ]
+"13855" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>2805</SUB>> ]
+"13858" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>2806</SUB>> ]
+"13861" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>2807</SUB>> ]
+"121" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>128</SUB>> ]
+"147" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>143</SUB>> ]
+"154" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>143</SUB>> ]
+"175" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>176</SUB>> ]
+"178" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>176</SUB>> ]
+"182" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>176</SUB>> ]
+"209" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>198</SUB>> ]
+"211" [label = <(Self,soa.Self())<SUB>198</SUB>> ]
+"215" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>198</SUB>> ]
+"235" [label = <(Runtime::Current,Runtime::Current())<SUB>204</SUB>> ]
+"239" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>204</SUB>> ]
+"12933" [label = <(Runtime::Current,Runtime::Current())<SUB>2498</SUB>> ]
+"12937" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2498</SUB>> ]
+"12949" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2500</SUB>> ]
+"13179" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2579</SUB>> ]
+"13182" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2580</SUB>> ]
+"13185" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2581</SUB>> ]
+"13188" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2582</SUB>> ]
+"13191" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2583</SUB>> ]
+"13194" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2584</SUB>> ]
+"13197" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2585</SUB>> ]
+"13200" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2586</SUB>> ]
+"13203" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2587</SUB>> ]
+"13206" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2588</SUB>> ]
+"13209" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2589</SUB>> ]
+"13212" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2590</SUB>> ]
+"13215" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2591</SUB>> ]
+"13218" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2592</SUB>> ]
+"13221" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2593</SUB>> ]
+"13224" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2594</SUB>> ]
+"13227" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2595</SUB>> ]
+"13230" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2596</SUB>> ]
+"13233" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2597</SUB>> ]
+"13236" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2598</SUB>> ]
+"13239" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2599</SUB>> ]
+"13242" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2600</SUB>> ]
+"13245" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2601</SUB>> ]
+"13248" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2602</SUB>> ]
+"13251" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2603</SUB>> ]
+"13254" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2604</SUB>> ]
+"13257" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2605</SUB>> ]
+"13260" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2606</SUB>> ]
+"13263" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2607</SUB>> ]
+"13266" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2608</SUB>> ]
+"13269" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2609</SUB>> ]
+"13272" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2610</SUB>> ]
+"13275" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2611</SUB>> ]
+"13278" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2612</SUB>> ]
+"13281" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2613</SUB>> ]
+"13284" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2614</SUB>> ]
+"13287" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2615</SUB>> ]
+"13290" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2616</SUB>> ]
+"13293" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2617</SUB>> ]
+"13296" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2618</SUB>> ]
+"13299" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2619</SUB>> ]
+"13302" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2620</SUB>> ]
+"13305" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2621</SUB>> ]
+"13308" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2622</SUB>> ]
+"13311" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2623</SUB>> ]
+"13314" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2624</SUB>> ]
+"13317" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2625</SUB>> ]
+"13320" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2626</SUB>> ]
+"13323" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2627</SUB>> ]
+"13326" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2628</SUB>> ]
+"13329" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2629</SUB>> ]
+"13332" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2630</SUB>> ]
+"13335" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2631</SUB>> ]
+"13338" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2632</SUB>> ]
+"13341" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2633</SUB>> ]
+"13344" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2634</SUB>> ]
+"13347" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2635</SUB>> ]
+"13350" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2636</SUB>> ]
+"13353" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2637</SUB>> ]
+"13356" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2638</SUB>> ]
+"13359" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2639</SUB>> ]
+"13362" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2640</SUB>> ]
+"13365" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2641</SUB>> ]
+"13368" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2642</SUB>> ]
+"13371" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2643</SUB>> ]
+"13374" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2644</SUB>> ]
+"13377" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2645</SUB>> ]
+"13380" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2646</SUB>> ]
+"13383" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2647</SUB>> ]
+"13386" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2648</SUB>> ]
+"13389" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2649</SUB>> ]
+"13392" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2650</SUB>> ]
+"13395" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2651</SUB>> ]
+"13398" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2652</SUB>> ]
+"13401" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2653</SUB>> ]
+"13404" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2654</SUB>> ]
+"13407" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2655</SUB>> ]
+"13410" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2656</SUB>> ]
+"13413" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2657</SUB>> ]
+"13416" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2658</SUB>> ]
+"13419" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2659</SUB>> ]
+"13422" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2660</SUB>> ]
+"13425" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2661</SUB>> ]
+"13428" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2662</SUB>> ]
+"13431" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2663</SUB>> ]
+"13434" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2664</SUB>> ]
+"13437" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2665</SUB>> ]
+"13440" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2666</SUB>> ]
+"13443" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2667</SUB>> ]
+"13446" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2668</SUB>> ]
+"13449" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2669</SUB>> ]
+"13452" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2670</SUB>> ]
+"13455" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2671</SUB>> ]
+"13458" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2672</SUB>> ]
+"13461" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2673</SUB>> ]
+"13464" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2674</SUB>> ]
+"13467" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2675</SUB>> ]
+"13470" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2676</SUB>> ]
+"13473" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2677</SUB>> ]
+"13476" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2678</SUB>> ]
+"13479" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2679</SUB>> ]
+"13482" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2680</SUB>> ]
+"13485" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2681</SUB>> ]
+"13488" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2682</SUB>> ]
+"13491" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2683</SUB>> ]
+"13494" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2684</SUB>> ]
+"13497" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2685</SUB>> ]
+"13500" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2686</SUB>> ]
+"13503" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2687</SUB>> ]
+"13506" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2688</SUB>> ]
+"13509" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2689</SUB>> ]
+"13512" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2690</SUB>> ]
+"13515" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2691</SUB>> ]
+"13518" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2692</SUB>> ]
+"13521" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2693</SUB>> ]
+"13524" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2694</SUB>> ]
+"13527" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2695</SUB>> ]
+"13530" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2696</SUB>> ]
+"13533" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2697</SUB>> ]
+"13536" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2698</SUB>> ]
+"13539" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2699</SUB>> ]
+"13542" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2700</SUB>> ]
+"13545" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2701</SUB>> ]
+"13548" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2702</SUB>> ]
+"13551" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2703</SUB>> ]
+"13554" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2704</SUB>> ]
+"13557" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2705</SUB>> ]
+"13560" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2706</SUB>> ]
+"13563" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2707</SUB>> ]
+"13566" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2708</SUB>> ]
+"13569" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2709</SUB>> ]
+"13572" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2710</SUB>> ]
+"13575" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2711</SUB>> ]
+"13578" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2712</SUB>> ]
+"13581" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2713</SUB>> ]
+"13584" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2714</SUB>> ]
+"13587" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2715</SUB>> ]
+"13590" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2716</SUB>> ]
+"13593" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2717</SUB>> ]
+"13596" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>2718</SUB>> ]
+"13599" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>2719</SUB>> ]
+"13602" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>2720</SUB>> ]
+"13605" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>2721</SUB>> ]
+"13608" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>2722</SUB>> ]
+"13611" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>2723</SUB>> ]
+"13614" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>2724</SUB>> ]
+"13617" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>2725</SUB>> ]
+"13620" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>2726</SUB>> ]
+"13623" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>2727</SUB>> ]
+"13626" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>2728</SUB>> ]
+"13629" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>2729</SUB>> ]
+"13632" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>2730</SUB>> ]
+"13635" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>2731</SUB>> ]
+"13638" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>2732</SUB>> ]
+"13641" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>2733</SUB>> ]
+"13644" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>2734</SUB>> ]
+"13647" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>2735</SUB>> ]
+"13650" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>2736</SUB>> ]
+"13653" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>2737</SUB>> ]
+"13656" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>2738</SUB>> ]
+"13659" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>2739</SUB>> ]
+"13662" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>2740</SUB>> ]
+"13665" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>2741</SUB>> ]
+"13668" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>2742</SUB>> ]
+"13671" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>2743</SUB>> ]
+"13674" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>2744</SUB>> ]
+"13677" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>2745</SUB>> ]
+"13680" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>2746</SUB>> ]
+"13683" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>2747</SUB>> ]
+"13686" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>2748</SUB>> ]
+"13689" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>2749</SUB>> ]
+"13692" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>2750</SUB>> ]
+"13695" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>2751</SUB>> ]
+"13698" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>2752</SUB>> ]
+"13701" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>2753</SUB>> ]
+"13704" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>2754</SUB>> ]
+"13707" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>2755</SUB>> ]
+"13710" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>2756</SUB>> ]
+"13713" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>2757</SUB>> ]
+"13716" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>2758</SUB>> ]
+"13719" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>2759</SUB>> ]
+"13722" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>2760</SUB>> ]
+"13725" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>2761</SUB>> ]
+"13728" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>2762</SUB>> ]
+"13731" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>2763</SUB>> ]
+"13734" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>2764</SUB>> ]
+"13737" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>2765</SUB>> ]
+"13740" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>2766</SUB>> ]
+"13743" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>2767</SUB>> ]
+"13746" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>2768</SUB>> ]
+"13749" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>2769</SUB>> ]
+"13752" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>2770</SUB>> ]
+"13755" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>2771</SUB>> ]
+"13758" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>2772</SUB>> ]
+"13761" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>2773</SUB>> ]
+"13764" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>2774</SUB>> ]
+"13767" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>2775</SUB>> ]
+"13770" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>2776</SUB>> ]
+"13773" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>2777</SUB>> ]
+"13776" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>2778</SUB>> ]
+"13779" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>2779</SUB>> ]
+"13782" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>2780</SUB>> ]
+"13785" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>2781</SUB>> ]
+"13788" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>2782</SUB>> ]
+"13791" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>2783</SUB>> ]
+"13794" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>2784</SUB>> ]
+"13797" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>2785</SUB>> ]
+"13800" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>2786</SUB>> ]
+"13803" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>2787</SUB>> ]
+"13806" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>2788</SUB>> ]
+"13809" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>2789</SUB>> ]
+"13812" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>2790</SUB>> ]
+"13815" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>2791</SUB>> ]
+"13818" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2792</SUB>> ]
+"13821" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2793</SUB>> ]
+"13824" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2794</SUB>> ]
+"13827" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>2795</SUB>> ]
+"13830" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>2796</SUB>> ]
+"13833" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>2797</SUB>> ]
+"13836" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>2798</SUB>> ]
+"13839" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>2799</SUB>> ]
+"13842" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>2800</SUB>> ]
+"13845" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>2801</SUB>> ]
+"13848" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>2802</SUB>> ]
+"13851" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>2803</SUB>> ]
+"13854" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>2804</SUB>> ]
+"13857" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>2805</SUB>> ]
+"13860" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>2806</SUB>> ]
+"13863" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>2807</SUB>> ]
+"148" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>143</SUB>> ]
+"177" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>176</SUB>> ]
+"180" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>176</SUB>> ]
+"183" [label = <(Runtime::Current,Runtime::Current())<SUB>176</SUB>> ]
+"187" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>176</SUB>> ]
+"212" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>198</SUB>> ]
+"216" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>198</SUB>> ]
+"236" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>204</SUB>> ]
+"12934" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2498</SUB>> ]
+"12951" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2500</SUB>> ]
+"149" [label = <(Runtime::Current,Runtime::Current())<SUB>143</SUB>> ]
+"153" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>143</SUB>> ]
+"184" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>176</SUB>> ]
+"214" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>198</SUB>> ]
+"217" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>198</SUB>> ]
+"220" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>198</SUB>> ]
+"238" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>204</SUB>> ]
+"12936" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2498</SUB>> ]
+"150" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>143</SUB>> ]
+"186" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>176</SUB>> ]
+"219" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>198</SUB>> ]
+"222" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>198</SUB>> ]
+"152" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>143</SUB>> ]
+"5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"14215" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "99" -> "100" 
+  "100" -> "101" 
+  "101" -> "102" 
+  "102" -> "109" 
+  "109" -> "110" 
+  "110" -> "121" 
+  "117" -> "123" 
+  "123" -> "124" 
+  "124" -> "125" 
+  "125" -> "135" 
+  "135" -> "136" 
+  "136" -> "137" 
+  "137" -> "139" 
+  "139" -> "152" 
+  "143" -> "155" 
+  "155" -> "156" 
+  "156" -> "157" 
+  "157" -> "158" 
+  "158" -> "159" 
+  "159" -> "160" 
+  "160" -> "166" 
+  "166" -> "167" 
+  "167" -> "168" 
+  "168" -> "169" 
+  "169" -> "177" 
+  "171" -> "188" 
+  "188" -> "189" 
+  "189" -> "190" 
+  "190" -> "191" 
+  "191" -> "192" 
+  "192" -> "202" 
+  "202" -> "203" 
+  "203" -> "209" 
+  "205" -> "224" 
+  "224" -> "226" 
+  "226" -> "238" 
+  "231" -> "240" 
+  "240" -> "241" 
+  "241" -> "242" 
+  "242" -> "244" 
+  "244" -> "245" 
+  "245" -> "246" 
+  "246" -> "247" 
+  "247" -> "248" 
+  "248" -> "258" 
+  "258" -> "259" 
+  "259" -> "260" 
+  "260" -> "261" 
+  "261" -> "270" 
+  "270" -> "271" 
+  "271" -> "272" 
+  "272" -> "281" 
+  "281" -> "282" 
+  "282" -> "301" 
+  "301" -> "302" 
+  "302" -> "303" 
+  "303" -> "304" 
+  "304" -> "305" 
+  "305" -> "12692" 
+  "12692" -> "12748" 
+  "12748" -> "12749" 
+  "12749" -> "12750" 
+  "12750" -> "12751" 
+  "12751" -> "12752" 
+  "12752" -> "12753" 
+  "12753" -> "12926" 
+  "12926" -> "12927" 
+  "12927" -> "12936" 
+  "12929" -> "12941" 
+  "12939" -> "12951" 
+  "12945" -> "12953" 
+  "12953" -> "12954" 
+  "12954" -> "12955" 
+  "12955" -> "13168" 
+  "13168" -> "13179" 
+  "13170" -> "13877" 
+  "13875" -> "14165" 
+  "14165" -> "14215" 
+  "9" -> "87" 
+  "87" -> "88" 
+  "88" -> "89" 
+  "89" -> "99" 
+  "118" -> "117" 
+  "145" -> "143" 
+  "173" -> "171" 
+  "206" -> "205" 
+  "233" -> "231" 
+  "12931" -> "12929" 
+  "12941" -> "12939" 
+  "12947" -> "12945" 
+  "13172" -> "13170" 
+  "13877" -> "13875" 
+  "119" -> "118" 
+  "146" -> "145" 
+  "174" -> "186" 
+  "181" -> "173" 
+  "207" -> "214" 
+  "210" -> "206" 
+  "234" -> "233" 
+  "12932" -> "12931" 
+  "12948" -> "12947" 
+  "13177" -> "13182" 
+  "13180" -> "13185" 
+  "13183" -> "13188" 
+  "13186" -> "13191" 
+  "13189" -> "13194" 
+  "13192" -> "13197" 
+  "13195" -> "13200" 
+  "13198" -> "13203" 
+  "13201" -> "13206" 
+  "13204" -> "13209" 
+  "13207" -> "13212" 
+  "13210" -> "13215" 
+  "13213" -> "13218" 
+  "13216" -> "13221" 
+  "13219" -> "13224" 
+  "13222" -> "13227" 
+  "13225" -> "13230" 
+  "13228" -> "13233" 
+  "13231" -> "13236" 
+  "13234" -> "13239" 
+  "13237" -> "13242" 
+  "13240" -> "13245" 
+  "13243" -> "13248" 
+  "13246" -> "13251" 
+  "13249" -> "13254" 
+  "13252" -> "13257" 
+  "13255" -> "13260" 
+  "13258" -> "13263" 
+  "13261" -> "13266" 
+  "13264" -> "13269" 
+  "13267" -> "13272" 
+  "13270" -> "13275" 
+  "13273" -> "13278" 
+  "13276" -> "13281" 
+  "13279" -> "13284" 
+  "13282" -> "13287" 
+  "13285" -> "13290" 
+  "13288" -> "13293" 
+  "13291" -> "13296" 
+  "13294" -> "13299" 
+  "13297" -> "13302" 
+  "13300" -> "13305" 
+  "13303" -> "13308" 
+  "13306" -> "13311" 
+  "13309" -> "13314" 
+  "13312" -> "13317" 
+  "13315" -> "13320" 
+  "13318" -> "13323" 
+  "13321" -> "13326" 
+  "13324" -> "13329" 
+  "13327" -> "13332" 
+  "13330" -> "13335" 
+  "13333" -> "13338" 
+  "13336" -> "13341" 
+  "13339" -> "13344" 
+  "13342" -> "13347" 
+  "13345" -> "13350" 
+  "13348" -> "13353" 
+  "13351" -> "13356" 
+  "13354" -> "13359" 
+  "13357" -> "13362" 
+  "13360" -> "13365" 
+  "13363" -> "13368" 
+  "13366" -> "13371" 
+  "13369" -> "13374" 
+  "13372" -> "13377" 
+  "13375" -> "13380" 
+  "13378" -> "13383" 
+  "13381" -> "13386" 
+  "13384" -> "13389" 
+  "13387" -> "13392" 
+  "13390" -> "13395" 
+  "13393" -> "13398" 
+  "13396" -> "13401" 
+  "13399" -> "13404" 
+  "13402" -> "13407" 
+  "13405" -> "13410" 
+  "13408" -> "13413" 
+  "13411" -> "13416" 
+  "13414" -> "13419" 
+  "13417" -> "13422" 
+  "13420" -> "13425" 
+  "13423" -> "13428" 
+  "13426" -> "13431" 
+  "13429" -> "13434" 
+  "13432" -> "13437" 
+  "13435" -> "13440" 
+  "13438" -> "13443" 
+  "13441" -> "13446" 
+  "13444" -> "13449" 
+  "13447" -> "13452" 
+  "13450" -> "13455" 
+  "13453" -> "13458" 
+  "13456" -> "13461" 
+  "13459" -> "13464" 
+  "13462" -> "13467" 
+  "13465" -> "13470" 
+  "13468" -> "13473" 
+  "13471" -> "13476" 
+  "13474" -> "13479" 
+  "13477" -> "13482" 
+  "13480" -> "13485" 
+  "13483" -> "13488" 
+  "13486" -> "13491" 
+  "13489" -> "13494" 
+  "13492" -> "13497" 
+  "13495" -> "13500" 
+  "13498" -> "13503" 
+  "13501" -> "13506" 
+  "13504" -> "13509" 
+  "13507" -> "13512" 
+  "13510" -> "13515" 
+  "13513" -> "13518" 
+  "13516" -> "13521" 
+  "13519" -> "13524" 
+  "13522" -> "13527" 
+  "13525" -> "13530" 
+  "13528" -> "13533" 
+  "13531" -> "13536" 
+  "13534" -> "13539" 
+  "13537" -> "13542" 
+  "13540" -> "13545" 
+  "13543" -> "13548" 
+  "13546" -> "13551" 
+  "13549" -> "13554" 
+  "13552" -> "13557" 
+  "13555" -> "13560" 
+  "13558" -> "13563" 
+  "13561" -> "13566" 
+  "13564" -> "13569" 
+  "13567" -> "13572" 
+  "13570" -> "13575" 
+  "13573" -> "13578" 
+  "13576" -> "13581" 
+  "13579" -> "13584" 
+  "13582" -> "13587" 
+  "13585" -> "13590" 
+  "13588" -> "13593" 
+  "13591" -> "13596" 
+  "13594" -> "13599" 
+  "13597" -> "13602" 
+  "13600" -> "13605" 
+  "13603" -> "13608" 
+  "13606" -> "13611" 
+  "13609" -> "13614" 
+  "13612" -> "13617" 
+  "13615" -> "13620" 
+  "13618" -> "13623" 
+  "13621" -> "13626" 
+  "13624" -> "13629" 
+  "13627" -> "13632" 
+  "13630" -> "13635" 
+  "13633" -> "13638" 
+  "13636" -> "13641" 
+  "13639" -> "13644" 
+  "13642" -> "13647" 
+  "13645" -> "13650" 
+  "13648" -> "13653" 
+  "13651" -> "13656" 
+  "13654" -> "13659" 
+  "13657" -> "13662" 
+  "13660" -> "13665" 
+  "13663" -> "13668" 
+  "13666" -> "13671" 
+  "13669" -> "13674" 
+  "13672" -> "13677" 
+  "13675" -> "13680" 
+  "13678" -> "13683" 
+  "13681" -> "13686" 
+  "13684" -> "13689" 
+  "13687" -> "13692" 
+  "13690" -> "13695" 
+  "13693" -> "13698" 
+  "13696" -> "13701" 
+  "13699" -> "13704" 
+  "13702" -> "13707" 
+  "13705" -> "13710" 
+  "13708" -> "13713" 
+  "13711" -> "13716" 
+  "13714" -> "13719" 
+  "13717" -> "13722" 
+  "13720" -> "13725" 
+  "13723" -> "13728" 
+  "13726" -> "13731" 
+  "13729" -> "13734" 
+  "13732" -> "13737" 
+  "13735" -> "13740" 
+  "13738" -> "13743" 
+  "13741" -> "13746" 
+  "13744" -> "13749" 
+  "13747" -> "13752" 
+  "13750" -> "13755" 
+  "13753" -> "13758" 
+  "13756" -> "13761" 
+  "13759" -> "13764" 
+  "13762" -> "13767" 
+  "13765" -> "13770" 
+  "13768" -> "13773" 
+  "13771" -> "13776" 
+  "13774" -> "13779" 
+  "13777" -> "13782" 
+  "13780" -> "13785" 
+  "13783" -> "13788" 
+  "13786" -> "13791" 
+  "13789" -> "13794" 
+  "13792" -> "13797" 
+  "13795" -> "13800" 
+  "13798" -> "13803" 
+  "13801" -> "13806" 
+  "13804" -> "13809" 
+  "13807" -> "13812" 
+  "13810" -> "13815" 
+  "13813" -> "13818" 
+  "13816" -> "13821" 
+  "13819" -> "13824" 
+  "13822" -> "13827" 
+  "13825" -> "13830" 
+  "13828" -> "13833" 
+  "13831" -> "13836" 
+  "13834" -> "13839" 
+  "13837" -> "13842" 
+  "13840" -> "13845" 
+  "13843" -> "13848" 
+  "13846" -> "13851" 
+  "13849" -> "13854" 
+  "13852" -> "13857" 
+  "13855" -> "13860" 
+  "13858" -> "13863" 
+  "13861" -> "13172" 
+  "121" -> "119" 
+  "147" -> "154" 
+  "154" -> "146" 
+  "175" -> "180" 
+  "178" -> "174" 
+  "182" -> "181" 
+  "209" -> "207" 
+  "211" -> "219" 
+  "215" -> "210" 
+  "235" -> "239" 
+  "239" -> "234" 
+  "12933" -> "12937" 
+  "12937" -> "12932" 
+  "12949" -> "12948" 
+  "13179" -> "13177" 
+  "13182" -> "13180" 
+  "13185" -> "13183" 
+  "13188" -> "13186" 
+  "13191" -> "13189" 
+  "13194" -> "13192" 
+  "13197" -> "13195" 
+  "13200" -> "13198" 
+  "13203" -> "13201" 
+  "13206" -> "13204" 
+  "13209" -> "13207" 
+  "13212" -> "13210" 
+  "13215" -> "13213" 
+  "13218" -> "13216" 
+  "13221" -> "13219" 
+  "13224" -> "13222" 
+  "13227" -> "13225" 
+  "13230" -> "13228" 
+  "13233" -> "13231" 
+  "13236" -> "13234" 
+  "13239" -> "13237" 
+  "13242" -> "13240" 
+  "13245" -> "13243" 
+  "13248" -> "13246" 
+  "13251" -> "13249" 
+  "13254" -> "13252" 
+  "13257" -> "13255" 
+  "13260" -> "13258" 
+  "13263" -> "13261" 
+  "13266" -> "13264" 
+  "13269" -> "13267" 
+  "13272" -> "13270" 
+  "13275" -> "13273" 
+  "13278" -> "13276" 
+  "13281" -> "13279" 
+  "13284" -> "13282" 
+  "13287" -> "13285" 
+  "13290" -> "13288" 
+  "13293" -> "13291" 
+  "13296" -> "13294" 
+  "13299" -> "13297" 
+  "13302" -> "13300" 
+  "13305" -> "13303" 
+  "13308" -> "13306" 
+  "13311" -> "13309" 
+  "13314" -> "13312" 
+  "13317" -> "13315" 
+  "13320" -> "13318" 
+  "13323" -> "13321" 
+  "13326" -> "13324" 
+  "13329" -> "13327" 
+  "13332" -> "13330" 
+  "13335" -> "13333" 
+  "13338" -> "13336" 
+  "13341" -> "13339" 
+  "13344" -> "13342" 
+  "13347" -> "13345" 
+  "13350" -> "13348" 
+  "13353" -> "13351" 
+  "13356" -> "13354" 
+  "13359" -> "13357" 
+  "13362" -> "13360" 
+  "13365" -> "13363" 
+  "13368" -> "13366" 
+  "13371" -> "13369" 
+  "13374" -> "13372" 
+  "13377" -> "13375" 
+  "13380" -> "13378" 
+  "13383" -> "13381" 
+  "13386" -> "13384" 
+  "13389" -> "13387" 
+  "13392" -> "13390" 
+  "13395" -> "13393" 
+  "13398" -> "13396" 
+  "13401" -> "13399" 
+  "13404" -> "13402" 
+  "13407" -> "13405" 
+  "13410" -> "13408" 
+  "13413" -> "13411" 
+  "13416" -> "13414" 
+  "13419" -> "13417" 
+  "13422" -> "13420" 
+  "13425" -> "13423" 
+  "13428" -> "13426" 
+  "13431" -> "13429" 
+  "13434" -> "13432" 
+  "13437" -> "13435" 
+  "13440" -> "13438" 
+  "13443" -> "13441" 
+  "13446" -> "13444" 
+  "13449" -> "13447" 
+  "13452" -> "13450" 
+  "13455" -> "13453" 
+  "13458" -> "13456" 
+  "13461" -> "13459" 
+  "13464" -> "13462" 
+  "13467" -> "13465" 
+  "13470" -> "13468" 
+  "13473" -> "13471" 
+  "13476" -> "13474" 
+  "13479" -> "13477" 
+  "13482" -> "13480" 
+  "13485" -> "13483" 
+  "13488" -> "13486" 
+  "13491" -> "13489" 
+  "13494" -> "13492" 
+  "13497" -> "13495" 
+  "13500" -> "13498" 
+  "13503" -> "13501" 
+  "13506" -> "13504" 
+  "13509" -> "13507" 
+  "13512" -> "13510" 
+  "13515" -> "13513" 
+  "13518" -> "13516" 
+  "13521" -> "13519" 
+  "13524" -> "13522" 
+  "13527" -> "13525" 
+  "13530" -> "13528" 
+  "13533" -> "13531" 
+  "13536" -> "13534" 
+  "13539" -> "13537" 
+  "13542" -> "13540" 
+  "13545" -> "13543" 
+  "13548" -> "13546" 
+  "13551" -> "13549" 
+  "13554" -> "13552" 
+  "13557" -> "13555" 
+  "13560" -> "13558" 
+  "13563" -> "13561" 
+  "13566" -> "13564" 
+  "13569" -> "13567" 
+  "13572" -> "13570" 
+  "13575" -> "13573" 
+  "13578" -> "13576" 
+  "13581" -> "13579" 
+  "13584" -> "13582" 
+  "13587" -> "13585" 
+  "13590" -> "13588" 
+  "13593" -> "13591" 
+  "13596" -> "13594" 
+  "13599" -> "13597" 
+  "13602" -> "13600" 
+  "13605" -> "13603" 
+  "13608" -> "13606" 
+  "13611" -> "13609" 
+  "13614" -> "13612" 
+  "13617" -> "13615" 
+  "13620" -> "13618" 
+  "13623" -> "13621" 
+  "13626" -> "13624" 
+  "13629" -> "13627" 
+  "13632" -> "13630" 
+  "13635" -> "13633" 
+  "13638" -> "13636" 
+  "13641" -> "13639" 
+  "13644" -> "13642" 
+  "13647" -> "13645" 
+  "13650" -> "13648" 
+  "13653" -> "13651" 
+  "13656" -> "13654" 
+  "13659" -> "13657" 
+  "13662" -> "13660" 
+  "13665" -> "13663" 
+  "13668" -> "13666" 
+  "13671" -> "13669" 
+  "13674" -> "13672" 
+  "13677" -> "13675" 
+  "13680" -> "13678" 
+  "13683" -> "13681" 
+  "13686" -> "13684" 
+  "13689" -> "13687" 
+  "13692" -> "13690" 
+  "13695" -> "13693" 
+  "13698" -> "13696" 
+  "13701" -> "13699" 
+  "13704" -> "13702" 
+  "13707" -> "13705" 
+  "13710" -> "13708" 
+  "13713" -> "13711" 
+  "13716" -> "13714" 
+  "13719" -> "13717" 
+  "13722" -> "13720" 
+  "13725" -> "13723" 
+  "13728" -> "13726" 
+  "13731" -> "13729" 
+  "13734" -> "13732" 
+  "13737" -> "13735" 
+  "13740" -> "13738" 
+  "13743" -> "13741" 
+  "13746" -> "13744" 
+  "13749" -> "13747" 
+  "13752" -> "13750" 
+  "13755" -> "13753" 
+  "13758" -> "13756" 
+  "13761" -> "13759" 
+  "13764" -> "13762" 
+  "13767" -> "13765" 
+  "13770" -> "13768" 
+  "13773" -> "13771" 
+  "13776" -> "13774" 
+  "13779" -> "13777" 
+  "13782" -> "13780" 
+  "13785" -> "13783" 
+  "13788" -> "13786" 
+  "13791" -> "13789" 
+  "13794" -> "13792" 
+  "13797" -> "13795" 
+  "13800" -> "13798" 
+  "13803" -> "13801" 
+  "13806" -> "13804" 
+  "13809" -> "13807" 
+  "13812" -> "13810" 
+  "13815" -> "13813" 
+  "13818" -> "13816" 
+  "13821" -> "13819" 
+  "13824" -> "13822" 
+  "13827" -> "13825" 
+  "13830" -> "13828" 
+  "13833" -> "13831" 
+  "13836" -> "13834" 
+  "13839" -> "13837" 
+  "13842" -> "13840" 
+  "13845" -> "13843" 
+  "13848" -> "13846" 
+  "13851" -> "13849" 
+  "13854" -> "13852" 
+  "13857" -> "13855" 
+  "13860" -> "13858" 
+  "13863" -> "13861" 
+  "148" -> "147" 
+  "177" -> "175" 
+  "180" -> "178" 
+  "183" -> "187" 
+  "187" -> "182" 
+  "212" -> "211" 
+  "216" -> "215" 
+  "236" -> "235" 
+  "12934" -> "12933" 
+  "12951" -> "12949" 
+  "149" -> "153" 
+  "153" -> "148" 
+  "184" -> "183" 
+  "214" -> "212" 
+  "217" -> "222" 
+  "220" -> "216" 
+  "238" -> "236" 
+  "12936" -> "12934" 
+  "150" -> "149" 
+  "186" -> "184" 
+  "219" -> "217" 
+  "222" -> "220" 
+  "152" -> "150" 
+  "5" -> "9" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/1-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/1-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/1-cfg.dot	2023-06-07 19:35:14.437385880 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/1-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,63 @@
-digraph "anonymous_lambda_4" {  
-"8" [label = <(METHOD,anonymous_lambda_4)<SUB>1785</SUB>> ]
-"12" [label = <(METHOD_RETURN,ANY)<SUB>1785</SUB>> ]
-  "8" -> "12" 
+digraph "NormalizeJniClassDescriptor" {  
+"74" [label = <(RETURN,return result;,return result;)<SUB>88</SUB>> ]
+"17" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>75</SUB>> ]
+"38" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>83</SUB>> ]
+"18" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>75</SUB>> ]
+"23" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>76</SUB>> ]
+"39" [label = <(find,result.find('.'))<SUB>83</SUB>> ]
+"44" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>83</SUB>> ]
+"50" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>84</SUB>> ]
+"60" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>86</SUB>> ]
+"28" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>78</SUB>> ]
+"31" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>79</SUB>> ]
+"34" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>80</SUB>> ]
+"40" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>83</SUB>> ]
+"45" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>83</SUB>> ]
+"48" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>83</SUB>> ]
+"51" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>84</SUB>> ]
+"61" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>86</SUB>> ]
+"64" [label = <(begin,result.begin())<SUB>86</SUB>> ]
+"68" [label = <(end,result.end())<SUB>86</SUB>> ]
+"42" [label = <(FIELD_IDENTIFIER,find,find)<SUB>83</SUB>> ]
+"52" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>84</SUB>> ]
+"63" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>86</SUB>> ]
+"65" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>86</SUB>> ]
+"69" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>86</SUB>> ]
+"53" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>84</SUB>> ]
+"67" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>86</SUB>> ]
+"71" [label = <(FIELD_IDENTIFIER,end,end)<SUB>86</SUB>> ]
+"54" [label = <(LOG,LOG(WARNING))<SUB>84</SUB>> ]
+"12" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>72</SUB>> ]
+"76" [label = <(METHOD_RETURN,string)<SUB>72</SUB>> ]
+  "74" -> "76" 
+  "17" -> "23" 
+  "17" -> "28" 
+  "38" -> "54" 
+  "38" -> "74" 
+  "18" -> "17" 
+  "23" -> "42" 
+  "39" -> "45" 
+  "44" -> "38" 
+  "50" -> "63" 
+  "60" -> "74" 
+  "28" -> "31" 
+  "31" -> "34" 
+  "34" -> "42" 
+  "40" -> "39" 
+  "45" -> "48" 
+  "48" -> "44" 
+  "51" -> "50" 
+  "61" -> "67" 
+  "64" -> "71" 
+  "68" -> "60" 
+  "42" -> "40" 
+  "52" -> "51" 
+  "63" -> "61" 
+  "65" -> "64" 
+  "69" -> "68" 
+  "53" -> "52" 
+  "67" -> "65" 
+  "71" -> "69" 
+  "54" -> "53" 
+  "12" -> "18" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/10-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/10-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/10-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/10-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "FindMethodID" {  
-"321" [label = <(METHOD,FindMethodID)<SUB>216</SUB>> ]
-"328" [label = <(METHOD_RETURN,jmethodID)<SUB>216</SUB>> ]
-  "321" -> "328" 
+digraph "ThrowSIOOBE" {  
+"262" [label = <(METHOD,ThrowSIOOBE)<SUB>250</SUB>> ]
+"268" [label = <(METHOD_RETURN,void)<SUB>250</SUB>> ]
+  "262" -> "268" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/100-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/100-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/100-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/100-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualLongMethod" {  
-"5381" [label = <(va_start,va_start(ap, mid))<SUB>1194</SUB>> ]
-"5384" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1195</SUB>> ]
-"5402" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1196</SUB>> ]
-"5421" [label = <(soa,soa(env))<SUB>1197</SUB>> ]
-"5424" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1198</SUB>> ]
-"5430" [label = <(va_end,va_end(ap))<SUB>1199</SUB>> ]
-"5432" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1200</SUB>> ]
-"5425" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1198</SUB>> ]
-"5433" [label = <(GetJ,result.GetJ())<SUB>1200</SUB>> ]
-"5434" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1200</SUB>> ]
-"5388" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1195</SUB>> ]
-"5406" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1196</SUB>> ]
-"5436" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1200</SUB>> ]
-"5389" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1195</SUB>> ]
-"5393" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1195</SUB>> ]
-"5400" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1195</SUB>> ]
-"5407" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1196</SUB>> ]
-"5411" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1196</SUB>> ]
-"5418" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1196</SUB>> ]
-"5394" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1195</SUB>> ]
-"5412" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1196</SUB>> ]
-"5395" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1195</SUB>> ]
-"5397" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1195</SUB>> ]
-"5413" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1196</SUB>> ]
-"5415" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1196</SUB>> ]
-"5374" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1192</SUB>> ]
-"5437" [label = <(METHOD_RETURN,jlong)<SUB>1192</SUB>> ]
-  "5381" -> "5384" 
-  "5384" -> "5389" 
-  "5384" -> "5402" 
-  "5402" -> "5407" 
-  "5402" -> "5421" 
-  "5421" -> "5425" 
-  "5424" -> "5430" 
-  "5430" -> "5436" 
-  "5432" -> "5437" 
-  "5425" -> "5424" 
-  "5433" -> "5432" 
-  "5434" -> "5433" 
-  "5388" -> "5395" 
-  "5388" -> "5402" 
-  "5406" -> "5413" 
-  "5406" -> "5421" 
-  "5436" -> "5434" 
-  "5389" -> "5388" 
-  "5393" -> "5400" 
-  "5400" -> "5437" 
-  "5407" -> "5406" 
-  "5411" -> "5418" 
-  "5418" -> "5437" 
-  "5394" -> "5393" 
-  "5412" -> "5411" 
-  "5395" -> "5397" 
-  "5397" -> "5394" 
-  "5413" -> "5415" 
-  "5415" -> "5412" 
-  "5374" -> "5381" 
+digraph "CallNonvirtualFloatMethodV" {  
+"5431" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
+"5449" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
+"5468" [label = <(soa,soa(env))<SUB>1153</SUB>> ]
+"5470" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1154</SUB>> ]
+"5471" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1154</SUB>> ]
+"5472" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1154</SUB>> ]
+"5435" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1151</SUB>> ]
+"5453" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1152</SUB>> ]
+"5473" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1154</SUB>> ]
+"5478" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1154</SUB>> ]
+"5436" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1151</SUB>> ]
+"5440" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1151</SUB>> ]
+"5447" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
+"5454" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1152</SUB>> ]
+"5458" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1152</SUB>> ]
+"5465" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
+"5441" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1151</SUB>> ]
+"5459" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1152</SUB>> ]
+"5442" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1151</SUB>> ]
+"5444" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1151</SUB>> ]
+"5460" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1152</SUB>> ]
+"5462" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1152</SUB>> ]
+"5424" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1149</SUB>> ]
+"5479" [label = <(METHOD_RETURN,jfloat)<SUB>1149</SUB>> ]
+  "5431" -> "5436" 
+  "5431" -> "5449" 
+  "5449" -> "5454" 
+  "5449" -> "5468" 
+  "5468" -> "5473" 
+  "5470" -> "5479" 
+  "5471" -> "5470" 
+  "5472" -> "5471" 
+  "5435" -> "5442" 
+  "5435" -> "5449" 
+  "5453" -> "5460" 
+  "5453" -> "5468" 
+  "5473" -> "5478" 
+  "5478" -> "5472" 
+  "5436" -> "5435" 
+  "5440" -> "5447" 
+  "5447" -> "5479" 
+  "5454" -> "5453" 
+  "5458" -> "5465" 
+  "5465" -> "5479" 
+  "5441" -> "5440" 
+  "5459" -> "5458" 
+  "5442" -> "5444" 
+  "5444" -> "5441" 
+  "5460" -> "5462" 
+  "5462" -> "5459" 
+  "5424" -> "5431" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/101-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/101-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/101-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/101-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualLongMethodV" {  
-"5446" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1205</SUB>> ]
-"5464" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1206</SUB>> ]
-"5483" [label = <(soa,soa(env))<SUB>1207</SUB>> ]
-"5485" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1208</SUB>> ]
-"5486" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1208</SUB>> ]
-"5487" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1208</SUB>> ]
-"5450" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1205</SUB>> ]
-"5468" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1206</SUB>> ]
-"5488" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1208</SUB>> ]
-"5493" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1208</SUB>> ]
-"5451" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1205</SUB>> ]
-"5455" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1205</SUB>> ]
-"5462" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1205</SUB>> ]
-"5469" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1206</SUB>> ]
-"5473" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1206</SUB>> ]
-"5480" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1206</SUB>> ]
-"5456" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1205</SUB>> ]
-"5474" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1206</SUB>> ]
-"5457" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1205</SUB>> ]
-"5459" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1205</SUB>> ]
-"5475" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1206</SUB>> ]
-"5477" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1206</SUB>> ]
-"5439" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1203</SUB>> ]
-"5494" [label = <(METHOD_RETURN,jlong)<SUB>1203</SUB>> ]
-  "5446" -> "5451" 
-  "5446" -> "5464" 
-  "5464" -> "5469" 
-  "5464" -> "5483" 
-  "5483" -> "5488" 
-  "5485" -> "5494" 
-  "5486" -> "5485" 
-  "5487" -> "5486" 
-  "5450" -> "5457" 
-  "5450" -> "5464" 
-  "5468" -> "5475" 
-  "5468" -> "5483" 
+digraph "CallNonvirtualFloatMethodA" {  
+"5488" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
+"5506" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
+"5525" [label = <(soa,soa(env))<SUB>1161</SUB>> ]
+"5527" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1162</SUB>> ]
+"5528" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1162</SUB>> ]
+"5529" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1162</SUB>> ]
+"5492" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1159</SUB>> ]
+"5510" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1160</SUB>> ]
+"5530" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1162</SUB>> ]
+"5535" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1162</SUB>> ]
+"5493" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1159</SUB>> ]
+"5497" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1159</SUB>> ]
+"5504" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
+"5511" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1160</SUB>> ]
+"5515" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1160</SUB>> ]
+"5522" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
+"5498" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1159</SUB>> ]
+"5516" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1160</SUB>> ]
+"5499" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1159</SUB>> ]
+"5501" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1159</SUB>> ]
+"5517" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1160</SUB>> ]
+"5519" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1160</SUB>> ]
+"5481" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1157</SUB>> ]
+"5536" [label = <(METHOD_RETURN,jfloat)<SUB>1157</SUB>> ]
   "5488" -> "5493" 
-  "5493" -> "5487" 
-  "5451" -> "5450" 
-  "5455" -> "5462" 
-  "5462" -> "5494" 
-  "5469" -> "5468" 
-  "5473" -> "5480" 
-  "5480" -> "5494" 
-  "5456" -> "5455" 
-  "5474" -> "5473" 
-  "5457" -> "5459" 
-  "5459" -> "5456" 
-  "5475" -> "5477" 
-  "5477" -> "5474" 
-  "5439" -> "5446" 
+  "5488" -> "5506" 
+  "5506" -> "5511" 
+  "5506" -> "5525" 
+  "5525" -> "5530" 
+  "5527" -> "5536" 
+  "5528" -> "5527" 
+  "5529" -> "5528" 
+  "5492" -> "5499" 
+  "5492" -> "5506" 
+  "5510" -> "5517" 
+  "5510" -> "5525" 
+  "5530" -> "5535" 
+  "5535" -> "5529" 
+  "5493" -> "5492" 
+  "5497" -> "5504" 
+  "5504" -> "5536" 
+  "5511" -> "5510" 
+  "5515" -> "5522" 
+  "5522" -> "5536" 
+  "5498" -> "5497" 
+  "5516" -> "5515" 
+  "5499" -> "5501" 
+  "5501" -> "5498" 
+  "5517" -> "5519" 
+  "5519" -> "5516" 
+  "5481" -> "5488" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/102-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/102-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/102-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/102-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualLongMethodA" {  
-"5503" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1213</SUB>> ]
-"5521" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1214</SUB>> ]
-"5540" [label = <(soa,soa(env))<SUB>1215</SUB>> ]
-"5542" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1216</SUB>> ]
-"5543" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1216</SUB>> ]
-"5544" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1216</SUB>> ]
-"5507" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1213</SUB>> ]
-"5525" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1214</SUB>> ]
-"5545" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1216</SUB>> ]
-"5550" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1216</SUB>> ]
-"5508" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1213</SUB>> ]
-"5512" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1213</SUB>> ]
-"5519" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1213</SUB>> ]
-"5526" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1214</SUB>> ]
-"5530" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1214</SUB>> ]
-"5537" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1214</SUB>> ]
-"5513" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1213</SUB>> ]
-"5531" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1214</SUB>> ]
-"5514" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1213</SUB>> ]
-"5516" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1213</SUB>> ]
-"5532" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1214</SUB>> ]
-"5534" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1214</SUB>> ]
-"5496" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1211</SUB>> ]
-"5551" [label = <(METHOD_RETURN,jlong)<SUB>1211</SUB>> ]
-  "5503" -> "5508" 
-  "5503" -> "5521" 
-  "5521" -> "5526" 
-  "5521" -> "5540" 
-  "5540" -> "5545" 
-  "5542" -> "5551" 
-  "5543" -> "5542" 
-  "5544" -> "5543" 
-  "5507" -> "5514" 
-  "5507" -> "5521" 
-  "5525" -> "5532" 
-  "5525" -> "5540" 
-  "5545" -> "5550" 
-  "5550" -> "5544" 
-  "5508" -> "5507" 
-  "5512" -> "5519" 
-  "5519" -> "5551" 
-  "5526" -> "5525" 
-  "5530" -> "5537" 
-  "5537" -> "5551" 
-  "5513" -> "5512" 
-  "5531" -> "5530" 
-  "5514" -> "5516" 
-  "5516" -> "5513" 
-  "5532" -> "5534" 
-  "5534" -> "5531" 
-  "5496" -> "5503" 
+digraph "CallNonvirtualDoubleMethod" {  
+"5545" [label = <(va_start,va_start(ap, mid))<SUB>1167</SUB>> ]
+"5548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
+"5566" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
+"5585" [label = <(soa,soa(env))<SUB>1170</SUB>> ]
+"5588" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1171</SUB>> ]
+"5594" [label = <(va_end,va_end(ap))<SUB>1172</SUB>> ]
+"5596" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1173</SUB>> ]
+"5589" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1171</SUB>> ]
+"5597" [label = <(GetD,result.GetD())<SUB>1173</SUB>> ]
+"5598" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1173</SUB>> ]
+"5552" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1168</SUB>> ]
+"5570" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1169</SUB>> ]
+"5600" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1173</SUB>> ]
+"5553" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1168</SUB>> ]
+"5557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1168</SUB>> ]
+"5564" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
+"5571" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1169</SUB>> ]
+"5575" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1169</SUB>> ]
+"5582" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
+"5558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1168</SUB>> ]
+"5576" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1169</SUB>> ]
+"5559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1168</SUB>> ]
+"5561" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1168</SUB>> ]
+"5577" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1169</SUB>> ]
+"5579" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1169</SUB>> ]
+"5538" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1165</SUB>> ]
+"5601" [label = <(METHOD_RETURN,jdouble)<SUB>1165</SUB>> ]
+  "5545" -> "5548" 
+  "5548" -> "5553" 
+  "5548" -> "5566" 
+  "5566" -> "5571" 
+  "5566" -> "5585" 
+  "5585" -> "5589" 
+  "5588" -> "5594" 
+  "5594" -> "5600" 
+  "5596" -> "5601" 
+  "5589" -> "5588" 
+  "5597" -> "5596" 
+  "5598" -> "5597" 
+  "5552" -> "5559" 
+  "5552" -> "5566" 
+  "5570" -> "5577" 
+  "5570" -> "5585" 
+  "5600" -> "5598" 
+  "5553" -> "5552" 
+  "5557" -> "5564" 
+  "5564" -> "5601" 
+  "5571" -> "5570" 
+  "5575" -> "5582" 
+  "5582" -> "5601" 
+  "5558" -> "5557" 
+  "5576" -> "5575" 
+  "5559" -> "5561" 
+  "5561" -> "5558" 
+  "5577" -> "5579" 
+  "5579" -> "5576" 
+  "5538" -> "5545" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/103-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/103-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/103-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/103-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualFloatMethod" {  
-"5560" [label = <(va_start,va_start(ap, mid))<SUB>1221</SUB>> ]
-"5563" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1222</SUB>> ]
-"5581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1223</SUB>> ]
-"5600" [label = <(soa,soa(env))<SUB>1224</SUB>> ]
-"5603" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1225</SUB>> ]
-"5609" [label = <(va_end,va_end(ap))<SUB>1226</SUB>> ]
-"5611" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1227</SUB>> ]
-"5604" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1225</SUB>> ]
-"5612" [label = <(GetF,result.GetF())<SUB>1227</SUB>> ]
-"5613" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1227</SUB>> ]
-"5567" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1222</SUB>> ]
-"5585" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1223</SUB>> ]
-"5615" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1227</SUB>> ]
-"5568" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1222</SUB>> ]
-"5572" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1222</SUB>> ]
-"5579" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1222</SUB>> ]
-"5586" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1223</SUB>> ]
-"5590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1223</SUB>> ]
-"5597" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1223</SUB>> ]
-"5573" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1222</SUB>> ]
-"5591" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1223</SUB>> ]
-"5574" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1222</SUB>> ]
-"5576" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1222</SUB>> ]
-"5592" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1223</SUB>> ]
-"5594" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1223</SUB>> ]
-"5553" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1219</SUB>> ]
-"5616" [label = <(METHOD_RETURN,jfloat)<SUB>1219</SUB>> ]
-  "5560" -> "5563" 
-  "5563" -> "5568" 
-  "5563" -> "5581" 
-  "5581" -> "5586" 
-  "5581" -> "5600" 
-  "5600" -> "5604" 
-  "5603" -> "5609" 
-  "5609" -> "5615" 
-  "5611" -> "5616" 
-  "5604" -> "5603" 
-  "5612" -> "5611" 
-  "5613" -> "5612" 
-  "5567" -> "5574" 
-  "5567" -> "5581" 
-  "5585" -> "5592" 
-  "5585" -> "5600" 
-  "5615" -> "5613" 
-  "5568" -> "5567" 
-  "5572" -> "5579" 
-  "5579" -> "5616" 
-  "5586" -> "5585" 
-  "5590" -> "5597" 
-  "5597" -> "5616" 
-  "5573" -> "5572" 
-  "5591" -> "5590" 
-  "5574" -> "5576" 
-  "5576" -> "5573" 
-  "5592" -> "5594" 
-  "5594" -> "5591" 
-  "5553" -> "5560" 
+digraph "CallNonvirtualDoubleMethodV" {  
+"5610" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"5628" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"5647" [label = <(soa,soa(env))<SUB>1180</SUB>> ]
+"5649" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1181</SUB>> ]
+"5650" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1181</SUB>> ]
+"5651" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1181</SUB>> ]
+"5614" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1178</SUB>> ]
+"5632" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1179</SUB>> ]
+"5652" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1181</SUB>> ]
+"5657" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1181</SUB>> ]
+"5615" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1178</SUB>> ]
+"5619" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1178</SUB>> ]
+"5626" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"5633" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1179</SUB>> ]
+"5637" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1179</SUB>> ]
+"5644" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"5620" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1178</SUB>> ]
+"5638" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1179</SUB>> ]
+"5621" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1178</SUB>> ]
+"5623" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1178</SUB>> ]
+"5639" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1179</SUB>> ]
+"5641" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1179</SUB>> ]
+"5603" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1176</SUB>> ]
+"5658" [label = <(METHOD_RETURN,jdouble)<SUB>1176</SUB>> ]
+  "5610" -> "5615" 
+  "5610" -> "5628" 
+  "5628" -> "5633" 
+  "5628" -> "5647" 
+  "5647" -> "5652" 
+  "5649" -> "5658" 
+  "5650" -> "5649" 
+  "5651" -> "5650" 
+  "5614" -> "5621" 
+  "5614" -> "5628" 
+  "5632" -> "5639" 
+  "5632" -> "5647" 
+  "5652" -> "5657" 
+  "5657" -> "5651" 
+  "5615" -> "5614" 
+  "5619" -> "5626" 
+  "5626" -> "5658" 
+  "5633" -> "5632" 
+  "5637" -> "5644" 
+  "5644" -> "5658" 
+  "5620" -> "5619" 
+  "5638" -> "5637" 
+  "5621" -> "5623" 
+  "5623" -> "5620" 
+  "5639" -> "5641" 
+  "5641" -> "5638" 
+  "5603" -> "5610" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/104-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/104-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/104-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/104-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualFloatMethodV" {  
-"5625" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1232</SUB>> ]
-"5643" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1233</SUB>> ]
-"5662" [label = <(soa,soa(env))<SUB>1234</SUB>> ]
-"5664" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1235</SUB>> ]
-"5665" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1235</SUB>> ]
-"5666" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1235</SUB>> ]
-"5629" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1232</SUB>> ]
-"5647" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1233</SUB>> ]
-"5667" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1235</SUB>> ]
-"5672" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1235</SUB>> ]
-"5630" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1232</SUB>> ]
-"5634" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1232</SUB>> ]
-"5641" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1232</SUB>> ]
-"5648" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1233</SUB>> ]
-"5652" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1233</SUB>> ]
-"5659" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1233</SUB>> ]
-"5635" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1232</SUB>> ]
-"5653" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1233</SUB>> ]
-"5636" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1232</SUB>> ]
-"5638" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1232</SUB>> ]
-"5654" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1233</SUB>> ]
-"5656" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1233</SUB>> ]
-"5618" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1230</SUB>> ]
-"5673" [label = <(METHOD_RETURN,jfloat)<SUB>1230</SUB>> ]
-  "5625" -> "5630" 
-  "5625" -> "5643" 
-  "5643" -> "5648" 
-  "5643" -> "5662" 
-  "5662" -> "5667" 
-  "5664" -> "5673" 
-  "5665" -> "5664" 
-  "5666" -> "5665" 
-  "5629" -> "5636" 
-  "5629" -> "5643" 
-  "5647" -> "5654" 
-  "5647" -> "5662" 
+digraph "CallNonvirtualDoubleMethodA" {  
+"5667" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"5685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"5704" [label = <(soa,soa(env))<SUB>1188</SUB>> ]
+"5706" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1189</SUB>> ]
+"5707" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1189</SUB>> ]
+"5708" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1189</SUB>> ]
+"5671" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1186</SUB>> ]
+"5689" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1187</SUB>> ]
+"5709" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1189</SUB>> ]
+"5714" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1189</SUB>> ]
+"5672" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1186</SUB>> ]
+"5676" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1186</SUB>> ]
+"5683" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"5690" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1187</SUB>> ]
+"5694" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1187</SUB>> ]
+"5701" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"5677" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1186</SUB>> ]
+"5695" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1187</SUB>> ]
+"5678" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1186</SUB>> ]
+"5680" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1186</SUB>> ]
+"5696" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1187</SUB>> ]
+"5698" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1187</SUB>> ]
+"5660" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1184</SUB>> ]
+"5715" [label = <(METHOD_RETURN,jdouble)<SUB>1184</SUB>> ]
   "5667" -> "5672" 
-  "5672" -> "5666" 
-  "5630" -> "5629" 
-  "5634" -> "5641" 
-  "5641" -> "5673" 
-  "5648" -> "5647" 
-  "5652" -> "5659" 
-  "5659" -> "5673" 
-  "5635" -> "5634" 
-  "5653" -> "5652" 
-  "5636" -> "5638" 
-  "5638" -> "5635" 
-  "5654" -> "5656" 
-  "5656" -> "5653" 
-  "5618" -> "5625" 
+  "5667" -> "5685" 
+  "5685" -> "5690" 
+  "5685" -> "5704" 
+  "5704" -> "5709" 
+  "5706" -> "5715" 
+  "5707" -> "5706" 
+  "5708" -> "5707" 
+  "5671" -> "5678" 
+  "5671" -> "5685" 
+  "5689" -> "5696" 
+  "5689" -> "5704" 
+  "5709" -> "5714" 
+  "5714" -> "5708" 
+  "5672" -> "5671" 
+  "5676" -> "5683" 
+  "5683" -> "5715" 
+  "5690" -> "5689" 
+  "5694" -> "5701" 
+  "5701" -> "5715" 
+  "5677" -> "5676" 
+  "5695" -> "5694" 
+  "5678" -> "5680" 
+  "5680" -> "5677" 
+  "5696" -> "5698" 
+  "5698" -> "5695" 
+  "5660" -> "5667" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/105-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/105-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/105-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/105-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,49 @@
-digraph "CallNonvirtualFloatMethodA" {  
-"5682" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1240</SUB>> ]
-"5700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1241</SUB>> ]
-"5719" [label = <(soa,soa(env))<SUB>1242</SUB>> ]
-"5721" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1243</SUB>> ]
-"5722" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1243</SUB>> ]
-"5723" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1243</SUB>> ]
-"5686" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1240</SUB>> ]
-"5704" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1241</SUB>> ]
-"5724" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1243</SUB>> ]
-"5729" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1243</SUB>> ]
-"5687" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1240</SUB>> ]
-"5691" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1240</SUB>> ]
-"5698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1240</SUB>> ]
-"5705" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1241</SUB>> ]
-"5709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1241</SUB>> ]
-"5716" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1241</SUB>> ]
-"5692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1240</SUB>> ]
-"5710" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1241</SUB>> ]
-"5693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1240</SUB>> ]
-"5695" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1240</SUB>> ]
-"5711" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1241</SUB>> ]
-"5713" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1241</SUB>> ]
-"5675" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1238</SUB>> ]
-"5730" [label = <(METHOD_RETURN,jfloat)<SUB>1238</SUB>> ]
-  "5682" -> "5687" 
-  "5682" -> "5700" 
-  "5700" -> "5705" 
-  "5700" -> "5719" 
-  "5719" -> "5724" 
-  "5721" -> "5730" 
-  "5722" -> "5721" 
-  "5723" -> "5722" 
-  "5686" -> "5693" 
-  "5686" -> "5700" 
-  "5704" -> "5711" 
-  "5704" -> "5719" 
-  "5724" -> "5729" 
-  "5729" -> "5723" 
-  "5687" -> "5686" 
-  "5691" -> "5698" 
-  "5698" -> "5730" 
-  "5705" -> "5704" 
-  "5709" -> "5716" 
-  "5716" -> "5730" 
-  "5692" -> "5691" 
-  "5710" -> "5709" 
-  "5693" -> "5695" 
-  "5695" -> "5692" 
-  "5711" -> "5713" 
-  "5713" -> "5710" 
-  "5675" -> "5682" 
+digraph "CallNonvirtualVoidMethod" {  
+"5724" [label = <(va_start,va_start(ap, mid))<SUB>1194</SUB>> ]
+"5727" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1195</SUB>> ]
+"5744" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1196</SUB>> ]
+"5762" [label = <(soa,soa(env))<SUB>1197</SUB>> ]
+"5764" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1198</SUB>> ]
+"5769" [label = <(va_end,va_end(ap))<SUB>1199</SUB>> ]
+"5731" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1195</SUB>> ]
+"5748" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1196</SUB>> ]
+"5732" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1195</SUB>> ]
+"5736" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1195</SUB>> ]
+"5743" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1195</SUB>> ]
+"5749" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1196</SUB>> ]
+"5753" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1196</SUB>> ]
+"5760" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1196</SUB>> ]
+"5737" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1195</SUB>> ]
+"5754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1196</SUB>> ]
+"5738" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1195</SUB>> ]
+"5740" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1195</SUB>> ]
+"5755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1196</SUB>> ]
+"5757" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1196</SUB>> ]
+"5717" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1192</SUB>> ]
+"5771" [label = <(METHOD_RETURN,void)<SUB>1192</SUB>> ]
+  "5724" -> "5727" 
+  "5727" -> "5732" 
+  "5727" -> "5744" 
+  "5744" -> "5749" 
+  "5744" -> "5762" 
+  "5762" -> "5764" 
+  "5764" -> "5769" 
+  "5769" -> "5771" 
+  "5731" -> "5738" 
+  "5731" -> "5744" 
+  "5748" -> "5755" 
+  "5748" -> "5762" 
+  "5732" -> "5731" 
+  "5736" -> "5743" 
+  "5743" -> "5771" 
+  "5749" -> "5748" 
+  "5753" -> "5760" 
+  "5760" -> "5771" 
+  "5737" -> "5736" 
+  "5754" -> "5753" 
+  "5738" -> "5740" 
+  "5740" -> "5737" 
+  "5755" -> "5757" 
+  "5757" -> "5754" 
+  "5717" -> "5724" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/106-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/106-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/106-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/106-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,59 +1,45 @@
-digraph "CallNonvirtualDoubleMethod" {  
-"5739" [label = <(va_start,va_start(ap, mid))<SUB>1248</SUB>> ]
-"5742" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1249</SUB>> ]
-"5760" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1250</SUB>> ]
-"5779" [label = <(soa,soa(env))<SUB>1251</SUB>> ]
-"5782" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1252</SUB>> ]
-"5788" [label = <(va_end,va_end(ap))<SUB>1253</SUB>> ]
-"5790" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1254</SUB>> ]
-"5783" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1252</SUB>> ]
-"5791" [label = <(GetD,result.GetD())<SUB>1254</SUB>> ]
-"5792" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1254</SUB>> ]
-"5746" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1249</SUB>> ]
-"5764" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1250</SUB>> ]
-"5794" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1254</SUB>> ]
-"5747" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1249</SUB>> ]
-"5751" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1249</SUB>> ]
-"5758" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1249</SUB>> ]
-"5765" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1250</SUB>> ]
-"5769" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1250</SUB>> ]
-"5776" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1250</SUB>> ]
-"5752" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1249</SUB>> ]
-"5770" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1250</SUB>> ]
-"5753" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1249</SUB>> ]
-"5755" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1249</SUB>> ]
-"5771" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1250</SUB>> ]
-"5773" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1250</SUB>> ]
-"5732" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1246</SUB>> ]
-"5795" [label = <(METHOD_RETURN,jdouble)<SUB>1246</SUB>> ]
-  "5739" -> "5742" 
-  "5742" -> "5747" 
-  "5742" -> "5760" 
-  "5760" -> "5765" 
-  "5760" -> "5779" 
-  "5779" -> "5783" 
-  "5782" -> "5788" 
-  "5788" -> "5794" 
-  "5790" -> "5795" 
-  "5783" -> "5782" 
-  "5791" -> "5790" 
-  "5792" -> "5791" 
-  "5746" -> "5753" 
-  "5746" -> "5760" 
-  "5764" -> "5771" 
-  "5764" -> "5779" 
-  "5794" -> "5792" 
-  "5747" -> "5746" 
-  "5751" -> "5758" 
-  "5758" -> "5795" 
-  "5765" -> "5764" 
-  "5769" -> "5776" 
-  "5776" -> "5795" 
-  "5752" -> "5751" 
-  "5770" -> "5769" 
-  "5753" -> "5755" 
-  "5755" -> "5752" 
-  "5771" -> "5773" 
-  "5773" -> "5770" 
-  "5732" -> "5739" 
+digraph "CallNonvirtualVoidMethodV" {  
+"5780" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1204</SUB>> ]
+"5797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1205</SUB>> ]
+"5815" [label = <(soa,soa(env))<SUB>1206</SUB>> ]
+"5817" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1207</SUB>> ]
+"5784" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1204</SUB>> ]
+"5801" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1205</SUB>> ]
+"5785" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1204</SUB>> ]
+"5789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1204</SUB>> ]
+"5796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1204</SUB>> ]
+"5802" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1205</SUB>> ]
+"5806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1205</SUB>> ]
+"5813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1205</SUB>> ]
+"5790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1204</SUB>> ]
+"5807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1205</SUB>> ]
+"5791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1204</SUB>> ]
+"5793" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1204</SUB>> ]
+"5808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1205</SUB>> ]
+"5810" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1205</SUB>> ]
+"5773" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1202</SUB>> ]
+"5822" [label = <(METHOD_RETURN,void)<SUB>1202</SUB>> ]
+  "5780" -> "5785" 
+  "5780" -> "5797" 
+  "5797" -> "5802" 
+  "5797" -> "5815" 
+  "5815" -> "5817" 
+  "5817" -> "5822" 
+  "5784" -> "5791" 
+  "5784" -> "5797" 
+  "5801" -> "5808" 
+  "5801" -> "5815" 
+  "5785" -> "5784" 
+  "5789" -> "5796" 
+  "5796" -> "5822" 
+  "5802" -> "5801" 
+  "5806" -> "5813" 
+  "5813" -> "5822" 
+  "5790" -> "5789" 
+  "5807" -> "5806" 
+  "5791" -> "5793" 
+  "5793" -> "5790" 
+  "5808" -> "5810" 
+  "5810" -> "5807" 
+  "5773" -> "5780" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/107-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/107-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/107-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/107-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,53 +1,45 @@
-digraph "CallNonvirtualDoubleMethodV" {  
-"5804" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1259</SUB>> ]
-"5822" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1260</SUB>> ]
-"5841" [label = <(soa,soa(env))<SUB>1261</SUB>> ]
-"5843" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1262</SUB>> ]
-"5844" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1262</SUB>> ]
-"5845" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1262</SUB>> ]
-"5808" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1259</SUB>> ]
-"5826" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1260</SUB>> ]
-"5846" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1262</SUB>> ]
-"5851" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1262</SUB>> ]
-"5809" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1259</SUB>> ]
-"5813" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1259</SUB>> ]
-"5820" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1259</SUB>> ]
-"5827" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1260</SUB>> ]
-"5831" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1260</SUB>> ]
-"5838" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1260</SUB>> ]
-"5814" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1259</SUB>> ]
-"5832" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1260</SUB>> ]
-"5815" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1259</SUB>> ]
-"5817" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1259</SUB>> ]
-"5833" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1260</SUB>> ]
-"5835" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1260</SUB>> ]
-"5797" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1257</SUB>> ]
-"5852" [label = <(METHOD_RETURN,jdouble)<SUB>1257</SUB>> ]
-  "5804" -> "5809" 
-  "5804" -> "5822" 
-  "5822" -> "5827" 
-  "5822" -> "5841" 
-  "5841" -> "5846" 
-  "5843" -> "5852" 
-  "5844" -> "5843" 
-  "5845" -> "5844" 
-  "5808" -> "5815" 
-  "5808" -> "5822" 
-  "5826" -> "5833" 
-  "5826" -> "5841" 
-  "5846" -> "5851" 
-  "5851" -> "5845" 
-  "5809" -> "5808" 
-  "5813" -> "5820" 
-  "5820" -> "5852" 
-  "5827" -> "5826" 
-  "5831" -> "5838" 
-  "5838" -> "5852" 
-  "5814" -> "5813" 
-  "5832" -> "5831" 
-  "5815" -> "5817" 
-  "5817" -> "5814" 
-  "5833" -> "5835" 
-  "5835" -> "5832" 
-  "5797" -> "5804" 
+digraph "CallNonvirtualVoidMethodA" {  
+"5831" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1212</SUB>> ]
+"5848" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1213</SUB>> ]
+"5866" [label = <(soa,soa(env))<SUB>1214</SUB>> ]
+"5868" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1215</SUB>> ]
+"5835" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1212</SUB>> ]
+"5852" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1213</SUB>> ]
+"5836" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1212</SUB>> ]
+"5840" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1212</SUB>> ]
+"5847" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1212</SUB>> ]
+"5853" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1213</SUB>> ]
+"5857" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1213</SUB>> ]
+"5864" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1213</SUB>> ]
+"5841" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1212</SUB>> ]
+"5858" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1213</SUB>> ]
+"5842" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1212</SUB>> ]
+"5844" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1212</SUB>> ]
+"5859" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1213</SUB>> ]
+"5861" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1213</SUB>> ]
+"5824" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1210</SUB>> ]
+"5873" [label = <(METHOD_RETURN,void)<SUB>1210</SUB>> ]
+  "5831" -> "5836" 
+  "5831" -> "5848" 
+  "5848" -> "5853" 
+  "5848" -> "5866" 
+  "5866" -> "5868" 
+  "5868" -> "5873" 
+  "5835" -> "5842" 
+  "5835" -> "5848" 
+  "5852" -> "5859" 
+  "5852" -> "5866" 
+  "5836" -> "5835" 
+  "5840" -> "5847" 
+  "5847" -> "5873" 
+  "5853" -> "5852" 
+  "5857" -> "5864" 
+  "5864" -> "5873" 
+  "5841" -> "5840" 
+  "5858" -> "5857" 
+  "5842" -> "5844" 
+  "5844" -> "5841" 
+  "5859" -> "5861" 
+  "5861" -> "5858" 
+  "5824" -> "5831" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/108-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/108-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/108-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/108-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,53 +1,65 @@
-digraph "CallNonvirtualDoubleMethodA" {  
-"5861" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1267</SUB>> ]
-"5879" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1268</SUB>> ]
-"5898" [label = <(soa,soa(env))<SUB>1269</SUB>> ]
-"5900" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1270</SUB>> ]
-"5901" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1270</SUB>> ]
-"5902" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1270</SUB>> ]
-"5865" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1267</SUB>> ]
-"5883" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1268</SUB>> ]
-"5903" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1270</SUB>> ]
-"5908" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1270</SUB>> ]
-"5866" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1267</SUB>> ]
-"5870" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1267</SUB>> ]
-"5877" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1267</SUB>> ]
-"5884" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1268</SUB>> ]
-"5888" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1268</SUB>> ]
-"5895" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1268</SUB>> ]
-"5871" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1267</SUB>> ]
-"5889" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1268</SUB>> ]
-"5872" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1267</SUB>> ]
-"5874" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1267</SUB>> ]
-"5890" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1268</SUB>> ]
-"5892" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1268</SUB>> ]
-"5854" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1265</SUB>> ]
-"5909" [label = <(METHOD_RETURN,jdouble)<SUB>1265</SUB>> ]
-  "5861" -> "5866" 
-  "5861" -> "5879" 
-  "5879" -> "5884" 
-  "5879" -> "5898" 
-  "5898" -> "5903" 
-  "5900" -> "5909" 
-  "5901" -> "5900" 
-  "5902" -> "5901" 
-  "5865" -> "5872" 
-  "5865" -> "5879" 
-  "5883" -> "5890" 
-  "5883" -> "5898" 
-  "5903" -> "5908" 
-  "5908" -> "5902" 
-  "5866" -> "5865" 
-  "5870" -> "5877" 
-  "5877" -> "5909" 
-  "5884" -> "5883" 
-  "5888" -> "5895" 
-  "5895" -> "5909" 
-  "5871" -> "5870" 
-  "5889" -> "5888" 
-  "5872" -> "5874" 
-  "5874" -> "5871" 
-  "5890" -> "5892" 
-  "5892" -> "5889" 
-  "5854" -> "5861" 
+digraph "GetFieldID" {  
+"5881" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1219</SUB>> ]
+"5899" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1220</SUB>> ]
+"5917" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1221</SUB>> ]
+"5936" [label = <(soa,soa(env))<SUB>1222</SUB>> ]
+"5938" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1223</SUB>> ]
+"5939" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1223</SUB>> ]
+"5885" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1219</SUB>> ]
+"5903" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1220</SUB>> ]
+"5921" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1221</SUB>> ]
+"5886" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1219</SUB>> ]
+"5890" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1219</SUB>> ]
+"5897" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1219</SUB>> ]
+"5904" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1220</SUB>> ]
+"5908" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>1220</SUB>> ]
+"5915" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1220</SUB>> ]
+"5922" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1221</SUB>> ]
+"5926" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>1221</SUB>> ]
+"5933" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1221</SUB>> ]
+"5891" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1219</SUB>> ]
+"5909" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1220</SUB>> ]
+"5927" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1221</SUB>> ]
+"5892" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1219</SUB>> ]
+"5894" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1219</SUB>> ]
+"5910" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1220</SUB>> ]
+"5912" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1220</SUB>> ]
+"5928" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1221</SUB>> ]
+"5930" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1221</SUB>> ]
+"5875" [label = <(METHOD,GetFieldID)<SUB>1218</SUB>> ]
+"5945" [label = <(METHOD_RETURN,jfieldID)<SUB>1218</SUB>> ]
+  "5881" -> "5886" 
+  "5881" -> "5899" 
+  "5899" -> "5904" 
+  "5899" -> "5917" 
+  "5917" -> "5922" 
+  "5917" -> "5936" 
+  "5936" -> "5939" 
+  "5938" -> "5945" 
+  "5939" -> "5938" 
+  "5885" -> "5892" 
+  "5885" -> "5899" 
+  "5903" -> "5910" 
+  "5903" -> "5917" 
+  "5921" -> "5928" 
+  "5921" -> "5936" 
+  "5886" -> "5885" 
+  "5890" -> "5897" 
+  "5897" -> "5945" 
+  "5904" -> "5903" 
+  "5908" -> "5915" 
+  "5915" -> "5945" 
+  "5922" -> "5921" 
+  "5926" -> "5933" 
+  "5933" -> "5945" 
+  "5891" -> "5890" 
+  "5909" -> "5908" 
+  "5927" -> "5926" 
+  "5892" -> "5894" 
+  "5894" -> "5891" 
+  "5910" -> "5912" 
+  "5912" -> "5909" 
+  "5928" -> "5930" 
+  "5930" -> "5927" 
+  "5875" -> "5881" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/109-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/109-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/109-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/109-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,49 +1,65 @@
-digraph "CallNonvirtualVoidMethod" {  
-"5918" [label = <(va_start,va_start(ap, mid))<SUB>1275</SUB>> ]
-"5921" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1276</SUB>> ]
-"5938" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1277</SUB>> ]
-"5956" [label = <(soa,soa(env))<SUB>1278</SUB>> ]
-"5958" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1279</SUB>> ]
-"5963" [label = <(va_end,va_end(ap))<SUB>1280</SUB>> ]
-"5925" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1276</SUB>> ]
-"5942" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1277</SUB>> ]
-"5926" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1276</SUB>> ]
-"5930" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1276</SUB>> ]
-"5937" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1276</SUB>> ]
-"5943" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1277</SUB>> ]
-"5947" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1277</SUB>> ]
-"5954" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1277</SUB>> ]
-"5931" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1276</SUB>> ]
-"5948" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1277</SUB>> ]
-"5932" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1276</SUB>> ]
-"5934" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1276</SUB>> ]
-"5949" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1277</SUB>> ]
-"5951" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1277</SUB>> ]
-"5911" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1273</SUB>> ]
-"5965" [label = <(METHOD_RETURN,void)<SUB>1273</SUB>> ]
-  "5918" -> "5921" 
-  "5921" -> "5926" 
-  "5921" -> "5938" 
-  "5938" -> "5943" 
-  "5938" -> "5956" 
-  "5956" -> "5958" 
-  "5958" -> "5963" 
-  "5963" -> "5965" 
-  "5925" -> "5932" 
-  "5925" -> "5938" 
-  "5942" -> "5949" 
-  "5942" -> "5956" 
-  "5926" -> "5925" 
-  "5930" -> "5937" 
-  "5937" -> "5965" 
-  "5943" -> "5942" 
-  "5947" -> "5954" 
-  "5954" -> "5965" 
-  "5931" -> "5930" 
-  "5948" -> "5947" 
-  "5932" -> "5934" 
-  "5934" -> "5931" 
-  "5949" -> "5951" 
-  "5951" -> "5948" 
-  "5911" -> "5918" 
+digraph "GetStaticFieldID" {  
+"5953" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1228</SUB>> ]
+"5971" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1229</SUB>> ]
+"5989" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1230</SUB>> ]
+"6008" [label = <(soa,soa(env))<SUB>1231</SUB>> ]
+"6010" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1232</SUB>> ]
+"6011" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1232</SUB>> ]
+"5957" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1228</SUB>> ]
+"5975" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1229</SUB>> ]
+"5993" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1230</SUB>> ]
+"5958" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1228</SUB>> ]
+"5962" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1228</SUB>> ]
+"5969" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1228</SUB>> ]
+"5976" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1229</SUB>> ]
+"5980" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>1229</SUB>> ]
+"5987" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1229</SUB>> ]
+"5994" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1230</SUB>> ]
+"5998" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>1230</SUB>> ]
+"6005" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1230</SUB>> ]
+"5963" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1228</SUB>> ]
+"5981" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1229</SUB>> ]
+"5999" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1230</SUB>> ]
+"5964" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1228</SUB>> ]
+"5966" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1228</SUB>> ]
+"5982" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1229</SUB>> ]
+"5984" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1229</SUB>> ]
+"6000" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1230</SUB>> ]
+"6002" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1230</SUB>> ]
+"5947" [label = <(METHOD,GetStaticFieldID)<SUB>1226</SUB>> ]
+"6017" [label = <(METHOD_RETURN,jfieldID)<SUB>1226</SUB>> ]
+  "5953" -> "5958" 
+  "5953" -> "5971" 
+  "5971" -> "5976" 
+  "5971" -> "5989" 
+  "5989" -> "5994" 
+  "5989" -> "6008" 
+  "6008" -> "6011" 
+  "6010" -> "6017" 
+  "6011" -> "6010" 
+  "5957" -> "5964" 
+  "5957" -> "5971" 
+  "5975" -> "5982" 
+  "5975" -> "5989" 
+  "5993" -> "6000" 
+  "5993" -> "6008" 
+  "5958" -> "5957" 
+  "5962" -> "5969" 
+  "5969" -> "6017" 
+  "5976" -> "5975" 
+  "5980" -> "5987" 
+  "5987" -> "6017" 
+  "5994" -> "5993" 
+  "5998" -> "6005" 
+  "6005" -> "6017" 
+  "5963" -> "5962" 
+  "5981" -> "5980" 
+  "5999" -> "5998" 
+  "5964" -> "5966" 
+  "5966" -> "5963" 
+  "5982" -> "5984" 
+  "5984" -> "5981" 
+  "6000" -> "6002" 
+  "6002" -> "5999" 
+  "5947" -> "5953" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/11-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/11-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/11-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/11-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLoader" {  
-"356" [label = <(METHOD,GetClassLoader)<SUB>244</SUB>> ]
-"359" [label = <(METHOD_RETURN,ANY)<SUB>244</SUB>> ]
-  "356" -> "359" 
+digraph "ThrowNewException" {  
+"273" [label = <(METHOD,ThrowNewException)<SUB>258</SUB>> ]
+"279" [label = <(METHOD_RETURN,int)<SUB>258</SUB>> ]
+  "273" -> "279" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/110-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/110-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/110-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/110-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,45 +1,89 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"5974" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1285</SUB>> ]
-"5991" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1286</SUB>> ]
-"6009" [label = <(soa,soa(env))<SUB>1287</SUB>> ]
-"6011" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1288</SUB>> ]
-"5978" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1285</SUB>> ]
-"5995" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1286</SUB>> ]
-"5979" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1285</SUB>> ]
-"5983" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1285</SUB>> ]
-"5990" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1285</SUB>> ]
-"5996" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1286</SUB>> ]
-"6000" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1286</SUB>> ]
-"6007" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1286</SUB>> ]
-"5984" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1285</SUB>> ]
-"6001" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1286</SUB>> ]
-"5985" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1285</SUB>> ]
-"5987" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1285</SUB>> ]
-"6002" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1286</SUB>> ]
-"6004" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1286</SUB>> ]
-"5967" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1283</SUB>> ]
-"6016" [label = <(METHOD_RETURN,void)<SUB>1283</SUB>> ]
-  "5974" -> "5979" 
-  "5974" -> "5991" 
-  "5991" -> "5996" 
-  "5991" -> "6009" 
-  "6009" -> "6011" 
-  "6011" -> "6016" 
-  "5978" -> "5985" 
-  "5978" -> "5991" 
-  "5995" -> "6002" 
-  "5995" -> "6009" 
-  "5979" -> "5978" 
-  "5983" -> "5990" 
-  "5990" -> "6016" 
-  "5996" -> "5995" 
-  "6000" -> "6007" 
-  "6007" -> "6016" 
-  "5984" -> "5983" 
-  "6001" -> "6000" 
-  "5985" -> "5987" 
-  "5987" -> "5984" 
-  "6002" -> "6004" 
-  "6004" -> "6001" 
-  "5967" -> "5974" 
+digraph "GetObjectField" {  
+"6024" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1236</SUB>> ]
+"6042" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1237</SUB>> ]
+"6061" [label = <(soa,soa(env))<SUB>1238</SUB>> ]
+"6063" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1239</SUB>> ]
+"6081" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1240</SUB>> ]
+"6088" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1241</SUB>> ]
+"6064" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1239</SUB>> ]
+"6071" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1239</SUB>> ]
+"6083" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1240</SUB>> ]
+"6089" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1241</SUB>> ]
+"6065" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1239</SUB>> ]
+"6072" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1239</SUB>> ]
+"6084" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1240</SUB>> ]
+"6090" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1241</SUB>> ]
+"6095" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1241</SUB>> ]
+"6028" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1236</SUB>> ]
+"6046" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1237</SUB>> ]
+"6067" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1239</SUB>> ]
+"6073" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1239</SUB>> ]
+"6076" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1239</SUB>> ]
+"6086" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1240</SUB>> ]
+"6091" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1241</SUB>> ]
+"6096" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1241</SUB>> ]
+"6029" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1236</SUB>> ]
+"6033" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1236</SUB>> ]
+"6040" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1236</SUB>> ]
+"6047" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1237</SUB>> ]
+"6051" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1237</SUB>> ]
+"6058" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1237</SUB>> ]
+"6069" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1239</SUB>> ]
+"6075" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1239</SUB>> ]
+"6078" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1239</SUB>> ]
+"6093" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1241</SUB>> ]
+"6098" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1241</SUB>> ]
+"6034" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1236</SUB>> ]
+"6052" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1237</SUB>> ]
+"6035" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1236</SUB>> ]
+"6037" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1236</SUB>> ]
+"6053" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1237</SUB>> ]
+"6055" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1237</SUB>> ]
+"6019" [label = <(METHOD,GetObjectField)<SUB>1235</SUB>> ]
+"6100" [label = <(METHOD_RETURN,jobject)<SUB>1235</SUB>> ]
+  "6024" -> "6029" 
+  "6024" -> "6042" 
+  "6042" -> "6047" 
+  "6042" -> "6061" 
+  "6061" -> "6069" 
+  "6063" -> "6086" 
+  "6081" -> "6093" 
+  "6088" -> "6100" 
+  "6064" -> "6075" 
+  "6071" -> "6063" 
+  "6083" -> "6081" 
+  "6089" -> "6088" 
+  "6065" -> "6064" 
+  "6072" -> "6071" 
+  "6084" -> "6083" 
+  "6090" -> "6098" 
+  "6095" -> "6089" 
+  "6028" -> "6035" 
+  "6028" -> "6042" 
+  "6046" -> "6053" 
+  "6046" -> "6061" 
+  "6067" -> "6065" 
+  "6073" -> "6078" 
+  "6076" -> "6072" 
+  "6086" -> "6084" 
+  "6091" -> "6090" 
+  "6096" -> "6095" 
+  "6029" -> "6028" 
+  "6033" -> "6040" 
+  "6040" -> "6100" 
+  "6047" -> "6046" 
+  "6051" -> "6058" 
+  "6058" -> "6100" 
+  "6069" -> "6067" 
+  "6075" -> "6073" 
+  "6078" -> "6076" 
+  "6093" -> "6091" 
+  "6098" -> "6096" 
+  "6034" -> "6033" 
+  "6052" -> "6051" 
+  "6035" -> "6037" 
+  "6037" -> "6034" 
+  "6053" -> "6055" 
+  "6055" -> "6052" 
+  "6019" -> "6024" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/111-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/111-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/111-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/111-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,45 +1,55 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"6025" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1293</SUB>> ]
-"6042" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1294</SUB>> ]
-"6060" [label = <(soa,soa(env))<SUB>1295</SUB>> ]
-"6062" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1296</SUB>> ]
-"6029" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1293</SUB>> ]
-"6046" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1294</SUB>> ]
-"6030" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1293</SUB>> ]
-"6034" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1293</SUB>> ]
-"6041" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1293</SUB>> ]
-"6047" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1294</SUB>> ]
-"6051" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1294</SUB>> ]
-"6058" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1294</SUB>> ]
-"6035" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1293</SUB>> ]
-"6052" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1294</SUB>> ]
-"6036" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1293</SUB>> ]
-"6038" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1293</SUB>> ]
-"6053" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1294</SUB>> ]
-"6055" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1294</SUB>> ]
-"6018" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1291</SUB>> ]
-"6067" [label = <(METHOD_RETURN,void)<SUB>1291</SUB>> ]
-  "6025" -> "6030" 
-  "6025" -> "6042" 
-  "6042" -> "6047" 
-  "6042" -> "6060" 
-  "6060" -> "6062" 
-  "6062" -> "6067" 
-  "6029" -> "6036" 
-  "6029" -> "6042" 
-  "6046" -> "6053" 
-  "6046" -> "6060" 
-  "6030" -> "6029" 
-  "6034" -> "6041" 
-  "6041" -> "6067" 
-  "6047" -> "6046" 
-  "6051" -> "6058" 
-  "6058" -> "6067" 
-  "6035" -> "6034" 
-  "6052" -> "6051" 
-  "6036" -> "6038" 
-  "6038" -> "6035" 
-  "6053" -> "6055" 
-  "6055" -> "6052" 
-  "6018" -> "6025" 
+digraph "GetStaticObjectField" {  
+"6107" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1245</SUB>> ]
+"6126" [label = <(soa,soa(env))<SUB>1246</SUB>> ]
+"6129" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1247</SUB>> ]
+"6136" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1248</SUB>> ]
+"6131" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1247</SUB>> ]
+"6137" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1248</SUB>> ]
+"6132" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1247</SUB>> ]
+"6138" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1248</SUB>> ]
+"6143" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1248</SUB>> ]
+"6111" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1245</SUB>> ]
+"6134" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1247</SUB>> ]
+"6139" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1248</SUB>> ]
+"6144" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1248</SUB>> ]
+"6147" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1248</SUB>> ]
+"6112" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1245</SUB>> ]
+"6116" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1245</SUB>> ]
+"6123" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1245</SUB>> ]
+"6141" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1248</SUB>> ]
+"6146" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1248</SUB>> ]
+"6148" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1248</SUB>> ]
+"6117" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1245</SUB>> ]
+"6150" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1248</SUB>> ]
+"6118" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1245</SUB>> ]
+"6120" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1245</SUB>> ]
+"6102" [label = <(METHOD,GetStaticObjectField)<SUB>1244</SUB>> ]
+"6151" [label = <(METHOD_RETURN,jobject)<SUB>1244</SUB>> ]
+  "6107" -> "6112" 
+  "6107" -> "6126" 
+  "6126" -> "6134" 
+  "6129" -> "6141" 
+  "6136" -> "6151" 
+  "6131" -> "6129" 
+  "6137" -> "6136" 
+  "6132" -> "6131" 
+  "6138" -> "6146" 
+  "6143" -> "6137" 
+  "6111" -> "6118" 
+  "6111" -> "6126" 
+  "6134" -> "6132" 
+  "6139" -> "6138" 
+  "6144" -> "6150" 
+  "6147" -> "6143" 
+  "6112" -> "6111" 
+  "6116" -> "6123" 
+  "6123" -> "6151" 
+  "6141" -> "6139" 
+  "6146" -> "6144" 
+  "6148" -> "6147" 
+  "6117" -> "6116" 
+  "6150" -> "6148" 
+  "6118" -> "6120" 
+  "6120" -> "6117" 
+  "6102" -> "6107" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/112-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/112-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/112-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/112-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,65 +1,107 @@
-digraph "GetFieldID" {  
-"6075" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1300</SUB>> ]
-"6093" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1301</SUB>> ]
-"6111" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1302</SUB>> ]
-"6130" [label = <(soa,soa(env))<SUB>1303</SUB>> ]
-"6132" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1304</SUB>> ]
-"6133" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1304</SUB>> ]
-"6079" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1300</SUB>> ]
-"6097" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1301</SUB>> ]
-"6115" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1302</SUB>> ]
-"6080" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1300</SUB>> ]
-"6084" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1300</SUB>> ]
-"6091" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1300</SUB>> ]
-"6098" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1301</SUB>> ]
-"6102" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>1301</SUB>> ]
-"6109" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1301</SUB>> ]
-"6116" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1302</SUB>> ]
-"6120" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>1302</SUB>> ]
-"6127" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1302</SUB>> ]
-"6085" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1300</SUB>> ]
-"6103" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1301</SUB>> ]
-"6121" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1302</SUB>> ]
-"6086" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1300</SUB>> ]
-"6088" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1300</SUB>> ]
-"6104" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1301</SUB>> ]
-"6106" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1301</SUB>> ]
-"6122" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1302</SUB>> ]
-"6124" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1302</SUB>> ]
-"6069" [label = <(METHOD,GetFieldID)<SUB>1299</SUB>> ]
-"6139" [label = <(METHOD_RETURN,jfieldID)<SUB>1299</SUB>> ]
-  "6075" -> "6080" 
-  "6075" -> "6093" 
-  "6093" -> "6098" 
-  "6093" -> "6111" 
-  "6111" -> "6116" 
-  "6111" -> "6130" 
-  "6130" -> "6133" 
-  "6132" -> "6139" 
-  "6133" -> "6132" 
-  "6079" -> "6086" 
-  "6079" -> "6093" 
-  "6097" -> "6104" 
-  "6097" -> "6111" 
-  "6115" -> "6122" 
-  "6115" -> "6130" 
-  "6080" -> "6079" 
-  "6084" -> "6091" 
-  "6091" -> "6139" 
-  "6098" -> "6097" 
-  "6102" -> "6109" 
-  "6109" -> "6139" 
-  "6116" -> "6115" 
-  "6120" -> "6127" 
-  "6127" -> "6139" 
-  "6085" -> "6084" 
-  "6103" -> "6102" 
-  "6121" -> "6120" 
-  "6086" -> "6088" 
-  "6088" -> "6085" 
-  "6104" -> "6106" 
-  "6106" -> "6103" 
-  "6122" -> "6124" 
-  "6124" -> "6121" 
-  "6069" -> "6075" 
+digraph "SetObjectField" {  
+"6159" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1252</SUB>> ]
+"6176" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1253</SUB>> ]
+"6194" [label = <(soa,soa(env))<SUB>1254</SUB>> ]
+"6196" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1255</SUB>> ]
+"6213" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1256</SUB>> ]
+"6231" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1257</SUB>> ]
+"6238" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1258</SUB>> ]
+"6197" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1255</SUB>> ]
+"6204" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1255</SUB>> ]
+"6214" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1256</SUB>> ]
+"6221" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1256</SUB>> ]
+"6233" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1257</SUB>> ]
+"6239" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1258</SUB>> ]
+"6244" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1258</SUB>> ]
+"6198" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1255</SUB>> ]
+"6205" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1255</SUB>> ]
+"6215" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1256</SUB>> ]
+"6222" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1256</SUB>> ]
+"6234" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1257</SUB>> ]
+"6240" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1258</SUB>> ]
+"6245" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1258</SUB>> ]
+"6163" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1252</SUB>> ]
+"6180" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1253</SUB>> ]
+"6200" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1255</SUB>> ]
+"6206" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1255</SUB>> ]
+"6209" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1255</SUB>> ]
+"6217" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1256</SUB>> ]
+"6223" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1256</SUB>> ]
+"6226" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1256</SUB>> ]
+"6236" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1257</SUB>> ]
+"6242" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1258</SUB>> ]
+"6164" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1252</SUB>> ]
+"6168" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1252</SUB>> ]
+"6175" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1252</SUB>> ]
+"6181" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1253</SUB>> ]
+"6185" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1253</SUB>> ]
+"6192" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1253</SUB>> ]
+"6202" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1255</SUB>> ]
+"6208" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1255</SUB>> ]
+"6211" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1255</SUB>> ]
+"6219" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1256</SUB>> ]
+"6225" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1256</SUB>> ]
+"6228" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1256</SUB>> ]
+"6169" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1252</SUB>> ]
+"6186" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1253</SUB>> ]
+"6170" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1252</SUB>> ]
+"6172" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1252</SUB>> ]
+"6187" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1253</SUB>> ]
+"6189" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1253</SUB>> ]
+"6153" [label = <(METHOD,SetObjectField)<SUB>1251</SUB>> ]
+"6248" [label = <(METHOD_RETURN,void)<SUB>1251</SUB>> ]
+  "6159" -> "6164" 
+  "6159" -> "6176" 
+  "6176" -> "6181" 
+  "6176" -> "6194" 
+  "6194" -> "6202" 
+  "6196" -> "6219" 
+  "6213" -> "6236" 
+  "6231" -> "6242" 
+  "6238" -> "6248" 
+  "6197" -> "6208" 
+  "6204" -> "6196" 
+  "6214" -> "6225" 
+  "6221" -> "6213" 
+  "6233" -> "6231" 
+  "6239" -> "6245" 
+  "6244" -> "6238" 
+  "6198" -> "6197" 
+  "6205" -> "6204" 
+  "6215" -> "6214" 
+  "6222" -> "6221" 
+  "6234" -> "6233" 
+  "6240" -> "6239" 
+  "6245" -> "6244" 
+  "6163" -> "6170" 
+  "6163" -> "6176" 
+  "6180" -> "6187" 
+  "6180" -> "6194" 
+  "6200" -> "6198" 
+  "6206" -> "6211" 
+  "6209" -> "6205" 
+  "6217" -> "6215" 
+  "6223" -> "6228" 
+  "6226" -> "6222" 
+  "6236" -> "6234" 
+  "6242" -> "6240" 
+  "6164" -> "6163" 
+  "6168" -> "6175" 
+  "6175" -> "6248" 
+  "6181" -> "6180" 
+  "6185" -> "6192" 
+  "6192" -> "6248" 
+  "6202" -> "6200" 
+  "6208" -> "6206" 
+  "6211" -> "6209" 
+  "6219" -> "6217" 
+  "6225" -> "6223" 
+  "6228" -> "6226" 
+  "6169" -> "6168" 
+  "6186" -> "6185" 
+  "6170" -> "6172" 
+  "6172" -> "6169" 
+  "6187" -> "6189" 
+  "6189" -> "6186" 
+  "6153" -> "6159" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/113-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/113-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/113-cfg.dot	2023-06-07 19:35:14.737385849 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/113-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,65 +1,73 @@
-digraph "GetStaticFieldID" {  
-"6147" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1309</SUB>> ]
-"6165" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1310</SUB>> ]
-"6183" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1311</SUB>> ]
-"6202" [label = <(soa,soa(env))<SUB>1312</SUB>> ]
-"6204" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1313</SUB>> ]
-"6205" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1313</SUB>> ]
-"6151" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1309</SUB>> ]
-"6169" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1310</SUB>> ]
-"6187" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1311</SUB>> ]
-"6152" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1309</SUB>> ]
-"6156" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1309</SUB>> ]
-"6163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1309</SUB>> ]
-"6170" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1310</SUB>> ]
-"6174" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>1310</SUB>> ]
-"6181" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1310</SUB>> ]
-"6188" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1311</SUB>> ]
-"6192" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>1311</SUB>> ]
-"6199" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1311</SUB>> ]
-"6157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1309</SUB>> ]
-"6175" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1310</SUB>> ]
-"6193" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1311</SUB>> ]
-"6158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1309</SUB>> ]
-"6160" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1309</SUB>> ]
-"6176" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1310</SUB>> ]
-"6178" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1310</SUB>> ]
-"6194" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1311</SUB>> ]
-"6196" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1311</SUB>> ]
-"6141" [label = <(METHOD,GetStaticFieldID)<SUB>1307</SUB>> ]
-"6211" [label = <(METHOD_RETURN,jfieldID)<SUB>1307</SUB>> ]
-  "6147" -> "6152" 
-  "6147" -> "6165" 
-  "6165" -> "6170" 
-  "6165" -> "6183" 
-  "6183" -> "6188" 
-  "6183" -> "6202" 
-  "6202" -> "6205" 
-  "6204" -> "6211" 
-  "6205" -> "6204" 
-  "6151" -> "6158" 
-  "6151" -> "6165" 
-  "6169" -> "6176" 
-  "6169" -> "6183" 
-  "6187" -> "6194" 
-  "6187" -> "6202" 
-  "6152" -> "6151" 
-  "6156" -> "6163" 
-  "6163" -> "6211" 
-  "6170" -> "6169" 
-  "6174" -> "6181" 
-  "6181" -> "6211" 
-  "6188" -> "6187" 
-  "6192" -> "6199" 
-  "6199" -> "6211" 
-  "6157" -> "6156" 
-  "6175" -> "6174" 
-  "6193" -> "6192" 
-  "6158" -> "6160" 
-  "6160" -> "6157" 
-  "6176" -> "6178" 
-  "6178" -> "6175" 
-  "6194" -> "6196" 
-  "6196" -> "6193" 
-  "6141" -> "6147" 
+digraph "SetStaticObjectField" {  
+"6256" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1262</SUB>> ]
+"6274" [label = <(soa,soa(env))<SUB>1263</SUB>> ]
+"6276" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1264</SUB>> ]
+"6294" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1265</SUB>> ]
+"6301" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1266</SUB>> ]
+"6277" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1264</SUB>> ]
+"6284" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1264</SUB>> ]
+"6296" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1265</SUB>> ]
+"6302" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1266</SUB>> ]
+"6307" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1266</SUB>> ]
+"6278" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1264</SUB>> ]
+"6285" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1264</SUB>> ]
+"6297" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1265</SUB>> ]
+"6303" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1266</SUB>> ]
+"6308" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1266</SUB>> ]
+"6260" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1262</SUB>> ]
+"6280" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1264</SUB>> ]
+"6286" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1264</SUB>> ]
+"6289" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1264</SUB>> ]
+"6299" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1265</SUB>> ]
+"6305" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1266</SUB>> ]
+"6309" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1266</SUB>> ]
+"6261" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1262</SUB>> ]
+"6265" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1262</SUB>> ]
+"6272" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1262</SUB>> ]
+"6282" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1264</SUB>> ]
+"6288" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1264</SUB>> ]
+"6291" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1264</SUB>> ]
+"6310" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1266</SUB>> ]
+"6266" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1262</SUB>> ]
+"6312" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1266</SUB>> ]
+"6267" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1262</SUB>> ]
+"6269" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1262</SUB>> ]
+"6250" [label = <(METHOD,SetStaticObjectField)<SUB>1261</SUB>> ]
+"6314" [label = <(METHOD_RETURN,void)<SUB>1261</SUB>> ]
+  "6256" -> "6261" 
+  "6256" -> "6274" 
+  "6274" -> "6282" 
+  "6276" -> "6299" 
+  "6294" -> "6305" 
+  "6301" -> "6314" 
+  "6277" -> "6288" 
+  "6284" -> "6276" 
+  "6296" -> "6294" 
+  "6302" -> "6312" 
+  "6307" -> "6301" 
+  "6278" -> "6277" 
+  "6285" -> "6284" 
+  "6297" -> "6296" 
+  "6303" -> "6302" 
+  "6308" -> "6307" 
+  "6260" -> "6267" 
+  "6260" -> "6274" 
+  "6280" -> "6278" 
+  "6286" -> "6291" 
+  "6289" -> "6285" 
+  "6299" -> "6297" 
+  "6305" -> "6303" 
+  "6309" -> "6308" 
+  "6261" -> "6260" 
+  "6265" -> "6272" 
+  "6272" -> "6314" 
+  "6282" -> "6280" 
+  "6288" -> "6286" 
+  "6291" -> "6289" 
+  "6310" -> "6309" 
+  "6266" -> "6265" 
+  "6312" -> "6310" 
+  "6267" -> "6269" 
+  "6269" -> "6266" 
+  "6250" -> "6256" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/114-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/114-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/114-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/114-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,89 +1,78 @@
-digraph "GetObjectField" {  
-"6218" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1317</SUB>> ]
-"6236" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1318</SUB>> ]
-"6255" [label = <(soa,soa(env))<SUB>1319</SUB>> ]
-"6257" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1320</SUB>> ]
-"6275" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1321</SUB>> ]
-"6282" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1322</SUB>> ]
-"6258" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1320</SUB>> ]
-"6265" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1320</SUB>> ]
-"6277" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1321</SUB>> ]
-"6283" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1322</SUB>> ]
-"6259" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1320</SUB>> ]
-"6266" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1320</SUB>> ]
-"6278" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1321</SUB>> ]
-"6284" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1322</SUB>> ]
-"6289" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1322</SUB>> ]
-"6222" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1317</SUB>> ]
-"6240" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1318</SUB>> ]
-"6261" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1320</SUB>> ]
-"6267" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1320</SUB>> ]
-"6270" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1320</SUB>> ]
-"6280" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1321</SUB>> ]
-"6285" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1322</SUB>> ]
-"6290" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1322</SUB>> ]
-"6223" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1317</SUB>> ]
-"6227" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1317</SUB>> ]
-"6234" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1317</SUB>> ]
-"6241" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1318</SUB>> ]
-"6245" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1318</SUB>> ]
-"6252" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1318</SUB>> ]
-"6263" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1320</SUB>> ]
-"6269" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1320</SUB>> ]
-"6272" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1320</SUB>> ]
-"6287" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1322</SUB>> ]
-"6292" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1322</SUB>> ]
-"6228" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1317</SUB>> ]
-"6246" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1318</SUB>> ]
-"6229" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1317</SUB>> ]
-"6231" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1317</SUB>> ]
-"6247" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1318</SUB>> ]
-"6249" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1318</SUB>> ]
-"6213" [label = <(METHOD,GetObjectField)<SUB>1316</SUB>> ]
-"6294" [label = <(METHOD_RETURN,jobject)<SUB>1316</SUB>> ]
-  "6218" -> "6223" 
-  "6218" -> "6236" 
-  "6236" -> "6241" 
-  "6236" -> "6255" 
-  "6255" -> "6263" 
-  "6257" -> "6280" 
-  "6275" -> "6287" 
-  "6282" -> "6294" 
-  "6258" -> "6269" 
-  "6265" -> "6257" 
-  "6277" -> "6275" 
-  "6283" -> "6282" 
-  "6259" -> "6258" 
-  "6266" -> "6265" 
-  "6278" -> "6277" 
-  "6284" -> "6292" 
-  "6289" -> "6283" 
-  "6222" -> "6229" 
-  "6222" -> "6236" 
-  "6240" -> "6247" 
-  "6240" -> "6255" 
-  "6261" -> "6259" 
-  "6267" -> "6272" 
-  "6270" -> "6266" 
-  "6280" -> "6278" 
-  "6285" -> "6284" 
-  "6290" -> "6289" 
-  "6223" -> "6222" 
-  "6227" -> "6234" 
-  "6234" -> "6294" 
-  "6241" -> "6240" 
-  "6245" -> "6252" 
-  "6252" -> "6294" 
-  "6263" -> "6261" 
-  "6269" -> "6267" 
-  "6272" -> "6270" 
-  "6287" -> "6285" 
-  "6292" -> "6290" 
-  "6228" -> "6227" 
-  "6246" -> "6245" 
-  "6229" -> "6231" 
-  "6231" -> "6228" 
-  "6247" -> "6249" 
-  "6249" -> "6246" 
-  "6213" -> "6218" 
+digraph "GetBooleanField" {  
+"6321" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6355" [label = <(soa,ScopedObjectAccess)<SUB>1298</SUB>> ]
+"6357" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1298</SUB>> ]
+"6375" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1298</SUB>> ]
+"6382" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1298</SUB>> ]
+"6340" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1298</SUB>> ]
+"6358" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1298</SUB>> ]
+"6365" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1298</SUB>> ]
+"6377" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1298</SUB>> ]
+"6383" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1298</SUB>> ]
+"6341" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1298</SUB>> ]
+"6345" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1298</SUB>> ]
+"6352" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6359" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1298</SUB>> ]
+"6366" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1298</SUB>> ]
+"6378" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6384" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1298</SUB>> ]
+"6325" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1298</SUB>> ]
+"6346" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1298</SUB>> ]
+"6361" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6367" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1298</SUB>> ]
+"6370" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6380" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1298</SUB>> ]
+"6386" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1298</SUB>> ]
+"6326" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1298</SUB>> ]
+"6330" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1298</SUB>> ]
+"6337" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1298</SUB>> ]
+"6347" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1298</SUB>> ]
+"6349" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1298</SUB>> ]
+"6363" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1298</SUB>> ]
+"6369" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1298</SUB>> ]
+"6372" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1298</SUB>> ]
+"6331" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1298</SUB>> ]
+"6332" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1298</SUB>> ]
+"6334" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1298</SUB>> ]
+"6316" [label = <(METHOD,GetBooleanField)<SUB>1297</SUB>> ]
+"6388" [label = <(METHOD_RETURN,jboolean)<SUB>1297</SUB>> ]
+  "6321" -> "6326" 
+  "6321" -> "6341" 
+  "6355" -> "6363" 
+  "6357" -> "6380" 
+  "6375" -> "6386" 
+  "6382" -> "6388" 
+  "6340" -> "6347" 
+  "6340" -> "6355" 
+  "6358" -> "6369" 
+  "6365" -> "6357" 
+  "6377" -> "6375" 
+  "6383" -> "6382" 
+  "6341" -> "6340" 
+  "6345" -> "6352" 
+  "6352" -> "6388" 
+  "6359" -> "6358" 
+  "6366" -> "6365" 
+  "6378" -> "6377" 
+  "6384" -> "6383" 
+  "6325" -> "6332" 
+  "6325" -> "6341" 
+  "6346" -> "6345" 
+  "6361" -> "6359" 
+  "6367" -> "6372" 
+  "6370" -> "6366" 
+  "6380" -> "6378" 
+  "6386" -> "6384" 
+  "6326" -> "6325" 
+  "6330" -> "6337" 
+  "6337" -> "6388" 
+  "6347" -> "6349" 
+  "6349" -> "6346" 
+  "6363" -> "6361" 
+  "6369" -> "6367" 
+  "6372" -> "6370" 
+  "6331" -> "6330" 
+  "6332" -> "6334" 
+  "6334" -> "6331" 
+  "6316" -> "6321" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/115-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/115-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/115-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/115-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,55 +1,78 @@
-digraph "GetStaticObjectField" {  
-"6301" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1326</SUB>> ]
-"6320" [label = <(soa,soa(env))<SUB>1327</SUB>> ]
-"6323" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1328</SUB>> ]
-"6330" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1329</SUB>> ]
-"6325" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1328</SUB>> ]
-"6331" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1329</SUB>> ]
-"6326" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1328</SUB>> ]
-"6332" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1329</SUB>> ]
-"6337" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1329</SUB>> ]
-"6305" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1326</SUB>> ]
-"6328" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1328</SUB>> ]
-"6333" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1329</SUB>> ]
-"6338" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1329</SUB>> ]
-"6341" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1329</SUB>> ]
-"6306" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1326</SUB>> ]
-"6310" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1326</SUB>> ]
-"6317" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1326</SUB>> ]
-"6335" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1329</SUB>> ]
-"6340" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1329</SUB>> ]
-"6342" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1329</SUB>> ]
-"6311" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1326</SUB>> ]
-"6344" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1329</SUB>> ]
-"6312" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1326</SUB>> ]
-"6314" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1326</SUB>> ]
-"6296" [label = <(METHOD,GetStaticObjectField)<SUB>1325</SUB>> ]
-"6345" [label = <(METHOD_RETURN,jobject)<SUB>1325</SUB>> ]
-  "6301" -> "6306" 
-  "6301" -> "6320" 
-  "6320" -> "6328" 
-  "6323" -> "6335" 
-  "6330" -> "6345" 
-  "6325" -> "6323" 
-  "6331" -> "6330" 
-  "6326" -> "6325" 
-  "6332" -> "6340" 
-  "6337" -> "6331" 
-  "6305" -> "6312" 
-  "6305" -> "6320" 
-  "6328" -> "6326" 
-  "6333" -> "6332" 
-  "6338" -> "6344" 
-  "6341" -> "6337" 
-  "6306" -> "6305" 
-  "6310" -> "6317" 
-  "6317" -> "6345" 
-  "6335" -> "6333" 
-  "6340" -> "6338" 
-  "6342" -> "6341" 
-  "6311" -> "6310" 
-  "6344" -> "6342" 
-  "6312" -> "6314" 
-  "6314" -> "6311" 
-  "6296" -> "6301" 
+digraph "GetByteField" {  
+"6395" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6429" [label = <(soa,ScopedObjectAccess)<SUB>1302</SUB>> ]
+"6431" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1302</SUB>> ]
+"6449" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1302</SUB>> ]
+"6456" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1302</SUB>> ]
+"6414" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1302</SUB>> ]
+"6432" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1302</SUB>> ]
+"6439" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1302</SUB>> ]
+"6451" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1302</SUB>> ]
+"6457" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1302</SUB>> ]
+"6415" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1302</SUB>> ]
+"6419" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1302</SUB>> ]
+"6426" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6433" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1302</SUB>> ]
+"6440" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1302</SUB>> ]
+"6452" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6458" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1302</SUB>> ]
+"6399" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1302</SUB>> ]
+"6420" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1302</SUB>> ]
+"6435" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6441" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1302</SUB>> ]
+"6444" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6454" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1302</SUB>> ]
+"6460" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1302</SUB>> ]
+"6400" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1302</SUB>> ]
+"6404" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1302</SUB>> ]
+"6411" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1302</SUB>> ]
+"6421" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1302</SUB>> ]
+"6423" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1302</SUB>> ]
+"6437" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1302</SUB>> ]
+"6443" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1302</SUB>> ]
+"6446" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1302</SUB>> ]
+"6405" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1302</SUB>> ]
+"6406" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1302</SUB>> ]
+"6408" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1302</SUB>> ]
+"6390" [label = <(METHOD,GetByteField)<SUB>1301</SUB>> ]
+"6462" [label = <(METHOD_RETURN,jbyte)<SUB>1301</SUB>> ]
+  "6395" -> "6400" 
+  "6395" -> "6415" 
+  "6429" -> "6437" 
+  "6431" -> "6454" 
+  "6449" -> "6460" 
+  "6456" -> "6462" 
+  "6414" -> "6421" 
+  "6414" -> "6429" 
+  "6432" -> "6443" 
+  "6439" -> "6431" 
+  "6451" -> "6449" 
+  "6457" -> "6456" 
+  "6415" -> "6414" 
+  "6419" -> "6426" 
+  "6426" -> "6462" 
+  "6433" -> "6432" 
+  "6440" -> "6439" 
+  "6452" -> "6451" 
+  "6458" -> "6457" 
+  "6399" -> "6406" 
+  "6399" -> "6415" 
+  "6420" -> "6419" 
+  "6435" -> "6433" 
+  "6441" -> "6446" 
+  "6444" -> "6440" 
+  "6454" -> "6452" 
+  "6460" -> "6458" 
+  "6400" -> "6399" 
+  "6404" -> "6411" 
+  "6411" -> "6462" 
+  "6421" -> "6423" 
+  "6423" -> "6420" 
+  "6437" -> "6435" 
+  "6443" -> "6441" 
+  "6446" -> "6444" 
+  "6405" -> "6404" 
+  "6406" -> "6408" 
+  "6408" -> "6405" 
+  "6390" -> "6395" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/116-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/116-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/116-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/116-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,107 +1,78 @@
-digraph "SetObjectField" {  
-"6353" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1333</SUB>> ]
-"6370" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1334</SUB>> ]
-"6388" [label = <(soa,soa(env))<SUB>1335</SUB>> ]
-"6390" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1336</SUB>> ]
-"6407" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1337</SUB>> ]
-"6425" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1338</SUB>> ]
-"6432" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1339</SUB>> ]
-"6391" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1336</SUB>> ]
-"6398" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1336</SUB>> ]
-"6408" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1337</SUB>> ]
-"6415" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1337</SUB>> ]
-"6427" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1338</SUB>> ]
-"6433" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1339</SUB>> ]
-"6438" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1339</SUB>> ]
-"6392" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1336</SUB>> ]
-"6399" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1336</SUB>> ]
-"6409" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1337</SUB>> ]
-"6416" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1337</SUB>> ]
-"6428" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1338</SUB>> ]
-"6434" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1339</SUB>> ]
-"6439" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1339</SUB>> ]
-"6357" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1333</SUB>> ]
-"6374" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1334</SUB>> ]
-"6394" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1336</SUB>> ]
-"6400" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1336</SUB>> ]
-"6403" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1336</SUB>> ]
-"6411" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1337</SUB>> ]
-"6417" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1337</SUB>> ]
-"6420" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1337</SUB>> ]
-"6430" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1338</SUB>> ]
-"6436" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1339</SUB>> ]
-"6358" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1333</SUB>> ]
-"6362" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1333</SUB>> ]
-"6369" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1333</SUB>> ]
-"6375" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1334</SUB>> ]
-"6379" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1334</SUB>> ]
-"6386" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1334</SUB>> ]
-"6396" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1336</SUB>> ]
-"6402" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1336</SUB>> ]
-"6405" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1336</SUB>> ]
-"6413" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1337</SUB>> ]
-"6419" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1337</SUB>> ]
-"6422" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1337</SUB>> ]
-"6363" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1333</SUB>> ]
-"6380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1334</SUB>> ]
-"6364" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1333</SUB>> ]
-"6366" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1333</SUB>> ]
-"6381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1334</SUB>> ]
-"6383" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1334</SUB>> ]
-"6347" [label = <(METHOD,SetObjectField)<SUB>1332</SUB>> ]
-"6442" [label = <(METHOD_RETURN,void)<SUB>1332</SUB>> ]
-  "6353" -> "6358" 
-  "6353" -> "6370" 
-  "6370" -> "6375" 
-  "6370" -> "6388" 
-  "6388" -> "6396" 
-  "6390" -> "6413" 
-  "6407" -> "6430" 
-  "6425" -> "6436" 
-  "6432" -> "6442" 
-  "6391" -> "6402" 
-  "6398" -> "6390" 
-  "6408" -> "6419" 
-  "6415" -> "6407" 
-  "6427" -> "6425" 
-  "6433" -> "6439" 
-  "6438" -> "6432" 
-  "6392" -> "6391" 
-  "6399" -> "6398" 
-  "6409" -> "6408" 
-  "6416" -> "6415" 
-  "6428" -> "6427" 
-  "6434" -> "6433" 
-  "6439" -> "6438" 
-  "6357" -> "6364" 
-  "6357" -> "6370" 
-  "6374" -> "6381" 
-  "6374" -> "6388" 
-  "6394" -> "6392" 
-  "6400" -> "6405" 
-  "6403" -> "6399" 
-  "6411" -> "6409" 
-  "6417" -> "6422" 
-  "6420" -> "6416" 
-  "6430" -> "6428" 
-  "6436" -> "6434" 
-  "6358" -> "6357" 
-  "6362" -> "6369" 
-  "6369" -> "6442" 
-  "6375" -> "6374" 
-  "6379" -> "6386" 
-  "6386" -> "6442" 
-  "6396" -> "6394" 
-  "6402" -> "6400" 
-  "6405" -> "6403" 
-  "6413" -> "6411" 
-  "6419" -> "6417" 
-  "6422" -> "6420" 
-  "6363" -> "6362" 
-  "6380" -> "6379" 
-  "6364" -> "6366" 
-  "6366" -> "6363" 
-  "6381" -> "6383" 
-  "6383" -> "6380" 
-  "6347" -> "6353" 
+digraph "GetCharField" {  
+"6469" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6503" [label = <(soa,ScopedObjectAccess)<SUB>1306</SUB>> ]
+"6505" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1306</SUB>> ]
+"6523" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1306</SUB>> ]
+"6530" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1306</SUB>> ]
+"6488" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1306</SUB>> ]
+"6506" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1306</SUB>> ]
+"6513" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1306</SUB>> ]
+"6525" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1306</SUB>> ]
+"6531" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1306</SUB>> ]
+"6489" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1306</SUB>> ]
+"6493" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1306</SUB>> ]
+"6500" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6507" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1306</SUB>> ]
+"6514" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1306</SUB>> ]
+"6526" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6532" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1306</SUB>> ]
+"6473" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1306</SUB>> ]
+"6494" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1306</SUB>> ]
+"6509" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6515" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1306</SUB>> ]
+"6518" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6528" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1306</SUB>> ]
+"6534" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1306</SUB>> ]
+"6474" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1306</SUB>> ]
+"6478" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1306</SUB>> ]
+"6485" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1306</SUB>> ]
+"6495" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1306</SUB>> ]
+"6497" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1306</SUB>> ]
+"6511" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1306</SUB>> ]
+"6517" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1306</SUB>> ]
+"6520" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1306</SUB>> ]
+"6479" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1306</SUB>> ]
+"6480" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1306</SUB>> ]
+"6482" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1306</SUB>> ]
+"6464" [label = <(METHOD,GetCharField)<SUB>1305</SUB>> ]
+"6536" [label = <(METHOD_RETURN,jchar)<SUB>1305</SUB>> ]
+  "6469" -> "6474" 
+  "6469" -> "6489" 
+  "6503" -> "6511" 
+  "6505" -> "6528" 
+  "6523" -> "6534" 
+  "6530" -> "6536" 
+  "6488" -> "6495" 
+  "6488" -> "6503" 
+  "6506" -> "6517" 
+  "6513" -> "6505" 
+  "6525" -> "6523" 
+  "6531" -> "6530" 
+  "6489" -> "6488" 
+  "6493" -> "6500" 
+  "6500" -> "6536" 
+  "6507" -> "6506" 
+  "6514" -> "6513" 
+  "6526" -> "6525" 
+  "6532" -> "6531" 
+  "6473" -> "6480" 
+  "6473" -> "6489" 
+  "6494" -> "6493" 
+  "6509" -> "6507" 
+  "6515" -> "6520" 
+  "6518" -> "6514" 
+  "6528" -> "6526" 
+  "6534" -> "6532" 
+  "6474" -> "6473" 
+  "6478" -> "6485" 
+  "6485" -> "6536" 
+  "6495" -> "6497" 
+  "6497" -> "6494" 
+  "6511" -> "6509" 
+  "6517" -> "6515" 
+  "6520" -> "6518" 
+  "6479" -> "6478" 
+  "6480" -> "6482" 
+  "6482" -> "6479" 
+  "6464" -> "6469" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/117-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/117-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/117-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/117-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,73 +1,78 @@
-digraph "SetStaticObjectField" {  
-"6450" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1343</SUB>> ]
-"6468" [label = <(soa,soa(env))<SUB>1344</SUB>> ]
-"6470" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1345</SUB>> ]
-"6488" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1346</SUB>> ]
-"6495" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1347</SUB>> ]
-"6471" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1345</SUB>> ]
-"6478" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1345</SUB>> ]
-"6490" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1346</SUB>> ]
-"6496" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1347</SUB>> ]
-"6501" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1347</SUB>> ]
-"6472" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1345</SUB>> ]
-"6479" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1345</SUB>> ]
-"6491" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1346</SUB>> ]
-"6497" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1347</SUB>> ]
-"6502" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1347</SUB>> ]
-"6454" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1343</SUB>> ]
-"6474" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1345</SUB>> ]
-"6480" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1345</SUB>> ]
-"6483" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1345</SUB>> ]
-"6493" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1346</SUB>> ]
-"6499" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1347</SUB>> ]
-"6503" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1347</SUB>> ]
-"6455" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1343</SUB>> ]
-"6459" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1343</SUB>> ]
-"6466" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1343</SUB>> ]
-"6476" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1345</SUB>> ]
-"6482" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1345</SUB>> ]
-"6485" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1345</SUB>> ]
-"6504" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1347</SUB>> ]
-"6460" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1343</SUB>> ]
-"6506" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1347</SUB>> ]
-"6461" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1343</SUB>> ]
-"6463" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1343</SUB>> ]
-"6444" [label = <(METHOD,SetStaticObjectField)<SUB>1342</SUB>> ]
-"6508" [label = <(METHOD_RETURN,void)<SUB>1342</SUB>> ]
-  "6450" -> "6455" 
-  "6450" -> "6468" 
-  "6468" -> "6476" 
-  "6470" -> "6493" 
-  "6488" -> "6499" 
-  "6495" -> "6508" 
-  "6471" -> "6482" 
-  "6478" -> "6470" 
-  "6490" -> "6488" 
-  "6496" -> "6506" 
-  "6501" -> "6495" 
-  "6472" -> "6471" 
-  "6479" -> "6478" 
-  "6491" -> "6490" 
-  "6497" -> "6496" 
-  "6502" -> "6501" 
-  "6454" -> "6461" 
-  "6454" -> "6468" 
-  "6474" -> "6472" 
-  "6480" -> "6485" 
-  "6483" -> "6479" 
-  "6493" -> "6491" 
-  "6499" -> "6497" 
-  "6503" -> "6502" 
-  "6455" -> "6454" 
-  "6459" -> "6466" 
-  "6466" -> "6508" 
-  "6476" -> "6474" 
-  "6482" -> "6480" 
-  "6485" -> "6483" 
-  "6504" -> "6503" 
-  "6460" -> "6459" 
-  "6506" -> "6504" 
-  "6461" -> "6463" 
-  "6463" -> "6460" 
-  "6444" -> "6450" 
+digraph "GetShortField" {  
+"6543" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6577" [label = <(soa,ScopedObjectAccess)<SUB>1310</SUB>> ]
+"6579" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1310</SUB>> ]
+"6597" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1310</SUB>> ]
+"6604" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1310</SUB>> ]
+"6562" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1310</SUB>> ]
+"6580" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1310</SUB>> ]
+"6587" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1310</SUB>> ]
+"6599" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1310</SUB>> ]
+"6605" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1310</SUB>> ]
+"6563" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1310</SUB>> ]
+"6567" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1310</SUB>> ]
+"6574" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6581" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1310</SUB>> ]
+"6588" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1310</SUB>> ]
+"6600" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6606" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1310</SUB>> ]
+"6547" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1310</SUB>> ]
+"6568" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1310</SUB>> ]
+"6583" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6589" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1310</SUB>> ]
+"6592" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6602" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1310</SUB>> ]
+"6608" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1310</SUB>> ]
+"6548" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1310</SUB>> ]
+"6552" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1310</SUB>> ]
+"6559" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1310</SUB>> ]
+"6569" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1310</SUB>> ]
+"6571" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1310</SUB>> ]
+"6585" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1310</SUB>> ]
+"6591" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1310</SUB>> ]
+"6594" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1310</SUB>> ]
+"6553" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1310</SUB>> ]
+"6554" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1310</SUB>> ]
+"6556" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1310</SUB>> ]
+"6538" [label = <(METHOD,GetShortField)<SUB>1309</SUB>> ]
+"6610" [label = <(METHOD_RETURN,jshort)<SUB>1309</SUB>> ]
+  "6543" -> "6548" 
+  "6543" -> "6563" 
+  "6577" -> "6585" 
+  "6579" -> "6602" 
+  "6597" -> "6608" 
+  "6604" -> "6610" 
+  "6562" -> "6569" 
+  "6562" -> "6577" 
+  "6580" -> "6591" 
+  "6587" -> "6579" 
+  "6599" -> "6597" 
+  "6605" -> "6604" 
+  "6563" -> "6562" 
+  "6567" -> "6574" 
+  "6574" -> "6610" 
+  "6581" -> "6580" 
+  "6588" -> "6587" 
+  "6600" -> "6599" 
+  "6606" -> "6605" 
+  "6547" -> "6554" 
+  "6547" -> "6563" 
+  "6568" -> "6567" 
+  "6583" -> "6581" 
+  "6589" -> "6594" 
+  "6592" -> "6588" 
+  "6602" -> "6600" 
+  "6608" -> "6606" 
+  "6548" -> "6547" 
+  "6552" -> "6559" 
+  "6559" -> "6610" 
+  "6569" -> "6571" 
+  "6571" -> "6568" 
+  "6585" -> "6583" 
+  "6591" -> "6589" 
+  "6594" -> "6592" 
+  "6553" -> "6552" 
+  "6554" -> "6556" 
+  "6556" -> "6553" 
+  "6538" -> "6543" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/118-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/118-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/118-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/118-cfg.dot	2023-06-07 19:35:21.277385046 +0330
@@ -1,78 +1,78 @@
-digraph "GetBooleanField" {  
-"6515" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6549" [label = <(soa,ScopedObjectAccess)<SUB>1379</SUB>> ]
-"6551" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1379</SUB>> ]
-"6569" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1379</SUB>> ]
-"6576" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1379</SUB>> ]
-"6534" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1379</SUB>> ]
-"6552" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1379</SUB>> ]
-"6559" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1379</SUB>> ]
-"6571" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1379</SUB>> ]
-"6577" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1379</SUB>> ]
-"6535" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1379</SUB>> ]
-"6539" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1379</SUB>> ]
-"6546" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6553" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1379</SUB>> ]
-"6560" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1379</SUB>> ]
-"6572" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6578" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1379</SUB>> ]
-"6519" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1379</SUB>> ]
-"6540" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1379</SUB>> ]
-"6555" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6561" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1379</SUB>> ]
-"6564" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6574" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1379</SUB>> ]
-"6580" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1379</SUB>> ]
-"6520" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1379</SUB>> ]
-"6524" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1379</SUB>> ]
-"6531" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1379</SUB>> ]
-"6541" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1379</SUB>> ]
-"6543" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1379</SUB>> ]
-"6557" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1379</SUB>> ]
-"6563" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1379</SUB>> ]
-"6566" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1379</SUB>> ]
-"6525" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1379</SUB>> ]
-"6526" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1379</SUB>> ]
-"6528" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1379</SUB>> ]
-"6510" [label = <(METHOD,GetBooleanField)<SUB>1378</SUB>> ]
-"6582" [label = <(METHOD_RETURN,jboolean)<SUB>1378</SUB>> ]
-  "6515" -> "6520" 
-  "6515" -> "6535" 
-  "6549" -> "6557" 
-  "6551" -> "6574" 
-  "6569" -> "6580" 
-  "6576" -> "6582" 
-  "6534" -> "6541" 
-  "6534" -> "6549" 
-  "6552" -> "6563" 
-  "6559" -> "6551" 
-  "6571" -> "6569" 
-  "6577" -> "6576" 
-  "6535" -> "6534" 
-  "6539" -> "6546" 
-  "6546" -> "6582" 
-  "6553" -> "6552" 
-  "6560" -> "6559" 
-  "6572" -> "6571" 
-  "6578" -> "6577" 
-  "6519" -> "6526" 
-  "6519" -> "6535" 
-  "6540" -> "6539" 
-  "6555" -> "6553" 
-  "6561" -> "6566" 
-  "6564" -> "6560" 
-  "6574" -> "6572" 
-  "6580" -> "6578" 
-  "6520" -> "6519" 
-  "6524" -> "6531" 
-  "6531" -> "6582" 
-  "6541" -> "6543" 
-  "6543" -> "6540" 
-  "6557" -> "6555" 
-  "6563" -> "6561" 
-  "6566" -> "6564" 
-  "6525" -> "6524" 
-  "6526" -> "6528" 
-  "6528" -> "6525" 
-  "6510" -> "6515" 
+digraph "GetIntField" {  
+"6617" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6651" [label = <(soa,ScopedObjectAccess)<SUB>1314</SUB>> ]
+"6653" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1314</SUB>> ]
+"6671" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1314</SUB>> ]
+"6678" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1314</SUB>> ]
+"6636" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1314</SUB>> ]
+"6654" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1314</SUB>> ]
+"6661" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1314</SUB>> ]
+"6673" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1314</SUB>> ]
+"6679" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1314</SUB>> ]
+"6637" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1314</SUB>> ]
+"6641" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1314</SUB>> ]
+"6648" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6655" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1314</SUB>> ]
+"6662" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1314</SUB>> ]
+"6674" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6680" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1314</SUB>> ]
+"6621" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1314</SUB>> ]
+"6642" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1314</SUB>> ]
+"6657" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6663" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1314</SUB>> ]
+"6666" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6676" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1314</SUB>> ]
+"6682" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1314</SUB>> ]
+"6622" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1314</SUB>> ]
+"6626" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1314</SUB>> ]
+"6633" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1314</SUB>> ]
+"6643" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1314</SUB>> ]
+"6645" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1314</SUB>> ]
+"6659" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1314</SUB>> ]
+"6665" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1314</SUB>> ]
+"6668" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1314</SUB>> ]
+"6627" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1314</SUB>> ]
+"6628" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1314</SUB>> ]
+"6630" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1314</SUB>> ]
+"6612" [label = <(METHOD,GetIntField)<SUB>1313</SUB>> ]
+"6684" [label = <(METHOD_RETURN,jint)<SUB>1313</SUB>> ]
+  "6617" -> "6622" 
+  "6617" -> "6637" 
+  "6651" -> "6659" 
+  "6653" -> "6676" 
+  "6671" -> "6682" 
+  "6678" -> "6684" 
+  "6636" -> "6643" 
+  "6636" -> "6651" 
+  "6654" -> "6665" 
+  "6661" -> "6653" 
+  "6673" -> "6671" 
+  "6679" -> "6678" 
+  "6637" -> "6636" 
+  "6641" -> "6648" 
+  "6648" -> "6684" 
+  "6655" -> "6654" 
+  "6662" -> "6661" 
+  "6674" -> "6673" 
+  "6680" -> "6679" 
+  "6621" -> "6628" 
+  "6621" -> "6637" 
+  "6642" -> "6641" 
+  "6657" -> "6655" 
+  "6663" -> "6668" 
+  "6666" -> "6662" 
+  "6676" -> "6674" 
+  "6682" -> "6680" 
+  "6622" -> "6621" 
+  "6626" -> "6633" 
+  "6633" -> "6684" 
+  "6643" -> "6645" 
+  "6645" -> "6642" 
+  "6659" -> "6657" 
+  "6665" -> "6663" 
+  "6668" -> "6666" 
+  "6627" -> "6626" 
+  "6628" -> "6630" 
+  "6630" -> "6627" 
+  "6612" -> "6617" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/119-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/119-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/119-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/119-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,78 @@
-digraph "GetByteField" {  
-"6589" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6623" [label = <(soa,ScopedObjectAccess)<SUB>1383</SUB>> ]
-"6625" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1383</SUB>> ]
-"6643" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1383</SUB>> ]
-"6650" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1383</SUB>> ]
-"6608" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1383</SUB>> ]
-"6626" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1383</SUB>> ]
-"6633" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1383</SUB>> ]
-"6645" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1383</SUB>> ]
-"6651" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1383</SUB>> ]
-"6609" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1383</SUB>> ]
-"6613" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1383</SUB>> ]
-"6620" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6627" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1383</SUB>> ]
-"6634" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1383</SUB>> ]
-"6646" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6652" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1383</SUB>> ]
-"6593" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1383</SUB>> ]
-"6614" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1383</SUB>> ]
-"6629" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6635" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1383</SUB>> ]
-"6638" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6648" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1383</SUB>> ]
-"6654" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1383</SUB>> ]
-"6594" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1383</SUB>> ]
-"6598" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1383</SUB>> ]
-"6605" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1383</SUB>> ]
-"6615" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1383</SUB>> ]
-"6617" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1383</SUB>> ]
-"6631" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1383</SUB>> ]
-"6637" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1383</SUB>> ]
-"6640" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1383</SUB>> ]
-"6599" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1383</SUB>> ]
-"6600" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1383</SUB>> ]
-"6602" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1383</SUB>> ]
-"6584" [label = <(METHOD,GetByteField)<SUB>1382</SUB>> ]
-"6656" [label = <(METHOD_RETURN,jbyte)<SUB>1382</SUB>> ]
-  "6589" -> "6594" 
-  "6589" -> "6609" 
-  "6623" -> "6631" 
-  "6625" -> "6648" 
-  "6643" -> "6654" 
-  "6650" -> "6656" 
-  "6608" -> "6615" 
-  "6608" -> "6623" 
-  "6626" -> "6637" 
-  "6633" -> "6625" 
-  "6645" -> "6643" 
-  "6651" -> "6650" 
-  "6609" -> "6608" 
-  "6613" -> "6620" 
-  "6620" -> "6656" 
-  "6627" -> "6626" 
-  "6634" -> "6633" 
-  "6646" -> "6645" 
-  "6652" -> "6651" 
-  "6593" -> "6600" 
-  "6593" -> "6609" 
-  "6614" -> "6613" 
-  "6629" -> "6627" 
-  "6635" -> "6640" 
-  "6638" -> "6634" 
-  "6648" -> "6646" 
-  "6654" -> "6652" 
-  "6594" -> "6593" 
-  "6598" -> "6605" 
-  "6605" -> "6656" 
-  "6615" -> "6617" 
-  "6617" -> "6614" 
-  "6631" -> "6629" 
-  "6637" -> "6635" 
-  "6640" -> "6638" 
-  "6599" -> "6598" 
-  "6600" -> "6602" 
-  "6602" -> "6599" 
-  "6584" -> "6589" 
+digraph "GetLongField" {  
+"6691" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6725" [label = <(soa,ScopedObjectAccess)<SUB>1318</SUB>> ]
+"6727" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1318</SUB>> ]
+"6745" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1318</SUB>> ]
+"6752" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1318</SUB>> ]
+"6710" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1318</SUB>> ]
+"6728" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1318</SUB>> ]
+"6735" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1318</SUB>> ]
+"6747" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1318</SUB>> ]
+"6753" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1318</SUB>> ]
+"6711" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1318</SUB>> ]
+"6715" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1318</SUB>> ]
+"6722" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6729" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1318</SUB>> ]
+"6736" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1318</SUB>> ]
+"6748" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6754" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1318</SUB>> ]
+"6695" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1318</SUB>> ]
+"6716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1318</SUB>> ]
+"6731" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6737" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1318</SUB>> ]
+"6740" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6750" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1318</SUB>> ]
+"6756" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1318</SUB>> ]
+"6696" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1318</SUB>> ]
+"6700" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1318</SUB>> ]
+"6707" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1318</SUB>> ]
+"6717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1318</SUB>> ]
+"6719" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1318</SUB>> ]
+"6733" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1318</SUB>> ]
+"6739" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1318</SUB>> ]
+"6742" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1318</SUB>> ]
+"6701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1318</SUB>> ]
+"6702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1318</SUB>> ]
+"6704" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1318</SUB>> ]
+"6686" [label = <(METHOD,GetLongField)<SUB>1317</SUB>> ]
+"6758" [label = <(METHOD_RETURN,jlong)<SUB>1317</SUB>> ]
+  "6691" -> "6696" 
+  "6691" -> "6711" 
+  "6725" -> "6733" 
+  "6727" -> "6750" 
+  "6745" -> "6756" 
+  "6752" -> "6758" 
+  "6710" -> "6717" 
+  "6710" -> "6725" 
+  "6728" -> "6739" 
+  "6735" -> "6727" 
+  "6747" -> "6745" 
+  "6753" -> "6752" 
+  "6711" -> "6710" 
+  "6715" -> "6722" 
+  "6722" -> "6758" 
+  "6729" -> "6728" 
+  "6736" -> "6735" 
+  "6748" -> "6747" 
+  "6754" -> "6753" 
+  "6695" -> "6702" 
+  "6695" -> "6711" 
+  "6716" -> "6715" 
+  "6731" -> "6729" 
+  "6737" -> "6742" 
+  "6740" -> "6736" 
+  "6750" -> "6748" 
+  "6756" -> "6754" 
+  "6696" -> "6695" 
+  "6700" -> "6707" 
+  "6707" -> "6758" 
+  "6717" -> "6719" 
+  "6719" -> "6716" 
+  "6733" -> "6731" 
+  "6739" -> "6737" 
+  "6742" -> "6740" 
+  "6701" -> "6700" 
+  "6702" -> "6704" 
+  "6704" -> "6701" 
+  "6686" -> "6691" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/12-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/12-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/12-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/12-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,5 +1,15 @@
-digraph "FindFieldID" {  
-"388" [label = <(METHOD,FindFieldID)<SUB>274</SUB>> ]
-"395" [label = <(METHOD_RETURN,jfieldID)<SUB>274</SUB>> ]
-  "388" -> "395" 
+digraph "JavaVmExtFromEnv" {  
+"286" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm;,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm;)<SUB>301</SUB>> ]
+"287" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>301</SUB>> ]
+"288" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>301</SUB>> ]
+"291" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>301</SUB>> ]
+"289" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>301</SUB>> ]
+"283" [label = <(METHOD,JavaVmExtFromEnv)<SUB>300</SUB>> ]
+"292" [label = <(METHOD_RETURN,JavaVMExt)<SUB>300</SUB>> ]
+  "286" -> "292" 
+  "287" -> "286" 
+  "288" -> "291" 
+  "291" -> "287" 
+  "289" -> "288" 
+  "283" -> "289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/120-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/120-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/120-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/120-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,78 @@
-digraph "GetCharField" {  
-"6663" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6697" [label = <(soa,ScopedObjectAccess)<SUB>1387</SUB>> ]
-"6699" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1387</SUB>> ]
-"6717" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1387</SUB>> ]
-"6724" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1387</SUB>> ]
-"6682" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1387</SUB>> ]
-"6700" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1387</SUB>> ]
-"6707" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1387</SUB>> ]
-"6719" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1387</SUB>> ]
-"6725" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1387</SUB>> ]
-"6683" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1387</SUB>> ]
-"6687" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1387</SUB>> ]
-"6694" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6701" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1387</SUB>> ]
-"6708" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1387</SUB>> ]
-"6720" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6726" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1387</SUB>> ]
-"6667" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1387</SUB>> ]
-"6688" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1387</SUB>> ]
-"6703" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6709" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1387</SUB>> ]
-"6712" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6722" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1387</SUB>> ]
-"6728" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1387</SUB>> ]
-"6668" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1387</SUB>> ]
-"6672" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1387</SUB>> ]
-"6679" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1387</SUB>> ]
-"6689" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1387</SUB>> ]
-"6691" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1387</SUB>> ]
-"6705" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1387</SUB>> ]
-"6711" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1387</SUB>> ]
-"6714" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1387</SUB>> ]
-"6673" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1387</SUB>> ]
-"6674" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1387</SUB>> ]
-"6676" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1387</SUB>> ]
-"6658" [label = <(METHOD,GetCharField)<SUB>1386</SUB>> ]
-"6730" [label = <(METHOD_RETURN,jchar)<SUB>1386</SUB>> ]
-  "6663" -> "6668" 
-  "6663" -> "6683" 
-  "6697" -> "6705" 
-  "6699" -> "6722" 
-  "6717" -> "6728" 
-  "6724" -> "6730" 
-  "6682" -> "6689" 
-  "6682" -> "6697" 
-  "6700" -> "6711" 
-  "6707" -> "6699" 
-  "6719" -> "6717" 
-  "6725" -> "6724" 
-  "6683" -> "6682" 
-  "6687" -> "6694" 
-  "6694" -> "6730" 
-  "6701" -> "6700" 
-  "6708" -> "6707" 
-  "6720" -> "6719" 
-  "6726" -> "6725" 
-  "6667" -> "6674" 
-  "6667" -> "6683" 
-  "6688" -> "6687" 
-  "6703" -> "6701" 
-  "6709" -> "6714" 
-  "6712" -> "6708" 
-  "6722" -> "6720" 
-  "6728" -> "6726" 
-  "6668" -> "6667" 
-  "6672" -> "6679" 
-  "6679" -> "6730" 
-  "6689" -> "6691" 
-  "6691" -> "6688" 
-  "6705" -> "6703" 
-  "6711" -> "6709" 
-  "6714" -> "6712" 
-  "6673" -> "6672" 
-  "6674" -> "6676" 
-  "6676" -> "6673" 
-  "6658" -> "6663" 
+digraph "GetFloatField" {  
+"6765" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6799" [label = <(soa,ScopedObjectAccess)<SUB>1322</SUB>> ]
+"6801" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1322</SUB>> ]
+"6819" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1322</SUB>> ]
+"6826" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1322</SUB>> ]
+"6784" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1322</SUB>> ]
+"6802" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1322</SUB>> ]
+"6809" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1322</SUB>> ]
+"6821" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1322</SUB>> ]
+"6827" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1322</SUB>> ]
+"6785" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1322</SUB>> ]
+"6789" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1322</SUB>> ]
+"6796" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6803" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1322</SUB>> ]
+"6810" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1322</SUB>> ]
+"6822" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6828" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1322</SUB>> ]
+"6769" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1322</SUB>> ]
+"6790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1322</SUB>> ]
+"6805" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6811" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1322</SUB>> ]
+"6814" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6824" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1322</SUB>> ]
+"6830" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1322</SUB>> ]
+"6770" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1322</SUB>> ]
+"6774" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1322</SUB>> ]
+"6781" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1322</SUB>> ]
+"6791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1322</SUB>> ]
+"6793" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1322</SUB>> ]
+"6807" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1322</SUB>> ]
+"6813" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1322</SUB>> ]
+"6816" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1322</SUB>> ]
+"6775" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1322</SUB>> ]
+"6776" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1322</SUB>> ]
+"6778" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1322</SUB>> ]
+"6760" [label = <(METHOD,GetFloatField)<SUB>1321</SUB>> ]
+"6832" [label = <(METHOD_RETURN,jfloat)<SUB>1321</SUB>> ]
+  "6765" -> "6770" 
+  "6765" -> "6785" 
+  "6799" -> "6807" 
+  "6801" -> "6824" 
+  "6819" -> "6830" 
+  "6826" -> "6832" 
+  "6784" -> "6791" 
+  "6784" -> "6799" 
+  "6802" -> "6813" 
+  "6809" -> "6801" 
+  "6821" -> "6819" 
+  "6827" -> "6826" 
+  "6785" -> "6784" 
+  "6789" -> "6796" 
+  "6796" -> "6832" 
+  "6803" -> "6802" 
+  "6810" -> "6809" 
+  "6822" -> "6821" 
+  "6828" -> "6827" 
+  "6769" -> "6776" 
+  "6769" -> "6785" 
+  "6790" -> "6789" 
+  "6805" -> "6803" 
+  "6811" -> "6816" 
+  "6814" -> "6810" 
+  "6824" -> "6822" 
+  "6830" -> "6828" 
+  "6770" -> "6769" 
+  "6774" -> "6781" 
+  "6781" -> "6832" 
+  "6791" -> "6793" 
+  "6793" -> "6790" 
+  "6807" -> "6805" 
+  "6813" -> "6811" 
+  "6816" -> "6814" 
+  "6775" -> "6774" 
+  "6776" -> "6778" 
+  "6778" -> "6775" 
+  "6760" -> "6765" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/121-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/121-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/121-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/121-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,78 @@
-digraph "GetShortField" {  
-"6737" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6771" [label = <(soa,ScopedObjectAccess)<SUB>1391</SUB>> ]
-"6773" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1391</SUB>> ]
-"6791" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1391</SUB>> ]
-"6798" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1391</SUB>> ]
-"6756" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1391</SUB>> ]
-"6774" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1391</SUB>> ]
-"6781" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1391</SUB>> ]
-"6793" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1391</SUB>> ]
-"6799" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1391</SUB>> ]
-"6757" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1391</SUB>> ]
-"6761" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1391</SUB>> ]
-"6768" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6775" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1391</SUB>> ]
-"6782" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1391</SUB>> ]
-"6794" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6800" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1391</SUB>> ]
-"6741" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1391</SUB>> ]
-"6762" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1391</SUB>> ]
-"6777" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6783" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1391</SUB>> ]
-"6786" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6796" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1391</SUB>> ]
-"6802" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1391</SUB>> ]
-"6742" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1391</SUB>> ]
-"6746" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1391</SUB>> ]
-"6753" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1391</SUB>> ]
-"6763" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1391</SUB>> ]
-"6765" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1391</SUB>> ]
-"6779" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1391</SUB>> ]
-"6785" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1391</SUB>> ]
-"6788" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1391</SUB>> ]
-"6747" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1391</SUB>> ]
-"6748" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1391</SUB>> ]
-"6750" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1391</SUB>> ]
-"6732" [label = <(METHOD,GetShortField)<SUB>1390</SUB>> ]
-"6804" [label = <(METHOD_RETURN,jshort)<SUB>1390</SUB>> ]
-  "6737" -> "6742" 
-  "6737" -> "6757" 
-  "6771" -> "6779" 
-  "6773" -> "6796" 
-  "6791" -> "6802" 
-  "6798" -> "6804" 
-  "6756" -> "6763" 
-  "6756" -> "6771" 
-  "6774" -> "6785" 
-  "6781" -> "6773" 
-  "6793" -> "6791" 
-  "6799" -> "6798" 
-  "6757" -> "6756" 
-  "6761" -> "6768" 
-  "6768" -> "6804" 
-  "6775" -> "6774" 
-  "6782" -> "6781" 
-  "6794" -> "6793" 
-  "6800" -> "6799" 
-  "6741" -> "6748" 
-  "6741" -> "6757" 
-  "6762" -> "6761" 
-  "6777" -> "6775" 
-  "6783" -> "6788" 
-  "6786" -> "6782" 
-  "6796" -> "6794" 
-  "6802" -> "6800" 
-  "6742" -> "6741" 
-  "6746" -> "6753" 
-  "6753" -> "6804" 
-  "6763" -> "6765" 
-  "6765" -> "6762" 
-  "6779" -> "6777" 
-  "6785" -> "6783" 
-  "6788" -> "6786" 
-  "6747" -> "6746" 
-  "6748" -> "6750" 
-  "6750" -> "6747" 
-  "6732" -> "6737" 
+digraph "GetDoubleField" {  
+"6839" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6873" [label = <(soa,ScopedObjectAccess)<SUB>1326</SUB>> ]
+"6875" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1326</SUB>> ]
+"6893" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1326</SUB>> ]
+"6900" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1326</SUB>> ]
+"6858" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1326</SUB>> ]
+"6876" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1326</SUB>> ]
+"6883" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1326</SUB>> ]
+"6895" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1326</SUB>> ]
+"6901" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1326</SUB>> ]
+"6859" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1326</SUB>> ]
+"6863" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1326</SUB>> ]
+"6870" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6877" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1326</SUB>> ]
+"6884" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1326</SUB>> ]
+"6896" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6902" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1326</SUB>> ]
+"6843" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1326</SUB>> ]
+"6864" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1326</SUB>> ]
+"6879" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6885" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1326</SUB>> ]
+"6888" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6898" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1326</SUB>> ]
+"6904" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1326</SUB>> ]
+"6844" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1326</SUB>> ]
+"6848" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1326</SUB>> ]
+"6855" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1326</SUB>> ]
+"6865" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1326</SUB>> ]
+"6867" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1326</SUB>> ]
+"6881" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1326</SUB>> ]
+"6887" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1326</SUB>> ]
+"6890" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1326</SUB>> ]
+"6849" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1326</SUB>> ]
+"6850" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1326</SUB>> ]
+"6852" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1326</SUB>> ]
+"6834" [label = <(METHOD,GetDoubleField)<SUB>1325</SUB>> ]
+"6906" [label = <(METHOD_RETURN,jdouble)<SUB>1325</SUB>> ]
+  "6839" -> "6844" 
+  "6839" -> "6859" 
+  "6873" -> "6881" 
+  "6875" -> "6898" 
+  "6893" -> "6904" 
+  "6900" -> "6906" 
+  "6858" -> "6865" 
+  "6858" -> "6873" 
+  "6876" -> "6887" 
+  "6883" -> "6875" 
+  "6895" -> "6893" 
+  "6901" -> "6900" 
+  "6859" -> "6858" 
+  "6863" -> "6870" 
+  "6870" -> "6906" 
+  "6877" -> "6876" 
+  "6884" -> "6883" 
+  "6896" -> "6895" 
+  "6902" -> "6901" 
+  "6843" -> "6850" 
+  "6843" -> "6859" 
+  "6864" -> "6863" 
+  "6879" -> "6877" 
+  "6885" -> "6890" 
+  "6888" -> "6884" 
+  "6898" -> "6896" 
+  "6904" -> "6902" 
+  "6844" -> "6843" 
+  "6848" -> "6855" 
+  "6855" -> "6906" 
+  "6865" -> "6867" 
+  "6867" -> "6864" 
+  "6881" -> "6879" 
+  "6887" -> "6885" 
+  "6890" -> "6888" 
+  "6849" -> "6848" 
+  "6850" -> "6852" 
+  "6852" -> "6849" 
+  "6834" -> "6839" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/122-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/122-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/122-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/122-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,47 @@
-digraph "GetIntField" {  
-"6811" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6845" [label = <(soa,ScopedObjectAccess)<SUB>1395</SUB>> ]
-"6847" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1395</SUB>> ]
-"6865" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1395</SUB>> ]
-"6872" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1395</SUB>> ]
-"6830" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1395</SUB>> ]
-"6848" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1395</SUB>> ]
-"6855" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1395</SUB>> ]
-"6867" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1395</SUB>> ]
-"6873" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1395</SUB>> ]
-"6831" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1395</SUB>> ]
-"6835" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1395</SUB>> ]
-"6842" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6849" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1395</SUB>> ]
-"6856" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1395</SUB>> ]
-"6868" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6874" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1395</SUB>> ]
-"6815" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1395</SUB>> ]
-"6836" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1395</SUB>> ]
-"6851" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6857" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1395</SUB>> ]
-"6860" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6870" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1395</SUB>> ]
-"6876" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1395</SUB>> ]
-"6816" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1395</SUB>> ]
-"6820" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1395</SUB>> ]
-"6827" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1395</SUB>> ]
-"6837" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1395</SUB>> ]
-"6839" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1395</SUB>> ]
-"6853" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1395</SUB>> ]
-"6859" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1395</SUB>> ]
-"6862" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1395</SUB>> ]
-"6821" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1395</SUB>> ]
-"6822" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1395</SUB>> ]
-"6824" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1395</SUB>> ]
-"6806" [label = <(METHOD,GetIntField)<SUB>1394</SUB>> ]
-"6878" [label = <(METHOD_RETURN,jint)<SUB>1394</SUB>> ]
-  "6811" -> "6816" 
-  "6811" -> "6831" 
-  "6845" -> "6853" 
-  "6847" -> "6870" 
-  "6865" -> "6876" 
-  "6872" -> "6878" 
-  "6830" -> "6837" 
-  "6830" -> "6845" 
-  "6848" -> "6859" 
-  "6855" -> "6847" 
-  "6867" -> "6865" 
-  "6873" -> "6872" 
-  "6831" -> "6830" 
-  "6835" -> "6842" 
-  "6842" -> "6878" 
-  "6849" -> "6848" 
-  "6856" -> "6855" 
-  "6868" -> "6867" 
-  "6874" -> "6873" 
-  "6815" -> "6822" 
-  "6815" -> "6831" 
-  "6836" -> "6835" 
-  "6851" -> "6849" 
-  "6857" -> "6862" 
-  "6860" -> "6856" 
-  "6870" -> "6868" 
-  "6876" -> "6874" 
-  "6816" -> "6815" 
-  "6820" -> "6827" 
-  "6827" -> "6878" 
-  "6837" -> "6839" 
-  "6839" -> "6836" 
-  "6853" -> "6851" 
-  "6859" -> "6857" 
-  "6862" -> "6860" 
-  "6821" -> "6820" 
-  "6822" -> "6824" 
-  "6824" -> "6821" 
-  "6806" -> "6811" 
+digraph "GetStaticBooleanField" {  
+"6913" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1330</SUB>> ]
+"6931" [label = <(soa,ScopedObjectAccess)<SUB>1330</SUB>> ]
+"6934" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1330</SUB>> ]
+"6941" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1330</SUB>> ]
+"6936" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1330</SUB>> ]
+"6942" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1330</SUB>> ]
+"6937" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1330</SUB>> ]
+"6943" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1330</SUB>> ]
+"6946" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1330</SUB>> ]
+"6916" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1330</SUB>> ]
+"6939" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1330</SUB>> ]
+"6945" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1330</SUB>> ]
+"6947" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1330</SUB>> ]
+"6917" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1330</SUB>> ]
+"6921" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1330</SUB>> ]
+"6928" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1330</SUB>> ]
+"6949" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1330</SUB>> ]
+"6922" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1330</SUB>> ]
+"6923" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1330</SUB>> ]
+"6925" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1330</SUB>> ]
+"6908" [label = <(METHOD,GetStaticBooleanField)<SUB>1329</SUB>> ]
+"6950" [label = <(METHOD_RETURN,jboolean)<SUB>1329</SUB>> ]
+  "6913" -> "6917" 
+  "6913" -> "6931" 
+  "6931" -> "6939" 
+  "6934" -> "6945" 
+  "6941" -> "6950" 
+  "6936" -> "6934" 
+  "6942" -> "6941" 
+  "6937" -> "6936" 
+  "6943" -> "6949" 
+  "6946" -> "6942" 
+  "6916" -> "6923" 
+  "6916" -> "6931" 
+  "6939" -> "6937" 
+  "6945" -> "6943" 
+  "6947" -> "6946" 
+  "6917" -> "6916" 
+  "6921" -> "6928" 
+  "6928" -> "6950" 
+  "6949" -> "6947" 
+  "6922" -> "6921" 
+  "6923" -> "6925" 
+  "6925" -> "6922" 
+  "6908" -> "6913" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/123-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/123-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/123-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/123-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,47 @@
-digraph "GetLongField" {  
-"6885" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6919" [label = <(soa,ScopedObjectAccess)<SUB>1399</SUB>> ]
-"6921" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1399</SUB>> ]
-"6939" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1399</SUB>> ]
-"6946" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1399</SUB>> ]
-"6904" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1399</SUB>> ]
-"6922" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1399</SUB>> ]
-"6929" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1399</SUB>> ]
-"6941" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1399</SUB>> ]
-"6947" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1399</SUB>> ]
-"6905" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1399</SUB>> ]
-"6909" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1399</SUB>> ]
-"6916" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6923" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1399</SUB>> ]
-"6930" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1399</SUB>> ]
-"6942" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6948" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1399</SUB>> ]
-"6889" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1399</SUB>> ]
-"6910" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1399</SUB>> ]
-"6925" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6931" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1399</SUB>> ]
-"6934" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6944" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1399</SUB>> ]
-"6950" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1399</SUB>> ]
-"6890" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1399</SUB>> ]
-"6894" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1399</SUB>> ]
-"6901" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1399</SUB>> ]
-"6911" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1399</SUB>> ]
-"6913" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1399</SUB>> ]
-"6927" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1399</SUB>> ]
-"6933" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1399</SUB>> ]
-"6936" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1399</SUB>> ]
-"6895" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1399</SUB>> ]
-"6896" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1399</SUB>> ]
-"6898" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1399</SUB>> ]
-"6880" [label = <(METHOD,GetLongField)<SUB>1398</SUB>> ]
-"6952" [label = <(METHOD_RETURN,jlong)<SUB>1398</SUB>> ]
-  "6885" -> "6890" 
-  "6885" -> "6905" 
-  "6919" -> "6927" 
-  "6921" -> "6944" 
-  "6939" -> "6950" 
-  "6946" -> "6952" 
-  "6904" -> "6911" 
-  "6904" -> "6919" 
-  "6922" -> "6933" 
-  "6929" -> "6921" 
-  "6941" -> "6939" 
-  "6947" -> "6946" 
-  "6905" -> "6904" 
-  "6909" -> "6916" 
-  "6916" -> "6952" 
-  "6923" -> "6922" 
-  "6930" -> "6929" 
-  "6942" -> "6941" 
-  "6948" -> "6947" 
-  "6889" -> "6896" 
-  "6889" -> "6905" 
-  "6910" -> "6909" 
-  "6925" -> "6923" 
-  "6931" -> "6936" 
-  "6934" -> "6930" 
-  "6944" -> "6942" 
-  "6950" -> "6948" 
-  "6890" -> "6889" 
-  "6894" -> "6901" 
-  "6901" -> "6952" 
-  "6911" -> "6913" 
-  "6913" -> "6910" 
-  "6927" -> "6925" 
-  "6933" -> "6931" 
-  "6936" -> "6934" 
-  "6895" -> "6894" 
-  "6896" -> "6898" 
-  "6898" -> "6895" 
-  "6880" -> "6885" 
+digraph "GetStaticByteField" {  
+"6957" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1334</SUB>> ]
+"6975" [label = <(soa,ScopedObjectAccess)<SUB>1334</SUB>> ]
+"6978" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1334</SUB>> ]
+"6985" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1334</SUB>> ]
+"6980" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1334</SUB>> ]
+"6986" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1334</SUB>> ]
+"6981" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1334</SUB>> ]
+"6987" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1334</SUB>> ]
+"6990" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1334</SUB>> ]
+"6960" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1334</SUB>> ]
+"6983" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1334</SUB>> ]
+"6989" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1334</SUB>> ]
+"6991" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1334</SUB>> ]
+"6961" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1334</SUB>> ]
+"6965" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1334</SUB>> ]
+"6972" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1334</SUB>> ]
+"6993" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1334</SUB>> ]
+"6966" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1334</SUB>> ]
+"6967" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1334</SUB>> ]
+"6969" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1334</SUB>> ]
+"6952" [label = <(METHOD,GetStaticByteField)<SUB>1333</SUB>> ]
+"6994" [label = <(METHOD_RETURN,jbyte)<SUB>1333</SUB>> ]
+  "6957" -> "6961" 
+  "6957" -> "6975" 
+  "6975" -> "6983" 
+  "6978" -> "6989" 
+  "6985" -> "6994" 
+  "6980" -> "6978" 
+  "6986" -> "6985" 
+  "6981" -> "6980" 
+  "6987" -> "6993" 
+  "6990" -> "6986" 
+  "6960" -> "6967" 
+  "6960" -> "6975" 
+  "6983" -> "6981" 
+  "6989" -> "6987" 
+  "6991" -> "6990" 
+  "6961" -> "6960" 
+  "6965" -> "6972" 
+  "6972" -> "6994" 
+  "6993" -> "6991" 
+  "6966" -> "6965" 
+  "6967" -> "6969" 
+  "6969" -> "6966" 
+  "6952" -> "6957" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/124-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/124-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/124-cfg.dot	2023-06-07 19:35:14.747385848 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/124-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,47 @@
-digraph "GetFloatField" {  
-"6959" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"6993" [label = <(soa,ScopedObjectAccess)<SUB>1403</SUB>> ]
-"6995" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1403</SUB>> ]
-"7013" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1403</SUB>> ]
-"7020" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1403</SUB>> ]
-"6978" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1403</SUB>> ]
-"6996" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1403</SUB>> ]
-"7003" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1403</SUB>> ]
-"7015" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1403</SUB>> ]
-"7021" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1403</SUB>> ]
-"6979" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1403</SUB>> ]
-"6983" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1403</SUB>> ]
-"6990" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"6997" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1403</SUB>> ]
-"7004" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1403</SUB>> ]
-"7016" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"7022" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1403</SUB>> ]
-"6963" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1403</SUB>> ]
-"6984" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1403</SUB>> ]
-"6999" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"7005" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1403</SUB>> ]
-"7008" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"7018" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1403</SUB>> ]
-"7024" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1403</SUB>> ]
-"6964" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1403</SUB>> ]
-"6968" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1403</SUB>> ]
-"6975" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1403</SUB>> ]
-"6985" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1403</SUB>> ]
-"6987" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1403</SUB>> ]
-"7001" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1403</SUB>> ]
-"7007" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1403</SUB>> ]
-"7010" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1403</SUB>> ]
-"6969" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1403</SUB>> ]
-"6970" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1403</SUB>> ]
-"6972" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1403</SUB>> ]
-"6954" [label = <(METHOD,GetFloatField)<SUB>1402</SUB>> ]
-"7026" [label = <(METHOD_RETURN,jfloat)<SUB>1402</SUB>> ]
-  "6959" -> "6964" 
-  "6959" -> "6979" 
-  "6993" -> "7001" 
-  "6995" -> "7018" 
-  "7013" -> "7024" 
-  "7020" -> "7026" 
-  "6978" -> "6985" 
-  "6978" -> "6993" 
-  "6996" -> "7007" 
-  "7003" -> "6995" 
-  "7015" -> "7013" 
-  "7021" -> "7020" 
-  "6979" -> "6978" 
-  "6983" -> "6990" 
-  "6990" -> "7026" 
-  "6997" -> "6996" 
-  "7004" -> "7003" 
-  "7016" -> "7015" 
-  "7022" -> "7021" 
-  "6963" -> "6970" 
-  "6963" -> "6979" 
-  "6984" -> "6983" 
-  "6999" -> "6997" 
-  "7005" -> "7010" 
-  "7008" -> "7004" 
-  "7018" -> "7016" 
+digraph "GetStaticCharField" {  
+"7001" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1338</SUB>> ]
+"7019" [label = <(soa,ScopedObjectAccess)<SUB>1338</SUB>> ]
+"7022" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1338</SUB>> ]
+"7029" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1338</SUB>> ]
+"7024" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1338</SUB>> ]
+"7030" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1338</SUB>> ]
+"7025" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1338</SUB>> ]
+"7031" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1338</SUB>> ]
+"7034" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1338</SUB>> ]
+"7004" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1338</SUB>> ]
+"7027" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1338</SUB>> ]
+"7033" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1338</SUB>> ]
+"7035" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1338</SUB>> ]
+"7005" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1338</SUB>> ]
+"7009" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1338</SUB>> ]
+"7016" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1338</SUB>> ]
+"7037" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1338</SUB>> ]
+"7010" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1338</SUB>> ]
+"7011" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1338</SUB>> ]
+"7013" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1338</SUB>> ]
+"6996" [label = <(METHOD,GetStaticCharField)<SUB>1337</SUB>> ]
+"7038" [label = <(METHOD_RETURN,jchar)<SUB>1337</SUB>> ]
+  "7001" -> "7005" 
+  "7001" -> "7019" 
+  "7019" -> "7027" 
+  "7022" -> "7033" 
+  "7029" -> "7038" 
   "7024" -> "7022" 
-  "6964" -> "6963" 
-  "6968" -> "6975" 
-  "6975" -> "7026" 
-  "6985" -> "6987" 
-  "6987" -> "6984" 
-  "7001" -> "6999" 
-  "7007" -> "7005" 
-  "7010" -> "7008" 
-  "6969" -> "6968" 
-  "6970" -> "6972" 
-  "6972" -> "6969" 
-  "6954" -> "6959" 
+  "7030" -> "7029" 
+  "7025" -> "7024" 
+  "7031" -> "7037" 
+  "7034" -> "7030" 
+  "7004" -> "7011" 
+  "7004" -> "7019" 
+  "7027" -> "7025" 
+  "7033" -> "7031" 
+  "7035" -> "7034" 
+  "7005" -> "7004" 
+  "7009" -> "7016" 
+  "7016" -> "7038" 
+  "7037" -> "7035" 
+  "7010" -> "7009" 
+  "7011" -> "7013" 
+  "7013" -> "7010" 
+  "6996" -> "7001" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/125-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/125-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/125-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/125-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,78 +1,47 @@
-digraph "GetDoubleField" {  
-"7033" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7067" [label = <(soa,ScopedObjectAccess)<SUB>1407</SUB>> ]
-"7069" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1407</SUB>> ]
-"7087" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1407</SUB>> ]
-"7094" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1407</SUB>> ]
-"7052" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1407</SUB>> ]
-"7070" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1407</SUB>> ]
-"7077" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1407</SUB>> ]
-"7089" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1407</SUB>> ]
-"7095" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1407</SUB>> ]
-"7053" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1407</SUB>> ]
-"7057" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1407</SUB>> ]
-"7064" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7071" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1407</SUB>> ]
-"7078" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1407</SUB>> ]
-"7090" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7096" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1407</SUB>> ]
-"7037" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1407</SUB>> ]
-"7058" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1407</SUB>> ]
-"7073" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7079" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1407</SUB>> ]
-"7082" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7092" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1407</SUB>> ]
-"7098" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1407</SUB>> ]
-"7038" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1407</SUB>> ]
-"7042" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1407</SUB>> ]
-"7049" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1407</SUB>> ]
-"7059" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1407</SUB>> ]
-"7061" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1407</SUB>> ]
-"7075" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1407</SUB>> ]
-"7081" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1407</SUB>> ]
-"7084" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1407</SUB>> ]
-"7043" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1407</SUB>> ]
-"7044" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1407</SUB>> ]
-"7046" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1407</SUB>> ]
-"7028" [label = <(METHOD,GetDoubleField)<SUB>1406</SUB>> ]
-"7100" [label = <(METHOD_RETURN,jdouble)<SUB>1406</SUB>> ]
-  "7033" -> "7038" 
-  "7033" -> "7053" 
-  "7067" -> "7075" 
-  "7069" -> "7092" 
-  "7087" -> "7098" 
-  "7094" -> "7100" 
-  "7052" -> "7059" 
-  "7052" -> "7067" 
-  "7070" -> "7081" 
-  "7077" -> "7069" 
-  "7089" -> "7087" 
-  "7095" -> "7094" 
-  "7053" -> "7052" 
-  "7057" -> "7064" 
-  "7064" -> "7100" 
-  "7071" -> "7070" 
-  "7078" -> "7077" 
-  "7090" -> "7089" 
-  "7096" -> "7095" 
-  "7037" -> "7044" 
-  "7037" -> "7053" 
-  "7058" -> "7057" 
-  "7073" -> "7071" 
-  "7079" -> "7084" 
-  "7082" -> "7078" 
-  "7092" -> "7090" 
-  "7098" -> "7096" 
-  "7038" -> "7037" 
-  "7042" -> "7049" 
-  "7049" -> "7100" 
-  "7059" -> "7061" 
-  "7061" -> "7058" 
-  "7075" -> "7073" 
+digraph "GetStaticShortField" {  
+"7045" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1342</SUB>> ]
+"7063" [label = <(soa,ScopedObjectAccess)<SUB>1342</SUB>> ]
+"7066" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1342</SUB>> ]
+"7073" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1342</SUB>> ]
+"7068" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1342</SUB>> ]
+"7074" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1342</SUB>> ]
+"7069" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1342</SUB>> ]
+"7075" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1342</SUB>> ]
+"7078" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1342</SUB>> ]
+"7048" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1342</SUB>> ]
+"7071" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1342</SUB>> ]
+"7077" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1342</SUB>> ]
+"7079" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1342</SUB>> ]
+"7049" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1342</SUB>> ]
+"7053" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1342</SUB>> ]
+"7060" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1342</SUB>> ]
+"7081" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1342</SUB>> ]
+"7054" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1342</SUB>> ]
+"7055" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1342</SUB>> ]
+"7057" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1342</SUB>> ]
+"7040" [label = <(METHOD,GetStaticShortField)<SUB>1341</SUB>> ]
+"7082" [label = <(METHOD_RETURN,jshort)<SUB>1341</SUB>> ]
+  "7045" -> "7049" 
+  "7045" -> "7063" 
+  "7063" -> "7071" 
+  "7066" -> "7077" 
+  "7073" -> "7082" 
+  "7068" -> "7066" 
+  "7074" -> "7073" 
+  "7069" -> "7068" 
+  "7075" -> "7081" 
+  "7078" -> "7074" 
+  "7048" -> "7055" 
+  "7048" -> "7063" 
+  "7071" -> "7069" 
+  "7077" -> "7075" 
+  "7079" -> "7078" 
+  "7049" -> "7048" 
+  "7053" -> "7060" 
+  "7060" -> "7082" 
   "7081" -> "7079" 
-  "7084" -> "7082" 
-  "7043" -> "7042" 
-  "7044" -> "7046" 
-  "7046" -> "7043" 
-  "7028" -> "7033" 
+  "7054" -> "7053" 
+  "7055" -> "7057" 
+  "7057" -> "7054" 
+  "7040" -> "7045" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/126-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/126-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/126-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/126-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,47 @@
-digraph "GetStaticBooleanField" {  
-"7107" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1411</SUB>> ]
-"7125" [label = <(soa,ScopedObjectAccess)<SUB>1411</SUB>> ]
-"7128" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1411</SUB>> ]
-"7135" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1411</SUB>> ]
-"7130" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1411</SUB>> ]
-"7136" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1411</SUB>> ]
-"7131" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1411</SUB>> ]
-"7137" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1411</SUB>> ]
-"7140" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1411</SUB>> ]
-"7110" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1411</SUB>> ]
-"7133" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1411</SUB>> ]
-"7139" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1411</SUB>> ]
-"7141" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1411</SUB>> ]
-"7111" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1411</SUB>> ]
-"7115" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1411</SUB>> ]
-"7122" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1411</SUB>> ]
-"7143" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1411</SUB>> ]
-"7116" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1411</SUB>> ]
-"7117" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1411</SUB>> ]
-"7119" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1411</SUB>> ]
-"7102" [label = <(METHOD,GetStaticBooleanField)<SUB>1410</SUB>> ]
-"7144" [label = <(METHOD_RETURN,jboolean)<SUB>1410</SUB>> ]
-  "7107" -> "7111" 
-  "7107" -> "7125" 
-  "7125" -> "7133" 
-  "7128" -> "7139" 
-  "7135" -> "7144" 
-  "7130" -> "7128" 
-  "7136" -> "7135" 
-  "7131" -> "7130" 
-  "7137" -> "7143" 
-  "7140" -> "7136" 
-  "7110" -> "7117" 
-  "7110" -> "7125" 
-  "7133" -> "7131" 
-  "7139" -> "7137" 
-  "7141" -> "7140" 
-  "7111" -> "7110" 
-  "7115" -> "7122" 
-  "7122" -> "7144" 
-  "7143" -> "7141" 
-  "7116" -> "7115" 
-  "7117" -> "7119" 
-  "7119" -> "7116" 
-  "7102" -> "7107" 
+digraph "GetStaticIntField" {  
+"7089" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1346</SUB>> ]
+"7107" [label = <(soa,ScopedObjectAccess)<SUB>1346</SUB>> ]
+"7110" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1346</SUB>> ]
+"7117" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1346</SUB>> ]
+"7112" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1346</SUB>> ]
+"7118" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1346</SUB>> ]
+"7113" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1346</SUB>> ]
+"7119" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1346</SUB>> ]
+"7122" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1346</SUB>> ]
+"7092" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1346</SUB>> ]
+"7115" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1346</SUB>> ]
+"7121" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1346</SUB>> ]
+"7123" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1346</SUB>> ]
+"7093" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1346</SUB>> ]
+"7097" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1346</SUB>> ]
+"7104" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1346</SUB>> ]
+"7125" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1346</SUB>> ]
+"7098" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1346</SUB>> ]
+"7099" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1346</SUB>> ]
+"7101" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1346</SUB>> ]
+"7084" [label = <(METHOD,GetStaticIntField)<SUB>1345</SUB>> ]
+"7126" [label = <(METHOD_RETURN,jint)<SUB>1345</SUB>> ]
+  "7089" -> "7093" 
+  "7089" -> "7107" 
+  "7107" -> "7115" 
+  "7110" -> "7121" 
+  "7117" -> "7126" 
+  "7112" -> "7110" 
+  "7118" -> "7117" 
+  "7113" -> "7112" 
+  "7119" -> "7125" 
+  "7122" -> "7118" 
+  "7092" -> "7099" 
+  "7092" -> "7107" 
+  "7115" -> "7113" 
+  "7121" -> "7119" 
+  "7123" -> "7122" 
+  "7093" -> "7092" 
+  "7097" -> "7104" 
+  "7104" -> "7126" 
+  "7125" -> "7123" 
+  "7098" -> "7097" 
+  "7099" -> "7101" 
+  "7101" -> "7098" 
+  "7084" -> "7089" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/127-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/127-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/127-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/127-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,47 @@
-digraph "GetStaticByteField" {  
-"7151" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1415</SUB>> ]
-"7169" [label = <(soa,ScopedObjectAccess)<SUB>1415</SUB>> ]
-"7172" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1415</SUB>> ]
-"7179" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1415</SUB>> ]
-"7174" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1415</SUB>> ]
-"7180" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1415</SUB>> ]
-"7175" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1415</SUB>> ]
-"7181" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1415</SUB>> ]
-"7184" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1415</SUB>> ]
-"7154" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1415</SUB>> ]
-"7177" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1415</SUB>> ]
-"7183" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1415</SUB>> ]
-"7185" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1415</SUB>> ]
-"7155" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1415</SUB>> ]
-"7159" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1415</SUB>> ]
-"7166" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1415</SUB>> ]
-"7187" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1415</SUB>> ]
-"7160" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1415</SUB>> ]
-"7161" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1415</SUB>> ]
-"7163" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1415</SUB>> ]
-"7146" [label = <(METHOD,GetStaticByteField)<SUB>1414</SUB>> ]
-"7188" [label = <(METHOD_RETURN,jbyte)<SUB>1414</SUB>> ]
-  "7151" -> "7155" 
-  "7151" -> "7169" 
-  "7169" -> "7177" 
-  "7172" -> "7183" 
-  "7179" -> "7188" 
-  "7174" -> "7172" 
-  "7180" -> "7179" 
-  "7175" -> "7174" 
-  "7181" -> "7187" 
-  "7184" -> "7180" 
-  "7154" -> "7161" 
-  "7154" -> "7169" 
-  "7177" -> "7175" 
-  "7183" -> "7181" 
-  "7185" -> "7184" 
-  "7155" -> "7154" 
-  "7159" -> "7166" 
-  "7166" -> "7188" 
-  "7187" -> "7185" 
-  "7160" -> "7159" 
-  "7161" -> "7163" 
-  "7163" -> "7160" 
-  "7146" -> "7151" 
+digraph "GetStaticLongField" {  
+"7133" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1350</SUB>> ]
+"7151" [label = <(soa,ScopedObjectAccess)<SUB>1350</SUB>> ]
+"7154" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1350</SUB>> ]
+"7161" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1350</SUB>> ]
+"7156" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1350</SUB>> ]
+"7162" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1350</SUB>> ]
+"7157" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1350</SUB>> ]
+"7163" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1350</SUB>> ]
+"7166" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1350</SUB>> ]
+"7136" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1350</SUB>> ]
+"7159" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1350</SUB>> ]
+"7165" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1350</SUB>> ]
+"7167" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1350</SUB>> ]
+"7137" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1350</SUB>> ]
+"7141" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1350</SUB>> ]
+"7148" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1350</SUB>> ]
+"7169" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1350</SUB>> ]
+"7142" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1350</SUB>> ]
+"7143" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1350</SUB>> ]
+"7145" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1350</SUB>> ]
+"7128" [label = <(METHOD,GetStaticLongField)<SUB>1349</SUB>> ]
+"7170" [label = <(METHOD_RETURN,jlong)<SUB>1349</SUB>> ]
+  "7133" -> "7137" 
+  "7133" -> "7151" 
+  "7151" -> "7159" 
+  "7154" -> "7165" 
+  "7161" -> "7170" 
+  "7156" -> "7154" 
+  "7162" -> "7161" 
+  "7157" -> "7156" 
+  "7163" -> "7169" 
+  "7166" -> "7162" 
+  "7136" -> "7143" 
+  "7136" -> "7151" 
+  "7159" -> "7157" 
+  "7165" -> "7163" 
+  "7167" -> "7166" 
+  "7137" -> "7136" 
+  "7141" -> "7148" 
+  "7148" -> "7170" 
+  "7169" -> "7167" 
+  "7142" -> "7141" 
+  "7143" -> "7145" 
+  "7145" -> "7142" 
+  "7128" -> "7133" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/128-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/128-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/128-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/128-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,47 @@
-digraph "GetStaticCharField" {  
-"7195" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1419</SUB>> ]
-"7213" [label = <(soa,ScopedObjectAccess)<SUB>1419</SUB>> ]
-"7216" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1419</SUB>> ]
-"7223" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1419</SUB>> ]
-"7218" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1419</SUB>> ]
-"7224" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1419</SUB>> ]
-"7219" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1419</SUB>> ]
-"7225" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1419</SUB>> ]
-"7228" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1419</SUB>> ]
-"7198" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1419</SUB>> ]
-"7221" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1419</SUB>> ]
-"7227" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1419</SUB>> ]
-"7229" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1419</SUB>> ]
-"7199" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1419</SUB>> ]
-"7203" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1419</SUB>> ]
-"7210" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1419</SUB>> ]
-"7231" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1419</SUB>> ]
-"7204" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1419</SUB>> ]
-"7205" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1419</SUB>> ]
-"7207" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1419</SUB>> ]
-"7190" [label = <(METHOD,GetStaticCharField)<SUB>1418</SUB>> ]
-"7232" [label = <(METHOD_RETURN,jchar)<SUB>1418</SUB>> ]
-  "7195" -> "7199" 
-  "7195" -> "7213" 
-  "7213" -> "7221" 
-  "7216" -> "7227" 
-  "7223" -> "7232" 
-  "7218" -> "7216" 
-  "7224" -> "7223" 
-  "7219" -> "7218" 
-  "7225" -> "7231" 
-  "7228" -> "7224" 
-  "7198" -> "7205" 
-  "7198" -> "7213" 
-  "7221" -> "7219" 
-  "7227" -> "7225" 
-  "7229" -> "7228" 
-  "7199" -> "7198" 
-  "7203" -> "7210" 
-  "7210" -> "7232" 
-  "7231" -> "7229" 
-  "7204" -> "7203" 
-  "7205" -> "7207" 
-  "7207" -> "7204" 
-  "7190" -> "7195" 
+digraph "GetStaticFloatField" {  
+"7177" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1354</SUB>> ]
+"7195" [label = <(soa,ScopedObjectAccess)<SUB>1354</SUB>> ]
+"7198" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1354</SUB>> ]
+"7205" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1354</SUB>> ]
+"7200" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1354</SUB>> ]
+"7206" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1354</SUB>> ]
+"7201" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1354</SUB>> ]
+"7207" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1354</SUB>> ]
+"7210" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1354</SUB>> ]
+"7180" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1354</SUB>> ]
+"7203" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1354</SUB>> ]
+"7209" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1354</SUB>> ]
+"7211" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1354</SUB>> ]
+"7181" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1354</SUB>> ]
+"7185" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1354</SUB>> ]
+"7192" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1354</SUB>> ]
+"7213" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1354</SUB>> ]
+"7186" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1354</SUB>> ]
+"7187" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1354</SUB>> ]
+"7189" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1354</SUB>> ]
+"7172" [label = <(METHOD,GetStaticFloatField)<SUB>1353</SUB>> ]
+"7214" [label = <(METHOD_RETURN,jfloat)<SUB>1353</SUB>> ]
+  "7177" -> "7181" 
+  "7177" -> "7195" 
+  "7195" -> "7203" 
+  "7198" -> "7209" 
+  "7205" -> "7214" 
+  "7200" -> "7198" 
+  "7206" -> "7205" 
+  "7201" -> "7200" 
+  "7207" -> "7213" 
+  "7210" -> "7206" 
+  "7180" -> "7187" 
+  "7180" -> "7195" 
+  "7203" -> "7201" 
+  "7209" -> "7207" 
+  "7211" -> "7210" 
+  "7181" -> "7180" 
+  "7185" -> "7192" 
+  "7192" -> "7214" 
+  "7213" -> "7211" 
+  "7186" -> "7185" 
+  "7187" -> "7189" 
+  "7189" -> "7186" 
+  "7172" -> "7177" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/129-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/129-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/129-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/129-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,47 @@
-digraph "GetStaticShortField" {  
-"7239" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1423</SUB>> ]
-"7257" [label = <(soa,ScopedObjectAccess)<SUB>1423</SUB>> ]
-"7260" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1423</SUB>> ]
-"7267" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1423</SUB>> ]
-"7262" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1423</SUB>> ]
-"7268" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1423</SUB>> ]
-"7263" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1423</SUB>> ]
-"7269" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1423</SUB>> ]
-"7272" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1423</SUB>> ]
-"7242" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1423</SUB>> ]
-"7265" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1423</SUB>> ]
-"7271" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1423</SUB>> ]
-"7273" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1423</SUB>> ]
-"7243" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1423</SUB>> ]
-"7247" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1423</SUB>> ]
-"7254" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1423</SUB>> ]
-"7275" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1423</SUB>> ]
-"7248" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1423</SUB>> ]
-"7249" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1423</SUB>> ]
-"7251" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1423</SUB>> ]
-"7234" [label = <(METHOD,GetStaticShortField)<SUB>1422</SUB>> ]
-"7276" [label = <(METHOD_RETURN,jshort)<SUB>1422</SUB>> ]
-  "7239" -> "7243" 
-  "7239" -> "7257" 
-  "7257" -> "7265" 
-  "7260" -> "7271" 
-  "7267" -> "7276" 
-  "7262" -> "7260" 
-  "7268" -> "7267" 
-  "7263" -> "7262" 
-  "7269" -> "7275" 
-  "7272" -> "7268" 
-  "7242" -> "7249" 
-  "7242" -> "7257" 
-  "7265" -> "7263" 
-  "7271" -> "7269" 
-  "7273" -> "7272" 
-  "7243" -> "7242" 
-  "7247" -> "7254" 
-  "7254" -> "7276" 
-  "7275" -> "7273" 
-  "7248" -> "7247" 
-  "7249" -> "7251" 
-  "7251" -> "7248" 
-  "7234" -> "7239" 
+digraph "GetStaticDoubleField" {  
+"7221" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1358</SUB>> ]
+"7239" [label = <(soa,ScopedObjectAccess)<SUB>1358</SUB>> ]
+"7242" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1358</SUB>> ]
+"7249" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1358</SUB>> ]
+"7244" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1358</SUB>> ]
+"7250" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1358</SUB>> ]
+"7245" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1358</SUB>> ]
+"7251" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1358</SUB>> ]
+"7254" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1358</SUB>> ]
+"7224" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1358</SUB>> ]
+"7247" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1358</SUB>> ]
+"7253" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1358</SUB>> ]
+"7255" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1358</SUB>> ]
+"7225" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1358</SUB>> ]
+"7229" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1358</SUB>> ]
+"7236" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1358</SUB>> ]
+"7257" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1358</SUB>> ]
+"7230" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1358</SUB>> ]
+"7231" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1358</SUB>> ]
+"7233" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1358</SUB>> ]
+"7216" [label = <(METHOD,GetStaticDoubleField)<SUB>1357</SUB>> ]
+"7258" [label = <(METHOD_RETURN,jdouble)<SUB>1357</SUB>> ]
+  "7221" -> "7225" 
+  "7221" -> "7239" 
+  "7239" -> "7247" 
+  "7242" -> "7253" 
+  "7249" -> "7258" 
+  "7244" -> "7242" 
+  "7250" -> "7249" 
+  "7245" -> "7244" 
+  "7251" -> "7257" 
+  "7254" -> "7250" 
+  "7224" -> "7231" 
+  "7224" -> "7239" 
+  "7247" -> "7245" 
+  "7253" -> "7251" 
+  "7255" -> "7254" 
+  "7225" -> "7224" 
+  "7229" -> "7236" 
+  "7236" -> "7258" 
+  "7257" -> "7255" 
+  "7230" -> "7229" 
+  "7231" -> "7233" 
+  "7233" -> "7230" 
+  "7216" -> "7221" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/13-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/13-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowAIOOBE" {  
-"444" [label = <(METHOD,ThrowAIOOBE)<SUB>322</SUB>> ]
-"451" [label = <(METHOD_RETURN,void)<SUB>322</SUB>> ]
-  "444" -> "451" 
+digraph "FindMethod" {  
+"294" [label = <(METHOD,FindMethod)<SUB>329</SUB>> ]
+"299" [label = <(METHOD_RETURN,ArtMethod*)<SUB>329</SUB>> ]
+  "294" -> "299" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/130-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/130-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/130-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/130-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,82 @@
-digraph "GetStaticIntField" {  
-"7283" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1427</SUB>> ]
-"7301" [label = <(soa,ScopedObjectAccess)<SUB>1427</SUB>> ]
-"7304" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1427</SUB>> ]
-"7311" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1427</SUB>> ]
-"7306" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1427</SUB>> ]
-"7312" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1427</SUB>> ]
-"7307" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1427</SUB>> ]
-"7313" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1427</SUB>> ]
-"7316" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1427</SUB>> ]
-"7286" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1427</SUB>> ]
-"7309" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1427</SUB>> ]
-"7315" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1427</SUB>> ]
-"7317" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1427</SUB>> ]
-"7287" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1427</SUB>> ]
-"7291" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1427</SUB>> ]
-"7298" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1427</SUB>> ]
-"7319" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1427</SUB>> ]
-"7292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1427</SUB>> ]
-"7293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1427</SUB>> ]
-"7295" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1427</SUB>> ]
-"7278" [label = <(METHOD,GetStaticIntField)<SUB>1426</SUB>> ]
-"7320" [label = <(METHOD_RETURN,jint)<SUB>1426</SUB>> ]
-  "7283" -> "7287" 
-  "7283" -> "7301" 
-  "7301" -> "7309" 
-  "7304" -> "7315" 
-  "7311" -> "7320" 
+digraph "SetBooleanField" {  
+"7266" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7298" [label = <(soa,ScopedObjectAccess)<SUB>1362</SUB>> ]
+"7300" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1362</SUB>> ]
+"7318" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1362</SUB>> ]
+"7325" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1362</SUB>> ]
+"7284" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1362</SUB>> ]
+"7301" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1362</SUB>> ]
+"7308" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1362</SUB>> ]
+"7320" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1362</SUB>> ]
+"7326" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1362</SUB>> ]
+"7331" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1362</SUB>> ]
+"7285" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1362</SUB>> ]
+"7289" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1362</SUB>> ]
+"7296" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7302" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1362</SUB>> ]
+"7309" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1362</SUB>> ]
+"7321" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7327" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1362</SUB>> ]
+"7332" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1362</SUB>> ]
+"7270" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1362</SUB>> ]
+"7290" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1362</SUB>> ]
+"7304" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7310" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1362</SUB>> ]
+"7313" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7323" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1362</SUB>> ]
+"7329" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1362</SUB>> ]
+"7271" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1362</SUB>> ]
+"7275" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1362</SUB>> ]
+"7282" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1362</SUB>> ]
+"7291" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
+"7293" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1362</SUB>> ]
+"7306" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1362</SUB>> ]
+"7312" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1362</SUB>> ]
+"7315" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1362</SUB>> ]
+"7276" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1362</SUB>> ]
+"7277" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
+"7279" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1362</SUB>> ]
+"7260" [label = <(METHOD,SetBooleanField)<SUB>1361</SUB>> ]
+"7335" [label = <(METHOD_RETURN,void)<SUB>1361</SUB>> ]
+  "7266" -> "7271" 
+  "7266" -> "7285" 
+  "7298" -> "7306" 
+  "7300" -> "7323" 
+  "7318" -> "7329" 
+  "7325" -> "7335" 
+  "7284" -> "7291" 
+  "7284" -> "7298" 
+  "7301" -> "7312" 
+  "7308" -> "7300" 
+  "7320" -> "7318" 
+  "7326" -> "7332" 
+  "7331" -> "7325" 
+  "7285" -> "7284" 
+  "7289" -> "7296" 
+  "7296" -> "7335" 
+  "7302" -> "7301" 
+  "7309" -> "7308" 
+  "7321" -> "7320" 
+  "7327" -> "7326" 
+  "7332" -> "7331" 
+  "7270" -> "7277" 
+  "7270" -> "7285" 
+  "7290" -> "7289" 
+  "7304" -> "7302" 
+  "7310" -> "7315" 
+  "7313" -> "7309" 
+  "7323" -> "7321" 
+  "7329" -> "7327" 
+  "7271" -> "7270" 
+  "7275" -> "7282" 
+  "7282" -> "7335" 
+  "7291" -> "7293" 
+  "7293" -> "7290" 
   "7306" -> "7304" 
-  "7312" -> "7311" 
-  "7307" -> "7306" 
-  "7313" -> "7319" 
-  "7316" -> "7312" 
-  "7286" -> "7293" 
-  "7286" -> "7301" 
-  "7309" -> "7307" 
+  "7312" -> "7310" 
   "7315" -> "7313" 
-  "7317" -> "7316" 
-  "7287" -> "7286" 
-  "7291" -> "7298" 
-  "7298" -> "7320" 
-  "7319" -> "7317" 
-  "7292" -> "7291" 
-  "7293" -> "7295" 
-  "7295" -> "7292" 
-  "7278" -> "7283" 
+  "7276" -> "7275" 
+  "7277" -> "7279" 
+  "7279" -> "7276" 
+  "7260" -> "7266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/131-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/131-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/131-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/131-cfg.dot	2023-06-07 19:35:21.287385045 +0330
@@ -1,47 +1,82 @@
-digraph "GetStaticLongField" {  
-"7327" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1431</SUB>> ]
-"7345" [label = <(soa,ScopedObjectAccess)<SUB>1431</SUB>> ]
-"7348" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1431</SUB>> ]
-"7355" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1431</SUB>> ]
-"7350" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1431</SUB>> ]
-"7356" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1431</SUB>> ]
-"7351" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1431</SUB>> ]
-"7357" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1431</SUB>> ]
-"7360" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1431</SUB>> ]
-"7330" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1431</SUB>> ]
-"7353" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1431</SUB>> ]
-"7359" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1431</SUB>> ]
-"7361" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1431</SUB>> ]
-"7331" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1431</SUB>> ]
-"7335" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1431</SUB>> ]
-"7342" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1431</SUB>> ]
-"7363" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1431</SUB>> ]
-"7336" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1431</SUB>> ]
-"7337" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1431</SUB>> ]
-"7339" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1431</SUB>> ]
-"7322" [label = <(METHOD,GetStaticLongField)<SUB>1430</SUB>> ]
-"7364" [label = <(METHOD_RETURN,jlong)<SUB>1430</SUB>> ]
-  "7327" -> "7331" 
-  "7327" -> "7345" 
-  "7345" -> "7353" 
-  "7348" -> "7359" 
-  "7355" -> "7364" 
-  "7350" -> "7348" 
-  "7356" -> "7355" 
-  "7351" -> "7350" 
-  "7357" -> "7363" 
-  "7360" -> "7356" 
-  "7330" -> "7337" 
-  "7330" -> "7345" 
-  "7353" -> "7351" 
-  "7359" -> "7357" 
-  "7361" -> "7360" 
-  "7331" -> "7330" 
-  "7335" -> "7342" 
-  "7342" -> "7364" 
-  "7363" -> "7361" 
-  "7336" -> "7335" 
-  "7337" -> "7339" 
-  "7339" -> "7336" 
-  "7322" -> "7327" 
+digraph "SetByteField" {  
+"7343" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7375" [label = <(soa,ScopedObjectAccess)<SUB>1366</SUB>> ]
+"7377" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1366</SUB>> ]
+"7395" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1366</SUB>> ]
+"7402" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1366</SUB>> ]
+"7361" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1366</SUB>> ]
+"7378" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1366</SUB>> ]
+"7385" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1366</SUB>> ]
+"7397" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1366</SUB>> ]
+"7403" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1366</SUB>> ]
+"7408" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1366</SUB>> ]
+"7362" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1366</SUB>> ]
+"7366" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1366</SUB>> ]
+"7373" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7379" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1366</SUB>> ]
+"7386" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1366</SUB>> ]
+"7398" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7404" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1366</SUB>> ]
+"7409" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1366</SUB>> ]
+"7347" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1366</SUB>> ]
+"7367" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1366</SUB>> ]
+"7381" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7387" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1366</SUB>> ]
+"7390" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7400" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1366</SUB>> ]
+"7406" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1366</SUB>> ]
+"7348" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1366</SUB>> ]
+"7352" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1366</SUB>> ]
+"7359" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1366</SUB>> ]
+"7368" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1366</SUB>> ]
+"7370" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1366</SUB>> ]
+"7383" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1366</SUB>> ]
+"7389" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1366</SUB>> ]
+"7392" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1366</SUB>> ]
+"7353" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1366</SUB>> ]
+"7354" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1366</SUB>> ]
+"7356" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1366</SUB>> ]
+"7337" [label = <(METHOD,SetByteField)<SUB>1365</SUB>> ]
+"7412" [label = <(METHOD_RETURN,void)<SUB>1365</SUB>> ]
+  "7343" -> "7348" 
+  "7343" -> "7362" 
+  "7375" -> "7383" 
+  "7377" -> "7400" 
+  "7395" -> "7406" 
+  "7402" -> "7412" 
+  "7361" -> "7368" 
+  "7361" -> "7375" 
+  "7378" -> "7389" 
+  "7385" -> "7377" 
+  "7397" -> "7395" 
+  "7403" -> "7409" 
+  "7408" -> "7402" 
+  "7362" -> "7361" 
+  "7366" -> "7373" 
+  "7373" -> "7412" 
+  "7379" -> "7378" 
+  "7386" -> "7385" 
+  "7398" -> "7397" 
+  "7404" -> "7403" 
+  "7409" -> "7408" 
+  "7347" -> "7354" 
+  "7347" -> "7362" 
+  "7367" -> "7366" 
+  "7381" -> "7379" 
+  "7387" -> "7392" 
+  "7390" -> "7386" 
+  "7400" -> "7398" 
+  "7406" -> "7404" 
+  "7348" -> "7347" 
+  "7352" -> "7359" 
+  "7359" -> "7412" 
+  "7368" -> "7370" 
+  "7370" -> "7367" 
+  "7383" -> "7381" 
+  "7389" -> "7387" 
+  "7392" -> "7390" 
+  "7353" -> "7352" 
+  "7354" -> "7356" 
+  "7356" -> "7353" 
+  "7337" -> "7343" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/132-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/132-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/132-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/132-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,47 +1,82 @@
-digraph "GetStaticFloatField" {  
-"7371" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1435</SUB>> ]
-"7389" [label = <(soa,ScopedObjectAccess)<SUB>1435</SUB>> ]
-"7392" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1435</SUB>> ]
-"7399" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1435</SUB>> ]
-"7394" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1435</SUB>> ]
-"7400" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1435</SUB>> ]
-"7395" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1435</SUB>> ]
-"7401" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1435</SUB>> ]
-"7404" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1435</SUB>> ]
-"7374" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1435</SUB>> ]
-"7397" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1435</SUB>> ]
-"7403" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1435</SUB>> ]
-"7405" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1435</SUB>> ]
-"7375" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1435</SUB>> ]
-"7379" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1435</SUB>> ]
-"7386" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1435</SUB>> ]
-"7407" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1435</SUB>> ]
-"7380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1435</SUB>> ]
-"7381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1435</SUB>> ]
-"7383" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1435</SUB>> ]
-"7366" [label = <(METHOD,GetStaticFloatField)<SUB>1434</SUB>> ]
-"7408" [label = <(METHOD_RETURN,jfloat)<SUB>1434</SUB>> ]
-  "7371" -> "7375" 
-  "7371" -> "7389" 
-  "7389" -> "7397" 
-  "7392" -> "7403" 
-  "7399" -> "7408" 
-  "7394" -> "7392" 
-  "7400" -> "7399" 
-  "7395" -> "7394" 
-  "7401" -> "7407" 
-  "7404" -> "7400" 
-  "7374" -> "7381" 
-  "7374" -> "7389" 
-  "7397" -> "7395" 
-  "7403" -> "7401" 
-  "7405" -> "7404" 
-  "7375" -> "7374" 
-  "7379" -> "7386" 
-  "7386" -> "7408" 
-  "7407" -> "7405" 
-  "7380" -> "7379" 
-  "7381" -> "7383" 
-  "7383" -> "7380" 
-  "7366" -> "7371" 
+digraph "SetCharField" {  
+"7420" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7452" [label = <(soa,ScopedObjectAccess)<SUB>1370</SUB>> ]
+"7454" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1370</SUB>> ]
+"7472" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1370</SUB>> ]
+"7479" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1370</SUB>> ]
+"7438" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1370</SUB>> ]
+"7455" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1370</SUB>> ]
+"7462" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1370</SUB>> ]
+"7474" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1370</SUB>> ]
+"7480" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1370</SUB>> ]
+"7485" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1370</SUB>> ]
+"7439" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1370</SUB>> ]
+"7443" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1370</SUB>> ]
+"7450" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7456" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1370</SUB>> ]
+"7463" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1370</SUB>> ]
+"7475" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7481" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1370</SUB>> ]
+"7486" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1370</SUB>> ]
+"7424" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1370</SUB>> ]
+"7444" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1370</SUB>> ]
+"7458" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7464" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1370</SUB>> ]
+"7467" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7477" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1370</SUB>> ]
+"7483" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1370</SUB>> ]
+"7425" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1370</SUB>> ]
+"7429" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1370</SUB>> ]
+"7436" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1370</SUB>> ]
+"7445" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1370</SUB>> ]
+"7447" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1370</SUB>> ]
+"7460" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1370</SUB>> ]
+"7466" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1370</SUB>> ]
+"7469" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1370</SUB>> ]
+"7430" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1370</SUB>> ]
+"7431" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1370</SUB>> ]
+"7433" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1370</SUB>> ]
+"7414" [label = <(METHOD,SetCharField)<SUB>1369</SUB>> ]
+"7489" [label = <(METHOD_RETURN,void)<SUB>1369</SUB>> ]
+  "7420" -> "7425" 
+  "7420" -> "7439" 
+  "7452" -> "7460" 
+  "7454" -> "7477" 
+  "7472" -> "7483" 
+  "7479" -> "7489" 
+  "7438" -> "7445" 
+  "7438" -> "7452" 
+  "7455" -> "7466" 
+  "7462" -> "7454" 
+  "7474" -> "7472" 
+  "7480" -> "7486" 
+  "7485" -> "7479" 
+  "7439" -> "7438" 
+  "7443" -> "7450" 
+  "7450" -> "7489" 
+  "7456" -> "7455" 
+  "7463" -> "7462" 
+  "7475" -> "7474" 
+  "7481" -> "7480" 
+  "7486" -> "7485" 
+  "7424" -> "7431" 
+  "7424" -> "7439" 
+  "7444" -> "7443" 
+  "7458" -> "7456" 
+  "7464" -> "7469" 
+  "7467" -> "7463" 
+  "7477" -> "7475" 
+  "7483" -> "7481" 
+  "7425" -> "7424" 
+  "7429" -> "7436" 
+  "7436" -> "7489" 
+  "7445" -> "7447" 
+  "7447" -> "7444" 
+  "7460" -> "7458" 
+  "7466" -> "7464" 
+  "7469" -> "7467" 
+  "7430" -> "7429" 
+  "7431" -> "7433" 
+  "7433" -> "7430" 
+  "7414" -> "7420" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/133-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/133-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/133-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/133-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,47 +1,82 @@
-digraph "GetStaticDoubleField" {  
-"7415" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1439</SUB>> ]
-"7433" [label = <(soa,ScopedObjectAccess)<SUB>1439</SUB>> ]
-"7436" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1439</SUB>> ]
-"7443" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1439</SUB>> ]
-"7438" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1439</SUB>> ]
-"7444" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1439</SUB>> ]
-"7439" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1439</SUB>> ]
-"7445" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1439</SUB>> ]
-"7448" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1439</SUB>> ]
-"7418" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1439</SUB>> ]
-"7441" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1439</SUB>> ]
-"7447" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1439</SUB>> ]
-"7449" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1439</SUB>> ]
-"7419" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1439</SUB>> ]
-"7423" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1439</SUB>> ]
-"7430" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1439</SUB>> ]
-"7451" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1439</SUB>> ]
-"7424" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1439</SUB>> ]
-"7425" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1439</SUB>> ]
-"7427" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1439</SUB>> ]
-"7410" [label = <(METHOD,GetStaticDoubleField)<SUB>1438</SUB>> ]
-"7452" [label = <(METHOD_RETURN,jdouble)<SUB>1438</SUB>> ]
-  "7415" -> "7419" 
-  "7415" -> "7433" 
-  "7433" -> "7441" 
-  "7436" -> "7447" 
-  "7443" -> "7452" 
-  "7438" -> "7436" 
-  "7444" -> "7443" 
-  "7439" -> "7438" 
-  "7445" -> "7451" 
-  "7448" -> "7444" 
-  "7418" -> "7425" 
-  "7418" -> "7433" 
-  "7441" -> "7439" 
-  "7447" -> "7445" 
-  "7449" -> "7448" 
-  "7419" -> "7418" 
-  "7423" -> "7430" 
-  "7430" -> "7452" 
-  "7451" -> "7449" 
-  "7424" -> "7423" 
-  "7425" -> "7427" 
-  "7427" -> "7424" 
-  "7410" -> "7415" 
+digraph "SetFloatField" {  
+"7497" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7529" [label = <(soa,ScopedObjectAccess)<SUB>1374</SUB>> ]
+"7531" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1374</SUB>> ]
+"7549" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1374</SUB>> ]
+"7556" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1374</SUB>> ]
+"7515" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1374</SUB>> ]
+"7532" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1374</SUB>> ]
+"7539" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1374</SUB>> ]
+"7551" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1374</SUB>> ]
+"7557" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1374</SUB>> ]
+"7562" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1374</SUB>> ]
+"7516" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1374</SUB>> ]
+"7520" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1374</SUB>> ]
+"7527" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7533" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1374</SUB>> ]
+"7540" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1374</SUB>> ]
+"7552" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7558" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1374</SUB>> ]
+"7563" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1374</SUB>> ]
+"7501" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1374</SUB>> ]
+"7521" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1374</SUB>> ]
+"7535" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7541" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1374</SUB>> ]
+"7544" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7554" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1374</SUB>> ]
+"7560" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1374</SUB>> ]
+"7502" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1374</SUB>> ]
+"7506" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1374</SUB>> ]
+"7513" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1374</SUB>> ]
+"7522" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1374</SUB>> ]
+"7524" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1374</SUB>> ]
+"7537" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1374</SUB>> ]
+"7543" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1374</SUB>> ]
+"7546" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1374</SUB>> ]
+"7507" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1374</SUB>> ]
+"7508" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1374</SUB>> ]
+"7510" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1374</SUB>> ]
+"7491" [label = <(METHOD,SetFloatField)<SUB>1373</SUB>> ]
+"7566" [label = <(METHOD_RETURN,void)<SUB>1373</SUB>> ]
+  "7497" -> "7502" 
+  "7497" -> "7516" 
+  "7529" -> "7537" 
+  "7531" -> "7554" 
+  "7549" -> "7560" 
+  "7556" -> "7566" 
+  "7515" -> "7522" 
+  "7515" -> "7529" 
+  "7532" -> "7543" 
+  "7539" -> "7531" 
+  "7551" -> "7549" 
+  "7557" -> "7563" 
+  "7562" -> "7556" 
+  "7516" -> "7515" 
+  "7520" -> "7527" 
+  "7527" -> "7566" 
+  "7533" -> "7532" 
+  "7540" -> "7539" 
+  "7552" -> "7551" 
+  "7558" -> "7557" 
+  "7563" -> "7562" 
+  "7501" -> "7508" 
+  "7501" -> "7516" 
+  "7521" -> "7520" 
+  "7535" -> "7533" 
+  "7541" -> "7546" 
+  "7544" -> "7540" 
+  "7554" -> "7552" 
+  "7560" -> "7558" 
+  "7502" -> "7501" 
+  "7506" -> "7513" 
+  "7513" -> "7566" 
+  "7522" -> "7524" 
+  "7524" -> "7521" 
+  "7537" -> "7535" 
+  "7543" -> "7541" 
+  "7546" -> "7544" 
+  "7507" -> "7506" 
+  "7508" -> "7510" 
+  "7510" -> "7507" 
+  "7491" -> "7497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/134-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/134-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/134-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/134-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,82 @@
-digraph "SetBooleanField" {  
-"7460" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7492" [label = <(soa,ScopedObjectAccess)<SUB>1443</SUB>> ]
-"7494" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1443</SUB>> ]
-"7512" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1443</SUB>> ]
-"7519" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1443</SUB>> ]
-"7478" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1443</SUB>> ]
-"7495" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1443</SUB>> ]
-"7502" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1443</SUB>> ]
-"7514" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1443</SUB>> ]
-"7520" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1443</SUB>> ]
-"7525" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1443</SUB>> ]
-"7479" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1443</SUB>> ]
-"7483" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1443</SUB>> ]
-"7490" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7496" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1443</SUB>> ]
-"7503" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1443</SUB>> ]
-"7515" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7521" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1443</SUB>> ]
-"7526" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1443</SUB>> ]
-"7464" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1443</SUB>> ]
-"7484" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1443</SUB>> ]
-"7498" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7504" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1443</SUB>> ]
-"7507" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7517" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1443</SUB>> ]
-"7523" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1443</SUB>> ]
-"7465" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1443</SUB>> ]
-"7469" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1443</SUB>> ]
-"7476" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1443</SUB>> ]
-"7485" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1443</SUB>> ]
-"7487" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1443</SUB>> ]
-"7500" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1443</SUB>> ]
-"7506" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1443</SUB>> ]
-"7509" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1443</SUB>> ]
-"7470" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1443</SUB>> ]
-"7471" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1443</SUB>> ]
-"7473" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1443</SUB>> ]
-"7454" [label = <(METHOD,SetBooleanField)<SUB>1442</SUB>> ]
-"7529" [label = <(METHOD_RETURN,void)<SUB>1442</SUB>> ]
-  "7460" -> "7465" 
-  "7460" -> "7479" 
-  "7492" -> "7500" 
-  "7494" -> "7517" 
-  "7512" -> "7523" 
-  "7519" -> "7529" 
-  "7478" -> "7485" 
-  "7478" -> "7492" 
-  "7495" -> "7506" 
-  "7502" -> "7494" 
-  "7514" -> "7512" 
-  "7520" -> "7526" 
-  "7525" -> "7519" 
-  "7479" -> "7478" 
-  "7483" -> "7490" 
-  "7490" -> "7529" 
-  "7496" -> "7495" 
-  "7503" -> "7502" 
-  "7515" -> "7514" 
-  "7521" -> "7520" 
-  "7526" -> "7525" 
-  "7464" -> "7471" 
-  "7464" -> "7479" 
-  "7484" -> "7483" 
-  "7498" -> "7496" 
-  "7504" -> "7509" 
-  "7507" -> "7503" 
-  "7517" -> "7515" 
-  "7523" -> "7521" 
-  "7465" -> "7464" 
-  "7469" -> "7476" 
-  "7476" -> "7529" 
-  "7485" -> "7487" 
-  "7487" -> "7484" 
-  "7500" -> "7498" 
-  "7506" -> "7504" 
-  "7509" -> "7507" 
-  "7470" -> "7469" 
-  "7471" -> "7473" 
-  "7473" -> "7470" 
-  "7454" -> "7460" 
+digraph "SetDoubleField" {  
+"7574" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7606" [label = <(soa,ScopedObjectAccess)<SUB>1378</SUB>> ]
+"7608" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1378</SUB>> ]
+"7626" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1378</SUB>> ]
+"7633" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1378</SUB>> ]
+"7592" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1378</SUB>> ]
+"7609" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1378</SUB>> ]
+"7616" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1378</SUB>> ]
+"7628" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1378</SUB>> ]
+"7634" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1378</SUB>> ]
+"7639" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1378</SUB>> ]
+"7593" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1378</SUB>> ]
+"7597" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1378</SUB>> ]
+"7604" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7610" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1378</SUB>> ]
+"7617" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1378</SUB>> ]
+"7629" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7635" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1378</SUB>> ]
+"7640" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1378</SUB>> ]
+"7578" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1378</SUB>> ]
+"7598" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1378</SUB>> ]
+"7612" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7618" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1378</SUB>> ]
+"7621" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7631" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1378</SUB>> ]
+"7637" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1378</SUB>> ]
+"7579" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1378</SUB>> ]
+"7583" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1378</SUB>> ]
+"7590" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1378</SUB>> ]
+"7599" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1378</SUB>> ]
+"7601" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1378</SUB>> ]
+"7614" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1378</SUB>> ]
+"7620" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1378</SUB>> ]
+"7623" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1378</SUB>> ]
+"7584" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1378</SUB>> ]
+"7585" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1378</SUB>> ]
+"7587" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1378</SUB>> ]
+"7568" [label = <(METHOD,SetDoubleField)<SUB>1377</SUB>> ]
+"7643" [label = <(METHOD_RETURN,void)<SUB>1377</SUB>> ]
+  "7574" -> "7579" 
+  "7574" -> "7593" 
+  "7606" -> "7614" 
+  "7608" -> "7631" 
+  "7626" -> "7637" 
+  "7633" -> "7643" 
+  "7592" -> "7599" 
+  "7592" -> "7606" 
+  "7609" -> "7620" 
+  "7616" -> "7608" 
+  "7628" -> "7626" 
+  "7634" -> "7640" 
+  "7639" -> "7633" 
+  "7593" -> "7592" 
+  "7597" -> "7604" 
+  "7604" -> "7643" 
+  "7610" -> "7609" 
+  "7617" -> "7616" 
+  "7629" -> "7628" 
+  "7635" -> "7634" 
+  "7640" -> "7639" 
+  "7578" -> "7585" 
+  "7578" -> "7593" 
+  "7598" -> "7597" 
+  "7612" -> "7610" 
+  "7618" -> "7623" 
+  "7621" -> "7617" 
+  "7631" -> "7629" 
+  "7637" -> "7635" 
+  "7579" -> "7578" 
+  "7583" -> "7590" 
+  "7590" -> "7643" 
+  "7599" -> "7601" 
+  "7601" -> "7598" 
+  "7614" -> "7612" 
+  "7620" -> "7618" 
+  "7623" -> "7621" 
+  "7584" -> "7583" 
+  "7585" -> "7587" 
+  "7587" -> "7584" 
+  "7568" -> "7574" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/135-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/135-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/135-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/135-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,82 @@
-digraph "SetByteField" {  
-"7537" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7569" [label = <(soa,ScopedObjectAccess)<SUB>1447</SUB>> ]
-"7571" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1447</SUB>> ]
-"7589" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1447</SUB>> ]
-"7596" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1447</SUB>> ]
-"7555" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1447</SUB>> ]
-"7572" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1447</SUB>> ]
-"7579" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1447</SUB>> ]
-"7591" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1447</SUB>> ]
-"7597" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1447</SUB>> ]
-"7602" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1447</SUB>> ]
-"7556" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1447</SUB>> ]
-"7560" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1447</SUB>> ]
-"7567" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7573" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1447</SUB>> ]
-"7580" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1447</SUB>> ]
-"7592" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7598" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1447</SUB>> ]
-"7603" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1447</SUB>> ]
-"7541" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1447</SUB>> ]
-"7561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1447</SUB>> ]
-"7575" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7581" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1447</SUB>> ]
-"7584" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7594" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1447</SUB>> ]
-"7600" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1447</SUB>> ]
-"7542" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1447</SUB>> ]
-"7546" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1447</SUB>> ]
-"7553" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1447</SUB>> ]
-"7562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1447</SUB>> ]
-"7564" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1447</SUB>> ]
-"7577" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1447</SUB>> ]
-"7583" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1447</SUB>> ]
-"7586" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1447</SUB>> ]
-"7547" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1447</SUB>> ]
-"7548" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1447</SUB>> ]
-"7550" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1447</SUB>> ]
-"7531" [label = <(METHOD,SetByteField)<SUB>1446</SUB>> ]
-"7606" [label = <(METHOD_RETURN,void)<SUB>1446</SUB>> ]
-  "7537" -> "7542" 
-  "7537" -> "7556" 
-  "7569" -> "7577" 
-  "7571" -> "7594" 
-  "7589" -> "7600" 
-  "7596" -> "7606" 
-  "7555" -> "7562" 
-  "7555" -> "7569" 
-  "7572" -> "7583" 
-  "7579" -> "7571" 
-  "7591" -> "7589" 
-  "7597" -> "7603" 
-  "7602" -> "7596" 
-  "7556" -> "7555" 
-  "7560" -> "7567" 
-  "7567" -> "7606" 
-  "7573" -> "7572" 
-  "7580" -> "7579" 
-  "7592" -> "7591" 
-  "7598" -> "7597" 
-  "7603" -> "7602" 
-  "7541" -> "7548" 
-  "7541" -> "7556" 
-  "7561" -> "7560" 
-  "7575" -> "7573" 
-  "7581" -> "7586" 
-  "7584" -> "7580" 
-  "7594" -> "7592" 
-  "7600" -> "7598" 
-  "7542" -> "7541" 
-  "7546" -> "7553" 
-  "7553" -> "7606" 
-  "7562" -> "7564" 
-  "7564" -> "7561" 
-  "7577" -> "7575" 
-  "7583" -> "7581" 
-  "7586" -> "7584" 
-  "7547" -> "7546" 
-  "7548" -> "7550" 
-  "7550" -> "7547" 
-  "7531" -> "7537" 
+digraph "SetIntField" {  
+"7651" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7683" [label = <(soa,ScopedObjectAccess)<SUB>1382</SUB>> ]
+"7685" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1382</SUB>> ]
+"7703" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1382</SUB>> ]
+"7710" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1382</SUB>> ]
+"7669" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1382</SUB>> ]
+"7686" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1382</SUB>> ]
+"7693" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1382</SUB>> ]
+"7705" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1382</SUB>> ]
+"7711" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1382</SUB>> ]
+"7716" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1382</SUB>> ]
+"7670" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1382</SUB>> ]
+"7674" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1382</SUB>> ]
+"7681" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7687" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1382</SUB>> ]
+"7694" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1382</SUB>> ]
+"7706" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7712" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1382</SUB>> ]
+"7717" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1382</SUB>> ]
+"7655" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1382</SUB>> ]
+"7675" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1382</SUB>> ]
+"7689" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7695" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1382</SUB>> ]
+"7698" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7708" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1382</SUB>> ]
+"7714" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1382</SUB>> ]
+"7656" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1382</SUB>> ]
+"7660" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1382</SUB>> ]
+"7667" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1382</SUB>> ]
+"7676" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1382</SUB>> ]
+"7678" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1382</SUB>> ]
+"7691" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1382</SUB>> ]
+"7697" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1382</SUB>> ]
+"7700" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1382</SUB>> ]
+"7661" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1382</SUB>> ]
+"7662" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1382</SUB>> ]
+"7664" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1382</SUB>> ]
+"7645" [label = <(METHOD,SetIntField)<SUB>1381</SUB>> ]
+"7720" [label = <(METHOD_RETURN,void)<SUB>1381</SUB>> ]
+  "7651" -> "7656" 
+  "7651" -> "7670" 
+  "7683" -> "7691" 
+  "7685" -> "7708" 
+  "7703" -> "7714" 
+  "7710" -> "7720" 
+  "7669" -> "7676" 
+  "7669" -> "7683" 
+  "7686" -> "7697" 
+  "7693" -> "7685" 
+  "7705" -> "7703" 
+  "7711" -> "7717" 
+  "7716" -> "7710" 
+  "7670" -> "7669" 
+  "7674" -> "7681" 
+  "7681" -> "7720" 
+  "7687" -> "7686" 
+  "7694" -> "7693" 
+  "7706" -> "7705" 
+  "7712" -> "7711" 
+  "7717" -> "7716" 
+  "7655" -> "7662" 
+  "7655" -> "7670" 
+  "7675" -> "7674" 
+  "7689" -> "7687" 
+  "7695" -> "7700" 
+  "7698" -> "7694" 
+  "7708" -> "7706" 
+  "7714" -> "7712" 
+  "7656" -> "7655" 
+  "7660" -> "7667" 
+  "7667" -> "7720" 
+  "7676" -> "7678" 
+  "7678" -> "7675" 
+  "7691" -> "7689" 
+  "7697" -> "7695" 
+  "7700" -> "7698" 
+  "7661" -> "7660" 
+  "7662" -> "7664" 
+  "7664" -> "7661" 
+  "7645" -> "7651" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/136-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/136-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/136-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/136-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,82 @@
-digraph "SetCharField" {  
-"7614" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7646" [label = <(soa,ScopedObjectAccess)<SUB>1451</SUB>> ]
-"7648" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1451</SUB>> ]
-"7666" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1451</SUB>> ]
-"7673" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1451</SUB>> ]
-"7632" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1451</SUB>> ]
-"7649" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1451</SUB>> ]
-"7656" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1451</SUB>> ]
-"7668" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1451</SUB>> ]
-"7674" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1451</SUB>> ]
-"7679" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1451</SUB>> ]
-"7633" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1451</SUB>> ]
-"7637" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1451</SUB>> ]
-"7644" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7650" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1451</SUB>> ]
-"7657" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1451</SUB>> ]
-"7669" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7675" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1451</SUB>> ]
-"7680" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1451</SUB>> ]
-"7618" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1451</SUB>> ]
-"7638" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1451</SUB>> ]
-"7652" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7658" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1451</SUB>> ]
-"7661" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7671" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1451</SUB>> ]
-"7677" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1451</SUB>> ]
-"7619" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1451</SUB>> ]
-"7623" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1451</SUB>> ]
-"7630" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1451</SUB>> ]
-"7639" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1451</SUB>> ]
-"7641" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1451</SUB>> ]
-"7654" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1451</SUB>> ]
-"7660" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1451</SUB>> ]
-"7663" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1451</SUB>> ]
-"7624" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1451</SUB>> ]
-"7625" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1451</SUB>> ]
-"7627" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1451</SUB>> ]
-"7608" [label = <(METHOD,SetCharField)<SUB>1450</SUB>> ]
-"7683" [label = <(METHOD_RETURN,void)<SUB>1450</SUB>> ]
-  "7614" -> "7619" 
-  "7614" -> "7633" 
-  "7646" -> "7654" 
-  "7648" -> "7671" 
-  "7666" -> "7677" 
-  "7673" -> "7683" 
-  "7632" -> "7639" 
-  "7632" -> "7646" 
-  "7649" -> "7660" 
-  "7656" -> "7648" 
-  "7668" -> "7666" 
-  "7674" -> "7680" 
-  "7679" -> "7673" 
-  "7633" -> "7632" 
-  "7637" -> "7644" 
-  "7644" -> "7683" 
-  "7650" -> "7649" 
-  "7657" -> "7656" 
-  "7669" -> "7668" 
-  "7675" -> "7674" 
-  "7680" -> "7679" 
-  "7618" -> "7625" 
-  "7618" -> "7633" 
-  "7638" -> "7637" 
-  "7652" -> "7650" 
-  "7658" -> "7663" 
-  "7661" -> "7657" 
-  "7671" -> "7669" 
-  "7677" -> "7675" 
-  "7619" -> "7618" 
-  "7623" -> "7630" 
-  "7630" -> "7683" 
-  "7639" -> "7641" 
-  "7641" -> "7638" 
-  "7654" -> "7652" 
-  "7660" -> "7658" 
-  "7663" -> "7661" 
-  "7624" -> "7623" 
-  "7625" -> "7627" 
-  "7627" -> "7624" 
-  "7608" -> "7614" 
+digraph "SetLongField" {  
+"7728" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7760" [label = <(soa,ScopedObjectAccess)<SUB>1386</SUB>> ]
+"7762" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1386</SUB>> ]
+"7780" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1386</SUB>> ]
+"7787" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1386</SUB>> ]
+"7746" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1386</SUB>> ]
+"7763" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1386</SUB>> ]
+"7770" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1386</SUB>> ]
+"7782" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1386</SUB>> ]
+"7788" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1386</SUB>> ]
+"7793" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1386</SUB>> ]
+"7747" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1386</SUB>> ]
+"7751" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1386</SUB>> ]
+"7758" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7764" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1386</SUB>> ]
+"7771" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1386</SUB>> ]
+"7783" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7789" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1386</SUB>> ]
+"7794" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1386</SUB>> ]
+"7732" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1386</SUB>> ]
+"7752" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1386</SUB>> ]
+"7766" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7772" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1386</SUB>> ]
+"7775" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7785" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1386</SUB>> ]
+"7791" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1386</SUB>> ]
+"7733" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1386</SUB>> ]
+"7737" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1386</SUB>> ]
+"7744" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1386</SUB>> ]
+"7753" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1386</SUB>> ]
+"7755" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1386</SUB>> ]
+"7768" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1386</SUB>> ]
+"7774" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1386</SUB>> ]
+"7777" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1386</SUB>> ]
+"7738" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1386</SUB>> ]
+"7739" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1386</SUB>> ]
+"7741" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1386</SUB>> ]
+"7722" [label = <(METHOD,SetLongField)<SUB>1385</SUB>> ]
+"7797" [label = <(METHOD_RETURN,void)<SUB>1385</SUB>> ]
+  "7728" -> "7733" 
+  "7728" -> "7747" 
+  "7760" -> "7768" 
+  "7762" -> "7785" 
+  "7780" -> "7791" 
+  "7787" -> "7797" 
+  "7746" -> "7753" 
+  "7746" -> "7760" 
+  "7763" -> "7774" 
+  "7770" -> "7762" 
+  "7782" -> "7780" 
+  "7788" -> "7794" 
+  "7793" -> "7787" 
+  "7747" -> "7746" 
+  "7751" -> "7758" 
+  "7758" -> "7797" 
+  "7764" -> "7763" 
+  "7771" -> "7770" 
+  "7783" -> "7782" 
+  "7789" -> "7788" 
+  "7794" -> "7793" 
+  "7732" -> "7739" 
+  "7732" -> "7747" 
+  "7752" -> "7751" 
+  "7766" -> "7764" 
+  "7772" -> "7777" 
+  "7775" -> "7771" 
+  "7785" -> "7783" 
+  "7791" -> "7789" 
+  "7733" -> "7732" 
+  "7737" -> "7744" 
+  "7744" -> "7797" 
+  "7753" -> "7755" 
+  "7755" -> "7752" 
+  "7768" -> "7766" 
+  "7774" -> "7772" 
+  "7777" -> "7775" 
+  "7738" -> "7737" 
+  "7739" -> "7741" 
+  "7741" -> "7738" 
+  "7722" -> "7728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/137-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/137-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/137-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/137-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,82 @@
-digraph "SetFloatField" {  
-"7691" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7723" [label = <(soa,ScopedObjectAccess)<SUB>1455</SUB>> ]
-"7725" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1455</SUB>> ]
-"7743" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1455</SUB>> ]
-"7750" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1455</SUB>> ]
-"7709" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1455</SUB>> ]
-"7726" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1455</SUB>> ]
-"7733" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1455</SUB>> ]
-"7745" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1455</SUB>> ]
-"7751" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1455</SUB>> ]
-"7756" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1455</SUB>> ]
-"7710" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1455</SUB>> ]
-"7714" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1455</SUB>> ]
-"7721" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7727" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1455</SUB>> ]
-"7734" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1455</SUB>> ]
-"7746" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7752" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1455</SUB>> ]
-"7757" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1455</SUB>> ]
-"7695" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1455</SUB>> ]
-"7715" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1455</SUB>> ]
-"7729" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7735" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1455</SUB>> ]
-"7738" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7748" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1455</SUB>> ]
-"7754" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1455</SUB>> ]
-"7696" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1455</SUB>> ]
-"7700" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1455</SUB>> ]
-"7707" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1455</SUB>> ]
-"7716" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1455</SUB>> ]
-"7718" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1455</SUB>> ]
-"7731" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1455</SUB>> ]
-"7737" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1455</SUB>> ]
-"7740" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1455</SUB>> ]
-"7701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1455</SUB>> ]
-"7702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1455</SUB>> ]
-"7704" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1455</SUB>> ]
-"7685" [label = <(METHOD,SetFloatField)<SUB>1454</SUB>> ]
-"7760" [label = <(METHOD_RETURN,void)<SUB>1454</SUB>> ]
-  "7691" -> "7696" 
-  "7691" -> "7710" 
-  "7723" -> "7731" 
-  "7725" -> "7748" 
-  "7743" -> "7754" 
-  "7750" -> "7760" 
-  "7709" -> "7716" 
-  "7709" -> "7723" 
-  "7726" -> "7737" 
-  "7733" -> "7725" 
-  "7745" -> "7743" 
-  "7751" -> "7757" 
-  "7756" -> "7750" 
-  "7710" -> "7709" 
-  "7714" -> "7721" 
-  "7721" -> "7760" 
-  "7727" -> "7726" 
-  "7734" -> "7733" 
-  "7746" -> "7745" 
-  "7752" -> "7751" 
-  "7757" -> "7756" 
-  "7695" -> "7702" 
-  "7695" -> "7710" 
-  "7715" -> "7714" 
-  "7729" -> "7727" 
-  "7735" -> "7740" 
-  "7738" -> "7734" 
-  "7748" -> "7746" 
-  "7754" -> "7752" 
-  "7696" -> "7695" 
-  "7700" -> "7707" 
-  "7707" -> "7760" 
-  "7716" -> "7718" 
-  "7718" -> "7715" 
-  "7731" -> "7729" 
-  "7737" -> "7735" 
-  "7740" -> "7738" 
-  "7701" -> "7700" 
-  "7702" -> "7704" 
-  "7704" -> "7701" 
-  "7685" -> "7691" 
+digraph "SetShortField" {  
+"7805" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7837" [label = <(soa,ScopedObjectAccess)<SUB>1390</SUB>> ]
+"7839" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1390</SUB>> ]
+"7857" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1390</SUB>> ]
+"7864" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1390</SUB>> ]
+"7823" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1390</SUB>> ]
+"7840" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1390</SUB>> ]
+"7847" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1390</SUB>> ]
+"7859" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1390</SUB>> ]
+"7865" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1390</SUB>> ]
+"7870" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1390</SUB>> ]
+"7824" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1390</SUB>> ]
+"7828" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1390</SUB>> ]
+"7835" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7841" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1390</SUB>> ]
+"7848" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1390</SUB>> ]
+"7860" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7866" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1390</SUB>> ]
+"7871" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1390</SUB>> ]
+"7809" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1390</SUB>> ]
+"7829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1390</SUB>> ]
+"7843" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7849" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1390</SUB>> ]
+"7852" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7862" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1390</SUB>> ]
+"7868" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1390</SUB>> ]
+"7810" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1390</SUB>> ]
+"7814" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1390</SUB>> ]
+"7821" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1390</SUB>> ]
+"7830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1390</SUB>> ]
+"7832" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1390</SUB>> ]
+"7845" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1390</SUB>> ]
+"7851" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1390</SUB>> ]
+"7854" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1390</SUB>> ]
+"7815" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1390</SUB>> ]
+"7816" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1390</SUB>> ]
+"7818" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1390</SUB>> ]
+"7799" [label = <(METHOD,SetShortField)<SUB>1389</SUB>> ]
+"7874" [label = <(METHOD_RETURN,void)<SUB>1389</SUB>> ]
+  "7805" -> "7810" 
+  "7805" -> "7824" 
+  "7837" -> "7845" 
+  "7839" -> "7862" 
+  "7857" -> "7868" 
+  "7864" -> "7874" 
+  "7823" -> "7830" 
+  "7823" -> "7837" 
+  "7840" -> "7851" 
+  "7847" -> "7839" 
+  "7859" -> "7857" 
+  "7865" -> "7871" 
+  "7870" -> "7864" 
+  "7824" -> "7823" 
+  "7828" -> "7835" 
+  "7835" -> "7874" 
+  "7841" -> "7840" 
+  "7848" -> "7847" 
+  "7860" -> "7859" 
+  "7866" -> "7865" 
+  "7871" -> "7870" 
+  "7809" -> "7816" 
+  "7809" -> "7824" 
+  "7829" -> "7828" 
+  "7843" -> "7841" 
+  "7849" -> "7854" 
+  "7852" -> "7848" 
+  "7862" -> "7860" 
+  "7868" -> "7866" 
+  "7810" -> "7809" 
+  "7814" -> "7821" 
+  "7821" -> "7874" 
+  "7830" -> "7832" 
+  "7832" -> "7829" 
+  "7845" -> "7843" 
+  "7851" -> "7849" 
+  "7854" -> "7852" 
+  "7815" -> "7814" 
+  "7816" -> "7818" 
+  "7818" -> "7815" 
+  "7799" -> "7805" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/138-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/138-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/138-cfg.dot	2023-06-07 19:35:14.757385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/138-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,51 @@
-digraph "SetDoubleField" {  
-"7768" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7800" [label = <(soa,ScopedObjectAccess)<SUB>1459</SUB>> ]
-"7802" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1459</SUB>> ]
-"7820" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1459</SUB>> ]
-"7827" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1459</SUB>> ]
-"7786" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1459</SUB>> ]
-"7803" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1459</SUB>> ]
-"7810" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1459</SUB>> ]
-"7822" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1459</SUB>> ]
-"7828" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1459</SUB>> ]
-"7833" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1459</SUB>> ]
-"7787" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1459</SUB>> ]
-"7791" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1459</SUB>> ]
-"7798" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7804" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1459</SUB>> ]
-"7811" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1459</SUB>> ]
-"7823" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7829" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1459</SUB>> ]
-"7834" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1459</SUB>> ]
-"7772" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1459</SUB>> ]
-"7792" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1459</SUB>> ]
-"7806" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7812" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1459</SUB>> ]
-"7815" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7825" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1459</SUB>> ]
-"7831" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1459</SUB>> ]
-"7773" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1459</SUB>> ]
-"7777" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1459</SUB>> ]
-"7784" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1459</SUB>> ]
-"7793" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1459</SUB>> ]
-"7795" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1459</SUB>> ]
-"7808" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1459</SUB>> ]
-"7814" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1459</SUB>> ]
-"7817" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1459</SUB>> ]
-"7778" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1459</SUB>> ]
-"7779" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1459</SUB>> ]
-"7781" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1459</SUB>> ]
-"7762" [label = <(METHOD,SetDoubleField)<SUB>1458</SUB>> ]
-"7837" [label = <(METHOD_RETURN,void)<SUB>1458</SUB>> ]
-  "7768" -> "7773" 
-  "7768" -> "7787" 
-  "7800" -> "7808" 
-  "7802" -> "7825" 
-  "7820" -> "7831" 
-  "7827" -> "7837" 
-  "7786" -> "7793" 
-  "7786" -> "7800" 
-  "7803" -> "7814" 
-  "7810" -> "7802" 
-  "7822" -> "7820" 
-  "7828" -> "7834" 
-  "7833" -> "7827" 
-  "7787" -> "7786" 
-  "7791" -> "7798" 
-  "7798" -> "7837" 
-  "7804" -> "7803" 
-  "7811" -> "7810" 
-  "7823" -> "7822" 
-  "7829" -> "7828" 
-  "7834" -> "7833" 
-  "7772" -> "7779" 
-  "7772" -> "7787" 
-  "7792" -> "7791" 
-  "7806" -> "7804" 
-  "7812" -> "7817" 
-  "7815" -> "7811" 
-  "7825" -> "7823" 
-  "7831" -> "7829" 
-  "7773" -> "7772" 
-  "7777" -> "7784" 
-  "7784" -> "7837" 
-  "7793" -> "7795" 
-  "7795" -> "7792" 
-  "7808" -> "7806" 
-  "7814" -> "7812" 
-  "7817" -> "7815" 
-  "7778" -> "7777" 
-  "7779" -> "7781" 
-  "7781" -> "7778" 
-  "7762" -> "7768" 
+digraph "SetStaticBooleanField" {  
+"7882" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1394</SUB>> ]
+"7899" [label = <(soa,ScopedObjectAccess)<SUB>1394</SUB>> ]
+"7902" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1394</SUB>> ]
+"7909" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1394</SUB>> ]
+"7904" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1394</SUB>> ]
+"7910" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1394</SUB>> ]
+"7915" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1394</SUB>> ]
+"7905" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1394</SUB>> ]
+"7911" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1394</SUB>> ]
+"7916" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1394</SUB>> ]
+"7885" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1394</SUB>> ]
+"7907" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1394</SUB>> ]
+"7913" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1394</SUB>> ]
+"7917" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1394</SUB>> ]
+"7886" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1394</SUB>> ]
+"7890" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1394</SUB>> ]
+"7897" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1394</SUB>> ]
+"7918" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1394</SUB>> ]
+"7891" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1394</SUB>> ]
+"7920" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1394</SUB>> ]
+"7892" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1394</SUB>> ]
+"7894" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1394</SUB>> ]
+"7876" [label = <(METHOD,SetStaticBooleanField)<SUB>1393</SUB>> ]
+"7922" [label = <(METHOD_RETURN,void)<SUB>1393</SUB>> ]
+  "7882" -> "7886" 
+  "7882" -> "7899" 
+  "7899" -> "7907" 
+  "7902" -> "7913" 
+  "7909" -> "7922" 
+  "7904" -> "7902" 
+  "7910" -> "7920" 
+  "7915" -> "7909" 
+  "7905" -> "7904" 
+  "7911" -> "7910" 
+  "7916" -> "7915" 
+  "7885" -> "7892" 
+  "7885" -> "7899" 
+  "7907" -> "7905" 
+  "7913" -> "7911" 
+  "7917" -> "7916" 
+  "7886" -> "7885" 
+  "7890" -> "7897" 
+  "7897" -> "7922" 
+  "7918" -> "7917" 
+  "7891" -> "7890" 
+  "7920" -> "7918" 
+  "7892" -> "7894" 
+  "7894" -> "7891" 
+  "7876" -> "7882" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/139-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/139-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/139-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/139-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,51 @@
-digraph "SetIntField" {  
-"7845" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7877" [label = <(soa,ScopedObjectAccess)<SUB>1463</SUB>> ]
-"7879" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1463</SUB>> ]
-"7897" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1463</SUB>> ]
-"7904" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1463</SUB>> ]
-"7863" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1463</SUB>> ]
-"7880" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1463</SUB>> ]
-"7887" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1463</SUB>> ]
-"7899" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1463</SUB>> ]
-"7905" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1463</SUB>> ]
-"7910" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1463</SUB>> ]
-"7864" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1463</SUB>> ]
-"7868" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1463</SUB>> ]
-"7875" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7881" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1463</SUB>> ]
-"7888" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1463</SUB>> ]
-"7900" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7906" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1463</SUB>> ]
-"7911" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1463</SUB>> ]
-"7849" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1463</SUB>> ]
-"7869" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1463</SUB>> ]
-"7883" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7889" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1463</SUB>> ]
-"7892" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7902" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1463</SUB>> ]
-"7908" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1463</SUB>> ]
-"7850" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1463</SUB>> ]
-"7854" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1463</SUB>> ]
-"7861" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1463</SUB>> ]
-"7870" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1463</SUB>> ]
-"7872" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1463</SUB>> ]
-"7885" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1463</SUB>> ]
-"7891" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1463</SUB>> ]
-"7894" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1463</SUB>> ]
-"7855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1463</SUB>> ]
-"7856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1463</SUB>> ]
-"7858" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1463</SUB>> ]
-"7839" [label = <(METHOD,SetIntField)<SUB>1462</SUB>> ]
-"7914" [label = <(METHOD_RETURN,void)<SUB>1462</SUB>> ]
-  "7845" -> "7850" 
-  "7845" -> "7864" 
-  "7877" -> "7885" 
-  "7879" -> "7902" 
-  "7897" -> "7908" 
-  "7904" -> "7914" 
-  "7863" -> "7870" 
-  "7863" -> "7877" 
-  "7880" -> "7891" 
-  "7887" -> "7879" 
-  "7899" -> "7897" 
-  "7905" -> "7911" 
-  "7910" -> "7904" 
-  "7864" -> "7863" 
-  "7868" -> "7875" 
-  "7875" -> "7914" 
-  "7881" -> "7880" 
-  "7888" -> "7887" 
-  "7900" -> "7899" 
-  "7906" -> "7905" 
-  "7911" -> "7910" 
-  "7849" -> "7856" 
-  "7849" -> "7864" 
-  "7869" -> "7868" 
-  "7883" -> "7881" 
-  "7889" -> "7894" 
-  "7892" -> "7888" 
-  "7902" -> "7900" 
-  "7908" -> "7906" 
-  "7850" -> "7849" 
-  "7854" -> "7861" 
-  "7861" -> "7914" 
-  "7870" -> "7872" 
-  "7872" -> "7869" 
-  "7885" -> "7883" 
-  "7891" -> "7889" 
-  "7894" -> "7892" 
-  "7855" -> "7854" 
-  "7856" -> "7858" 
-  "7858" -> "7855" 
-  "7839" -> "7845" 
+digraph "SetStaticByteField" {  
+"7930" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1398</SUB>> ]
+"7947" [label = <(soa,ScopedObjectAccess)<SUB>1398</SUB>> ]
+"7950" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1398</SUB>> ]
+"7957" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1398</SUB>> ]
+"7952" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1398</SUB>> ]
+"7958" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1398</SUB>> ]
+"7963" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1398</SUB>> ]
+"7953" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1398</SUB>> ]
+"7959" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1398</SUB>> ]
+"7964" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1398</SUB>> ]
+"7933" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1398</SUB>> ]
+"7955" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1398</SUB>> ]
+"7961" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1398</SUB>> ]
+"7965" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1398</SUB>> ]
+"7934" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1398</SUB>> ]
+"7938" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1398</SUB>> ]
+"7945" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1398</SUB>> ]
+"7966" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1398</SUB>> ]
+"7939" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1398</SUB>> ]
+"7968" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1398</SUB>> ]
+"7940" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1398</SUB>> ]
+"7942" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1398</SUB>> ]
+"7924" [label = <(METHOD,SetStaticByteField)<SUB>1397</SUB>> ]
+"7970" [label = <(METHOD_RETURN,void)<SUB>1397</SUB>> ]
+  "7930" -> "7934" 
+  "7930" -> "7947" 
+  "7947" -> "7955" 
+  "7950" -> "7961" 
+  "7957" -> "7970" 
+  "7952" -> "7950" 
+  "7958" -> "7968" 
+  "7963" -> "7957" 
+  "7953" -> "7952" 
+  "7959" -> "7958" 
+  "7964" -> "7963" 
+  "7933" -> "7940" 
+  "7933" -> "7947" 
+  "7955" -> "7953" 
+  "7961" -> "7959" 
+  "7965" -> "7964" 
+  "7934" -> "7933" 
+  "7938" -> "7945" 
+  "7945" -> "7970" 
+  "7966" -> "7965" 
+  "7939" -> "7938" 
+  "7968" -> "7966" 
+  "7940" -> "7942" 
+  "7942" -> "7939" 
+  "7924" -> "7930" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/14-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/14-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,5 +1,7 @@
-digraph "ThrowSIOOBE" {  
-"457" [label = <(METHOD,ThrowSIOOBE)<SUB>331</SUB>> ]
-"463" [label = <(METHOD_RETURN,void)<SUB>331</SUB>> ]
-  "457" -> "463" 
+digraph "GetVersion" {  
+"310" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>343</SUB>> ]
+"307" [label = <(METHOD,GetVersion)<SUB>342</SUB>> ]
+"312" [label = <(METHOD_RETURN,jint)<SUB>342</SUB>> ]
+  "310" -> "312" 
+  "307" -> "310" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/140-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/140-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/140-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/140-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,51 @@
-digraph "SetLongField" {  
-"7922" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7954" [label = <(soa,ScopedObjectAccess)<SUB>1467</SUB>> ]
-"7956" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1467</SUB>> ]
-"7974" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1467</SUB>> ]
-"7981" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1467</SUB>> ]
-"7940" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1467</SUB>> ]
-"7957" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1467</SUB>> ]
-"7964" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1467</SUB>> ]
-"7976" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1467</SUB>> ]
-"7982" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1467</SUB>> ]
-"7987" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1467</SUB>> ]
-"7941" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1467</SUB>> ]
-"7945" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1467</SUB>> ]
-"7952" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7958" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1467</SUB>> ]
-"7965" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1467</SUB>> ]
-"7977" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7983" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1467</SUB>> ]
-"7988" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1467</SUB>> ]
-"7926" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1467</SUB>> ]
-"7946" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1467</SUB>> ]
-"7960" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7966" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1467</SUB>> ]
-"7969" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7979" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1467</SUB>> ]
-"7985" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1467</SUB>> ]
-"7927" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1467</SUB>> ]
-"7931" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1467</SUB>> ]
-"7938" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1467</SUB>> ]
-"7947" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1467</SUB>> ]
-"7949" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1467</SUB>> ]
-"7962" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1467</SUB>> ]
-"7968" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1467</SUB>> ]
-"7971" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1467</SUB>> ]
-"7932" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1467</SUB>> ]
-"7933" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1467</SUB>> ]
-"7935" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1467</SUB>> ]
-"7916" [label = <(METHOD,SetLongField)<SUB>1466</SUB>> ]
-"7991" [label = <(METHOD_RETURN,void)<SUB>1466</SUB>> ]
-  "7922" -> "7927" 
-  "7922" -> "7941" 
-  "7954" -> "7962" 
-  "7956" -> "7979" 
-  "7974" -> "7985" 
-  "7981" -> "7991" 
-  "7940" -> "7947" 
-  "7940" -> "7954" 
-  "7957" -> "7968" 
-  "7964" -> "7956" 
-  "7976" -> "7974" 
-  "7982" -> "7988" 
-  "7987" -> "7981" 
-  "7941" -> "7940" 
-  "7945" -> "7952" 
-  "7952" -> "7991" 
-  "7958" -> "7957" 
-  "7965" -> "7964" 
-  "7977" -> "7976" 
-  "7983" -> "7982" 
-  "7988" -> "7987" 
-  "7926" -> "7933" 
-  "7926" -> "7941" 
-  "7946" -> "7945" 
-  "7960" -> "7958" 
-  "7966" -> "7971" 
-  "7969" -> "7965" 
-  "7979" -> "7977" 
-  "7985" -> "7983" 
-  "7927" -> "7926" 
-  "7931" -> "7938" 
-  "7938" -> "7991" 
-  "7947" -> "7949" 
-  "7949" -> "7946" 
-  "7962" -> "7960" 
-  "7968" -> "7966" 
-  "7971" -> "7969" 
-  "7932" -> "7931" 
-  "7933" -> "7935" 
-  "7935" -> "7932" 
-  "7916" -> "7922" 
+digraph "SetStaticCharField" {  
+"7978" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1402</SUB>> ]
+"7995" [label = <(soa,ScopedObjectAccess)<SUB>1402</SUB>> ]
+"7998" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1402</SUB>> ]
+"8005" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1402</SUB>> ]
+"8000" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1402</SUB>> ]
+"8006" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1402</SUB>> ]
+"8011" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1402</SUB>> ]
+"8001" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1402</SUB>> ]
+"8007" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1402</SUB>> ]
+"8012" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1402</SUB>> ]
+"7981" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1402</SUB>> ]
+"8003" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1402</SUB>> ]
+"8009" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1402</SUB>> ]
+"8013" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1402</SUB>> ]
+"7982" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1402</SUB>> ]
+"7986" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1402</SUB>> ]
+"7993" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1402</SUB>> ]
+"8014" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1402</SUB>> ]
+"7987" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1402</SUB>> ]
+"8016" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1402</SUB>> ]
+"7988" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1402</SUB>> ]
+"7990" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1402</SUB>> ]
+"7972" [label = <(METHOD,SetStaticCharField)<SUB>1401</SUB>> ]
+"8018" [label = <(METHOD_RETURN,void)<SUB>1401</SUB>> ]
+  "7978" -> "7982" 
+  "7978" -> "7995" 
+  "7995" -> "8003" 
+  "7998" -> "8009" 
+  "8005" -> "8018" 
+  "8000" -> "7998" 
+  "8006" -> "8016" 
+  "8011" -> "8005" 
+  "8001" -> "8000" 
+  "8007" -> "8006" 
+  "8012" -> "8011" 
+  "7981" -> "7988" 
+  "7981" -> "7995" 
+  "8003" -> "8001" 
+  "8009" -> "8007" 
+  "8013" -> "8012" 
+  "7982" -> "7981" 
+  "7986" -> "7993" 
+  "7993" -> "8018" 
+  "8014" -> "8013" 
+  "7987" -> "7986" 
+  "8016" -> "8014" 
+  "7988" -> "7990" 
+  "7990" -> "7987" 
+  "7972" -> "7978" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/141-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/141-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/141-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/141-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,82 +1,51 @@
-digraph "SetShortField" {  
-"7999" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8031" [label = <(soa,ScopedObjectAccess)<SUB>1471</SUB>> ]
-"8033" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1471</SUB>> ]
-"8051" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1471</SUB>> ]
-"8058" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1471</SUB>> ]
-"8017" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1471</SUB>> ]
-"8034" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1471</SUB>> ]
-"8041" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1471</SUB>> ]
-"8053" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1471</SUB>> ]
-"8059" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1471</SUB>> ]
-"8064" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1471</SUB>> ]
-"8018" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1471</SUB>> ]
-"8022" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1471</SUB>> ]
-"8029" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8035" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1471</SUB>> ]
-"8042" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1471</SUB>> ]
-"8054" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8060" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1471</SUB>> ]
-"8065" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1471</SUB>> ]
-"8003" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1471</SUB>> ]
-"8023" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1471</SUB>> ]
-"8037" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8043" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1471</SUB>> ]
-"8046" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8056" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1471</SUB>> ]
-"8062" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1471</SUB>> ]
-"8004" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1471</SUB>> ]
-"8008" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1471</SUB>> ]
-"8015" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1471</SUB>> ]
-"8024" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1471</SUB>> ]
-"8026" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1471</SUB>> ]
-"8039" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1471</SUB>> ]
-"8045" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1471</SUB>> ]
-"8048" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1471</SUB>> ]
-"8009" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1471</SUB>> ]
-"8010" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1471</SUB>> ]
-"8012" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1471</SUB>> ]
-"7993" [label = <(METHOD,SetShortField)<SUB>1470</SUB>> ]
-"8068" [label = <(METHOD_RETURN,void)<SUB>1470</SUB>> ]
-  "7999" -> "8004" 
-  "7999" -> "8018" 
-  "8031" -> "8039" 
-  "8033" -> "8056" 
-  "8051" -> "8062" 
-  "8058" -> "8068" 
-  "8017" -> "8024" 
-  "8017" -> "8031" 
-  "8034" -> "8045" 
-  "8041" -> "8033" 
-  "8053" -> "8051" 
-  "8059" -> "8065" 
-  "8064" -> "8058" 
-  "8018" -> "8017" 
-  "8022" -> "8029" 
-  "8029" -> "8068" 
-  "8035" -> "8034" 
-  "8042" -> "8041" 
-  "8054" -> "8053" 
-  "8060" -> "8059" 
-  "8065" -> "8064" 
-  "8003" -> "8010" 
-  "8003" -> "8018" 
-  "8023" -> "8022" 
-  "8037" -> "8035" 
-  "8043" -> "8048" 
-  "8046" -> "8042" 
-  "8056" -> "8054" 
-  "8062" -> "8060" 
-  "8004" -> "8003" 
-  "8008" -> "8015" 
-  "8015" -> "8068" 
-  "8024" -> "8026" 
-  "8026" -> "8023" 
-  "8039" -> "8037" 
-  "8045" -> "8043" 
+digraph "SetStaticFloatField" {  
+"8026" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1406</SUB>> ]
+"8043" [label = <(soa,ScopedObjectAccess)<SUB>1406</SUB>> ]
+"8046" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1406</SUB>> ]
+"8053" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1406</SUB>> ]
+"8048" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1406</SUB>> ]
+"8054" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1406</SUB>> ]
+"8059" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1406</SUB>> ]
+"8049" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1406</SUB>> ]
+"8055" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1406</SUB>> ]
+"8060" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1406</SUB>> ]
+"8029" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1406</SUB>> ]
+"8051" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1406</SUB>> ]
+"8057" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1406</SUB>> ]
+"8061" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1406</SUB>> ]
+"8030" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1406</SUB>> ]
+"8034" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1406</SUB>> ]
+"8041" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1406</SUB>> ]
+"8062" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1406</SUB>> ]
+"8035" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1406</SUB>> ]
+"8064" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1406</SUB>> ]
+"8036" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1406</SUB>> ]
+"8038" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1406</SUB>> ]
+"8020" [label = <(METHOD,SetStaticFloatField)<SUB>1405</SUB>> ]
+"8066" [label = <(METHOD_RETURN,void)<SUB>1405</SUB>> ]
+  "8026" -> "8030" 
+  "8026" -> "8043" 
+  "8043" -> "8051" 
+  "8046" -> "8057" 
+  "8053" -> "8066" 
   "8048" -> "8046" 
-  "8009" -> "8008" 
-  "8010" -> "8012" 
-  "8012" -> "8009" 
-  "7993" -> "7999" 
+  "8054" -> "8064" 
+  "8059" -> "8053" 
+  "8049" -> "8048" 
+  "8055" -> "8054" 
+  "8060" -> "8059" 
+  "8029" -> "8036" 
+  "8029" -> "8043" 
+  "8051" -> "8049" 
+  "8057" -> "8055" 
+  "8061" -> "8060" 
+  "8030" -> "8029" 
+  "8034" -> "8041" 
+  "8041" -> "8066" 
+  "8062" -> "8061" 
+  "8035" -> "8034" 
+  "8064" -> "8062" 
+  "8036" -> "8038" 
+  "8038" -> "8035" 
+  "8020" -> "8026" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/142-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/142-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/142-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/142-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,51 @@
-digraph "SetStaticBooleanField" {  
-"8076" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1475</SUB>> ]
-"8093" [label = <(soa,ScopedObjectAccess)<SUB>1475</SUB>> ]
-"8096" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1475</SUB>> ]
-"8103" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1475</SUB>> ]
-"8098" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1475</SUB>> ]
-"8104" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1475</SUB>> ]
-"8109" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1475</SUB>> ]
-"8099" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1475</SUB>> ]
-"8105" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1475</SUB>> ]
-"8110" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1475</SUB>> ]
-"8079" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1475</SUB>> ]
-"8101" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1475</SUB>> ]
-"8107" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1475</SUB>> ]
-"8111" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1475</SUB>> ]
-"8080" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1475</SUB>> ]
-"8084" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1475</SUB>> ]
-"8091" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1475</SUB>> ]
-"8112" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1475</SUB>> ]
-"8085" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1475</SUB>> ]
-"8114" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1475</SUB>> ]
-"8086" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1475</SUB>> ]
-"8088" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1475</SUB>> ]
-"8070" [label = <(METHOD,SetStaticBooleanField)<SUB>1474</SUB>> ]
-"8116" [label = <(METHOD_RETURN,void)<SUB>1474</SUB>> ]
-  "8076" -> "8080" 
-  "8076" -> "8093" 
-  "8093" -> "8101" 
-  "8096" -> "8107" 
-  "8103" -> "8116" 
-  "8098" -> "8096" 
-  "8104" -> "8114" 
-  "8109" -> "8103" 
-  "8099" -> "8098" 
-  "8105" -> "8104" 
+digraph "SetStaticDoubleField" {  
+"8074" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1410</SUB>> ]
+"8091" [label = <(soa,ScopedObjectAccess)<SUB>1410</SUB>> ]
+"8094" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1410</SUB>> ]
+"8101" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1410</SUB>> ]
+"8096" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1410</SUB>> ]
+"8102" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1410</SUB>> ]
+"8107" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1410</SUB>> ]
+"8097" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1410</SUB>> ]
+"8103" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1410</SUB>> ]
+"8108" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1410</SUB>> ]
+"8077" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1410</SUB>> ]
+"8099" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1410</SUB>> ]
+"8105" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1410</SUB>> ]
+"8109" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1410</SUB>> ]
+"8078" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1410</SUB>> ]
+"8082" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1410</SUB>> ]
+"8089" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1410</SUB>> ]
+"8110" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1410</SUB>> ]
+"8083" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1410</SUB>> ]
+"8112" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1410</SUB>> ]
+"8084" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1410</SUB>> ]
+"8086" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1410</SUB>> ]
+"8068" [label = <(METHOD,SetStaticDoubleField)<SUB>1409</SUB>> ]
+"8114" [label = <(METHOD_RETURN,void)<SUB>1409</SUB>> ]
+  "8074" -> "8078" 
+  "8074" -> "8091" 
+  "8091" -> "8099" 
+  "8094" -> "8105" 
+  "8101" -> "8114" 
+  "8096" -> "8094" 
+  "8102" -> "8112" 
+  "8107" -> "8101" 
+  "8097" -> "8096" 
+  "8103" -> "8102" 
+  "8108" -> "8107" 
+  "8077" -> "8084" 
+  "8077" -> "8091" 
+  "8099" -> "8097" 
+  "8105" -> "8103" 
+  "8109" -> "8108" 
+  "8078" -> "8077" 
+  "8082" -> "8089" 
+  "8089" -> "8114" 
   "8110" -> "8109" 
-  "8079" -> "8086" 
-  "8079" -> "8093" 
-  "8101" -> "8099" 
-  "8107" -> "8105" 
-  "8111" -> "8110" 
-  "8080" -> "8079" 
-  "8084" -> "8091" 
-  "8091" -> "8116" 
-  "8112" -> "8111" 
-  "8085" -> "8084" 
-  "8114" -> "8112" 
-  "8086" -> "8088" 
-  "8088" -> "8085" 
-  "8070" -> "8076" 
+  "8083" -> "8082" 
+  "8112" -> "8110" 
+  "8084" -> "8086" 
+  "8086" -> "8083" 
+  "8068" -> "8074" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/143-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/143-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/143-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/143-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,51 @@
-digraph "SetStaticByteField" {  
-"8124" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1479</SUB>> ]
-"8141" [label = <(soa,ScopedObjectAccess)<SUB>1479</SUB>> ]
-"8144" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1479</SUB>> ]
-"8151" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1479</SUB>> ]
-"8146" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1479</SUB>> ]
-"8152" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1479</SUB>> ]
-"8157" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1479</SUB>> ]
-"8147" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1479</SUB>> ]
-"8153" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1479</SUB>> ]
-"8158" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1479</SUB>> ]
-"8127" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1479</SUB>> ]
-"8149" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1479</SUB>> ]
-"8155" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1479</SUB>> ]
-"8159" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1479</SUB>> ]
-"8128" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1479</SUB>> ]
-"8132" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1479</SUB>> ]
-"8139" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1479</SUB>> ]
-"8160" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1479</SUB>> ]
-"8133" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1479</SUB>> ]
-"8162" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1479</SUB>> ]
-"8134" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1479</SUB>> ]
-"8136" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1479</SUB>> ]
-"8118" [label = <(METHOD,SetStaticByteField)<SUB>1478</SUB>> ]
-"8164" [label = <(METHOD_RETURN,void)<SUB>1478</SUB>> ]
-  "8124" -> "8128" 
-  "8124" -> "8141" 
-  "8141" -> "8149" 
-  "8144" -> "8155" 
-  "8151" -> "8164" 
-  "8146" -> "8144" 
-  "8152" -> "8162" 
-  "8157" -> "8151" 
-  "8147" -> "8146" 
-  "8153" -> "8152" 
+digraph "SetStaticIntField" {  
+"8122" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1414</SUB>> ]
+"8139" [label = <(soa,ScopedObjectAccess)<SUB>1414</SUB>> ]
+"8142" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1414</SUB>> ]
+"8149" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1414</SUB>> ]
+"8144" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1414</SUB>> ]
+"8150" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1414</SUB>> ]
+"8155" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1414</SUB>> ]
+"8145" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1414</SUB>> ]
+"8151" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1414</SUB>> ]
+"8156" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1414</SUB>> ]
+"8125" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1414</SUB>> ]
+"8147" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1414</SUB>> ]
+"8153" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1414</SUB>> ]
+"8157" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1414</SUB>> ]
+"8126" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1414</SUB>> ]
+"8130" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1414</SUB>> ]
+"8137" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1414</SUB>> ]
+"8158" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1414</SUB>> ]
+"8131" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1414</SUB>> ]
+"8160" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1414</SUB>> ]
+"8132" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1414</SUB>> ]
+"8134" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1414</SUB>> ]
+"8116" [label = <(METHOD,SetStaticIntField)<SUB>1413</SUB>> ]
+"8162" [label = <(METHOD_RETURN,void)<SUB>1413</SUB>> ]
+  "8122" -> "8126" 
+  "8122" -> "8139" 
+  "8139" -> "8147" 
+  "8142" -> "8153" 
+  "8149" -> "8162" 
+  "8144" -> "8142" 
+  "8150" -> "8160" 
+  "8155" -> "8149" 
+  "8145" -> "8144" 
+  "8151" -> "8150" 
+  "8156" -> "8155" 
+  "8125" -> "8132" 
+  "8125" -> "8139" 
+  "8147" -> "8145" 
+  "8153" -> "8151" 
+  "8157" -> "8156" 
+  "8126" -> "8125" 
+  "8130" -> "8137" 
+  "8137" -> "8162" 
   "8158" -> "8157" 
-  "8127" -> "8134" 
-  "8127" -> "8141" 
-  "8149" -> "8147" 
-  "8155" -> "8153" 
-  "8159" -> "8158" 
-  "8128" -> "8127" 
-  "8132" -> "8139" 
-  "8139" -> "8164" 
-  "8160" -> "8159" 
-  "8133" -> "8132" 
-  "8162" -> "8160" 
-  "8134" -> "8136" 
-  "8136" -> "8133" 
-  "8118" -> "8124" 
+  "8131" -> "8130" 
+  "8160" -> "8158" 
+  "8132" -> "8134" 
+  "8134" -> "8131" 
+  "8116" -> "8122" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/144-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/144-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/144-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/144-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,51 @@
-digraph "SetStaticCharField" {  
-"8172" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1483</SUB>> ]
-"8189" [label = <(soa,ScopedObjectAccess)<SUB>1483</SUB>> ]
-"8192" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1483</SUB>> ]
-"8199" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1483</SUB>> ]
-"8194" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1483</SUB>> ]
-"8200" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1483</SUB>> ]
-"8205" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1483</SUB>> ]
-"8195" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1483</SUB>> ]
-"8201" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1483</SUB>> ]
-"8206" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1483</SUB>> ]
-"8175" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1483</SUB>> ]
-"8197" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1483</SUB>> ]
-"8203" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1483</SUB>> ]
-"8207" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1483</SUB>> ]
-"8176" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1483</SUB>> ]
-"8180" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1483</SUB>> ]
-"8187" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1483</SUB>> ]
-"8208" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1483</SUB>> ]
-"8181" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1483</SUB>> ]
-"8210" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1483</SUB>> ]
-"8182" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1483</SUB>> ]
-"8184" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1483</SUB>> ]
-"8166" [label = <(METHOD,SetStaticCharField)<SUB>1482</SUB>> ]
-"8212" [label = <(METHOD_RETURN,void)<SUB>1482</SUB>> ]
-  "8172" -> "8176" 
-  "8172" -> "8189" 
-  "8189" -> "8197" 
-  "8192" -> "8203" 
-  "8199" -> "8212" 
-  "8194" -> "8192" 
-  "8200" -> "8210" 
-  "8205" -> "8199" 
-  "8195" -> "8194" 
-  "8201" -> "8200" 
+digraph "SetStaticLongField" {  
+"8170" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1418</SUB>> ]
+"8187" [label = <(soa,ScopedObjectAccess)<SUB>1418</SUB>> ]
+"8190" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1418</SUB>> ]
+"8197" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1418</SUB>> ]
+"8192" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1418</SUB>> ]
+"8198" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1418</SUB>> ]
+"8203" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1418</SUB>> ]
+"8193" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1418</SUB>> ]
+"8199" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1418</SUB>> ]
+"8204" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1418</SUB>> ]
+"8173" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1418</SUB>> ]
+"8195" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1418</SUB>> ]
+"8201" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1418</SUB>> ]
+"8205" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1418</SUB>> ]
+"8174" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1418</SUB>> ]
+"8178" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1418</SUB>> ]
+"8185" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1418</SUB>> ]
+"8206" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1418</SUB>> ]
+"8179" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1418</SUB>> ]
+"8208" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1418</SUB>> ]
+"8180" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1418</SUB>> ]
+"8182" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1418</SUB>> ]
+"8164" [label = <(METHOD,SetStaticLongField)<SUB>1417</SUB>> ]
+"8210" [label = <(METHOD_RETURN,void)<SUB>1417</SUB>> ]
+  "8170" -> "8174" 
+  "8170" -> "8187" 
+  "8187" -> "8195" 
+  "8190" -> "8201" 
+  "8197" -> "8210" 
+  "8192" -> "8190" 
+  "8198" -> "8208" 
+  "8203" -> "8197" 
+  "8193" -> "8192" 
+  "8199" -> "8198" 
+  "8204" -> "8203" 
+  "8173" -> "8180" 
+  "8173" -> "8187" 
+  "8195" -> "8193" 
+  "8201" -> "8199" 
+  "8205" -> "8204" 
+  "8174" -> "8173" 
+  "8178" -> "8185" 
+  "8185" -> "8210" 
   "8206" -> "8205" 
-  "8175" -> "8182" 
-  "8175" -> "8189" 
-  "8197" -> "8195" 
-  "8203" -> "8201" 
-  "8207" -> "8206" 
-  "8176" -> "8175" 
-  "8180" -> "8187" 
-  "8187" -> "8212" 
-  "8208" -> "8207" 
-  "8181" -> "8180" 
-  "8210" -> "8208" 
-  "8182" -> "8184" 
-  "8184" -> "8181" 
-  "8166" -> "8172" 
+  "8179" -> "8178" 
+  "8208" -> "8206" 
+  "8180" -> "8182" 
+  "8182" -> "8179" 
+  "8164" -> "8170" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/145-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/145-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/145-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/145-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,51 @@
-digraph "SetStaticFloatField" {  
-"8220" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1487</SUB>> ]
-"8237" [label = <(soa,ScopedObjectAccess)<SUB>1487</SUB>> ]
-"8240" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1487</SUB>> ]
-"8247" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1487</SUB>> ]
-"8242" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1487</SUB>> ]
-"8248" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1487</SUB>> ]
-"8253" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1487</SUB>> ]
-"8243" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1487</SUB>> ]
-"8249" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1487</SUB>> ]
-"8254" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1487</SUB>> ]
-"8223" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1487</SUB>> ]
-"8245" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1487</SUB>> ]
-"8251" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1487</SUB>> ]
-"8255" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1487</SUB>> ]
-"8224" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1487</SUB>> ]
-"8228" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1487</SUB>> ]
-"8235" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1487</SUB>> ]
-"8256" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1487</SUB>> ]
-"8229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1487</SUB>> ]
-"8258" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1487</SUB>> ]
-"8230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1487</SUB>> ]
-"8232" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1487</SUB>> ]
-"8214" [label = <(METHOD,SetStaticFloatField)<SUB>1486</SUB>> ]
-"8260" [label = <(METHOD_RETURN,void)<SUB>1486</SUB>> ]
-  "8220" -> "8224" 
-  "8220" -> "8237" 
-  "8237" -> "8245" 
-  "8240" -> "8251" 
-  "8247" -> "8260" 
-  "8242" -> "8240" 
-  "8248" -> "8258" 
-  "8253" -> "8247" 
-  "8243" -> "8242" 
-  "8249" -> "8248" 
+digraph "SetStaticShortField" {  
+"8218" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1422</SUB>> ]
+"8235" [label = <(soa,ScopedObjectAccess)<SUB>1422</SUB>> ]
+"8238" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1422</SUB>> ]
+"8245" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1422</SUB>> ]
+"8240" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1422</SUB>> ]
+"8246" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1422</SUB>> ]
+"8251" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1422</SUB>> ]
+"8241" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1422</SUB>> ]
+"8247" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1422</SUB>> ]
+"8252" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1422</SUB>> ]
+"8221" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1422</SUB>> ]
+"8243" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1422</SUB>> ]
+"8249" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1422</SUB>> ]
+"8253" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1422</SUB>> ]
+"8222" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1422</SUB>> ]
+"8226" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1422</SUB>> ]
+"8233" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1422</SUB>> ]
+"8254" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1422</SUB>> ]
+"8227" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1422</SUB>> ]
+"8256" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1422</SUB>> ]
+"8228" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1422</SUB>> ]
+"8230" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1422</SUB>> ]
+"8212" [label = <(METHOD,SetStaticShortField)<SUB>1421</SUB>> ]
+"8258" [label = <(METHOD_RETURN,void)<SUB>1421</SUB>> ]
+  "8218" -> "8222" 
+  "8218" -> "8235" 
+  "8235" -> "8243" 
+  "8238" -> "8249" 
+  "8245" -> "8258" 
+  "8240" -> "8238" 
+  "8246" -> "8256" 
+  "8251" -> "8245" 
+  "8241" -> "8240" 
+  "8247" -> "8246" 
+  "8252" -> "8251" 
+  "8221" -> "8228" 
+  "8221" -> "8235" 
+  "8243" -> "8241" 
+  "8249" -> "8247" 
+  "8253" -> "8252" 
+  "8222" -> "8221" 
+  "8226" -> "8233" 
+  "8233" -> "8258" 
   "8254" -> "8253" 
-  "8223" -> "8230" 
-  "8223" -> "8237" 
-  "8245" -> "8243" 
-  "8251" -> "8249" 
-  "8255" -> "8254" 
-  "8224" -> "8223" 
-  "8228" -> "8235" 
-  "8235" -> "8260" 
-  "8256" -> "8255" 
-  "8229" -> "8228" 
-  "8258" -> "8256" 
-  "8230" -> "8232" 
-  "8232" -> "8229" 
-  "8214" -> "8220" 
+  "8227" -> "8226" 
+  "8256" -> "8254" 
+  "8228" -> "8230" 
+  "8230" -> "8227" 
+  "8212" -> "8218" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/146-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/146-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/146-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/146-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,51 @@
-digraph "SetStaticDoubleField" {  
-"8268" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1491</SUB>> ]
-"8285" [label = <(soa,ScopedObjectAccess)<SUB>1491</SUB>> ]
-"8288" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1491</SUB>> ]
-"8295" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1491</SUB>> ]
-"8290" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1491</SUB>> ]
-"8296" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1491</SUB>> ]
-"8301" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1491</SUB>> ]
-"8291" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1491</SUB>> ]
-"8297" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1491</SUB>> ]
-"8302" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1491</SUB>> ]
-"8271" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1491</SUB>> ]
-"8293" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1491</SUB>> ]
-"8299" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1491</SUB>> ]
-"8303" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1491</SUB>> ]
-"8272" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1491</SUB>> ]
-"8276" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1491</SUB>> ]
-"8283" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1491</SUB>> ]
-"8304" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1491</SUB>> ]
-"8277" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1491</SUB>> ]
-"8306" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1491</SUB>> ]
-"8278" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1491</SUB>> ]
-"8280" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1491</SUB>> ]
-"8262" [label = <(METHOD,SetStaticDoubleField)<SUB>1490</SUB>> ]
-"8308" [label = <(METHOD_RETURN,void)<SUB>1490</SUB>> ]
-  "8268" -> "8272" 
-  "8268" -> "8285" 
-  "8285" -> "8293" 
-  "8288" -> "8299" 
-  "8295" -> "8308" 
-  "8290" -> "8288" 
-  "8296" -> "8306" 
-  "8301" -> "8295" 
-  "8291" -> "8290" 
-  "8297" -> "8296" 
+digraph "CallStaticObjectMethod" {  
+"8266" [label = <(va_start,va_start(ap, mid))<SUB>1427</SUB>> ]
+"8269" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1428</SUB>> ]
+"8288" [label = <(soa,soa(env))<SUB>1429</SUB>> ]
+"8291" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1430</SUB>> ]
+"8298" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1431</SUB>> ]
+"8310" [label = <(va_end,va_end(ap))<SUB>1432</SUB>> ]
+"8312" [label = <(RETURN,return local_result;,return local_result;)<SUB>1433</SUB>> ]
+"8292" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1430</SUB>> ]
+"8300" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1431</SUB>> ]
+"8301" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1431</SUB>> ]
+"8306" [label = <(GetL,result.GetL())<SUB>1431</SUB>> ]
+"8273" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1428</SUB>> ]
+"8302" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1431</SUB>> ]
+"8307" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1431</SUB>> ]
+"8274" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1428</SUB>> ]
+"8278" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1428</SUB>> ]
+"8285" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1428</SUB>> ]
+"8304" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1431</SUB>> ]
+"8309" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1431</SUB>> ]
+"8279" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1428</SUB>> ]
+"8280" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1428</SUB>> ]
+"8282" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1428</SUB>> ]
+"8260" [label = <(METHOD,CallStaticObjectMethod)<SUB>1425</SUB>> ]
+"8314" [label = <(METHOD_RETURN,jobject)<SUB>1425</SUB>> ]
+  "8266" -> "8269" 
+  "8269" -> "8274" 
+  "8269" -> "8288" 
+  "8288" -> "8292" 
+  "8291" -> "8304" 
+  "8298" -> "8310" 
+  "8310" -> "8312" 
+  "8312" -> "8314" 
+  "8292" -> "8291" 
+  "8300" -> "8298" 
+  "8301" -> "8309" 
+  "8306" -> "8300" 
+  "8273" -> "8280" 
+  "8273" -> "8288" 
   "8302" -> "8301" 
-  "8271" -> "8278" 
-  "8271" -> "8285" 
-  "8293" -> "8291" 
-  "8299" -> "8297" 
-  "8303" -> "8302" 
-  "8272" -> "8271" 
-  "8276" -> "8283" 
-  "8283" -> "8308" 
-  "8304" -> "8303" 
-  "8277" -> "8276" 
-  "8306" -> "8304" 
-  "8278" -> "8280" 
-  "8280" -> "8277" 
-  "8262" -> "8268" 
+  "8307" -> "8306" 
+  "8274" -> "8273" 
+  "8278" -> "8285" 
+  "8285" -> "8314" 
+  "8304" -> "8302" 
+  "8309" -> "8307" 
+  "8279" -> "8278" 
+  "8280" -> "8282" 
+  "8282" -> "8279" 
+  "8260" -> "8266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/147-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/147-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/147-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/147-cfg.dot	2023-06-07 19:35:21.297385043 +0330
@@ -1,51 +1,45 @@
-digraph "SetStaticIntField" {  
-"8316" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1495</SUB>> ]
-"8333" [label = <(soa,ScopedObjectAccess)<SUB>1495</SUB>> ]
-"8336" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1495</SUB>> ]
-"8343" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1495</SUB>> ]
-"8338" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1495</SUB>> ]
-"8344" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1495</SUB>> ]
-"8349" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1495</SUB>> ]
-"8339" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1495</SUB>> ]
-"8345" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1495</SUB>> ]
-"8350" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1495</SUB>> ]
-"8319" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1495</SUB>> ]
-"8341" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1495</SUB>> ]
-"8347" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1495</SUB>> ]
-"8351" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1495</SUB>> ]
-"8320" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1495</SUB>> ]
-"8324" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1495</SUB>> ]
-"8331" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1495</SUB>> ]
-"8352" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1495</SUB>> ]
-"8325" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1495</SUB>> ]
-"8354" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1495</SUB>> ]
-"8326" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1495</SUB>> ]
-"8328" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1495</SUB>> ]
-"8310" [label = <(METHOD,SetStaticIntField)<SUB>1494</SUB>> ]
-"8356" [label = <(METHOD_RETURN,void)<SUB>1494</SUB>> ]
-  "8316" -> "8320" 
-  "8316" -> "8333" 
-  "8333" -> "8341" 
-  "8336" -> "8347" 
-  "8343" -> "8356" 
-  "8338" -> "8336" 
-  "8344" -> "8354" 
-  "8349" -> "8343" 
-  "8339" -> "8338" 
+digraph "CallStaticObjectMethodV" {  
+"8322" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1437</SUB>> ]
+"8341" [label = <(soa,soa(env))<SUB>1438</SUB>> ]
+"8344" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1439</SUB>> ]
+"8350" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1440</SUB>> ]
+"8345" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1439</SUB>> ]
+"8351" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1440</SUB>> ]
+"8352" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1440</SUB>> ]
+"8357" [label = <(GetL,result.GetL())<SUB>1440</SUB>> ]
+"8326" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1437</SUB>> ]
+"8353" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1440</SUB>> ]
+"8358" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1440</SUB>> ]
+"8327" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1437</SUB>> ]
+"8331" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1437</SUB>> ]
+"8338" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1437</SUB>> ]
+"8355" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1440</SUB>> ]
+"8360" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1440</SUB>> ]
+"8332" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1437</SUB>> ]
+"8333" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1437</SUB>> ]
+"8335" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1437</SUB>> ]
+"8316" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1436</SUB>> ]
+"8361" [label = <(METHOD_RETURN,jobject)<SUB>1436</SUB>> ]
+  "8322" -> "8327" 
+  "8322" -> "8341" 
+  "8341" -> "8345" 
+  "8344" -> "8355" 
+  "8350" -> "8361" 
   "8345" -> "8344" 
-  "8350" -> "8349" 
-  "8319" -> "8326" 
-  "8319" -> "8333" 
-  "8341" -> "8339" 
-  "8347" -> "8345" 
   "8351" -> "8350" 
-  "8320" -> "8319" 
-  "8324" -> "8331" 
-  "8331" -> "8356" 
-  "8352" -> "8351" 
-  "8325" -> "8324" 
-  "8354" -> "8352" 
-  "8326" -> "8328" 
-  "8328" -> "8325" 
-  "8310" -> "8316" 
+  "8352" -> "8360" 
+  "8357" -> "8351" 
+  "8326" -> "8333" 
+  "8326" -> "8341" 
+  "8353" -> "8352" 
+  "8358" -> "8357" 
+  "8327" -> "8326" 
+  "8331" -> "8338" 
+  "8338" -> "8361" 
+  "8355" -> "8353" 
+  "8360" -> "8358" 
+  "8332" -> "8331" 
+  "8333" -> "8335" 
+  "8335" -> "8332" 
+  "8316" -> "8322" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/148-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/148-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/148-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/148-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,51 +1,45 @@
-digraph "SetStaticLongField" {  
-"8364" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1499</SUB>> ]
-"8381" [label = <(soa,ScopedObjectAccess)<SUB>1499</SUB>> ]
-"8384" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1499</SUB>> ]
-"8391" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1499</SUB>> ]
-"8386" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1499</SUB>> ]
-"8392" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1499</SUB>> ]
-"8397" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1499</SUB>> ]
-"8387" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1499</SUB>> ]
-"8393" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1499</SUB>> ]
-"8398" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1499</SUB>> ]
-"8367" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1499</SUB>> ]
-"8389" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1499</SUB>> ]
-"8395" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1499</SUB>> ]
-"8399" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1499</SUB>> ]
-"8368" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1499</SUB>> ]
-"8372" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1499</SUB>> ]
-"8379" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1499</SUB>> ]
-"8400" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1499</SUB>> ]
-"8373" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1499</SUB>> ]
-"8402" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1499</SUB>> ]
-"8374" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1499</SUB>> ]
-"8376" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1499</SUB>> ]
-"8358" [label = <(METHOD,SetStaticLongField)<SUB>1498</SUB>> ]
-"8404" [label = <(METHOD_RETURN,void)<SUB>1498</SUB>> ]
-  "8364" -> "8368" 
-  "8364" -> "8381" 
-  "8381" -> "8389" 
-  "8384" -> "8395" 
-  "8391" -> "8404" 
-  "8386" -> "8384" 
-  "8392" -> "8402" 
-  "8397" -> "8391" 
-  "8387" -> "8386" 
-  "8393" -> "8392" 
+digraph "CallStaticObjectMethodA" {  
+"8369" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1444</SUB>> ]
+"8388" [label = <(soa,soa(env))<SUB>1445</SUB>> ]
+"8391" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1446</SUB>> ]
+"8397" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1447</SUB>> ]
+"8392" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1446</SUB>> ]
+"8398" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1447</SUB>> ]
+"8399" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1447</SUB>> ]
+"8404" [label = <(GetL,result.GetL())<SUB>1447</SUB>> ]
+"8373" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1444</SUB>> ]
+"8400" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1447</SUB>> ]
+"8405" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1447</SUB>> ]
+"8374" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1444</SUB>> ]
+"8378" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1444</SUB>> ]
+"8385" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1444</SUB>> ]
+"8402" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1447</SUB>> ]
+"8407" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1447</SUB>> ]
+"8379" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1444</SUB>> ]
+"8380" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1444</SUB>> ]
+"8382" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1444</SUB>> ]
+"8363" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1443</SUB>> ]
+"8408" [label = <(METHOD_RETURN,jobject)<SUB>1443</SUB>> ]
+  "8369" -> "8374" 
+  "8369" -> "8388" 
+  "8388" -> "8392" 
+  "8391" -> "8402" 
+  "8397" -> "8408" 
+  "8392" -> "8391" 
   "8398" -> "8397" 
-  "8367" -> "8374" 
-  "8367" -> "8381" 
-  "8389" -> "8387" 
-  "8395" -> "8393" 
-  "8399" -> "8398" 
-  "8368" -> "8367" 
-  "8372" -> "8379" 
-  "8379" -> "8404" 
+  "8399" -> "8407" 
+  "8404" -> "8398" 
+  "8373" -> "8380" 
+  "8373" -> "8388" 
   "8400" -> "8399" 
-  "8373" -> "8372" 
+  "8405" -> "8404" 
+  "8374" -> "8373" 
+  "8378" -> "8385" 
+  "8385" -> "8408" 
   "8402" -> "8400" 
-  "8374" -> "8376" 
-  "8376" -> "8373" 
-  "8358" -> "8364" 
+  "8407" -> "8405" 
+  "8379" -> "8378" 
+  "8380" -> "8382" 
+  "8382" -> "8379" 
+  "8363" -> "8369" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/149-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/149-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/149-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/149-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,51 +1,41 @@
-digraph "SetStaticShortField" {  
-"8412" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1503</SUB>> ]
-"8429" [label = <(soa,ScopedObjectAccess)<SUB>1503</SUB>> ]
-"8432" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1503</SUB>> ]
-"8439" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1503</SUB>> ]
-"8434" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1503</SUB>> ]
-"8440" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1503</SUB>> ]
-"8445" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1503</SUB>> ]
-"8435" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1503</SUB>> ]
-"8441" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1503</SUB>> ]
-"8446" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1503</SUB>> ]
-"8415" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1503</SUB>> ]
-"8437" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1503</SUB>> ]
-"8443" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1503</SUB>> ]
-"8447" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1503</SUB>> ]
-"8416" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1503</SUB>> ]
-"8420" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>1503</SUB>> ]
-"8427" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1503</SUB>> ]
-"8448" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1503</SUB>> ]
-"8421" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1503</SUB>> ]
-"8450" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1503</SUB>> ]
-"8422" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1503</SUB>> ]
-"8424" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1503</SUB>> ]
-"8406" [label = <(METHOD,SetStaticShortField)<SUB>1502</SUB>> ]
-"8452" [label = <(METHOD_RETURN,void)<SUB>1502</SUB>> ]
-  "8412" -> "8416" 
-  "8412" -> "8429" 
-  "8429" -> "8437" 
-  "8432" -> "8443" 
-  "8439" -> "8452" 
-  "8434" -> "8432" 
-  "8440" -> "8450" 
-  "8445" -> "8439" 
-  "8435" -> "8434" 
-  "8441" -> "8440" 
-  "8446" -> "8445" 
-  "8415" -> "8422" 
-  "8415" -> "8429" 
-  "8437" -> "8435" 
-  "8443" -> "8441" 
-  "8447" -> "8446" 
-  "8416" -> "8415" 
-  "8420" -> "8427" 
-  "8427" -> "8452" 
-  "8448" -> "8447" 
-  "8421" -> "8420" 
-  "8450" -> "8448" 
-  "8422" -> "8424" 
-  "8424" -> "8421" 
-  "8406" -> "8412" 
+digraph "CallStaticBooleanMethod" {  
+"8416" [label = <(va_start,va_start(ap, mid))<SUB>1452</SUB>> ]
+"8419" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1453</SUB>> ]
+"8438" [label = <(soa,soa(env))<SUB>1454</SUB>> ]
+"8441" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1455</SUB>> ]
+"8447" [label = <(va_end,va_end(ap))<SUB>1456</SUB>> ]
+"8449" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1457</SUB>> ]
+"8442" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1455</SUB>> ]
+"8450" [label = <(GetZ,result.GetZ())<SUB>1457</SUB>> ]
+"8451" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1457</SUB>> ]
+"8423" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1453</SUB>> ]
+"8453" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1457</SUB>> ]
+"8424" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1453</SUB>> ]
+"8428" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1453</SUB>> ]
+"8435" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1453</SUB>> ]
+"8429" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1453</SUB>> ]
+"8430" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1453</SUB>> ]
+"8432" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1453</SUB>> ]
+"8410" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1450</SUB>> ]
+"8454" [label = <(METHOD_RETURN,jboolean)<SUB>1450</SUB>> ]
+  "8416" -> "8419" 
+  "8419" -> "8424" 
+  "8419" -> "8438" 
+  "8438" -> "8442" 
+  "8441" -> "8447" 
+  "8447" -> "8453" 
+  "8449" -> "8454" 
+  "8442" -> "8441" 
+  "8450" -> "8449" 
+  "8451" -> "8450" 
+  "8423" -> "8430" 
+  "8423" -> "8438" 
+  "8453" -> "8451" 
+  "8424" -> "8423" 
+  "8428" -> "8435" 
+  "8435" -> "8454" 
+  "8429" -> "8428" 
+  "8430" -> "8432" 
+  "8432" -> "8429" 
+  "8410" -> "8416" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/15-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/15-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,5 +1,11 @@
-digraph "ThrowNewException" {  
-"468" [label = <(METHOD,ThrowNewException)<SUB>339</SUB>> ]
-"474" [label = <(METHOD_RETURN,int)<SUB>339</SUB>> ]
-  "468" -> "474" 
+digraph "DefineClass" {  
+"321" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>347</SUB>> ]
+"325" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>348</SUB>> ]
+"322" [label = <(LOG,LOG(WARNING))<SUB>347</SUB>> ]
+"314" [label = <(METHOD,DefineClass)<SUB>346</SUB>> ]
+"327" [label = <(METHOD_RETURN,jclass)<SUB>346</SUB>> ]
+  "321" -> "325" 
+  "325" -> "327" 
+  "322" -> "321" 
+  "314" -> "322" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/150-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/150-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/150-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/150-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,51 +1,35 @@
-digraph "CallStaticObjectMethod" {  
-"8460" [label = <(va_start,va_start(ap, mid))<SUB>1508</SUB>> ]
-"8463" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1509</SUB>> ]
-"8482" [label = <(soa,soa(env))<SUB>1510</SUB>> ]
-"8485" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1511</SUB>> ]
-"8492" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1512</SUB>> ]
-"8504" [label = <(va_end,va_end(ap))<SUB>1513</SUB>> ]
-"8506" [label = <(RETURN,return local_result;,return local_result;)<SUB>1514</SUB>> ]
-"8486" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1511</SUB>> ]
-"8494" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1512</SUB>> ]
-"8495" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1512</SUB>> ]
-"8500" [label = <(GetL,result.GetL())<SUB>1512</SUB>> ]
-"8467" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1509</SUB>> ]
-"8496" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1512</SUB>> ]
-"8501" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1512</SUB>> ]
-"8468" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1509</SUB>> ]
-"8472" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1509</SUB>> ]
-"8479" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1509</SUB>> ]
-"8498" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1512</SUB>> ]
-"8503" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1512</SUB>> ]
-"8473" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1509</SUB>> ]
-"8474" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1509</SUB>> ]
-"8476" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1509</SUB>> ]
-"8454" [label = <(METHOD,CallStaticObjectMethod)<SUB>1506</SUB>> ]
-"8508" [label = <(METHOD_RETURN,jobject)<SUB>1506</SUB>> ]
-  "8460" -> "8463" 
-  "8463" -> "8468" 
-  "8463" -> "8482" 
-  "8482" -> "8486" 
-  "8485" -> "8498" 
-  "8492" -> "8504" 
-  "8504" -> "8506" 
-  "8506" -> "8508" 
-  "8486" -> "8485" 
-  "8494" -> "8492" 
-  "8495" -> "8503" 
-  "8500" -> "8494" 
-  "8467" -> "8474" 
-  "8467" -> "8482" 
-  "8496" -> "8495" 
-  "8501" -> "8500" 
-  "8468" -> "8467" 
-  "8472" -> "8479" 
-  "8479" -> "8508" 
-  "8498" -> "8496" 
-  "8503" -> "8501" 
-  "8473" -> "8472" 
-  "8474" -> "8476" 
-  "8476" -> "8473" 
-  "8454" -> "8460" 
+digraph "CallStaticBooleanMethodV" {  
+"8462" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1461</SUB>> ]
+"8481" [label = <(soa,soa(env))<SUB>1462</SUB>> ]
+"8483" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1463</SUB>> ]
+"8484" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1463</SUB>> ]
+"8485" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1463</SUB>> ]
+"8466" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1461</SUB>> ]
+"8486" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1463</SUB>> ]
+"8491" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1463</SUB>> ]
+"8467" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1461</SUB>> ]
+"8471" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1461</SUB>> ]
+"8478" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1461</SUB>> ]
+"8472" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1461</SUB>> ]
+"8473" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1461</SUB>> ]
+"8475" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1461</SUB>> ]
+"8456" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1460</SUB>> ]
+"8492" [label = <(METHOD_RETURN,jboolean)<SUB>1460</SUB>> ]
+  "8462" -> "8467" 
+  "8462" -> "8481" 
+  "8481" -> "8486" 
+  "8483" -> "8492" 
+  "8484" -> "8483" 
+  "8485" -> "8484" 
+  "8466" -> "8473" 
+  "8466" -> "8481" 
+  "8486" -> "8491" 
+  "8491" -> "8485" 
+  "8467" -> "8466" 
+  "8471" -> "8478" 
+  "8478" -> "8492" 
+  "8472" -> "8471" 
+  "8473" -> "8475" 
+  "8475" -> "8472" 
+  "8456" -> "8462" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/151-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/151-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/151-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/151-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,45 +1,35 @@
-digraph "CallStaticObjectMethodV" {  
-"8516" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1518</SUB>> ]
-"8535" [label = <(soa,soa(env))<SUB>1519</SUB>> ]
-"8538" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1520</SUB>> ]
-"8544" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1521</SUB>> ]
-"8539" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1520</SUB>> ]
-"8545" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1521</SUB>> ]
-"8546" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1521</SUB>> ]
-"8551" [label = <(GetL,result.GetL())<SUB>1521</SUB>> ]
-"8520" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1518</SUB>> ]
-"8547" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1521</SUB>> ]
-"8552" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1521</SUB>> ]
-"8521" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1518</SUB>> ]
-"8525" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1518</SUB>> ]
-"8532" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1518</SUB>> ]
-"8549" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1521</SUB>> ]
-"8554" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1521</SUB>> ]
-"8526" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1518</SUB>> ]
-"8527" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1518</SUB>> ]
-"8529" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1518</SUB>> ]
-"8510" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1517</SUB>> ]
-"8555" [label = <(METHOD_RETURN,jobject)<SUB>1517</SUB>> ]
-  "8516" -> "8521" 
-  "8516" -> "8535" 
-  "8535" -> "8539" 
-  "8538" -> "8549" 
-  "8544" -> "8555" 
-  "8539" -> "8538" 
-  "8545" -> "8544" 
-  "8546" -> "8554" 
-  "8551" -> "8545" 
-  "8520" -> "8527" 
-  "8520" -> "8535" 
-  "8547" -> "8546" 
-  "8552" -> "8551" 
-  "8521" -> "8520" 
-  "8525" -> "8532" 
-  "8532" -> "8555" 
-  "8549" -> "8547" 
-  "8554" -> "8552" 
-  "8526" -> "8525" 
-  "8527" -> "8529" 
-  "8529" -> "8526" 
-  "8510" -> "8516" 
+digraph "CallStaticBooleanMethodA" {  
+"8500" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1467</SUB>> ]
+"8519" [label = <(soa,soa(env))<SUB>1468</SUB>> ]
+"8521" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1469</SUB>> ]
+"8522" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1469</SUB>> ]
+"8523" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1469</SUB>> ]
+"8504" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1467</SUB>> ]
+"8524" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1469</SUB>> ]
+"8529" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1469</SUB>> ]
+"8505" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1467</SUB>> ]
+"8509" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1467</SUB>> ]
+"8516" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1467</SUB>> ]
+"8510" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1467</SUB>> ]
+"8511" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1467</SUB>> ]
+"8513" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1467</SUB>> ]
+"8494" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1466</SUB>> ]
+"8530" [label = <(METHOD_RETURN,jboolean)<SUB>1466</SUB>> ]
+  "8500" -> "8505" 
+  "8500" -> "8519" 
+  "8519" -> "8524" 
+  "8521" -> "8530" 
+  "8522" -> "8521" 
+  "8523" -> "8522" 
+  "8504" -> "8511" 
+  "8504" -> "8519" 
+  "8524" -> "8529" 
+  "8529" -> "8523" 
+  "8505" -> "8504" 
+  "8509" -> "8516" 
+  "8516" -> "8530" 
+  "8510" -> "8509" 
+  "8511" -> "8513" 
+  "8513" -> "8510" 
+  "8494" -> "8500" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/152-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/152-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/152-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/152-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,45 +1,41 @@
-digraph "CallStaticObjectMethodA" {  
-"8563" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1525</SUB>> ]
-"8582" [label = <(soa,soa(env))<SUB>1526</SUB>> ]
-"8585" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1527</SUB>> ]
-"8591" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1528</SUB>> ]
-"8586" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1527</SUB>> ]
-"8592" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1528</SUB>> ]
-"8593" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1528</SUB>> ]
-"8598" [label = <(GetL,result.GetL())<SUB>1528</SUB>> ]
-"8567" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1525</SUB>> ]
-"8594" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1528</SUB>> ]
-"8599" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1528</SUB>> ]
-"8568" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1525</SUB>> ]
-"8572" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1525</SUB>> ]
-"8579" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1525</SUB>> ]
-"8596" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1528</SUB>> ]
-"8601" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1528</SUB>> ]
-"8573" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1525</SUB>> ]
-"8574" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1525</SUB>> ]
-"8576" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1525</SUB>> ]
-"8557" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1524</SUB>> ]
-"8602" [label = <(METHOD_RETURN,jobject)<SUB>1524</SUB>> ]
-  "8563" -> "8568" 
-  "8563" -> "8582" 
-  "8582" -> "8586" 
-  "8585" -> "8596" 
-  "8591" -> "8602" 
-  "8586" -> "8585" 
-  "8592" -> "8591" 
-  "8593" -> "8601" 
-  "8598" -> "8592" 
-  "8567" -> "8574" 
-  "8567" -> "8582" 
-  "8594" -> "8593" 
-  "8599" -> "8598" 
-  "8568" -> "8567" 
-  "8572" -> "8579" 
-  "8579" -> "8602" 
-  "8596" -> "8594" 
-  "8601" -> "8599" 
+digraph "CallStaticByteMethod" {  
+"8538" [label = <(va_start,va_start(ap, mid))<SUB>1474</SUB>> ]
+"8541" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1475</SUB>> ]
+"8560" [label = <(soa,soa(env))<SUB>1476</SUB>> ]
+"8563" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1477</SUB>> ]
+"8569" [label = <(va_end,va_end(ap))<SUB>1478</SUB>> ]
+"8571" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1479</SUB>> ]
+"8564" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1477</SUB>> ]
+"8572" [label = <(GetB,result.GetB())<SUB>1479</SUB>> ]
+"8573" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1479</SUB>> ]
+"8545" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1475</SUB>> ]
+"8575" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1479</SUB>> ]
+"8546" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1475</SUB>> ]
+"8550" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1475</SUB>> ]
+"8557" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1475</SUB>> ]
+"8551" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1475</SUB>> ]
+"8552" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1475</SUB>> ]
+"8554" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1475</SUB>> ]
+"8532" [label = <(METHOD,CallStaticByteMethod)<SUB>1472</SUB>> ]
+"8576" [label = <(METHOD_RETURN,jbyte)<SUB>1472</SUB>> ]
+  "8538" -> "8541" 
+  "8541" -> "8546" 
+  "8541" -> "8560" 
+  "8560" -> "8564" 
+  "8563" -> "8569" 
+  "8569" -> "8575" 
+  "8571" -> "8576" 
+  "8564" -> "8563" 
+  "8572" -> "8571" 
   "8573" -> "8572" 
-  "8574" -> "8576" 
-  "8576" -> "8573" 
-  "8557" -> "8563" 
+  "8545" -> "8552" 
+  "8545" -> "8560" 
+  "8575" -> "8573" 
+  "8546" -> "8545" 
+  "8550" -> "8557" 
+  "8557" -> "8576" 
+  "8551" -> "8550" 
+  "8552" -> "8554" 
+  "8554" -> "8551" 
+  "8532" -> "8538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/153-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/153-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/153-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/153-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticBooleanMethod" {  
-"8610" [label = <(va_start,va_start(ap, mid))<SUB>1533</SUB>> ]
-"8613" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1534</SUB>> ]
-"8632" [label = <(soa,soa(env))<SUB>1535</SUB>> ]
-"8635" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1536</SUB>> ]
-"8641" [label = <(va_end,va_end(ap))<SUB>1537</SUB>> ]
-"8643" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1538</SUB>> ]
-"8636" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1536</SUB>> ]
-"8644" [label = <(GetZ,result.GetZ())<SUB>1538</SUB>> ]
-"8645" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1538</SUB>> ]
-"8617" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1534</SUB>> ]
-"8647" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1538</SUB>> ]
-"8618" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1534</SUB>> ]
-"8622" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1534</SUB>> ]
-"8629" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1534</SUB>> ]
-"8623" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1534</SUB>> ]
-"8624" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1534</SUB>> ]
-"8626" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1534</SUB>> ]
-"8604" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1531</SUB>> ]
-"8648" [label = <(METHOD_RETURN,jboolean)<SUB>1531</SUB>> ]
-  "8610" -> "8613" 
-  "8613" -> "8618" 
-  "8613" -> "8632" 
-  "8632" -> "8636" 
-  "8635" -> "8641" 
-  "8641" -> "8647" 
-  "8643" -> "8648" 
-  "8636" -> "8635" 
-  "8644" -> "8643" 
-  "8645" -> "8644" 
-  "8617" -> "8624" 
-  "8617" -> "8632" 
-  "8647" -> "8645" 
-  "8618" -> "8617" 
-  "8622" -> "8629" 
-  "8629" -> "8648" 
-  "8623" -> "8622" 
-  "8624" -> "8626" 
-  "8626" -> "8623" 
-  "8604" -> "8610" 
+digraph "CallStaticByteMethodV" {  
+"8584" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1483</SUB>> ]
+"8603" [label = <(soa,soa(env))<SUB>1484</SUB>> ]
+"8605" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1485</SUB>> ]
+"8606" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1485</SUB>> ]
+"8607" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1485</SUB>> ]
+"8588" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1483</SUB>> ]
+"8608" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1485</SUB>> ]
+"8613" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1485</SUB>> ]
+"8589" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1483</SUB>> ]
+"8593" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1483</SUB>> ]
+"8600" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1483</SUB>> ]
+"8594" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1483</SUB>> ]
+"8595" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1483</SUB>> ]
+"8597" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1483</SUB>> ]
+"8578" [label = <(METHOD,CallStaticByteMethodV)<SUB>1482</SUB>> ]
+"8614" [label = <(METHOD_RETURN,jbyte)<SUB>1482</SUB>> ]
+  "8584" -> "8589" 
+  "8584" -> "8603" 
+  "8603" -> "8608" 
+  "8605" -> "8614" 
+  "8606" -> "8605" 
+  "8607" -> "8606" 
+  "8588" -> "8595" 
+  "8588" -> "8603" 
+  "8608" -> "8613" 
+  "8613" -> "8607" 
+  "8589" -> "8588" 
+  "8593" -> "8600" 
+  "8600" -> "8614" 
+  "8594" -> "8593" 
+  "8595" -> "8597" 
+  "8597" -> "8594" 
+  "8578" -> "8584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/154-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/154-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/154-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/154-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticBooleanMethodV" {  
-"8656" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1542</SUB>> ]
-"8675" [label = <(soa,soa(env))<SUB>1543</SUB>> ]
-"8677" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1544</SUB>> ]
-"8678" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1544</SUB>> ]
-"8679" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1544</SUB>> ]
-"8660" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1542</SUB>> ]
-"8680" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1544</SUB>> ]
-"8685" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1544</SUB>> ]
-"8661" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1542</SUB>> ]
-"8665" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1542</SUB>> ]
-"8672" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1542</SUB>> ]
-"8666" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1542</SUB>> ]
-"8667" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1542</SUB>> ]
-"8669" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1542</SUB>> ]
-"8650" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1541</SUB>> ]
-"8686" [label = <(METHOD_RETURN,jboolean)<SUB>1541</SUB>> ]
-  "8656" -> "8661" 
-  "8656" -> "8675" 
-  "8675" -> "8680" 
-  "8677" -> "8686" 
-  "8678" -> "8677" 
-  "8679" -> "8678" 
-  "8660" -> "8667" 
-  "8660" -> "8675" 
-  "8680" -> "8685" 
-  "8685" -> "8679" 
-  "8661" -> "8660" 
-  "8665" -> "8672" 
-  "8672" -> "8686" 
-  "8666" -> "8665" 
-  "8667" -> "8669" 
-  "8669" -> "8666" 
-  "8650" -> "8656" 
+digraph "CallStaticByteMethodA" {  
+"8622" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1489</SUB>> ]
+"8641" [label = <(soa,soa(env))<SUB>1490</SUB>> ]
+"8643" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1491</SUB>> ]
+"8644" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1491</SUB>> ]
+"8645" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1491</SUB>> ]
+"8626" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1489</SUB>> ]
+"8646" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1491</SUB>> ]
+"8651" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1491</SUB>> ]
+"8627" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1489</SUB>> ]
+"8631" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1489</SUB>> ]
+"8638" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1489</SUB>> ]
+"8632" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1489</SUB>> ]
+"8633" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1489</SUB>> ]
+"8635" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1489</SUB>> ]
+"8616" [label = <(METHOD,CallStaticByteMethodA)<SUB>1488</SUB>> ]
+"8652" [label = <(METHOD_RETURN,jbyte)<SUB>1488</SUB>> ]
+  "8622" -> "8627" 
+  "8622" -> "8641" 
+  "8641" -> "8646" 
+  "8643" -> "8652" 
+  "8644" -> "8643" 
+  "8645" -> "8644" 
+  "8626" -> "8633" 
+  "8626" -> "8641" 
+  "8646" -> "8651" 
+  "8651" -> "8645" 
+  "8627" -> "8626" 
+  "8631" -> "8638" 
+  "8638" -> "8652" 
+  "8632" -> "8631" 
+  "8633" -> "8635" 
+  "8635" -> "8632" 
+  "8616" -> "8622" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/155-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/155-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/155-cfg.dot	2023-06-07 19:35:14.767385846 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/155-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticBooleanMethodA" {  
-"8694" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1548</SUB>> ]
-"8713" [label = <(soa,soa(env))<SUB>1549</SUB>> ]
-"8715" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1550</SUB>> ]
-"8716" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1550</SUB>> ]
-"8717" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1550</SUB>> ]
-"8698" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1548</SUB>> ]
-"8718" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1550</SUB>> ]
-"8723" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1550</SUB>> ]
-"8699" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1548</SUB>> ]
-"8703" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1548</SUB>> ]
-"8710" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1548</SUB>> ]
-"8704" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1548</SUB>> ]
-"8705" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1548</SUB>> ]
-"8707" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1548</SUB>> ]
-"8688" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1547</SUB>> ]
-"8724" [label = <(METHOD_RETURN,jboolean)<SUB>1547</SUB>> ]
-  "8694" -> "8699" 
-  "8694" -> "8713" 
-  "8713" -> "8718" 
-  "8715" -> "8724" 
-  "8716" -> "8715" 
-  "8717" -> "8716" 
-  "8698" -> "8705" 
-  "8698" -> "8713" 
-  "8718" -> "8723" 
-  "8723" -> "8717" 
-  "8699" -> "8698" 
-  "8703" -> "8710" 
-  "8710" -> "8724" 
-  "8704" -> "8703" 
-  "8705" -> "8707" 
-  "8707" -> "8704" 
-  "8688" -> "8694" 
+digraph "CallStaticCharMethod" {  
+"8660" [label = <(va_start,va_start(ap, mid))<SUB>1496</SUB>> ]
+"8663" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1497</SUB>> ]
+"8682" [label = <(soa,soa(env))<SUB>1498</SUB>> ]
+"8685" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1499</SUB>> ]
+"8691" [label = <(va_end,va_end(ap))<SUB>1500</SUB>> ]
+"8693" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1501</SUB>> ]
+"8686" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1499</SUB>> ]
+"8694" [label = <(GetC,result.GetC())<SUB>1501</SUB>> ]
+"8695" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1501</SUB>> ]
+"8667" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1497</SUB>> ]
+"8697" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1501</SUB>> ]
+"8668" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1497</SUB>> ]
+"8672" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1497</SUB>> ]
+"8679" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1497</SUB>> ]
+"8673" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1497</SUB>> ]
+"8674" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1497</SUB>> ]
+"8676" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1497</SUB>> ]
+"8654" [label = <(METHOD,CallStaticCharMethod)<SUB>1494</SUB>> ]
+"8698" [label = <(METHOD_RETURN,jchar)<SUB>1494</SUB>> ]
+  "8660" -> "8663" 
+  "8663" -> "8668" 
+  "8663" -> "8682" 
+  "8682" -> "8686" 
+  "8685" -> "8691" 
+  "8691" -> "8697" 
+  "8693" -> "8698" 
+  "8686" -> "8685" 
+  "8694" -> "8693" 
+  "8695" -> "8694" 
+  "8667" -> "8674" 
+  "8667" -> "8682" 
+  "8697" -> "8695" 
+  "8668" -> "8667" 
+  "8672" -> "8679" 
+  "8679" -> "8698" 
+  "8673" -> "8672" 
+  "8674" -> "8676" 
+  "8676" -> "8673" 
+  "8654" -> "8660" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/156-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/156-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/156-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/156-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticByteMethod" {  
-"8732" [label = <(va_start,va_start(ap, mid))<SUB>1555</SUB>> ]
-"8735" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1556</SUB>> ]
-"8754" [label = <(soa,soa(env))<SUB>1557</SUB>> ]
-"8757" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1558</SUB>> ]
-"8763" [label = <(va_end,va_end(ap))<SUB>1559</SUB>> ]
-"8765" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1560</SUB>> ]
-"8758" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1558</SUB>> ]
-"8766" [label = <(GetB,result.GetB())<SUB>1560</SUB>> ]
-"8767" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1560</SUB>> ]
-"8739" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1556</SUB>> ]
-"8769" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1560</SUB>> ]
-"8740" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1556</SUB>> ]
-"8744" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1556</SUB>> ]
-"8751" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1556</SUB>> ]
-"8745" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1556</SUB>> ]
-"8746" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1556</SUB>> ]
-"8748" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1556</SUB>> ]
-"8726" [label = <(METHOD,CallStaticByteMethod)<SUB>1553</SUB>> ]
-"8770" [label = <(METHOD_RETURN,jbyte)<SUB>1553</SUB>> ]
-  "8732" -> "8735" 
-  "8735" -> "8740" 
-  "8735" -> "8754" 
-  "8754" -> "8758" 
-  "8757" -> "8763" 
-  "8763" -> "8769" 
-  "8765" -> "8770" 
-  "8758" -> "8757" 
-  "8766" -> "8765" 
-  "8767" -> "8766" 
-  "8739" -> "8746" 
-  "8739" -> "8754" 
-  "8769" -> "8767" 
-  "8740" -> "8739" 
-  "8744" -> "8751" 
-  "8751" -> "8770" 
-  "8745" -> "8744" 
-  "8746" -> "8748" 
-  "8748" -> "8745" 
-  "8726" -> "8732" 
+digraph "CallStaticCharMethodV" {  
+"8706" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1505</SUB>> ]
+"8725" [label = <(soa,soa(env))<SUB>1506</SUB>> ]
+"8727" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1507</SUB>> ]
+"8728" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1507</SUB>> ]
+"8729" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1507</SUB>> ]
+"8710" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1505</SUB>> ]
+"8730" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1507</SUB>> ]
+"8735" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1507</SUB>> ]
+"8711" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1505</SUB>> ]
+"8715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1505</SUB>> ]
+"8722" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1505</SUB>> ]
+"8716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1505</SUB>> ]
+"8717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1505</SUB>> ]
+"8719" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1505</SUB>> ]
+"8700" [label = <(METHOD,CallStaticCharMethodV)<SUB>1504</SUB>> ]
+"8736" [label = <(METHOD_RETURN,jchar)<SUB>1504</SUB>> ]
+  "8706" -> "8711" 
+  "8706" -> "8725" 
+  "8725" -> "8730" 
+  "8727" -> "8736" 
+  "8728" -> "8727" 
+  "8729" -> "8728" 
+  "8710" -> "8717" 
+  "8710" -> "8725" 
+  "8730" -> "8735" 
+  "8735" -> "8729" 
+  "8711" -> "8710" 
+  "8715" -> "8722" 
+  "8722" -> "8736" 
+  "8716" -> "8715" 
+  "8717" -> "8719" 
+  "8719" -> "8716" 
+  "8700" -> "8706" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/157-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/157-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/157-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/157-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticByteMethodV" {  
-"8778" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1564</SUB>> ]
-"8797" [label = <(soa,soa(env))<SUB>1565</SUB>> ]
-"8799" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1566</SUB>> ]
-"8800" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1566</SUB>> ]
-"8801" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1566</SUB>> ]
-"8782" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1564</SUB>> ]
-"8802" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1566</SUB>> ]
-"8807" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1566</SUB>> ]
-"8783" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1564</SUB>> ]
-"8787" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1564</SUB>> ]
-"8794" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1564</SUB>> ]
-"8788" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1564</SUB>> ]
-"8789" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1564</SUB>> ]
-"8791" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1564</SUB>> ]
-"8772" [label = <(METHOD,CallStaticByteMethodV)<SUB>1563</SUB>> ]
-"8808" [label = <(METHOD_RETURN,jbyte)<SUB>1563</SUB>> ]
-  "8778" -> "8783" 
-  "8778" -> "8797" 
-  "8797" -> "8802" 
-  "8799" -> "8808" 
-  "8800" -> "8799" 
-  "8801" -> "8800" 
-  "8782" -> "8789" 
-  "8782" -> "8797" 
-  "8802" -> "8807" 
-  "8807" -> "8801" 
-  "8783" -> "8782" 
-  "8787" -> "8794" 
-  "8794" -> "8808" 
-  "8788" -> "8787" 
-  "8789" -> "8791" 
-  "8791" -> "8788" 
-  "8772" -> "8778" 
+digraph "CallStaticCharMethodA" {  
+"8744" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1511</SUB>> ]
+"8763" [label = <(soa,soa(env))<SUB>1512</SUB>> ]
+"8765" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1513</SUB>> ]
+"8766" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1513</SUB>> ]
+"8767" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1513</SUB>> ]
+"8748" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1511</SUB>> ]
+"8768" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1513</SUB>> ]
+"8773" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1513</SUB>> ]
+"8749" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1511</SUB>> ]
+"8753" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1511</SUB>> ]
+"8760" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1511</SUB>> ]
+"8754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1511</SUB>> ]
+"8755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1511</SUB>> ]
+"8757" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1511</SUB>> ]
+"8738" [label = <(METHOD,CallStaticCharMethodA)<SUB>1510</SUB>> ]
+"8774" [label = <(METHOD_RETURN,jchar)<SUB>1510</SUB>> ]
+  "8744" -> "8749" 
+  "8744" -> "8763" 
+  "8763" -> "8768" 
+  "8765" -> "8774" 
+  "8766" -> "8765" 
+  "8767" -> "8766" 
+  "8748" -> "8755" 
+  "8748" -> "8763" 
+  "8768" -> "8773" 
+  "8773" -> "8767" 
+  "8749" -> "8748" 
+  "8753" -> "8760" 
+  "8760" -> "8774" 
+  "8754" -> "8753" 
+  "8755" -> "8757" 
+  "8757" -> "8754" 
+  "8738" -> "8744" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/158-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/158-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/158-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/158-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticByteMethodA" {  
-"8816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1570</SUB>> ]
-"8835" [label = <(soa,soa(env))<SUB>1571</SUB>> ]
-"8837" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1572</SUB>> ]
-"8838" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1572</SUB>> ]
-"8839" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1572</SUB>> ]
-"8820" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1570</SUB>> ]
-"8840" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1572</SUB>> ]
-"8845" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1572</SUB>> ]
-"8821" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1570</SUB>> ]
-"8825" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1570</SUB>> ]
-"8832" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1570</SUB>> ]
-"8826" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1570</SUB>> ]
-"8827" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1570</SUB>> ]
-"8829" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1570</SUB>> ]
-"8810" [label = <(METHOD,CallStaticByteMethodA)<SUB>1569</SUB>> ]
-"8846" [label = <(METHOD_RETURN,jbyte)<SUB>1569</SUB>> ]
-  "8816" -> "8821" 
-  "8816" -> "8835" 
-  "8835" -> "8840" 
-  "8837" -> "8846" 
-  "8838" -> "8837" 
-  "8839" -> "8838" 
-  "8820" -> "8827" 
-  "8820" -> "8835" 
-  "8840" -> "8845" 
-  "8845" -> "8839" 
-  "8821" -> "8820" 
-  "8825" -> "8832" 
-  "8832" -> "8846" 
-  "8826" -> "8825" 
-  "8827" -> "8829" 
-  "8829" -> "8826" 
-  "8810" -> "8816" 
+digraph "CallStaticShortMethod" {  
+"8782" [label = <(va_start,va_start(ap, mid))<SUB>1518</SUB>> ]
+"8785" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1519</SUB>> ]
+"8804" [label = <(soa,soa(env))<SUB>1520</SUB>> ]
+"8807" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1521</SUB>> ]
+"8813" [label = <(va_end,va_end(ap))<SUB>1522</SUB>> ]
+"8815" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1523</SUB>> ]
+"8808" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1521</SUB>> ]
+"8816" [label = <(GetS,result.GetS())<SUB>1523</SUB>> ]
+"8817" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1523</SUB>> ]
+"8789" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1519</SUB>> ]
+"8819" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1523</SUB>> ]
+"8790" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1519</SUB>> ]
+"8794" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1519</SUB>> ]
+"8801" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1519</SUB>> ]
+"8795" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1519</SUB>> ]
+"8796" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1519</SUB>> ]
+"8798" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1519</SUB>> ]
+"8776" [label = <(METHOD,CallStaticShortMethod)<SUB>1516</SUB>> ]
+"8820" [label = <(METHOD_RETURN,jshort)<SUB>1516</SUB>> ]
+  "8782" -> "8785" 
+  "8785" -> "8790" 
+  "8785" -> "8804" 
+  "8804" -> "8808" 
+  "8807" -> "8813" 
+  "8813" -> "8819" 
+  "8815" -> "8820" 
+  "8808" -> "8807" 
+  "8816" -> "8815" 
+  "8817" -> "8816" 
+  "8789" -> "8796" 
+  "8789" -> "8804" 
+  "8819" -> "8817" 
+  "8790" -> "8789" 
+  "8794" -> "8801" 
+  "8801" -> "8820" 
+  "8795" -> "8794" 
+  "8796" -> "8798" 
+  "8798" -> "8795" 
+  "8776" -> "8782" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/159-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/159-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/159-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/159-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticCharMethod" {  
-"8854" [label = <(va_start,va_start(ap, mid))<SUB>1577</SUB>> ]
-"8857" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1578</SUB>> ]
-"8876" [label = <(soa,soa(env))<SUB>1579</SUB>> ]
-"8879" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1580</SUB>> ]
-"8885" [label = <(va_end,va_end(ap))<SUB>1581</SUB>> ]
-"8887" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1582</SUB>> ]
-"8880" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1580</SUB>> ]
-"8888" [label = <(GetC,result.GetC())<SUB>1582</SUB>> ]
-"8889" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1582</SUB>> ]
-"8861" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1578</SUB>> ]
-"8891" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1582</SUB>> ]
-"8862" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1578</SUB>> ]
-"8866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1578</SUB>> ]
-"8873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1578</SUB>> ]
-"8867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1578</SUB>> ]
-"8868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1578</SUB>> ]
-"8870" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1578</SUB>> ]
-"8848" [label = <(METHOD,CallStaticCharMethod)<SUB>1575</SUB>> ]
-"8892" [label = <(METHOD_RETURN,jchar)<SUB>1575</SUB>> ]
-  "8854" -> "8857" 
-  "8857" -> "8862" 
-  "8857" -> "8876" 
-  "8876" -> "8880" 
-  "8879" -> "8885" 
-  "8885" -> "8891" 
-  "8887" -> "8892" 
-  "8880" -> "8879" 
-  "8888" -> "8887" 
-  "8889" -> "8888" 
-  "8861" -> "8868" 
-  "8861" -> "8876" 
-  "8891" -> "8889" 
-  "8862" -> "8861" 
-  "8866" -> "8873" 
-  "8873" -> "8892" 
-  "8867" -> "8866" 
-  "8868" -> "8870" 
-  "8870" -> "8867" 
-  "8848" -> "8854" 
+digraph "CallStaticShortMethodV" {  
+"8828" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1527</SUB>> ]
+"8847" [label = <(soa,soa(env))<SUB>1528</SUB>> ]
+"8849" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1529</SUB>> ]
+"8850" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1529</SUB>> ]
+"8851" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1529</SUB>> ]
+"8832" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1527</SUB>> ]
+"8852" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1529</SUB>> ]
+"8857" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1529</SUB>> ]
+"8833" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1527</SUB>> ]
+"8837" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1527</SUB>> ]
+"8844" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1527</SUB>> ]
+"8838" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1527</SUB>> ]
+"8839" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1527</SUB>> ]
+"8841" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1527</SUB>> ]
+"8822" [label = <(METHOD,CallStaticShortMethodV)<SUB>1526</SUB>> ]
+"8858" [label = <(METHOD_RETURN,jshort)<SUB>1526</SUB>> ]
+  "8828" -> "8833" 
+  "8828" -> "8847" 
+  "8847" -> "8852" 
+  "8849" -> "8858" 
+  "8850" -> "8849" 
+  "8851" -> "8850" 
+  "8832" -> "8839" 
+  "8832" -> "8847" 
+  "8852" -> "8857" 
+  "8857" -> "8851" 
+  "8833" -> "8832" 
+  "8837" -> "8844" 
+  "8844" -> "8858" 
+  "8838" -> "8837" 
+  "8839" -> "8841" 
+  "8841" -> "8838" 
+  "8822" -> "8828" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/16-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/16-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/16-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/16-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,15 +1,134 @@
-digraph "JavaVmExtFromEnv" {  
-"481" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm;,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm;)<SUB>382</SUB>> ]
-"482" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>382</SUB>> ]
-"483" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>382</SUB>> ]
-"486" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>382</SUB>> ]
-"484" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>382</SUB>> ]
-"478" [label = <(METHOD,JavaVmExtFromEnv)<SUB>381</SUB>> ]
-"487" [label = <(METHOD_RETURN,JavaVMExt)<SUB>381</SUB>> ]
-  "481" -> "487" 
-  "482" -> "481" 
-  "483" -> "486" 
-  "486" -> "482" 
-  "484" -> "483" 
-  "478" -> "484" 
+digraph "FindClass" {  
+"333" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>352</SUB>> ]
+"352" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>353</SUB>> ]
+"359" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>354</SUB>> ]
+"366" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>355</SUB>> ]
+"370" [label = <(soa,soa(env))<SUB>356</SUB>> ]
+"373" [label = <(&lt;operator&gt;.assignment,* c = nullptr)<SUB>357</SUB>> ]
+"435" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>365</SUB>> ]
+"354" [label = <(Runtime::Current,Runtime::Current())<SUB>353</SUB>> ]
+"361" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>354</SUB>> ]
+"367" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>355</SUB>> ]
+"377" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>358</SUB>> ]
+"436" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>365</SUB>> ]
+"355" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>353</SUB>> ]
+"362" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>354</SUB>> ]
+"378" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>358</SUB>> ]
+"382" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>359</SUB>> ]
+"391" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>360</SUB>> ]
+"404" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>361</SUB>> ]
+"437" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>365</SUB>> ]
+"337" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>352</SUB>> ]
+"357" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>353</SUB>> ]
+"364" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>354</SUB>> ]
+"380" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>358</SUB>> ]
+"383" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>359</SUB>> ]
+"386" [label = <(hs,hs(soa.Self()))<SUB>359</SUB>> ]
+"392" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>360</SUB>> ]
+"397" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>360</SUB>> ]
+"406" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>361</SUB>> ]
+"421" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>363</SUB>> ]
+"438" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>365</SUB>> ]
+"338" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>352</SUB>> ]
+"342" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>352</SUB>> ]
+"349" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>352</SUB>> ]
+"387" [label = <(Self,soa.Self())<SUB>359</SUB>> ]
+"394" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>360</SUB>> ]
+"398" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>360</SUB>> ]
+"407" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>361</SUB>> ]
+"410" [label = <(Self,soa.Self())<SUB>361</SUB>> ]
+"414" [label = <(c_str,descriptor.c_str())<SUB>361</SUB>> ]
+"423" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>363</SUB>> ]
+"440" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>365</SUB>> ]
+"343" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>352</SUB>> ]
+"388" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>359</SUB>> ]
+"396" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>360</SUB>> ]
+"399" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>360</SUB>> ]
+"402" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>360</SUB>> ]
+"409" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>361</SUB>> ]
+"411" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>361</SUB>> ]
+"415" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>361</SUB>> ]
+"424" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>363</SUB>> ]
+"427" [label = <(Self,soa.Self())<SUB>363</SUB>> ]
+"431" [label = <(c_str,descriptor.c_str())<SUB>363</SUB>> ]
+"344" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>352</SUB>> ]
+"346" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>352</SUB>> ]
+"390" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>359</SUB>> ]
+"401" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>360</SUB>> ]
+"413" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>361</SUB>> ]
+"417" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>361</SUB>> ]
+"426" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>363</SUB>> ]
+"428" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>363</SUB>> ]
+"432" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>363</SUB>> ]
+"430" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>363</SUB>> ]
+"434" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>363</SUB>> ]
+"329" [label = <(METHOD,FindClass)<SUB>351</SUB>> ]
+"443" [label = <(METHOD_RETURN,jclass)<SUB>351</SUB>> ]
+  "333" -> "338" 
+  "333" -> "357" 
+  "352" -> "364" 
+  "359" -> "367" 
+  "366" -> "370" 
+  "370" -> "373" 
+  "373" -> "380" 
+  "435" -> "443" 
+  "354" -> "352" 
+  "361" -> "359" 
+  "367" -> "366" 
+  "377" -> "383" 
+  "377" -> "426" 
+  "436" -> "435" 
+  "355" -> "354" 
+  "362" -> "361" 
+  "378" -> "377" 
+  "382" -> "396" 
+  "391" -> "409" 
+  "404" -> "440" 
+  "437" -> "436" 
+  "337" -> "344" 
+  "337" -> "357" 
+  "357" -> "355" 
+  "364" -> "362" 
+  "380" -> "378" 
+  "383" -> "390" 
+  "386" -> "382" 
+  "392" -> "401" 
+  "397" -> "391" 
+  "406" -> "404" 
+  "421" -> "440" 
+  "438" -> "437" 
+  "338" -> "337" 
+  "342" -> "349" 
+  "349" -> "443" 
+  "387" -> "386" 
+  "394" -> "392" 
+  "398" -> "397" 
+  "407" -> "413" 
+  "410" -> "417" 
+  "414" -> "406" 
+  "423" -> "421" 
+  "440" -> "438" 
+  "343" -> "342" 
+  "388" -> "387" 
+  "396" -> "394" 
+  "399" -> "402" 
+  "402" -> "398" 
+  "409" -> "407" 
+  "411" -> "410" 
+  "415" -> "414" 
+  "424" -> "430" 
+  "427" -> "434" 
+  "431" -> "423" 
+  "344" -> "346" 
+  "346" -> "343" 
+  "390" -> "388" 
+  "401" -> "399" 
+  "413" -> "411" 
+  "417" -> "415" 
+  "426" -> "424" 
+  "428" -> "427" 
+  "432" -> "431" 
+  "430" -> "428" 
+  "434" -> "432" 
+  "329" -> "333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/160-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/160-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/160-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/160-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticCharMethodV" {  
-"8900" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1586</SUB>> ]
-"8919" [label = <(soa,soa(env))<SUB>1587</SUB>> ]
-"8921" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1588</SUB>> ]
-"8922" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1588</SUB>> ]
-"8923" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1588</SUB>> ]
-"8904" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1586</SUB>> ]
-"8924" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1588</SUB>> ]
-"8929" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1588</SUB>> ]
-"8905" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1586</SUB>> ]
-"8909" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1586</SUB>> ]
-"8916" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1586</SUB>> ]
-"8910" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1586</SUB>> ]
-"8911" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1586</SUB>> ]
-"8913" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1586</SUB>> ]
-"8894" [label = <(METHOD,CallStaticCharMethodV)<SUB>1585</SUB>> ]
-"8930" [label = <(METHOD_RETURN,jchar)<SUB>1585</SUB>> ]
-  "8900" -> "8905" 
-  "8900" -> "8919" 
-  "8919" -> "8924" 
-  "8921" -> "8930" 
-  "8922" -> "8921" 
-  "8923" -> "8922" 
-  "8904" -> "8911" 
-  "8904" -> "8919" 
-  "8924" -> "8929" 
-  "8929" -> "8923" 
-  "8905" -> "8904" 
-  "8909" -> "8916" 
-  "8916" -> "8930" 
-  "8910" -> "8909" 
-  "8911" -> "8913" 
-  "8913" -> "8910" 
-  "8894" -> "8900" 
+digraph "CallStaticShortMethodA" {  
+"8866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1533</SUB>> ]
+"8885" [label = <(soa,soa(env))<SUB>1534</SUB>> ]
+"8887" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1535</SUB>> ]
+"8888" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1535</SUB>> ]
+"8889" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1535</SUB>> ]
+"8870" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1533</SUB>> ]
+"8890" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1535</SUB>> ]
+"8895" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1535</SUB>> ]
+"8871" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1533</SUB>> ]
+"8875" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1533</SUB>> ]
+"8882" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1533</SUB>> ]
+"8876" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1533</SUB>> ]
+"8877" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1533</SUB>> ]
+"8879" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1533</SUB>> ]
+"8860" [label = <(METHOD,CallStaticShortMethodA)<SUB>1532</SUB>> ]
+"8896" [label = <(METHOD_RETURN,jshort)<SUB>1532</SUB>> ]
+  "8866" -> "8871" 
+  "8866" -> "8885" 
+  "8885" -> "8890" 
+  "8887" -> "8896" 
+  "8888" -> "8887" 
+  "8889" -> "8888" 
+  "8870" -> "8877" 
+  "8870" -> "8885" 
+  "8890" -> "8895" 
+  "8895" -> "8889" 
+  "8871" -> "8870" 
+  "8875" -> "8882" 
+  "8882" -> "8896" 
+  "8876" -> "8875" 
+  "8877" -> "8879" 
+  "8879" -> "8876" 
+  "8860" -> "8866" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/161-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/161-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/161-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/161-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticCharMethodA" {  
-"8938" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1592</SUB>> ]
-"8957" [label = <(soa,soa(env))<SUB>1593</SUB>> ]
-"8959" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1594</SUB>> ]
-"8960" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1594</SUB>> ]
-"8961" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1594</SUB>> ]
-"8942" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1592</SUB>> ]
-"8962" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1594</SUB>> ]
-"8967" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1594</SUB>> ]
-"8943" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1592</SUB>> ]
-"8947" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1592</SUB>> ]
-"8954" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1592</SUB>> ]
-"8948" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1592</SUB>> ]
-"8949" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1592</SUB>> ]
-"8951" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1592</SUB>> ]
-"8932" [label = <(METHOD,CallStaticCharMethodA)<SUB>1591</SUB>> ]
-"8968" [label = <(METHOD_RETURN,jchar)<SUB>1591</SUB>> ]
-  "8938" -> "8943" 
-  "8938" -> "8957" 
-  "8957" -> "8962" 
-  "8959" -> "8968" 
-  "8960" -> "8959" 
-  "8961" -> "8960" 
-  "8942" -> "8949" 
-  "8942" -> "8957" 
-  "8962" -> "8967" 
-  "8967" -> "8961" 
-  "8943" -> "8942" 
-  "8947" -> "8954" 
-  "8954" -> "8968" 
-  "8948" -> "8947" 
-  "8949" -> "8951" 
-  "8951" -> "8948" 
-  "8932" -> "8938" 
+digraph "CallStaticIntMethod" {  
+"8904" [label = <(va_start,va_start(ap, mid))<SUB>1540</SUB>> ]
+"8907" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1541</SUB>> ]
+"8926" [label = <(soa,soa(env))<SUB>1542</SUB>> ]
+"8929" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1543</SUB>> ]
+"8935" [label = <(va_end,va_end(ap))<SUB>1544</SUB>> ]
+"8937" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1545</SUB>> ]
+"8930" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1543</SUB>> ]
+"8938" [label = <(GetI,result.GetI())<SUB>1545</SUB>> ]
+"8939" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1545</SUB>> ]
+"8911" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1541</SUB>> ]
+"8941" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1545</SUB>> ]
+"8912" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1541</SUB>> ]
+"8916" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1541</SUB>> ]
+"8923" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1541</SUB>> ]
+"8917" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1541</SUB>> ]
+"8918" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1541</SUB>> ]
+"8920" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1541</SUB>> ]
+"8898" [label = <(METHOD,CallStaticIntMethod)<SUB>1538</SUB>> ]
+"8942" [label = <(METHOD_RETURN,jint)<SUB>1538</SUB>> ]
+  "8904" -> "8907" 
+  "8907" -> "8912" 
+  "8907" -> "8926" 
+  "8926" -> "8930" 
+  "8929" -> "8935" 
+  "8935" -> "8941" 
+  "8937" -> "8942" 
+  "8930" -> "8929" 
+  "8938" -> "8937" 
+  "8939" -> "8938" 
+  "8911" -> "8918" 
+  "8911" -> "8926" 
+  "8941" -> "8939" 
+  "8912" -> "8911" 
+  "8916" -> "8923" 
+  "8923" -> "8942" 
+  "8917" -> "8916" 
+  "8918" -> "8920" 
+  "8920" -> "8917" 
+  "8898" -> "8904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/162-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/162-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/162-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/162-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticShortMethod" {  
-"8976" [label = <(va_start,va_start(ap, mid))<SUB>1599</SUB>> ]
-"8979" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1600</SUB>> ]
-"8998" [label = <(soa,soa(env))<SUB>1601</SUB>> ]
-"9001" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1602</SUB>> ]
-"9007" [label = <(va_end,va_end(ap))<SUB>1603</SUB>> ]
-"9009" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1604</SUB>> ]
-"9002" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1602</SUB>> ]
-"9010" [label = <(GetS,result.GetS())<SUB>1604</SUB>> ]
-"9011" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1604</SUB>> ]
-"8983" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1600</SUB>> ]
-"9013" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1604</SUB>> ]
-"8984" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1600</SUB>> ]
-"8988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1600</SUB>> ]
-"8995" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1600</SUB>> ]
-"8989" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1600</SUB>> ]
-"8990" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1600</SUB>> ]
-"8992" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1600</SUB>> ]
-"8970" [label = <(METHOD,CallStaticShortMethod)<SUB>1597</SUB>> ]
-"9014" [label = <(METHOD_RETURN,jshort)<SUB>1597</SUB>> ]
-  "8976" -> "8979" 
-  "8979" -> "8984" 
-  "8979" -> "8998" 
-  "8998" -> "9002" 
-  "9001" -> "9007" 
-  "9007" -> "9013" 
-  "9009" -> "9014" 
-  "9002" -> "9001" 
-  "9010" -> "9009" 
-  "9011" -> "9010" 
-  "8983" -> "8990" 
-  "8983" -> "8998" 
-  "9013" -> "9011" 
-  "8984" -> "8983" 
-  "8988" -> "8995" 
-  "8995" -> "9014" 
-  "8989" -> "8988" 
-  "8990" -> "8992" 
-  "8992" -> "8989" 
-  "8970" -> "8976" 
+digraph "CallStaticIntMethodV" {  
+"8950" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1549</SUB>> ]
+"8969" [label = <(soa,soa(env))<SUB>1550</SUB>> ]
+"8971" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1551</SUB>> ]
+"8972" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1551</SUB>> ]
+"8973" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1551</SUB>> ]
+"8954" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1549</SUB>> ]
+"8974" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1551</SUB>> ]
+"8979" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1551</SUB>> ]
+"8955" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1549</SUB>> ]
+"8959" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1549</SUB>> ]
+"8966" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1549</SUB>> ]
+"8960" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1549</SUB>> ]
+"8961" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1549</SUB>> ]
+"8963" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1549</SUB>> ]
+"8944" [label = <(METHOD,CallStaticIntMethodV)<SUB>1548</SUB>> ]
+"8980" [label = <(METHOD_RETURN,jint)<SUB>1548</SUB>> ]
+  "8950" -> "8955" 
+  "8950" -> "8969" 
+  "8969" -> "8974" 
+  "8971" -> "8980" 
+  "8972" -> "8971" 
+  "8973" -> "8972" 
+  "8954" -> "8961" 
+  "8954" -> "8969" 
+  "8974" -> "8979" 
+  "8979" -> "8973" 
+  "8955" -> "8954" 
+  "8959" -> "8966" 
+  "8966" -> "8980" 
+  "8960" -> "8959" 
+  "8961" -> "8963" 
+  "8963" -> "8960" 
+  "8944" -> "8950" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/163-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/163-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/163-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/163-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticShortMethodV" {  
-"9022" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1608</SUB>> ]
-"9041" [label = <(soa,soa(env))<SUB>1609</SUB>> ]
-"9043" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1610</SUB>> ]
-"9044" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1610</SUB>> ]
-"9045" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1610</SUB>> ]
-"9026" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1608</SUB>> ]
-"9046" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1610</SUB>> ]
-"9051" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1610</SUB>> ]
-"9027" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1608</SUB>> ]
-"9031" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1608</SUB>> ]
-"9038" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1608</SUB>> ]
-"9032" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1608</SUB>> ]
-"9033" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1608</SUB>> ]
-"9035" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1608</SUB>> ]
-"9016" [label = <(METHOD,CallStaticShortMethodV)<SUB>1607</SUB>> ]
-"9052" [label = <(METHOD_RETURN,jshort)<SUB>1607</SUB>> ]
-  "9022" -> "9027" 
-  "9022" -> "9041" 
-  "9041" -> "9046" 
-  "9043" -> "9052" 
-  "9044" -> "9043" 
-  "9045" -> "9044" 
-  "9026" -> "9033" 
-  "9026" -> "9041" 
-  "9046" -> "9051" 
-  "9051" -> "9045" 
-  "9027" -> "9026" 
-  "9031" -> "9038" 
-  "9038" -> "9052" 
-  "9032" -> "9031" 
-  "9033" -> "9035" 
-  "9035" -> "9032" 
-  "9016" -> "9022" 
+digraph "CallStaticIntMethodA" {  
+"8988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1555</SUB>> ]
+"9007" [label = <(soa,soa(env))<SUB>1556</SUB>> ]
+"9009" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1557</SUB>> ]
+"9010" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1557</SUB>> ]
+"9011" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1557</SUB>> ]
+"8992" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1555</SUB>> ]
+"9012" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1557</SUB>> ]
+"9017" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1557</SUB>> ]
+"8993" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1555</SUB>> ]
+"8997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1555</SUB>> ]
+"9004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1555</SUB>> ]
+"8998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1555</SUB>> ]
+"8999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1555</SUB>> ]
+"9001" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1555</SUB>> ]
+"8982" [label = <(METHOD,CallStaticIntMethodA)<SUB>1554</SUB>> ]
+"9018" [label = <(METHOD_RETURN,jint)<SUB>1554</SUB>> ]
+  "8988" -> "8993" 
+  "8988" -> "9007" 
+  "9007" -> "9012" 
+  "9009" -> "9018" 
+  "9010" -> "9009" 
+  "9011" -> "9010" 
+  "8992" -> "8999" 
+  "8992" -> "9007" 
+  "9012" -> "9017" 
+  "9017" -> "9011" 
+  "8993" -> "8992" 
+  "8997" -> "9004" 
+  "9004" -> "9018" 
+  "8998" -> "8997" 
+  "8999" -> "9001" 
+  "9001" -> "8998" 
+  "8982" -> "8988" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/164-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/164-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/164-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/164-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticShortMethodA" {  
-"9060" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1614</SUB>> ]
-"9079" [label = <(soa,soa(env))<SUB>1615</SUB>> ]
-"9081" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1616</SUB>> ]
-"9082" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1616</SUB>> ]
-"9083" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1616</SUB>> ]
-"9064" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1614</SUB>> ]
-"9084" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1616</SUB>> ]
-"9089" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1616</SUB>> ]
-"9065" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1614</SUB>> ]
-"9069" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1614</SUB>> ]
-"9076" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1614</SUB>> ]
-"9070" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1614</SUB>> ]
-"9071" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1614</SUB>> ]
-"9073" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1614</SUB>> ]
-"9054" [label = <(METHOD,CallStaticShortMethodA)<SUB>1613</SUB>> ]
-"9090" [label = <(METHOD_RETURN,jshort)<SUB>1613</SUB>> ]
-  "9060" -> "9065" 
-  "9060" -> "9079" 
-  "9079" -> "9084" 
-  "9081" -> "9090" 
-  "9082" -> "9081" 
-  "9083" -> "9082" 
-  "9064" -> "9071" 
-  "9064" -> "9079" 
-  "9084" -> "9089" 
-  "9089" -> "9083" 
-  "9065" -> "9064" 
-  "9069" -> "9076" 
-  "9076" -> "9090" 
-  "9070" -> "9069" 
-  "9071" -> "9073" 
-  "9073" -> "9070" 
-  "9054" -> "9060" 
+digraph "CallStaticLongMethod" {  
+"9026" [label = <(va_start,va_start(ap, mid))<SUB>1562</SUB>> ]
+"9029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1563</SUB>> ]
+"9048" [label = <(soa,soa(env))<SUB>1564</SUB>> ]
+"9051" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1565</SUB>> ]
+"9057" [label = <(va_end,va_end(ap))<SUB>1566</SUB>> ]
+"9059" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1567</SUB>> ]
+"9052" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1565</SUB>> ]
+"9060" [label = <(GetJ,result.GetJ())<SUB>1567</SUB>> ]
+"9061" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1567</SUB>> ]
+"9033" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1563</SUB>> ]
+"9063" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1567</SUB>> ]
+"9034" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1563</SUB>> ]
+"9038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1563</SUB>> ]
+"9045" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1563</SUB>> ]
+"9039" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1563</SUB>> ]
+"9040" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1563</SUB>> ]
+"9042" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1563</SUB>> ]
+"9020" [label = <(METHOD,CallStaticLongMethod)<SUB>1560</SUB>> ]
+"9064" [label = <(METHOD_RETURN,jlong)<SUB>1560</SUB>> ]
+  "9026" -> "9029" 
+  "9029" -> "9034" 
+  "9029" -> "9048" 
+  "9048" -> "9052" 
+  "9051" -> "9057" 
+  "9057" -> "9063" 
+  "9059" -> "9064" 
+  "9052" -> "9051" 
+  "9060" -> "9059" 
+  "9061" -> "9060" 
+  "9033" -> "9040" 
+  "9033" -> "9048" 
+  "9063" -> "9061" 
+  "9034" -> "9033" 
+  "9038" -> "9045" 
+  "9045" -> "9064" 
+  "9039" -> "9038" 
+  "9040" -> "9042" 
+  "9042" -> "9039" 
+  "9020" -> "9026" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/165-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/165-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/165-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/165-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticIntMethod" {  
-"9098" [label = <(va_start,va_start(ap, mid))<SUB>1621</SUB>> ]
-"9101" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1622</SUB>> ]
-"9120" [label = <(soa,soa(env))<SUB>1623</SUB>> ]
-"9123" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1624</SUB>> ]
-"9129" [label = <(va_end,va_end(ap))<SUB>1625</SUB>> ]
-"9131" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1626</SUB>> ]
-"9124" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1624</SUB>> ]
-"9132" [label = <(GetI,result.GetI())<SUB>1626</SUB>> ]
-"9133" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1626</SUB>> ]
-"9105" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1622</SUB>> ]
-"9135" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1626</SUB>> ]
-"9106" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1622</SUB>> ]
-"9110" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1622</SUB>> ]
-"9117" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1622</SUB>> ]
-"9111" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1622</SUB>> ]
-"9112" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1622</SUB>> ]
-"9114" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1622</SUB>> ]
-"9092" [label = <(METHOD,CallStaticIntMethod)<SUB>1619</SUB>> ]
-"9136" [label = <(METHOD_RETURN,jint)<SUB>1619</SUB>> ]
-  "9098" -> "9101" 
-  "9101" -> "9106" 
-  "9101" -> "9120" 
-  "9120" -> "9124" 
-  "9123" -> "9129" 
-  "9129" -> "9135" 
-  "9131" -> "9136" 
-  "9124" -> "9123" 
-  "9132" -> "9131" 
-  "9133" -> "9132" 
-  "9105" -> "9112" 
-  "9105" -> "9120" 
-  "9135" -> "9133" 
-  "9106" -> "9105" 
-  "9110" -> "9117" 
-  "9117" -> "9136" 
-  "9111" -> "9110" 
-  "9112" -> "9114" 
-  "9114" -> "9111" 
-  "9092" -> "9098" 
+digraph "CallStaticLongMethodV" {  
+"9072" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1571</SUB>> ]
+"9091" [label = <(soa,soa(env))<SUB>1572</SUB>> ]
+"9093" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1573</SUB>> ]
+"9094" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1573</SUB>> ]
+"9095" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1573</SUB>> ]
+"9076" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1571</SUB>> ]
+"9096" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1573</SUB>> ]
+"9101" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1573</SUB>> ]
+"9077" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1571</SUB>> ]
+"9081" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1571</SUB>> ]
+"9088" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1571</SUB>> ]
+"9082" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1571</SUB>> ]
+"9083" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1571</SUB>> ]
+"9085" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1571</SUB>> ]
+"9066" [label = <(METHOD,CallStaticLongMethodV)<SUB>1570</SUB>> ]
+"9102" [label = <(METHOD_RETURN,jlong)<SUB>1570</SUB>> ]
+  "9072" -> "9077" 
+  "9072" -> "9091" 
+  "9091" -> "9096" 
+  "9093" -> "9102" 
+  "9094" -> "9093" 
+  "9095" -> "9094" 
+  "9076" -> "9083" 
+  "9076" -> "9091" 
+  "9096" -> "9101" 
+  "9101" -> "9095" 
+  "9077" -> "9076" 
+  "9081" -> "9088" 
+  "9088" -> "9102" 
+  "9082" -> "9081" 
+  "9083" -> "9085" 
+  "9085" -> "9082" 
+  "9066" -> "9072" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/166-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/166-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/166-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/166-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticIntMethodV" {  
-"9144" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1630</SUB>> ]
-"9163" [label = <(soa,soa(env))<SUB>1631</SUB>> ]
-"9165" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1632</SUB>> ]
-"9166" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1632</SUB>> ]
-"9167" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1632</SUB>> ]
-"9148" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1630</SUB>> ]
-"9168" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1632</SUB>> ]
-"9173" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1632</SUB>> ]
-"9149" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1630</SUB>> ]
-"9153" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1630</SUB>> ]
-"9160" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1630</SUB>> ]
-"9154" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1630</SUB>> ]
-"9155" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1630</SUB>> ]
-"9157" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1630</SUB>> ]
-"9138" [label = <(METHOD,CallStaticIntMethodV)<SUB>1629</SUB>> ]
-"9174" [label = <(METHOD_RETURN,jint)<SUB>1629</SUB>> ]
-  "9144" -> "9149" 
-  "9144" -> "9163" 
-  "9163" -> "9168" 
-  "9165" -> "9174" 
-  "9166" -> "9165" 
-  "9167" -> "9166" 
-  "9148" -> "9155" 
-  "9148" -> "9163" 
-  "9168" -> "9173" 
-  "9173" -> "9167" 
-  "9149" -> "9148" 
-  "9153" -> "9160" 
-  "9160" -> "9174" 
-  "9154" -> "9153" 
-  "9155" -> "9157" 
-  "9157" -> "9154" 
-  "9138" -> "9144" 
+digraph "CallStaticLongMethodA" {  
+"9110" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1577</SUB>> ]
+"9129" [label = <(soa,soa(env))<SUB>1578</SUB>> ]
+"9131" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1579</SUB>> ]
+"9132" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1579</SUB>> ]
+"9133" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1579</SUB>> ]
+"9114" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1577</SUB>> ]
+"9134" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1579</SUB>> ]
+"9139" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1579</SUB>> ]
+"9115" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1577</SUB>> ]
+"9119" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1577</SUB>> ]
+"9126" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1577</SUB>> ]
+"9120" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1577</SUB>> ]
+"9121" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1577</SUB>> ]
+"9123" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1577</SUB>> ]
+"9104" [label = <(METHOD,CallStaticLongMethodA)<SUB>1576</SUB>> ]
+"9140" [label = <(METHOD_RETURN,jlong)<SUB>1576</SUB>> ]
+  "9110" -> "9115" 
+  "9110" -> "9129" 
+  "9129" -> "9134" 
+  "9131" -> "9140" 
+  "9132" -> "9131" 
+  "9133" -> "9132" 
+  "9114" -> "9121" 
+  "9114" -> "9129" 
+  "9134" -> "9139" 
+  "9139" -> "9133" 
+  "9115" -> "9114" 
+  "9119" -> "9126" 
+  "9126" -> "9140" 
+  "9120" -> "9119" 
+  "9121" -> "9123" 
+  "9123" -> "9120" 
+  "9104" -> "9110" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/167-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/167-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/167-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/167-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticIntMethodA" {  
-"9182" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1636</SUB>> ]
-"9201" [label = <(soa,soa(env))<SUB>1637</SUB>> ]
-"9203" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1638</SUB>> ]
-"9204" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1638</SUB>> ]
-"9205" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1638</SUB>> ]
-"9186" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1636</SUB>> ]
-"9206" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1638</SUB>> ]
-"9211" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1638</SUB>> ]
-"9187" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1636</SUB>> ]
-"9191" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1636</SUB>> ]
-"9198" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1636</SUB>> ]
-"9192" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1636</SUB>> ]
-"9193" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1636</SUB>> ]
-"9195" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1636</SUB>> ]
-"9176" [label = <(METHOD,CallStaticIntMethodA)<SUB>1635</SUB>> ]
-"9212" [label = <(METHOD_RETURN,jint)<SUB>1635</SUB>> ]
-  "9182" -> "9187" 
-  "9182" -> "9201" 
-  "9201" -> "9206" 
-  "9203" -> "9212" 
-  "9204" -> "9203" 
-  "9205" -> "9204" 
-  "9186" -> "9193" 
-  "9186" -> "9201" 
-  "9206" -> "9211" 
-  "9211" -> "9205" 
-  "9187" -> "9186" 
-  "9191" -> "9198" 
-  "9198" -> "9212" 
-  "9192" -> "9191" 
-  "9193" -> "9195" 
-  "9195" -> "9192" 
-  "9176" -> "9182" 
+digraph "CallStaticFloatMethod" {  
+"9148" [label = <(va_start,va_start(ap, mid))<SUB>1584</SUB>> ]
+"9151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1585</SUB>> ]
+"9170" [label = <(soa,soa(env))<SUB>1586</SUB>> ]
+"9173" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1587</SUB>> ]
+"9179" [label = <(va_end,va_end(ap))<SUB>1588</SUB>> ]
+"9181" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1589</SUB>> ]
+"9174" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1587</SUB>> ]
+"9182" [label = <(GetF,result.GetF())<SUB>1589</SUB>> ]
+"9183" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1589</SUB>> ]
+"9155" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1585</SUB>> ]
+"9185" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1589</SUB>> ]
+"9156" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1585</SUB>> ]
+"9160" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1585</SUB>> ]
+"9167" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1585</SUB>> ]
+"9161" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1585</SUB>> ]
+"9162" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1585</SUB>> ]
+"9164" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1585</SUB>> ]
+"9142" [label = <(METHOD,CallStaticFloatMethod)<SUB>1582</SUB>> ]
+"9186" [label = <(METHOD_RETURN,jfloat)<SUB>1582</SUB>> ]
+  "9148" -> "9151" 
+  "9151" -> "9156" 
+  "9151" -> "9170" 
+  "9170" -> "9174" 
+  "9173" -> "9179" 
+  "9179" -> "9185" 
+  "9181" -> "9186" 
+  "9174" -> "9173" 
+  "9182" -> "9181" 
+  "9183" -> "9182" 
+  "9155" -> "9162" 
+  "9155" -> "9170" 
+  "9185" -> "9183" 
+  "9156" -> "9155" 
+  "9160" -> "9167" 
+  "9167" -> "9186" 
+  "9161" -> "9160" 
+  "9162" -> "9164" 
+  "9164" -> "9161" 
+  "9142" -> "9148" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/168-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/168-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/168-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/168-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticLongMethod" {  
-"9220" [label = <(va_start,va_start(ap, mid))<SUB>1643</SUB>> ]
-"9223" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1644</SUB>> ]
-"9242" [label = <(soa,soa(env))<SUB>1645</SUB>> ]
-"9245" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1646</SUB>> ]
-"9251" [label = <(va_end,va_end(ap))<SUB>1647</SUB>> ]
-"9253" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1648</SUB>> ]
-"9246" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1646</SUB>> ]
-"9254" [label = <(GetJ,result.GetJ())<SUB>1648</SUB>> ]
-"9255" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1648</SUB>> ]
-"9227" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1644</SUB>> ]
-"9257" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1648</SUB>> ]
-"9228" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1644</SUB>> ]
-"9232" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1644</SUB>> ]
-"9239" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1644</SUB>> ]
-"9233" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1644</SUB>> ]
-"9234" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1644</SUB>> ]
-"9236" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1644</SUB>> ]
-"9214" [label = <(METHOD,CallStaticLongMethod)<SUB>1641</SUB>> ]
-"9258" [label = <(METHOD_RETURN,jlong)<SUB>1641</SUB>> ]
-  "9220" -> "9223" 
-  "9223" -> "9228" 
-  "9223" -> "9242" 
-  "9242" -> "9246" 
-  "9245" -> "9251" 
-  "9251" -> "9257" 
-  "9253" -> "9258" 
-  "9246" -> "9245" 
-  "9254" -> "9253" 
-  "9255" -> "9254" 
-  "9227" -> "9234" 
-  "9227" -> "9242" 
-  "9257" -> "9255" 
-  "9228" -> "9227" 
-  "9232" -> "9239" 
-  "9239" -> "9258" 
-  "9233" -> "9232" 
-  "9234" -> "9236" 
-  "9236" -> "9233" 
-  "9214" -> "9220" 
+digraph "CallStaticFloatMethodV" {  
+"9194" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1593</SUB>> ]
+"9213" [label = <(soa,soa(env))<SUB>1594</SUB>> ]
+"9215" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1595</SUB>> ]
+"9216" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1595</SUB>> ]
+"9217" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1595</SUB>> ]
+"9198" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1593</SUB>> ]
+"9218" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1595</SUB>> ]
+"9223" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1595</SUB>> ]
+"9199" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1593</SUB>> ]
+"9203" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1593</SUB>> ]
+"9210" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1593</SUB>> ]
+"9204" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1593</SUB>> ]
+"9205" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1593</SUB>> ]
+"9207" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1593</SUB>> ]
+"9188" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1592</SUB>> ]
+"9224" [label = <(METHOD_RETURN,jfloat)<SUB>1592</SUB>> ]
+  "9194" -> "9199" 
+  "9194" -> "9213" 
+  "9213" -> "9218" 
+  "9215" -> "9224" 
+  "9216" -> "9215" 
+  "9217" -> "9216" 
+  "9198" -> "9205" 
+  "9198" -> "9213" 
+  "9218" -> "9223" 
+  "9223" -> "9217" 
+  "9199" -> "9198" 
+  "9203" -> "9210" 
+  "9210" -> "9224" 
+  "9204" -> "9203" 
+  "9205" -> "9207" 
+  "9207" -> "9204" 
+  "9188" -> "9194" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/169-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/169-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/169-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/169-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticLongMethodV" {  
-"9266" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1652</SUB>> ]
-"9285" [label = <(soa,soa(env))<SUB>1653</SUB>> ]
-"9287" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1654</SUB>> ]
-"9288" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1654</SUB>> ]
-"9289" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1654</SUB>> ]
-"9270" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1652</SUB>> ]
-"9290" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1654</SUB>> ]
-"9295" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1654</SUB>> ]
-"9271" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1652</SUB>> ]
-"9275" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1652</SUB>> ]
-"9282" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1652</SUB>> ]
-"9276" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1652</SUB>> ]
-"9277" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1652</SUB>> ]
-"9279" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1652</SUB>> ]
-"9260" [label = <(METHOD,CallStaticLongMethodV)<SUB>1651</SUB>> ]
-"9296" [label = <(METHOD_RETURN,jlong)<SUB>1651</SUB>> ]
-  "9266" -> "9271" 
-  "9266" -> "9285" 
-  "9285" -> "9290" 
-  "9287" -> "9296" 
-  "9288" -> "9287" 
-  "9289" -> "9288" 
-  "9270" -> "9277" 
-  "9270" -> "9285" 
-  "9290" -> "9295" 
-  "9295" -> "9289" 
-  "9271" -> "9270" 
-  "9275" -> "9282" 
-  "9282" -> "9296" 
-  "9276" -> "9275" 
-  "9277" -> "9279" 
-  "9279" -> "9276" 
-  "9260" -> "9266" 
+digraph "CallStaticFloatMethodA" {  
+"9232" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1599</SUB>> ]
+"9251" [label = <(soa,soa(env))<SUB>1600</SUB>> ]
+"9253" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1601</SUB>> ]
+"9254" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1601</SUB>> ]
+"9255" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1601</SUB>> ]
+"9236" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1599</SUB>> ]
+"9256" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1601</SUB>> ]
+"9261" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1601</SUB>> ]
+"9237" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1599</SUB>> ]
+"9241" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1599</SUB>> ]
+"9248" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1599</SUB>> ]
+"9242" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1599</SUB>> ]
+"9243" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1599</SUB>> ]
+"9245" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1599</SUB>> ]
+"9226" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1598</SUB>> ]
+"9262" [label = <(METHOD_RETURN,jfloat)<SUB>1598</SUB>> ]
+  "9232" -> "9237" 
+  "9232" -> "9251" 
+  "9251" -> "9256" 
+  "9253" -> "9262" 
+  "9254" -> "9253" 
+  "9255" -> "9254" 
+  "9236" -> "9243" 
+  "9236" -> "9251" 
+  "9256" -> "9261" 
+  "9261" -> "9255" 
+  "9237" -> "9236" 
+  "9241" -> "9248" 
+  "9248" -> "9262" 
+  "9242" -> "9241" 
+  "9243" -> "9245" 
+  "9245" -> "9242" 
+  "9226" -> "9232" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/17-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/17-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/17-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/17-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,5 +1,39 @@
-digraph "FindMethod" {  
-"489" [label = <(METHOD,FindMethod)<SUB>410</SUB>> ]
-"494" [label = <(METHOD_RETURN,ArtMethod*)<SUB>410</SUB>> ]
-  "489" -> "494" 
+digraph "FromReflectedMethod" {  
+"449" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>369</SUB>> ]
+"468" [label = <(soa,soa(env))<SUB>370</SUB>> ]
+"470" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>371</SUB>> ]
+"471" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>371</SUB>> ]
+"472" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>371</SUB>> ]
+"475" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>371</SUB>> ]
+"453" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>369</SUB>> ]
+"474" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>371</SUB>> ]
+"476" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>371</SUB>> ]
+"454" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>369</SUB>> ]
+"458" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>369</SUB>> ]
+"465" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>369</SUB>> ]
+"478" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>371</SUB>> ]
+"459" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>369</SUB>> ]
+"460" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>369</SUB>> ]
+"462" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>369</SUB>> ]
+"445" [label = <(METHOD,FromReflectedMethod)<SUB>368</SUB>> ]
+"481" [label = <(METHOD_RETURN,jmethodID)<SUB>368</SUB>> ]
+  "449" -> "454" 
+  "449" -> "468" 
+  "468" -> "474" 
+  "470" -> "481" 
+  "471" -> "470" 
+  "472" -> "478" 
+  "475" -> "471" 
+  "453" -> "460" 
+  "453" -> "468" 
+  "474" -> "472" 
+  "476" -> "475" 
+  "454" -> "453" 
+  "458" -> "465" 
+  "465" -> "481" 
+  "478" -> "476" 
+  "459" -> "458" 
+  "460" -> "462" 
+  "462" -> "459" 
+  "445" -> "449" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/170-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/170-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/170-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/170-cfg.dot	2023-06-07 19:35:21.307385042 +0330
@@ -1,35 +1,41 @@
-digraph "CallStaticLongMethodA" {  
-"9304" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1658</SUB>> ]
-"9323" [label = <(soa,soa(env))<SUB>1659</SUB>> ]
-"9325" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1660</SUB>> ]
-"9326" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1660</SUB>> ]
-"9327" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1660</SUB>> ]
-"9308" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1658</SUB>> ]
-"9328" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1660</SUB>> ]
-"9333" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1660</SUB>> ]
-"9309" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1658</SUB>> ]
-"9313" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1658</SUB>> ]
-"9320" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1658</SUB>> ]
-"9314" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1658</SUB>> ]
-"9315" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1658</SUB>> ]
-"9317" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1658</SUB>> ]
-"9298" [label = <(METHOD,CallStaticLongMethodA)<SUB>1657</SUB>> ]
-"9334" [label = <(METHOD_RETURN,jlong)<SUB>1657</SUB>> ]
-  "9304" -> "9309" 
-  "9304" -> "9323" 
-  "9323" -> "9328" 
-  "9325" -> "9334" 
-  "9326" -> "9325" 
-  "9327" -> "9326" 
-  "9308" -> "9315" 
-  "9308" -> "9323" 
-  "9328" -> "9333" 
-  "9333" -> "9327" 
-  "9309" -> "9308" 
-  "9313" -> "9320" 
-  "9320" -> "9334" 
-  "9314" -> "9313" 
-  "9315" -> "9317" 
-  "9317" -> "9314" 
-  "9298" -> "9304" 
+digraph "CallStaticDoubleMethod" {  
+"9270" [label = <(va_start,va_start(ap, mid))<SUB>1606</SUB>> ]
+"9273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1607</SUB>> ]
+"9292" [label = <(soa,soa(env))<SUB>1608</SUB>> ]
+"9295" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1609</SUB>> ]
+"9301" [label = <(va_end,va_end(ap))<SUB>1610</SUB>> ]
+"9303" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1611</SUB>> ]
+"9296" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1609</SUB>> ]
+"9304" [label = <(GetD,result.GetD())<SUB>1611</SUB>> ]
+"9305" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1611</SUB>> ]
+"9277" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1607</SUB>> ]
+"9307" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1611</SUB>> ]
+"9278" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1607</SUB>> ]
+"9282" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1607</SUB>> ]
+"9289" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1607</SUB>> ]
+"9283" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1607</SUB>> ]
+"9284" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1607</SUB>> ]
+"9286" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1607</SUB>> ]
+"9264" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1604</SUB>> ]
+"9308" [label = <(METHOD_RETURN,jdouble)<SUB>1604</SUB>> ]
+  "9270" -> "9273" 
+  "9273" -> "9278" 
+  "9273" -> "9292" 
+  "9292" -> "9296" 
+  "9295" -> "9301" 
+  "9301" -> "9307" 
+  "9303" -> "9308" 
+  "9296" -> "9295" 
+  "9304" -> "9303" 
+  "9305" -> "9304" 
+  "9277" -> "9284" 
+  "9277" -> "9292" 
+  "9307" -> "9305" 
+  "9278" -> "9277" 
+  "9282" -> "9289" 
+  "9289" -> "9308" 
+  "9283" -> "9282" 
+  "9284" -> "9286" 
+  "9286" -> "9283" 
+  "9264" -> "9270" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/171-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/171-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/171-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/171-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,41 +1,35 @@
-digraph "CallStaticFloatMethod" {  
-"9342" [label = <(va_start,va_start(ap, mid))<SUB>1665</SUB>> ]
-"9345" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1666</SUB>> ]
-"9364" [label = <(soa,soa(env))<SUB>1667</SUB>> ]
-"9367" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1668</SUB>> ]
-"9373" [label = <(va_end,va_end(ap))<SUB>1669</SUB>> ]
-"9375" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1670</SUB>> ]
-"9368" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1668</SUB>> ]
-"9376" [label = <(GetF,result.GetF())<SUB>1670</SUB>> ]
-"9377" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1670</SUB>> ]
-"9349" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1666</SUB>> ]
-"9379" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1670</SUB>> ]
-"9350" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1666</SUB>> ]
-"9354" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1666</SUB>> ]
-"9361" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1666</SUB>> ]
-"9355" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1666</SUB>> ]
-"9356" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1666</SUB>> ]
-"9358" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1666</SUB>> ]
-"9336" [label = <(METHOD,CallStaticFloatMethod)<SUB>1663</SUB>> ]
-"9380" [label = <(METHOD_RETURN,jfloat)<SUB>1663</SUB>> ]
-  "9342" -> "9345" 
-  "9345" -> "9350" 
-  "9345" -> "9364" 
-  "9364" -> "9368" 
-  "9367" -> "9373" 
-  "9373" -> "9379" 
-  "9375" -> "9380" 
-  "9368" -> "9367" 
-  "9376" -> "9375" 
-  "9377" -> "9376" 
-  "9349" -> "9356" 
-  "9349" -> "9364" 
-  "9379" -> "9377" 
-  "9350" -> "9349" 
-  "9354" -> "9361" 
-  "9361" -> "9380" 
-  "9355" -> "9354" 
-  "9356" -> "9358" 
-  "9358" -> "9355" 
-  "9336" -> "9342" 
+digraph "CallStaticDoubleMethodV" {  
+"9316" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1615</SUB>> ]
+"9335" [label = <(soa,soa(env))<SUB>1616</SUB>> ]
+"9337" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1617</SUB>> ]
+"9338" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1617</SUB>> ]
+"9339" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1617</SUB>> ]
+"9320" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1615</SUB>> ]
+"9340" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1617</SUB>> ]
+"9345" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1617</SUB>> ]
+"9321" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1615</SUB>> ]
+"9325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1615</SUB>> ]
+"9332" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1615</SUB>> ]
+"9326" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1615</SUB>> ]
+"9327" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1615</SUB>> ]
+"9329" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1615</SUB>> ]
+"9310" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1614</SUB>> ]
+"9346" [label = <(METHOD_RETURN,jdouble)<SUB>1614</SUB>> ]
+  "9316" -> "9321" 
+  "9316" -> "9335" 
+  "9335" -> "9340" 
+  "9337" -> "9346" 
+  "9338" -> "9337" 
+  "9339" -> "9338" 
+  "9320" -> "9327" 
+  "9320" -> "9335" 
+  "9340" -> "9345" 
+  "9345" -> "9339" 
+  "9321" -> "9320" 
+  "9325" -> "9332" 
+  "9332" -> "9346" 
+  "9326" -> "9325" 
+  "9327" -> "9329" 
+  "9329" -> "9326" 
+  "9310" -> "9316" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/172-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/172-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/172-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/172-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticFloatMethodV" {  
-"9388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1674</SUB>> ]
-"9407" [label = <(soa,soa(env))<SUB>1675</SUB>> ]
-"9409" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1676</SUB>> ]
-"9410" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1676</SUB>> ]
-"9411" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1676</SUB>> ]
-"9392" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1674</SUB>> ]
-"9412" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1676</SUB>> ]
-"9417" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1676</SUB>> ]
-"9393" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1674</SUB>> ]
-"9397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1674</SUB>> ]
-"9404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1674</SUB>> ]
-"9398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1674</SUB>> ]
-"9399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1674</SUB>> ]
-"9401" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1674</SUB>> ]
-"9382" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1673</SUB>> ]
-"9418" [label = <(METHOD_RETURN,jfloat)<SUB>1673</SUB>> ]
-  "9388" -> "9393" 
-  "9388" -> "9407" 
-  "9407" -> "9412" 
-  "9409" -> "9418" 
-  "9410" -> "9409" 
-  "9411" -> "9410" 
-  "9392" -> "9399" 
-  "9392" -> "9407" 
-  "9412" -> "9417" 
-  "9417" -> "9411" 
-  "9393" -> "9392" 
-  "9397" -> "9404" 
-  "9404" -> "9418" 
-  "9398" -> "9397" 
-  "9399" -> "9401" 
-  "9401" -> "9398" 
-  "9382" -> "9388" 
+digraph "CallStaticDoubleMethodA" {  
+"9354" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1621</SUB>> ]
+"9373" [label = <(soa,soa(env))<SUB>1622</SUB>> ]
+"9375" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1623</SUB>> ]
+"9376" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1623</SUB>> ]
+"9377" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1623</SUB>> ]
+"9358" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1621</SUB>> ]
+"9378" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1623</SUB>> ]
+"9383" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1623</SUB>> ]
+"9359" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1621</SUB>> ]
+"9363" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1621</SUB>> ]
+"9370" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1621</SUB>> ]
+"9364" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1621</SUB>> ]
+"9365" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1621</SUB>> ]
+"9367" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1621</SUB>> ]
+"9348" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1620</SUB>> ]
+"9384" [label = <(METHOD_RETURN,jdouble)<SUB>1620</SUB>> ]
+  "9354" -> "9359" 
+  "9354" -> "9373" 
+  "9373" -> "9378" 
+  "9375" -> "9384" 
+  "9376" -> "9375" 
+  "9377" -> "9376" 
+  "9358" -> "9365" 
+  "9358" -> "9373" 
+  "9378" -> "9383" 
+  "9383" -> "9377" 
+  "9359" -> "9358" 
+  "9363" -> "9370" 
+  "9370" -> "9384" 
+  "9364" -> "9363" 
+  "9365" -> "9367" 
+  "9367" -> "9364" 
+  "9348" -> "9354" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/173-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/173-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/173-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/173-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,35 +1,31 @@
-digraph "CallStaticFloatMethodA" {  
-"9426" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1680</SUB>> ]
-"9445" [label = <(soa,soa(env))<SUB>1681</SUB>> ]
-"9447" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1682</SUB>> ]
-"9448" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1682</SUB>> ]
-"9449" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1682</SUB>> ]
-"9430" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1680</SUB>> ]
-"9450" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1682</SUB>> ]
-"9455" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1682</SUB>> ]
-"9431" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1680</SUB>> ]
-"9435" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1680</SUB>> ]
-"9442" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1680</SUB>> ]
-"9436" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1680</SUB>> ]
-"9437" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1680</SUB>> ]
-"9439" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1680</SUB>> ]
-"9420" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1679</SUB>> ]
-"9456" [label = <(METHOD_RETURN,jfloat)<SUB>1679</SUB>> ]
-  "9426" -> "9431" 
-  "9426" -> "9445" 
-  "9445" -> "9450" 
-  "9447" -> "9456" 
-  "9448" -> "9447" 
-  "9449" -> "9448" 
-  "9430" -> "9437" 
-  "9430" -> "9445" 
-  "9450" -> "9455" 
-  "9455" -> "9449" 
-  "9431" -> "9430" 
-  "9435" -> "9442" 
-  "9442" -> "9456" 
-  "9436" -> "9435" 
-  "9437" -> "9439" 
-  "9439" -> "9436" 
-  "9420" -> "9426" 
+digraph "CallStaticVoidMethod" {  
+"9392" [label = <(va_start,va_start(ap, mid))<SUB>1628</SUB>> ]
+"9395" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1629</SUB>> ]
+"9413" [label = <(soa,soa(env))<SUB>1630</SUB>> ]
+"9415" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1631</SUB>> ]
+"9420" [label = <(va_end,va_end(ap))<SUB>1632</SUB>> ]
+"9399" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1629</SUB>> ]
+"9400" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1629</SUB>> ]
+"9404" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1629</SUB>> ]
+"9411" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1629</SUB>> ]
+"9405" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1629</SUB>> ]
+"9406" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1629</SUB>> ]
+"9408" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1629</SUB>> ]
+"9386" [label = <(METHOD,CallStaticVoidMethod)<SUB>1626</SUB>> ]
+"9422" [label = <(METHOD_RETURN,void)<SUB>1626</SUB>> ]
+  "9392" -> "9395" 
+  "9395" -> "9400" 
+  "9395" -> "9413" 
+  "9413" -> "9415" 
+  "9415" -> "9420" 
+  "9420" -> "9422" 
+  "9399" -> "9406" 
+  "9399" -> "9413" 
+  "9400" -> "9399" 
+  "9404" -> "9411" 
+  "9411" -> "9422" 
+  "9405" -> "9404" 
+  "9406" -> "9408" 
+  "9408" -> "9405" 
+  "9386" -> "9392" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/174-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/174-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/174-cfg.dot	2023-06-07 19:35:14.777385845 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/174-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,41 +1,27 @@
-digraph "CallStaticDoubleMethod" {  
-"9464" [label = <(va_start,va_start(ap, mid))<SUB>1687</SUB>> ]
-"9467" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1688</SUB>> ]
-"9486" [label = <(soa,soa(env))<SUB>1689</SUB>> ]
-"9489" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1690</SUB>> ]
-"9495" [label = <(va_end,va_end(ap))<SUB>1691</SUB>> ]
-"9497" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1692</SUB>> ]
-"9490" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1690</SUB>> ]
-"9498" [label = <(GetD,result.GetD())<SUB>1692</SUB>> ]
-"9499" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1692</SUB>> ]
-"9471" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1688</SUB>> ]
-"9501" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1692</SUB>> ]
-"9472" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1688</SUB>> ]
-"9476" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1688</SUB>> ]
-"9483" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1688</SUB>> ]
-"9477" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1688</SUB>> ]
-"9478" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1688</SUB>> ]
-"9480" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1688</SUB>> ]
-"9458" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1685</SUB>> ]
-"9502" [label = <(METHOD_RETURN,jdouble)<SUB>1685</SUB>> ]
-  "9464" -> "9467" 
-  "9467" -> "9472" 
-  "9467" -> "9486" 
-  "9486" -> "9490" 
-  "9489" -> "9495" 
-  "9495" -> "9501" 
-  "9497" -> "9502" 
-  "9490" -> "9489" 
-  "9498" -> "9497" 
-  "9499" -> "9498" 
-  "9471" -> "9478" 
-  "9471" -> "9486" 
-  "9501" -> "9499" 
-  "9472" -> "9471" 
-  "9476" -> "9483" 
-  "9483" -> "9502" 
-  "9477" -> "9476" 
-  "9478" -> "9480" 
-  "9480" -> "9477" 
-  "9458" -> "9464" 
+digraph "CallStaticVoidMethodV" {  
+"9430" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1636</SUB>> ]
+"9448" [label = <(soa,soa(env))<SUB>1637</SUB>> ]
+"9450" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1638</SUB>> ]
+"9434" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1636</SUB>> ]
+"9435" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1636</SUB>> ]
+"9439" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1636</SUB>> ]
+"9446" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1636</SUB>> ]
+"9440" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1636</SUB>> ]
+"9441" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1636</SUB>> ]
+"9443" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1636</SUB>> ]
+"9424" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1635</SUB>> ]
+"9455" [label = <(METHOD_RETURN,void)<SUB>1635</SUB>> ]
+  "9430" -> "9435" 
+  "9430" -> "9448" 
+  "9448" -> "9450" 
+  "9450" -> "9455" 
+  "9434" -> "9441" 
+  "9434" -> "9448" 
+  "9435" -> "9434" 
+  "9439" -> "9446" 
+  "9446" -> "9455" 
+  "9440" -> "9439" 
+  "9441" -> "9443" 
+  "9443" -> "9440" 
+  "9424" -> "9430" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/175-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/175-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/175-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/175-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,35 +1,27 @@
-digraph "CallStaticDoubleMethodV" {  
-"9510" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1696</SUB>> ]
-"9529" [label = <(soa,soa(env))<SUB>1697</SUB>> ]
-"9531" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1698</SUB>> ]
-"9532" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1698</SUB>> ]
-"9533" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1698</SUB>> ]
-"9514" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1696</SUB>> ]
-"9534" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1698</SUB>> ]
-"9539" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1698</SUB>> ]
-"9515" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1696</SUB>> ]
-"9519" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1696</SUB>> ]
-"9526" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1696</SUB>> ]
-"9520" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1696</SUB>> ]
-"9521" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1696</SUB>> ]
-"9523" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1696</SUB>> ]
-"9504" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1695</SUB>> ]
-"9540" [label = <(METHOD_RETURN,jdouble)<SUB>1695</SUB>> ]
-  "9510" -> "9515" 
-  "9510" -> "9529" 
-  "9529" -> "9534" 
-  "9531" -> "9540" 
-  "9532" -> "9531" 
-  "9533" -> "9532" 
-  "9514" -> "9521" 
-  "9514" -> "9529" 
-  "9534" -> "9539" 
-  "9539" -> "9533" 
-  "9515" -> "9514" 
-  "9519" -> "9526" 
-  "9526" -> "9540" 
-  "9520" -> "9519" 
-  "9521" -> "9523" 
-  "9523" -> "9520" 
-  "9504" -> "9510" 
+digraph "CallStaticVoidMethodA" {  
+"9463" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1642</SUB>> ]
+"9481" [label = <(soa,soa(env))<SUB>1643</SUB>> ]
+"9483" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1644</SUB>> ]
+"9467" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1642</SUB>> ]
+"9468" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1642</SUB>> ]
+"9472" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1642</SUB>> ]
+"9479" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1642</SUB>> ]
+"9473" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1642</SUB>> ]
+"9474" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1642</SUB>> ]
+"9476" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1642</SUB>> ]
+"9457" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1641</SUB>> ]
+"9488" [label = <(METHOD_RETURN,void)<SUB>1641</SUB>> ]
+  "9463" -> "9468" 
+  "9463" -> "9481" 
+  "9481" -> "9483" 
+  "9483" -> "9488" 
+  "9467" -> "9474" 
+  "9467" -> "9481" 
+  "9468" -> "9467" 
+  "9472" -> "9479" 
+  "9479" -> "9488" 
+  "9473" -> "9472" 
+  "9474" -> "9476" 
+  "9476" -> "9473" 
+  "9457" -> "9463" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/176-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/176-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/176-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/176-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,35 +1,68 @@
-digraph "CallStaticDoubleMethodA" {  
-"9548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1702</SUB>> ]
-"9567" [label = <(soa,soa(env))<SUB>1703</SUB>> ]
-"9569" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1704</SUB>> ]
-"9570" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1704</SUB>> ]
-"9571" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1704</SUB>> ]
-"9552" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1702</SUB>> ]
-"9572" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1704</SUB>> ]
-"9577" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1704</SUB>> ]
-"9553" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1702</SUB>> ]
-"9557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1702</SUB>> ]
-"9564" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1702</SUB>> ]
-"9558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1702</SUB>> ]
-"9559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1702</SUB>> ]
-"9561" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1702</SUB>> ]
-"9542" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1701</SUB>> ]
-"9578" [label = <(METHOD_RETURN,jdouble)<SUB>1701</SUB>> ]
-  "9548" -> "9553" 
-  "9548" -> "9567" 
-  "9567" -> "9572" 
-  "9569" -> "9578" 
-  "9570" -> "9569" 
-  "9571" -> "9570" 
-  "9552" -> "9559" 
-  "9552" -> "9567" 
-  "9572" -> "9577" 
-  "9577" -> "9571" 
-  "9553" -> "9552" 
-  "9557" -> "9564" 
-  "9564" -> "9578" 
-  "9558" -> "9557" 
-  "9559" -> "9561" 
-  "9561" -> "9558" 
-  "9542" -> "9548" 
+digraph "NewString" {  
+"9531" [label = <(soa,soa(env))<SUB>1656</SUB>> ]
+"9534" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1657</SUB>> ]
+"9548" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1658</SUB>> ]
+"9496" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1648</SUB>> ]
+"9512" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1652</SUB>> ]
+"9536" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1657</SUB>> ]
+"9549" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1658</SUB>> ]
+"9497" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1648</SUB>> ]
+"9501" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1649</SUB>> ]
+"9509" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1650</SUB>> ]
+"9513" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1652</SUB>> ]
+"9521" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1653</SUB>> ]
+"9528" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1654</SUB>> ]
+"9537" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1657</SUB>> ]
+"9542" [label = <(Self,soa.Self())<SUB>1657</SUB>> ]
+"9550" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1658</SUB>> ]
+"9502" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1649</SUB>> ]
+"9514" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1652</SUB>> ]
+"9517" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1652</SUB>> ]
+"9522" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1653</SUB>> ]
+"9538" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1657</SUB>> ]
+"9541" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1657</SUB>> ]
+"9543" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1657</SUB>> ]
+"9551" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1658</SUB>> ]
+"9503" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1649</SUB>> ]
+"9505" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1649</SUB>> ]
+"9523" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1653</SUB>> ]
+"9525" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1653</SUB>> ]
+"9545" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1657</SUB>> ]
+"9553" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1658</SUB>> ]
+"9490" [label = <(METHOD,NewString)<SUB>1647</SUB>> ]
+"9556" [label = <(METHOD_RETURN,jstring)<SUB>1647</SUB>> ]
+  "9531" -> "9538" 
+  "9534" -> "9553" 
+  "9548" -> "9556" 
+  "9496" -> "9503" 
+  "9496" -> "9514" 
+  "9512" -> "9523" 
+  "9512" -> "9531" 
+  "9536" -> "9534" 
+  "9549" -> "9548" 
+  "9497" -> "9496" 
+  "9501" -> "9509" 
+  "9509" -> "9556" 
+  "9513" -> "9512" 
+  "9521" -> "9528" 
+  "9528" -> "9556" 
+  "9537" -> "9545" 
+  "9542" -> "9536" 
+  "9550" -> "9549" 
+  "9502" -> "9501" 
+  "9514" -> "9513" 
+  "9514" -> "9517" 
+  "9517" -> "9513" 
+  "9522" -> "9521" 
+  "9538" -> "9541" 
+  "9541" -> "9537" 
+  "9543" -> "9542" 
+  "9551" -> "9550" 
+  "9503" -> "9505" 
+  "9505" -> "9502" 
+  "9523" -> "9525" 
+  "9525" -> "9522" 
+  "9545" -> "9543" 
+  "9553" -> "9551" 
+  "9490" -> "9497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/177-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/177-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/177-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/177-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,31 +1,38 @@
-digraph "CallStaticVoidMethod" {  
-"9586" [label = <(va_start,va_start(ap, mid))<SUB>1709</SUB>> ]
-"9589" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1710</SUB>> ]
-"9607" [label = <(soa,soa(env))<SUB>1711</SUB>> ]
-"9609" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1712</SUB>> ]
-"9614" [label = <(va_end,va_end(ap))<SUB>1713</SUB>> ]
-"9593" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1710</SUB>> ]
-"9594" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1710</SUB>> ]
-"9598" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1710</SUB>> ]
-"9605" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1710</SUB>> ]
-"9599" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1710</SUB>> ]
-"9600" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1710</SUB>> ]
-"9602" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1710</SUB>> ]
-"9580" [label = <(METHOD,CallStaticVoidMethod)<SUB>1707</SUB>> ]
-"9616" [label = <(METHOD_RETURN,void)<SUB>1707</SUB>> ]
-  "9586" -> "9589" 
-  "9589" -> "9594" 
-  "9589" -> "9607" 
-  "9607" -> "9609" 
-  "9609" -> "9614" 
-  "9614" -> "9616" 
-  "9593" -> "9600" 
-  "9593" -> "9607" 
-  "9594" -> "9593" 
-  "9598" -> "9605" 
-  "9605" -> "9616" 
-  "9599" -> "9598" 
-  "9600" -> "9602" 
-  "9602" -> "9599" 
-  "9580" -> "9586" 
+digraph "NewStringUTF" {  
+"9570" [label = <(soa,soa(env))<SUB>1665</SUB>> ]
+"9573" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1666</SUB>> ]
+"9586" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1667</SUB>> ]
+"9563" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1662</SUB>> ]
+"9575" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1666</SUB>> ]
+"9587" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1667</SUB>> ]
+"9567" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1663</SUB>> ]
+"9576" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1666</SUB>> ]
+"9581" [label = <(Self,soa.Self())<SUB>1666</SUB>> ]
+"9588" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1667</SUB>> ]
+"9577" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1666</SUB>> ]
+"9580" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1666</SUB>> ]
+"9582" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1666</SUB>> ]
+"9589" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1667</SUB>> ]
+"9584" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1666</SUB>> ]
+"9591" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1667</SUB>> ]
+"9558" [label = <(METHOD,NewStringUTF)<SUB>1661</SUB>> ]
+"9594" [label = <(METHOD_RETURN,jstring)<SUB>1661</SUB>> ]
+  "9570" -> "9577" 
+  "9573" -> "9591" 
+  "9586" -> "9594" 
+  "9563" -> "9567" 
+  "9563" -> "9570" 
+  "9575" -> "9573" 
+  "9587" -> "9586" 
+  "9567" -> "9594" 
+  "9576" -> "9584" 
+  "9581" -> "9575" 
+  "9588" -> "9587" 
+  "9577" -> "9580" 
+  "9580" -> "9576" 
+  "9582" -> "9581" 
+  "9589" -> "9588" 
+  "9584" -> "9582" 
+  "9591" -> "9589" 
+  "9558" -> "9563" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/178-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/178-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/178-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/178-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodV" {  
-"9624" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1717</SUB>> ]
-"9642" [label = <(soa,soa(env))<SUB>1718</SUB>> ]
-"9644" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1719</SUB>> ]
-"9628" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1717</SUB>> ]
-"9629" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1717</SUB>> ]
-"9633" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1717</SUB>> ]
-"9640" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1717</SUB>> ]
-"9634" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1717</SUB>> ]
-"9635" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1717</SUB>> ]
-"9637" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1717</SUB>> ]
-"9618" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1716</SUB>> ]
-"9649" [label = <(METHOD_RETURN,void)<SUB>1716</SUB>> ]
+digraph "GetStringLength" {  
+"9600" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1671</SUB>> ]
+"9619" [label = <(soa,soa(env))<SUB>1672</SUB>> ]
+"9621" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1673</SUB>> ]
+"9622" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1673</SUB>> ]
+"9623" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1673</SUB>> ]
+"9630" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1673</SUB>> ]
+"9604" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1671</SUB>> ]
+"9624" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1673</SUB>> ]
+"9627" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1673</SUB>> ]
+"9631" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1673</SUB>> ]
+"9605" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1671</SUB>> ]
+"9609" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1671</SUB>> ]
+"9616" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1671</SUB>> ]
+"9626" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1673</SUB>> ]
+"9629" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1673</SUB>> ]
+"9633" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1673</SUB>> ]
+"9610" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1671</SUB>> ]
+"9611" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1671</SUB>> ]
+"9613" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1671</SUB>> ]
+"9596" [label = <(METHOD,GetStringLength)<SUB>1670</SUB>> ]
+"9634" [label = <(METHOD_RETURN,jsize)<SUB>1670</SUB>> ]
+  "9600" -> "9605" 
+  "9600" -> "9619" 
+  "9619" -> "9626" 
+  "9621" -> "9634" 
+  "9622" -> "9621" 
+  "9623" -> "9633" 
+  "9630" -> "9622" 
+  "9604" -> "9611" 
+  "9604" -> "9619" 
   "9624" -> "9629" 
-  "9624" -> "9642" 
-  "9642" -> "9644" 
-  "9644" -> "9649" 
-  "9628" -> "9635" 
-  "9628" -> "9642" 
-  "9629" -> "9628" 
-  "9633" -> "9640" 
-  "9640" -> "9649" 
-  "9634" -> "9633" 
-  "9635" -> "9637" 
-  "9637" -> "9634" 
-  "9618" -> "9624" 
+  "9627" -> "9623" 
+  "9631" -> "9630" 
+  "9605" -> "9604" 
+  "9609" -> "9616" 
+  "9616" -> "9634" 
+  "9626" -> "9624" 
+  "9629" -> "9627" 
+  "9633" -> "9631" 
+  "9610" -> "9609" 
+  "9611" -> "9613" 
+  "9613" -> "9610" 
+  "9596" -> "9600" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/179-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/179-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/179-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/179-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodA" {  
-"9657" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1723</SUB>> ]
-"9675" [label = <(soa,soa(env))<SUB>1724</SUB>> ]
-"9677" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1725</SUB>> ]
-"9661" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1723</SUB>> ]
-"9662" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1723</SUB>> ]
-"9666" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1723</SUB>> ]
-"9673" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1723</SUB>> ]
-"9667" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1723</SUB>> ]
-"9668" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1723</SUB>> ]
-"9670" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1723</SUB>> ]
-"9651" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1722</SUB>> ]
-"9682" [label = <(METHOD_RETURN,void)<SUB>1722</SUB>> ]
-  "9657" -> "9662" 
-  "9657" -> "9675" 
-  "9675" -> "9677" 
-  "9677" -> "9682" 
-  "9661" -> "9668" 
-  "9661" -> "9675" 
+digraph "GetStringUTFLength" {  
+"9640" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1677</SUB>> ]
+"9659" [label = <(soa,soa(env))<SUB>1678</SUB>> ]
+"9661" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1679</SUB>> ]
+"9662" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1679</SUB>> ]
+"9663" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1679</SUB>> ]
+"9670" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1679</SUB>> ]
+"9644" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1677</SUB>> ]
+"9664" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1679</SUB>> ]
+"9667" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1679</SUB>> ]
+"9671" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1679</SUB>> ]
+"9645" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1677</SUB>> ]
+"9649" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1677</SUB>> ]
+"9656" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1677</SUB>> ]
+"9666" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1679</SUB>> ]
+"9669" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1679</SUB>> ]
+"9673" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1679</SUB>> ]
+"9650" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1677</SUB>> ]
+"9651" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1677</SUB>> ]
+"9653" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1677</SUB>> ]
+"9636" [label = <(METHOD,GetStringUTFLength)<SUB>1676</SUB>> ]
+"9674" [label = <(METHOD_RETURN,jsize)<SUB>1676</SUB>> ]
+  "9640" -> "9645" 
+  "9640" -> "9659" 
+  "9659" -> "9666" 
+  "9661" -> "9674" 
   "9662" -> "9661" 
-  "9666" -> "9673" 
-  "9673" -> "9682" 
-  "9667" -> "9666" 
-  "9668" -> "9670" 
-  "9670" -> "9667" 
-  "9651" -> "9657" 
+  "9663" -> "9673" 
+  "9670" -> "9662" 
+  "9644" -> "9651" 
+  "9644" -> "9659" 
+  "9664" -> "9669" 
+  "9667" -> "9663" 
+  "9671" -> "9670" 
+  "9645" -> "9644" 
+  "9649" -> "9656" 
+  "9656" -> "9674" 
+  "9666" -> "9664" 
+  "9669" -> "9667" 
+  "9673" -> "9671" 
+  "9650" -> "9649" 
+  "9651" -> "9653" 
+  "9653" -> "9650" 
+  "9636" -> "9640" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/18-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/18-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/18-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/18-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,7 +1,104 @@
-digraph "GetVersion" {  
-"504" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>424</SUB>> ]
-"501" [label = <(METHOD,GetVersion)<SUB>423</SUB>> ]
-"506" [label = <(METHOD_RETURN,jint)<SUB>423</SUB>> ]
-  "504" -> "506" 
-  "501" -> "504" 
+digraph "FromReflectedField" {  
+"487" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>375</SUB>> ]
+"506" [label = <(soa,soa(env))<SUB>376</SUB>> ]
+"508" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>377</SUB>> ]
+"540" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>382</SUB>> ]
+"559" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>383</SUB>> ]
+"509" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>377</SUB>> ]
+"516" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>377</SUB>> ]
+"526" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != mirror::Field::StaticClass())<SUB>378</SUB>> ]
+"541" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>382</SUB>> ]
+"548" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>382</SUB>> ]
+"560" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>383</SUB>> ]
+"510" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>377</SUB>> ]
+"517" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>377</SUB>> ]
+"527" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>378</SUB>> ]
+"531" [label = <(mirror::Field::StaticClass,mirror::Field::StaticClass())<SUB>378</SUB>> ]
+"538" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>380</SUB>> ]
+"542" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>382</SUB>> ]
+"549" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>382</SUB>> ]
+"554" [label = <(::DownCast,::DownCast(obj_field))<SUB>382</SUB>> ]
+"561" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>383</SUB>> ]
+"564" [label = <(GetArtField,field-&gt;GetArtField())<SUB>383</SUB>> ]
+"491" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>375</SUB>> ]
+"512" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>377</SUB>> ]
+"518" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>377</SUB>> ]
+"521" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>377</SUB>> ]
+"528" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>378</SUB>> ]
+"532" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::StaticClass)<SUB>378</SUB>> ]
+"544" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>382</SUB>> ]
+"551" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>382</SUB>> ]
+"555" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>382</SUB>> ]
+"563" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>383</SUB>> ]
+"565" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>383</SUB>> ]
+"492" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>375</SUB>> ]
+"496" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>375</SUB>> ]
+"503" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>375</SUB>> ]
+"514" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>377</SUB>> ]
+"520" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>377</SUB>> ]
+"523" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>377</SUB>> ]
+"530" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>378</SUB>> ]
+"533" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>378</SUB>> ]
+"536" [label = <(FIELD_IDENTIFIER,StaticClass,StaticClass)<SUB>378</SUB>> ]
+"546" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>382</SUB>> ]
+"553" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>382</SUB>> ]
+"557" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>382</SUB>> ]
+"567" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>383</SUB>> ]
+"497" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>375</SUB>> ]
+"498" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>375</SUB>> ]
+"500" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>375</SUB>> ]
+"483" [label = <(METHOD,FromReflectedField)<SUB>374</SUB>> ]
+"568" [label = <(METHOD_RETURN,jfieldID)<SUB>374</SUB>> ]
+  "487" -> "492" 
+  "487" -> "506" 
+  "506" -> "514" 
+  "508" -> "530" 
+  "540" -> "563" 
+  "559" -> "568" 
+  "509" -> "520" 
+  "516" -> "508" 
+  "526" -> "538" 
+  "526" -> "546" 
+  "541" -> "553" 
+  "548" -> "540" 
+  "560" -> "559" 
+  "510" -> "509" 
+  "517" -> "516" 
+  "527" -> "533" 
+  "531" -> "526" 
+  "538" -> "568" 
+  "542" -> "541" 
+  "549" -> "557" 
+  "554" -> "548" 
+  "561" -> "567" 
+  "564" -> "560" 
+  "491" -> "498" 
+  "491" -> "506" 
+  "512" -> "510" 
+  "518" -> "523" 
+  "521" -> "517" 
+  "528" -> "527" 
+  "532" -> "531" 
+  "544" -> "542" 
+  "551" -> "549" 
+  "555" -> "554" 
+  "563" -> "561" 
+  "565" -> "564" 
+  "492" -> "491" 
+  "496" -> "503" 
+  "503" -> "568" 
+  "514" -> "512" 
+  "520" -> "518" 
+  "523" -> "521" 
+  "530" -> "528" 
+  "533" -> "536" 
+  "536" -> "532" 
+  "546" -> "544" 
+  "553" -> "551" 
+  "557" -> "555" 
+  "567" -> "565" 
+  "497" -> "496" 
+  "498" -> "500" 
+  "500" -> "497" 
+  "483" -> "487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/180-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/180-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/180-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/180-cfg.dot	2023-06-07 19:35:21.317385039 +0330
@@ -1,68 +1,149 @@
-digraph "NewString" {  
-"9725" [label = <(soa,soa(env))<SUB>1737</SUB>> ]
-"9728" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1738</SUB>> ]
-"9742" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1739</SUB>> ]
-"9690" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1729</SUB>> ]
-"9706" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1733</SUB>> ]
-"9730" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1738</SUB>> ]
-"9743" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1739</SUB>> ]
-"9691" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1729</SUB>> ]
-"9695" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1730</SUB>> ]
-"9703" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1731</SUB>> ]
-"9707" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1733</SUB>> ]
-"9715" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1734</SUB>> ]
-"9722" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1735</SUB>> ]
-"9731" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1738</SUB>> ]
-"9736" [label = <(Self,soa.Self())<SUB>1738</SUB>> ]
-"9744" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1739</SUB>> ]
-"9696" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1730</SUB>> ]
-"9708" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1733</SUB>> ]
-"9711" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1733</SUB>> ]
-"9716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1734</SUB>> ]
-"9732" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1738</SUB>> ]
-"9735" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1738</SUB>> ]
-"9737" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1738</SUB>> ]
-"9745" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1739</SUB>> ]
-"9697" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1730</SUB>> ]
-"9699" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1730</SUB>> ]
-"9717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1734</SUB>> ]
-"9719" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1734</SUB>> ]
-"9739" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1738</SUB>> ]
-"9747" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1739</SUB>> ]
-"9684" [label = <(METHOD,NewString)<SUB>1728</SUB>> ]
-"9750" [label = <(METHOD_RETURN,jstring)<SUB>1728</SUB>> ]
-  "9725" -> "9732" 
-  "9728" -> "9747" 
-  "9742" -> "9750" 
-  "9690" -> "9697" 
-  "9690" -> "9708" 
-  "9706" -> "9717" 
-  "9706" -> "9725" 
-  "9730" -> "9728" 
+digraph "GetStringRegion" {  
+"9683" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1684</SUB>> ]
+"9701" [label = <(soa,soa(env))<SUB>1685</SUB>> ]
+"9703" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1686</SUB>> ]
+"9704" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1686</SUB>> ]
+"9711" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1686</SUB>> ]
+"9721" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1687</SUB>> ]
+"9705" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1686</SUB>> ]
+"9712" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1686</SUB>> ]
+"9722" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1687</SUB>> ]
+"9729" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1687</SUB>> ]
+"9738" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1688</SUB>> ]
+"9687" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1684</SUB>> ]
+"9707" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1686</SUB>> ]
+"9713" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1686</SUB>> ]
+"9716" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1686</SUB>> ]
+"9723" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1687</SUB>> ]
+"9726" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1687</SUB>> ]
+"9731" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1687</SUB>> ]
+"9742" [label = <(GetLength,s-&gt;GetLength())<SUB>1688</SUB>> ]
+"9748" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1690</SUB>> ]
+"9688" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1684</SUB>> ]
+"9692" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1684</SUB>> ]
+"9699" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1684</SUB>> ]
+"9709" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1686</SUB>> ]
+"9715" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1686</SUB>> ]
+"9718" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1686</SUB>> ]
+"9732" [label = <(GetLength,s-&gt;GetLength())<SUB>1687</SUB>> ]
+"9743" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1688</SUB>> ]
+"9771" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1691</SUB>> ]
+"9693" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1684</SUB>> ]
+"9733" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1687</SUB>> ]
+"9745" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1688</SUB>> ]
+"9772" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1691</SUB>> ]
+"9694" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1684</SUB>> ]
+"9696" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1684</SUB>> ]
+"9735" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1687</SUB>> ]
+"9753" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1690</SUB>> ]
+"9774" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1691</SUB>> ]
+"9782" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1692</SUB>> ]
+"9785" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1692</SUB>> ]
+"9804" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1696</SUB>> ]
+"9812" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1697</SUB>> ]
+"9754" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1690</SUB>> ]
+"9762" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>1690</SUB>> ]
+"9769" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1690</SUB>> ]
+"9779" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1692</SUB>> ]
+"9788" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1693</SUB>> ]
+"9806" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1696</SUB>> ]
+"9814" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1697</SUB>> ]
+"9817" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1697</SUB>> ]
+"9755" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1690</SUB>> ]
+"9758" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1690</SUB>> ]
+"9763" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1690</SUB>> ]
+"9789" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1693</SUB>> ]
+"9792" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1693</SUB>> ]
+"9807" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1696</SUB>> ]
+"9808" [label = <(GetValue,s-&gt;GetValue())<SUB>1696</SUB>> ]
+"9819" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1697</SUB>> ]
+"9764" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1690</SUB>> ]
+"9766" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1690</SUB>> ]
+"9793" [label = <(UNKNOWN,jchar,jchar)<SUB>1693</SUB>> ]
+"9794" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1693</SUB>> ]
+"9809" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1696</SUB>> ]
+"9795" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1693</SUB>> ]
+"9798" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1693</SUB>> ]
+"9811" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1696</SUB>> ]
+"9797" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1693</SUB>> ]
+"9676" [label = <(METHOD,GetStringRegion)<SUB>1682</SUB>> ]
+"9821" [label = <(METHOD_RETURN,void)<SUB>1682</SUB>> ]
+  "9683" -> "9688" 
+  "9683" -> "9701" 
+  "9701" -> "9709" 
+  "9703" -> "9723" 
+  "9704" -> "9715" 
+  "9711" -> "9703" 
+  "9721" -> "9745" 
+  "9721" -> "9748" 
+  "9705" -> "9704" 
+  "9712" -> "9711" 
+  "9722" -> "9721" 
+  "9722" -> "9735" 
+  "9729" -> "9721" 
+  "9738" -> "9821" 
+  "9687" -> "9694" 
+  "9687" -> "9701" 
+  "9707" -> "9705" 
+  "9713" -> "9718" 
+  "9716" -> "9712" 
+  "9723" -> "9722" 
+  "9723" -> "9726" 
+  "9726" -> "9722" 
+  "9731" -> "9729" 
+  "9742" -> "9738" 
+  "9748" -> "9755" 
+  "9748" -> "9774" 
+  "9688" -> "9687" 
+  "9692" -> "9699" 
+  "9699" -> "9821" 
+  "9709" -> "9707" 
+  "9715" -> "9713" 
+  "9718" -> "9716" 
+  "9732" -> "9731" 
   "9743" -> "9742" 
-  "9691" -> "9690" 
-  "9695" -> "9703" 
-  "9703" -> "9750" 
-  "9707" -> "9706" 
-  "9715" -> "9722" 
-  "9722" -> "9750" 
-  "9731" -> "9739" 
-  "9736" -> "9730" 
-  "9744" -> "9743" 
-  "9696" -> "9695" 
-  "9708" -> "9707" 
-  "9708" -> "9711" 
-  "9711" -> "9707" 
-  "9716" -> "9715" 
-  "9732" -> "9735" 
-  "9735" -> "9731" 
-  "9737" -> "9736" 
-  "9745" -> "9744" 
-  "9697" -> "9699" 
-  "9699" -> "9696" 
-  "9717" -> "9719" 
-  "9719" -> "9716" 
-  "9739" -> "9737" 
-  "9747" -> "9745" 
-  "9684" -> "9691" 
+  "9771" -> "9779" 
+  "9771" -> "9807" 
+  "9693" -> "9692" 
+  "9733" -> "9732" 
+  "9745" -> "9743" 
+  "9772" -> "9771" 
+  "9694" -> "9696" 
+  "9696" -> "9693" 
+  "9735" -> "9733" 
+  "9753" -> "9764" 
+  "9753" -> "9774" 
+  "9774" -> "9772" 
+  "9782" -> "9821" 
+  "9782" -> "9789" 
+  "9785" -> "9782" 
+  "9804" -> "9814" 
+  "9812" -> "9821" 
+  "9754" -> "9753" 
+  "9762" -> "9769" 
+  "9769" -> "9821" 
+  "9779" -> "9782" 
+  "9788" -> "9785" 
+  "9806" -> "9804" 
+  "9814" -> "9819" 
+  "9817" -> "9812" 
+  "9755" -> "9754" 
+  "9755" -> "9758" 
+  "9758" -> "9754" 
+  "9763" -> "9762" 
+  "9789" -> "9793" 
+  "9792" -> "9788" 
+  "9807" -> "9811" 
+  "9808" -> "9806" 
+  "9819" -> "9817" 
+  "9764" -> "9766" 
+  "9766" -> "9763" 
+  "9793" -> "9797" 
+  "9794" -> "9792" 
+  "9809" -> "9808" 
+  "9795" -> "9798" 
+  "9798" -> "9794" 
+  "9811" -> "9809" 
+  "9797" -> "9795" 
+  "9676" -> "9683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/181-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/181-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/181-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/181-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,222 +1,143 @@
-digraph "NewStringUTF" {  
-"9764" [label = <(&lt;operator&gt;.assignment,utf8_length = strlen(utf))<SUB>1751</SUB>> ]
-"9814" [label = <(&lt;operator&gt;.assignment,replacement_utf_pos = 0u)<SUB>1763</SUB>> ]
-"9818" [label = <(UNKNOWN,t,t)<SUB>1764</SUB>> ]
-"9819" [label = <(UNKNOWN,utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {},utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {})<SUB>1764</SUB>> ]
-"9820" [label = <(UNKNOWN,,\012 /*bad=*/ []() { return true; },,\012 /*bad=*/ []() { return true; })<SUB>1767</SUB>> ]
-"9821" [label = <(UNKNOWN,);,);)<SUB>1768</SUB>> ]
-"9910" [label = <(DCHECK_LE,DCHECK_LE(utf16_length, utf8_length))<SUB>1803</SUB>> ]
-"9913" [label = <(DCHECK_LE,DCHECK_LE(utf8_length, static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1804</SUB>> ]
-"9928" [label = <(soa,soa(env))<SUB>1806</SUB>> ]
-"9931" [label = <(&lt;operator&gt;.assignment,* result =\012        mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1807</SUB>> ]
-"9946" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1809</SUB>> ]
-"9757" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1743</SUB>> ]
-"9766" [label = <(strlen,strlen(utf))<SUB>1751</SUB>> ]
-"9769" [label = <(UNLIKELY,UNLIKELY(utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1752</SUB>> ]
-"9823" [label = <(UNLIKELY,UNLIKELY(utf8_length != 0u &amp;&amp; utf16_length == 0u))<SUB>1769</SUB>> ]
-"9915" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1804</SUB>> ]
-"9933" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1808</SUB>> ]
-"9947" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1809</SUB>> ]
-"9761" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1744</SUB>> ]
-"9770" [label = <(&lt;operator&gt;.greaterThan,utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1752</SUB>> ]
-"9786" [label = <(&lt;operator&gt;.assignment,error =\012          android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1756</SUB>> ]
-"9797" [label = <(soa,soa(env))<SUB>1758</SUB>> ]
-"9799" [label = <(ThrowOutOfMemoryError,soa.Self()-&gt;ThrowOutOfMemoryError(error.c_str()))<SUB>1759</SUB>> ]
-"9810" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1760</SUB>> ]
-"9824" [label = <(&lt;operator&gt;.logicalAnd,utf8_length != 0u &amp;&amp; utf16_length == 0u)<SUB>1769</SUB>> ]
-"9833" [label = <(&lt;operator&gt;.assignment,kMinDelay = UINT64_C(10000000000))<SUB>1772</SUB>> ]
-"9838" [label = <(prev_bad_input_time,prev_bad_input_time(UINT64_C(0)))<SUB>1773</SUB>> ]
-"9842" [label = <(&lt;operator&gt;.assignment,prev_time = prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1774</SUB>> ]
-"9852" [label = <(&lt;operator&gt;.assignment,now = NanoTime())<SUB>1775</SUB>> ]
-"9880" [label = <(reset,replacement_utf.reset(new char[utf8_length + 1u]))<SUB>1781</SUB>> ]
-"9886" [label = <(&lt;operator&gt;.assignment,utf16_length = VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1782</SUB>> ]
-"9893" [label = <(DCHECK_LE,DCHECK_LE(replacement_utf_pos, utf8_length))<SUB>1798</SUB>> ]
-"9896" [label = <(&lt;operator&gt;.assignment,replacement_utf[replacement_utf_pos] = 0)<SUB>1799</SUB>> ]
-"9901" [label = <(&lt;operator&gt;.assignment,utf = replacement_utf.get())<SUB>1800</SUB>> ]
-"9907" [label = <(&lt;operator&gt;.assignment,utf8_length = replacement_utf_pos)<SUB>1801</SUB>> ]
-"9916" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1804</SUB>> ]
-"9917" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1804</SUB>> ]
-"9934" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1808</SUB>> ]
-"9939" [label = <(Self,soa.Self())<SUB>1808</SUB>> ]
-"9948" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1809</SUB>> ]
-"9772" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1752</SUB>> ]
-"9788" [label = <(android::base::StringPrintf,android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1757</SUB>> ]
-"9800" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowOutOfMemoryError)<SUB>1759</SUB>> ]
-"9806" [label = <(c_str,error.c_str())<SUB>1759</SUB>> ]
-"9825" [label = <(&lt;operator&gt;.notEquals,utf8_length != 0u)<SUB>1769</SUB>> ]
-"9828" [label = <(&lt;operator&gt;.equals,utf16_length == 0u)<SUB>1769</SUB>> ]
-"9835" [label = <(UINT64_C,UINT64_C(10000000000))<SUB>1772</SUB>> ]
-"9839" [label = <(UINT64_C,UINT64_C(0))<SUB>1773</SUB>> ]
-"9844" [label = <(load,prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1774</SUB>> ]
-"9854" [label = <(NanoTime,NanoTime())<SUB>1775</SUB>> ]
-"9856" [label = <(&lt;operator&gt;.logicalAnd,(prev_time == 0u || now - prev_time &gt;= kMinDelay) &amp;&amp;\012          prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1776</SUB>> ]
-"9881" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.reset)<SUB>1781</SUB>> ]
-"9884" [label = <(&lt;operator&gt;.new,new char[utf8_length + 1u])<SUB>1781</SUB>> ]
-"9888" [label = <(VisitModifiedUtf8Chars,VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1782</SUB>> ]
-"9897" [label = <(&lt;operator&gt;.indirectIndexAccess,replacement_utf[replacement_utf_pos])<SUB>1799</SUB>> ]
-"9903" [label = <(get,replacement_utf.get())<SUB>1800</SUB>> ]
-"9918" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1804</SUB>> ]
-"9923" [label = <(::max,::max())<SUB>1804</SUB>> ]
-"9935" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1808</SUB>> ]
-"9938" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1808</SUB>> ]
-"9940" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1808</SUB>> ]
-"9949" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1809</SUB>> ]
-"9773" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1752</SUB>> ]
-"9774" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1752</SUB>> ]
-"9789" [label = <(&lt;operator&gt;.fieldAccess,android::base::StringPrintf)<SUB>1757</SUB>> ]
-"9801" [label = <(Self,soa.Self())<SUB>1759</SUB>> ]
-"9805" [label = <(FIELD_IDENTIFIER,ThrowOutOfMemoryError,ThrowOutOfMemoryError)<SUB>1759</SUB>> ]
-"9807" [label = <(&lt;operator&gt;.fieldAccess,error.c_str)<SUB>1759</SUB>> ]
-"9845" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.load)<SUB>1774</SUB>> ]
-"9848" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1774</SUB>> ]
-"9857" [label = <(&lt;operator&gt;.logicalOr,prev_time == 0u || now - prev_time &gt;= kMinDelay)<SUB>1776</SUB>> ]
-"9866" [label = <(compare_exchange_strong,prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1777</SUB>> ]
-"9876" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR) &lt;&lt; &quot;Invalid UTF-8 input to JNI::NewStringUTF()&quot;)<SUB>1778</SUB>> ]
-"9883" [label = <(FIELD_IDENTIFIER,reset,reset)<SUB>1781</SUB>> ]
-"9891" [label = <(METHOD_REF,ANY anonymous_lambda_4 (const char* ptr,size_t length),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1785</SUB>> ]
-"9892" [label = <(METHOD_REF,ANY anonymous_lambda_5 (),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1790</SUB>> ]
-"9904" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.get)<SUB>1800</SUB>> ]
-"9919" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1804</SUB>> ]
-"9924" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1804</SUB>> ]
-"9942" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1808</SUB>> ]
-"9951" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1809</SUB>> ]
-"9775" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1752</SUB>> ]
-"9780" [label = <(::max,::max())<SUB>1752</SUB>> ]
-"9790" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>1757</SUB>> ]
-"9793" [label = <(FIELD_IDENTIFIER,StringPrintf,StringPrintf)<SUB>1757</SUB>> ]
-"9802" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1759</SUB>> ]
-"9809" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1759</SUB>> ]
-"9847" [label = <(FIELD_IDENTIFIER,load,load)<SUB>1774</SUB>> ]
-"9850" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1774</SUB>> ]
-"9858" [label = <(&lt;operator&gt;.equals,prev_time == 0u)<SUB>1776</SUB>> ]
-"9861" [label = <(&lt;operator&gt;.greaterEqualsThan,now - prev_time &gt;= kMinDelay)<SUB>1776</SUB>> ]
-"9867" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.compare_exchange_strong)<SUB>1777</SUB>> ]
-"9872" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1777</SUB>> ]
-"9877" [label = <(LOG,LOG(ERROR))<SUB>1778</SUB>> ]
-"9906" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1800</SUB>> ]
-"9921" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1804</SUB>> ]
-"9926" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1804</SUB>> ]
-"9776" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1752</SUB>> ]
-"9781" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1752</SUB>> ]
-"9804" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1759</SUB>> ]
-"9862" [label = <(&lt;operator&gt;.subtraction,now - prev_time)<SUB>1776</SUB>> ]
-"9869" [label = <(FIELD_IDENTIFIER,compare_exchange_strong,compare_exchange_strong)<SUB>1777</SUB>> ]
-"9874" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1777</SUB>> ]
-"9778" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1752</SUB>> ]
-"9783" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1752</SUB>> ]
-"9752" [label = <(METHOD,NewStringUTF)<SUB>1742</SUB>> ]
-"9954" [label = <(METHOD_RETURN,jstring)<SUB>1742</SUB>> ]
-  "9764" -> "9773" 
-  "9814" -> "9818" 
-  "9818" -> "9819" 
-  "9819" -> "9820" 
-  "9820" -> "9821" 
-  "9821" -> "9825" 
-  "9910" -> "9916" 
-  "9913" -> "9928" 
-  "9928" -> "9935" 
-  "9931" -> "9951" 
-  "9946" -> "9954" 
-  "9757" -> "9761" 
-  "9757" -> "9766" 
-  "9766" -> "9764" 
-  "9769" -> "9790" 
-  "9769" -> "9814" 
-  "9823" -> "9835" 
-  "9823" -> "9910" 
-  "9915" -> "9913" 
-  "9933" -> "9931" 
-  "9947" -> "9946" 
-  "9761" -> "9954" 
-  "9770" -> "9769" 
-  "9786" -> "9797" 
-  "9797" -> "9804" 
-  "9799" -> "9810" 
-  "9810" -> "9954" 
-  "9824" -> "9823" 
-  "9833" -> "9839" 
-  "9838" -> "9847" 
-  "9842" -> "9854" 
-  "9852" -> "9858" 
-  "9880" -> "9891" 
-  "9886" -> "9893" 
-  "9893" -> "9897" 
-  "9896" -> "9906" 
-  "9901" -> "9907" 
-  "9907" -> "9910" 
-  "9916" -> "9921" 
-  "9917" -> "9915" 
-  "9934" -> "9942" 
-  "9939" -> "9933" 
-  "9948" -> "9947" 
-  "9772" -> "9770" 
-  "9788" -> "9786" 
-  "9800" -> "9809" 
-  "9806" -> "9799" 
-  "9825" -> "9824" 
-  "9825" -> "9828" 
-  "9828" -> "9824" 
-  "9835" -> "9833" 
-  "9839" -> "9838" 
-  "9844" -> "9842" 
+digraph "GetStringUTFRegion" {  
+"9830" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1704</SUB>> ]
+"9848" [label = <(soa,soa(env))<SUB>1705</SUB>> ]
+"9850" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1706</SUB>> ]
+"9851" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1706</SUB>> ]
+"9858" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1706</SUB>> ]
+"9868" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1707</SUB>> ]
+"9852" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1706</SUB>> ]
+"9859" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1706</SUB>> ]
+"9869" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1707</SUB>> ]
+"9876" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1707</SUB>> ]
+"9885" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1708</SUB>> ]
+"9834" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1704</SUB>> ]
+"9854" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1706</SUB>> ]
+"9860" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1706</SUB>> ]
+"9863" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1706</SUB>> ]
+"9870" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1707</SUB>> ]
+"9873" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1707</SUB>> ]
+"9878" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1707</SUB>> ]
+"9889" [label = <(GetLength,s-&gt;GetLength())<SUB>1708</SUB>> ]
+"9895" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1710</SUB>> ]
+"9835" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1704</SUB>> ]
+"9839" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1704</SUB>> ]
+"9846" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1704</SUB>> ]
+"9856" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1706</SUB>> ]
+"9862" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1706</SUB>> ]
+"9865" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1706</SUB>> ]
+"9879" [label = <(GetLength,s-&gt;GetLength())<SUB>1707</SUB>> ]
+"9890" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1708</SUB>> ]
+"9918" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1711</SUB>> ]
+"9840" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1704</SUB>> ]
+"9880" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1707</SUB>> ]
+"9892" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1708</SUB>> ]
+"9919" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1711</SUB>> ]
+"9841" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1704</SUB>> ]
+"9843" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1704</SUB>> ]
+"9882" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1707</SUB>> ]
+"9900" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1710</SUB>> ]
+"9921" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1711</SUB>> ]
+"9929" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1712</SUB>> ]
+"9932" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1712</SUB>> ]
+"9949" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1716</SUB>> ]
+"9956" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1717</SUB>> ]
+"9963" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1718</SUB>> ]
+"9901" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1710</SUB>> ]
+"9909" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>1710</SUB>> ]
+"9916" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1710</SUB>> ]
+"9926" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1712</SUB>> ]
+"9935" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1713</SUB>> ]
+"9951" [label = <(GetValue,s-&gt;GetValue())<SUB>1716</SUB>> ]
+"9958" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1717</SUB>> ]
+"9966" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1718</SUB>> ]
+"9902" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1710</SUB>> ]
+"9905" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1710</SUB>> ]
+"9910" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1710</SUB>> ]
+"9936" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1713</SUB>> ]
+"9939" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1713</SUB>> ]
+"9952" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1716</SUB>> ]
+"9959" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1717</SUB>> ]
+"9911" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1710</SUB>> ]
+"9913" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1710</SUB>> ]
+"9940" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1713</SUB>> ]
+"9943" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1713</SUB>> ]
+"9954" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1716</SUB>> ]
+"9942" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1713</SUB>> ]
+"9823" [label = <(METHOD,GetStringUTFRegion)<SUB>1702</SUB>> ]
+"9970" [label = <(METHOD_RETURN,void)<SUB>1702</SUB>> ]
+  "9830" -> "9835" 
+  "9830" -> "9848" 
+  "9848" -> "9856" 
+  "9850" -> "9870" 
+  "9851" -> "9862" 
+  "9858" -> "9850" 
+  "9868" -> "9892" 
+  "9868" -> "9895" 
+  "9852" -> "9851" 
+  "9859" -> "9858" 
+  "9869" -> "9868" 
+  "9869" -> "9882" 
+  "9876" -> "9868" 
+  "9885" -> "9970" 
+  "9834" -> "9841" 
+  "9834" -> "9848" 
   "9854" -> "9852" 
-  "9856" -> "9877" 
-  "9856" -> "9883" 
-  "9881" -> "9884" 
-  "9884" -> "9880" 
-  "9888" -> "9886" 
-  "9897" -> "9896" 
-  "9903" -> "9901" 
+  "9860" -> "9865" 
+  "9863" -> "9859" 
+  "9870" -> "9869" 
+  "9870" -> "9873" 
+  "9873" -> "9869" 
+  "9878" -> "9876" 
+  "9889" -> "9885" 
+  "9895" -> "9902" 
+  "9895" -> "9921" 
+  "9835" -> "9834" 
+  "9839" -> "9846" 
+  "9846" -> "9970" 
+  "9856" -> "9854" 
+  "9862" -> "9860" 
+  "9865" -> "9863" 
+  "9879" -> "9878" 
+  "9890" -> "9889" 
   "9918" -> "9926" 
-  "9923" -> "9917" 
-  "9935" -> "9938" 
-  "9938" -> "9934" 
-  "9940" -> "9939" 
-  "9949" -> "9948" 
-  "9773" -> "9778" 
-  "9774" -> "9772" 
-  "9789" -> "9788" 
-  "9801" -> "9805" 
-  "9805" -> "9800" 
-  "9807" -> "9806" 
-  "9845" -> "9850" 
-  "9848" -> "9844" 
-  "9857" -> "9856" 
-  "9857" -> "9869" 
-  "9866" -> "9856" 
-  "9876" -> "9883" 
-  "9883" -> "9881" 
-  "9891" -> "9892" 
-  "9892" -> "9888" 
-  "9904" -> "9903" 
+  "9918" -> "9954" 
+  "9840" -> "9839" 
+  "9880" -> "9879" 
+  "9892" -> "9890" 
   "9919" -> "9918" 
-  "9924" -> "9923" 
-  "9942" -> "9940" 
-  "9951" -> "9949" 
-  "9775" -> "9783" 
-  "9780" -> "9774" 
-  "9790" -> "9793" 
-  "9793" -> "9789" 
-  "9802" -> "9801" 
-  "9809" -> "9807" 
-  "9847" -> "9845" 
-  "9850" -> "9848" 
-  "9858" -> "9857" 
-  "9858" -> "9862" 
-  "9861" -> "9857" 
-  "9867" -> "9874" 
-  "9872" -> "9866" 
-  "9877" -> "9876" 
-  "9906" -> "9904" 
+  "9841" -> "9843" 
+  "9843" -> "9840" 
+  "9882" -> "9880" 
+  "9900" -> "9911" 
+  "9900" -> "9921" 
   "9921" -> "9919" 
-  "9926" -> "9924" 
-  "9776" -> "9775" 
-  "9781" -> "9780" 
-  "9804" -> "9802" 
-  "9862" -> "9861" 
-  "9869" -> "9867" 
-  "9874" -> "9872" 
-  "9778" -> "9776" 
-  "9783" -> "9781" 
-  "9752" -> "9757" 
+  "9929" -> "9970" 
+  "9929" -> "9936" 
+  "9932" -> "9929" 
+  "9949" -> "9959" 
+  "9956" -> "9966" 
+  "9963" -> "9970" 
+  "9901" -> "9900" 
+  "9909" -> "9916" 
+  "9916" -> "9970" 
+  "9926" -> "9929" 
+  "9935" -> "9932" 
+  "9951" -> "9949" 
+  "9958" -> "9956" 
+  "9966" -> "9963" 
+  "9902" -> "9901" 
+  "9902" -> "9905" 
+  "9905" -> "9901" 
+  "9910" -> "9909" 
+  "9936" -> "9942" 
+  "9939" -> "9935" 
+  "9952" -> "9951" 
+  "9959" -> "9958" 
+  "9911" -> "9913" 
+  "9913" -> "9910" 
+  "9940" -> "9943" 
+  "9943" -> "9939" 
+  "9954" -> "9952" 
+  "9942" -> "9940" 
+  "9823" -> "9830" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/182-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/182-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/182-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/182-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,45 +1,159 @@
-digraph "GetStringLength" {  
-"9960" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1813</SUB>> ]
-"9979" [label = <(soa,soa(env))<SUB>1814</SUB>> ]
-"9981" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1815</SUB>> ]
-"9982" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1815</SUB>> ]
-"9983" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1815</SUB>> ]
-"9990" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1815</SUB>> ]
-"9964" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1813</SUB>> ]
-"9984" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1815</SUB>> ]
-"9987" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1815</SUB>> ]
-"9991" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1815</SUB>> ]
-"9965" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1813</SUB>> ]
-"9969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1813</SUB>> ]
-"9976" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1813</SUB>> ]
-"9986" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1815</SUB>> ]
-"9989" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1815</SUB>> ]
-"9993" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1815</SUB>> ]
-"9970" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1813</SUB>> ]
-"9971" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1813</SUB>> ]
-"9973" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1813</SUB>> ]
-"9956" [label = <(METHOD,GetStringLength)<SUB>1812</SUB>> ]
-"9994" [label = <(METHOD_RETURN,jsize)<SUB>1812</SUB>> ]
-  "9960" -> "9965" 
-  "9960" -> "9979" 
-  "9979" -> "9986" 
-  "9981" -> "9994" 
+digraph "GetStringChars" {  
+"9977" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1724</SUB>> ]
+"9996" [label = <(soa,soa(env))<SUB>1725</SUB>> ]
+"9998" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1726</SUB>> ]
+"10016" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1727</SUB>> ]
+"10111" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1746</SUB>> ]
+"9999" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1726</SUB>> ]
+"10006" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1726</SUB>> ]
+"10018" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1727</SUB>> ]
+"10026" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>1728</SUB>> ]
+"10103" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1743</SUB>> ]
+"10112" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1746</SUB>> ]
+"10000" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1726</SUB>> ]
+"10007" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1726</SUB>> ]
+"10019" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1727</SUB>> ]
+"10027" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1728</SUB>> ]
+"10032" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1728</SUB>> ]
+"10038" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>1729</SUB>> ]
+"10100" [label = <(RETURN,return chars;,return chars;)<SUB>1741</SUB>> ]
+"10107" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1744</SUB>> ]
+"10113" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1746</SUB>> ]
+"10114" [label = <(GetValue,s-&gt;GetValue())<SUB>1746</SUB>> ]
+"9981" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1724</SUB>> ]
+"10002" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1726</SUB>> ]
+"10008" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1726</SUB>> ]
+"10011" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1726</SUB>> ]
+"10020" [label = <(Runtime::Current,Runtime::Current())<SUB>1727</SUB>> ]
+"10024" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1727</SUB>> ]
+"10028" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1728</SUB>> ]
+"10033" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1728</SUB>> ]
+"10040" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>1729</SUB>> ]
+"10043" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1730</SUB>> ]
+"10092" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1738</SUB>> ]
+"10108" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1744</SUB>> ]
+"10115" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1746</SUB>> ]
+"9982" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1724</SUB>> ]
+"9986" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1724</SUB>> ]
+"9993" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1724</SUB>> ]
+"10004" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1726</SUB>> ]
+"10010" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1726</SUB>> ]
+"10013" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1726</SUB>> ]
+"10021" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1727</SUB>> ]
+"10030" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1728</SUB>> ]
+"10035" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1728</SUB>> ]
+"10044" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1730</SUB>> ]
+"10049" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1731</SUB>> ]
+"10096" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1739</SUB>> ]
+"10117" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1746</SUB>> ]
+"9987" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1724</SUB>> ]
+"10023" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1727</SUB>> ]
+"10046" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1730</SUB>> ]
+"10051" [label = <(GetLength,s-&gt;GetLength())<SUB>1731</SUB>> ]
+"10061" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1732</SUB>> ]
+"10064" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1732</SUB>> ]
+"10078" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>1736</SUB>> ]
+"10097" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1739</SUB>> ]
+"9988" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1724</SUB>> ]
+"9990" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1724</SUB>> ]
+"10052" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1731</SUB>> ]
+"10058" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1732</SUB>> ]
+"10067" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1733</SUB>> ]
+"10080" [label = <(GetValue,s-&gt;GetValue())<SUB>1736</SUB>> ]
+"10084" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>1736</SUB>> ]
+"10054" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1731</SUB>> ]
+"10068" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1733</SUB>> ]
+"10071" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1733</SUB>> ]
+"10081" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1736</SUB>> ]
+"10085" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1736</SUB>> ]
+"10087" [label = <(GetLength,s-&gt;GetLength())<SUB>1736</SUB>> ]
+"10072" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1733</SUB>> ]
+"10083" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1736</SUB>> ]
+"10088" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1736</SUB>> ]
+"10074" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1733</SUB>> ]
+"10090" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1736</SUB>> ]
+"9972" [label = <(METHOD,GetStringChars)<SUB>1723</SUB>> ]
+"10118" [label = <(METHOD_RETURN,jchar)<SUB>1723</SUB>> ]
+  "9977" -> "9982" 
+  "9977" -> "9996" 
+  "9996" -> "10004" 
+  "9998" -> "10023" 
+  "10016" -> "10030" 
+  "10111" -> "10118" 
+  "9999" -> "10010" 
+  "10006" -> "9998" 
+  "10018" -> "10016" 
+  "10026" -> "10040" 
+  "10026" -> "10103" 
+  "10103" -> "10113" 
+  "10103" -> "10108" 
+  "10112" -> "10111" 
+  "10000" -> "9999" 
+  "10007" -> "10006" 
+  "10019" -> "10018" 
+  "10027" -> "10026" 
+  "10027" -> "10035" 
+  "10032" -> "10026" 
+  "10038" -> "10046" 
+  "10100" -> "10118" 
+  "10107" -> "10113" 
+  "10113" -> "10117" 
+  "10114" -> "10112" 
+  "9981" -> "9988" 
+  "9981" -> "9996" 
+  "10002" -> "10000" 
+  "10008" -> "10013" 
+  "10011" -> "10007" 
+  "10020" -> "10024" 
+  "10024" -> "10019" 
+  "10028" -> "10027" 
+  "10033" -> "10032" 
+  "10040" -> "10038" 
+  "10043" -> "10054" 
+  "10043" -> "10083" 
+  "10092" -> "10097" 
+  "10092" -> "10100" 
+  "10108" -> "10107" 
+  "10115" -> "10114" 
   "9982" -> "9981" 
-  "9983" -> "9993" 
-  "9990" -> "9982" 
-  "9964" -> "9971" 
-  "9964" -> "9979" 
-  "9984" -> "9989" 
-  "9987" -> "9983" 
-  "9991" -> "9990" 
-  "9965" -> "9964" 
-  "9969" -> "9976" 
-  "9976" -> "9994" 
-  "9986" -> "9984" 
-  "9989" -> "9987" 
-  "9993" -> "9991" 
-  "9970" -> "9969" 
-  "9971" -> "9973" 
-  "9973" -> "9970" 
-  "9956" -> "9960" 
+  "9986" -> "9993" 
+  "9993" -> "10118" 
+  "10004" -> "10002" 
+  "10010" -> "10008" 
+  "10013" -> "10011" 
+  "10021" -> "10020" 
+  "10030" -> "10028" 
+  "10035" -> "10033" 
+  "10044" -> "10043" 
+  "10049" -> "10058" 
+  "10096" -> "10100" 
+  "10117" -> "10115" 
+  "9987" -> "9986" 
+  "10023" -> "10021" 
+  "10046" -> "10044" 
+  "10051" -> "10049" 
+  "10061" -> "10068" 
+  "10061" -> "10092" 
+  "10064" -> "10061" 
+  "10078" -> "10092" 
+  "10097" -> "10096" 
+  "9988" -> "9990" 
+  "9990" -> "9987" 
+  "10052" -> "10051" 
+  "10058" -> "10061" 
+  "10067" -> "10064" 
+  "10080" -> "10085" 
+  "10084" -> "10078" 
+  "10054" -> "10052" 
+  "10068" -> "10074" 
+  "10071" -> "10067" 
+  "10081" -> "10080" 
+  "10085" -> "10090" 
+  "10087" -> "10084" 
+  "10072" -> "10071" 
+  "10083" -> "10081" 
+  "10088" -> "10087" 
+  "10074" -> "10072" 
+  "10090" -> "10088" 
+  "9972" -> "9977" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/183-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/183-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/183-cfg.dot	2023-06-07 19:35:14.787385843 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/183-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,45 +1,78 @@
-digraph "GetStringUTFLength" {  
-"10000" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1819</SUB>> ]
-"10019" [label = <(soa,soa(env))<SUB>1820</SUB>> ]
-"10021" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1821</SUB>> ]
-"10022" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1821</SUB>> ]
-"10023" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1821</SUB>> ]
-"10030" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1821</SUB>> ]
-"10004" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1819</SUB>> ]
-"10024" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1821</SUB>> ]
-"10027" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1821</SUB>> ]
-"10031" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1821</SUB>> ]
-"10005" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1819</SUB>> ]
-"10009" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1819</SUB>> ]
-"10016" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1819</SUB>> ]
-"10026" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1821</SUB>> ]
-"10029" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1821</SUB>> ]
-"10033" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1821</SUB>> ]
-"10010" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1819</SUB>> ]
-"10011" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1819</SUB>> ]
-"10013" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1819</SUB>> ]
-"9996" [label = <(METHOD,GetStringUTFLength)<SUB>1818</SUB>> ]
-"10034" [label = <(METHOD_RETURN,jsize)<SUB>1818</SUB>> ]
-  "10000" -> "10005" 
-  "10000" -> "10019" 
-  "10019" -> "10026" 
-  "10021" -> "10034" 
-  "10022" -> "10021" 
-  "10023" -> "10033" 
-  "10030" -> "10022" 
-  "10004" -> "10011" 
-  "10004" -> "10019" 
-  "10024" -> "10029" 
-  "10027" -> "10023" 
-  "10031" -> "10030" 
-  "10005" -> "10004" 
-  "10009" -> "10016" 
-  "10016" -> "10034" 
-  "10026" -> "10024" 
-  "10029" -> "10027" 
-  "10033" -> "10031" 
-  "10010" -> "10009" 
-  "10011" -> "10013" 
-  "10013" -> "10010" 
-  "9996" -> "10000" 
+digraph "ReleaseStringChars" {  
+"10125" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1750</SUB>> ]
+"10143" [label = <(soa,soa(env))<SUB>1751</SUB>> ]
+"10145" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1752</SUB>> ]
+"10146" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1752</SUB>> ]
+"10153" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1752</SUB>> ]
+"10163" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>1753</SUB>> ]
+"10147" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1752</SUB>> ]
+"10154" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1752</SUB>> ]
+"10164" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1753</SUB>> ]
+"10168" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>1753</SUB>> ]
+"10182" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1754</SUB>> ]
+"10129" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1750</SUB>> ]
+"10149" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1752</SUB>> ]
+"10155" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1752</SUB>> ]
+"10158" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1752</SUB>> ]
+"10165" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1753</SUB>> ]
+"10169" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1753</SUB>> ]
+"10175" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>1753</SUB>> ]
+"10130" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1750</SUB>> ]
+"10134" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1750</SUB>> ]
+"10141" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1750</SUB>> ]
+"10151" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1752</SUB>> ]
+"10157" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1752</SUB>> ]
+"10160" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1752</SUB>> ]
+"10167" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1753</SUB>> ]
+"10170" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1753</SUB>> ]
+"10177" [label = <(GetValue,s-&gt;GetValue())<SUB>1753</SUB>> ]
+"10135" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1750</SUB>> ]
+"10171" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1753</SUB>> ]
+"10178" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1753</SUB>> ]
+"10136" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1750</SUB>> ]
+"10138" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1750</SUB>> ]
+"10173" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1753</SUB>> ]
+"10180" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1753</SUB>> ]
+"10120" [label = <(METHOD,ReleaseStringChars)<SUB>1749</SUB>> ]
+"10184" [label = <(METHOD_RETURN,void)<SUB>1749</SUB>> ]
+  "10125" -> "10130" 
+  "10125" -> "10143" 
+  "10143" -> "10151" 
+  "10145" -> "10167" 
+  "10146" -> "10157" 
+  "10153" -> "10145" 
+  "10163" -> "10184" 
+  "10163" -> "10182" 
+  "10147" -> "10146" 
+  "10154" -> "10153" 
+  "10164" -> "10163" 
+  "10164" -> "10173" 
+  "10168" -> "10163" 
+  "10182" -> "10184" 
+  "10129" -> "10136" 
+  "10129" -> "10143" 
+  "10149" -> "10147" 
+  "10155" -> "10160" 
+  "10158" -> "10154" 
+  "10165" -> "10164" 
+  "10169" -> "10168" 
+  "10169" -> "10180" 
+  "10175" -> "10168" 
+  "10130" -> "10129" 
+  "10134" -> "10141" 
+  "10141" -> "10184" 
+  "10151" -> "10149" 
+  "10157" -> "10155" 
+  "10160" -> "10158" 
+  "10167" -> "10165" 
+  "10170" -> "10169" 
+  "10177" -> "10175" 
+  "10135" -> "10134" 
+  "10171" -> "10170" 
+  "10178" -> "10177" 
+  "10136" -> "10138" 
+  "10138" -> "10135" 
+  "10173" -> "10171" 
+  "10180" -> "10178" 
+  "10120" -> "10125" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/184-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/184-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/184-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/184-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,149 +1,189 @@
-digraph "GetStringRegion" {  
-"10043" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1826</SUB>> ]
-"10061" [label = <(soa,soa(env))<SUB>1827</SUB>> ]
-"10063" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1828</SUB>> ]
-"10064" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1828</SUB>> ]
-"10071" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1828</SUB>> ]
-"10081" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1829</SUB>> ]
-"10065" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1828</SUB>> ]
-"10072" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1828</SUB>> ]
-"10082" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1829</SUB>> ]
-"10089" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1829</SUB>> ]
-"10098" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1830</SUB>> ]
-"10047" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1826</SUB>> ]
-"10067" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1828</SUB>> ]
-"10073" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1828</SUB>> ]
-"10076" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1828</SUB>> ]
-"10083" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1829</SUB>> ]
-"10086" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1829</SUB>> ]
-"10091" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1829</SUB>> ]
-"10102" [label = <(GetLength,s-&gt;GetLength())<SUB>1830</SUB>> ]
-"10108" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1832</SUB>> ]
-"10048" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1826</SUB>> ]
-"10052" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1826</SUB>> ]
-"10059" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1826</SUB>> ]
-"10069" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1828</SUB>> ]
-"10075" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1828</SUB>> ]
-"10078" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1828</SUB>> ]
-"10092" [label = <(GetLength,s-&gt;GetLength())<SUB>1829</SUB>> ]
-"10103" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1830</SUB>> ]
-"10131" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1833</SUB>> ]
-"10053" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1826</SUB>> ]
-"10093" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1829</SUB>> ]
-"10105" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1830</SUB>> ]
-"10132" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1833</SUB>> ]
-"10054" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1826</SUB>> ]
-"10056" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1826</SUB>> ]
-"10095" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1829</SUB>> ]
-"10113" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1832</SUB>> ]
-"10134" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1833</SUB>> ]
-"10142" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1834</SUB>> ]
-"10145" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1834</SUB>> ]
-"10164" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1838</SUB>> ]
-"10172" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1839</SUB>> ]
-"10114" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1832</SUB>> ]
-"10122" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>1832</SUB>> ]
-"10129" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1832</SUB>> ]
-"10139" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1834</SUB>> ]
-"10148" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1835</SUB>> ]
-"10166" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1838</SUB>> ]
-"10174" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1839</SUB>> ]
-"10177" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1839</SUB>> ]
-"10115" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1832</SUB>> ]
-"10118" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1832</SUB>> ]
-"10123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1832</SUB>> ]
-"10149" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1835</SUB>> ]
-"10152" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1835</SUB>> ]
-"10167" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1838</SUB>> ]
-"10168" [label = <(GetValue,s-&gt;GetValue())<SUB>1838</SUB>> ]
-"10179" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1839</SUB>> ]
-"10124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1832</SUB>> ]
-"10126" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1832</SUB>> ]
-"10153" [label = <(UNKNOWN,jchar,jchar)<SUB>1835</SUB>> ]
-"10154" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1835</SUB>> ]
-"10169" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1838</SUB>> ]
-"10155" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1835</SUB>> ]
-"10158" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1835</SUB>> ]
-"10171" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1838</SUB>> ]
-"10157" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1835</SUB>> ]
-"10036" [label = <(METHOD,GetStringRegion)<SUB>1824</SUB>> ]
-"10181" [label = <(METHOD_RETURN,void)<SUB>1824</SUB>> ]
-  "10043" -> "10048" 
-  "10043" -> "10061" 
-  "10061" -> "10069" 
-  "10063" -> "10083" 
-  "10064" -> "10075" 
-  "10071" -> "10063" 
-  "10081" -> "10105" 
-  "10081" -> "10108" 
-  "10065" -> "10064" 
-  "10072" -> "10071" 
-  "10082" -> "10081" 
-  "10082" -> "10095" 
-  "10089" -> "10081" 
-  "10098" -> "10181" 
-  "10047" -> "10054" 
-  "10047" -> "10061" 
-  "10067" -> "10065" 
-  "10073" -> "10078" 
-  "10076" -> "10072" 
-  "10083" -> "10082" 
-  "10083" -> "10086" 
-  "10086" -> "10082" 
-  "10091" -> "10089" 
-  "10102" -> "10098" 
-  "10108" -> "10115" 
-  "10108" -> "10134" 
-  "10048" -> "10047" 
-  "10052" -> "10059" 
-  "10059" -> "10181" 
-  "10069" -> "10067" 
-  "10075" -> "10073" 
-  "10078" -> "10076" 
-  "10092" -> "10091" 
-  "10103" -> "10102" 
-  "10131" -> "10139" 
-  "10131" -> "10167" 
-  "10053" -> "10052" 
-  "10093" -> "10092" 
-  "10105" -> "10103" 
-  "10132" -> "10131" 
-  "10054" -> "10056" 
-  "10056" -> "10053" 
-  "10095" -> "10093" 
-  "10113" -> "10124" 
-  "10113" -> "10134" 
-  "10134" -> "10132" 
-  "10142" -> "10181" 
-  "10142" -> "10149" 
-  "10145" -> "10142" 
-  "10164" -> "10174" 
-  "10172" -> "10181" 
-  "10114" -> "10113" 
-  "10122" -> "10129" 
-  "10129" -> "10181" 
-  "10139" -> "10142" 
-  "10148" -> "10145" 
-  "10166" -> "10164" 
-  "10174" -> "10179" 
-  "10177" -> "10172" 
-  "10115" -> "10114" 
-  "10115" -> "10118" 
-  "10118" -> "10114" 
-  "10123" -> "10122" 
-  "10149" -> "10153" 
-  "10152" -> "10148" 
-  "10167" -> "10171" 
-  "10168" -> "10166" 
-  "10179" -> "10177" 
-  "10124" -> "10126" 
-  "10126" -> "10123" 
-  "10153" -> "10157" 
-  "10154" -> "10152" 
-  "10169" -> "10168" 
-  "10155" -> "10158" 
-  "10158" -> "10154" 
-  "10171" -> "10169" 
-  "10157" -> "10155" 
-  "10036" -> "10043" 
+digraph "GetStringCritical" {  
+"10191" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1759</SUB>> ]
+"10210" [label = <(soa,soa(env))<SUB>1760</SUB>> ]
+"10212" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1761</SUB>> ]
+"10230" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1762</SUB>> ]
+"10213" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1761</SUB>> ]
+"10220" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1761</SUB>> ]
+"10232" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1762</SUB>> ]
+"10240" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1763</SUB>> ]
+"10291" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1774</SUB>> ]
+"10214" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1761</SUB>> ]
+"10221" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1761</SUB>> ]
+"10233" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1762</SUB>> ]
+"10241" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1763</SUB>> ]
+"10246" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>1764</SUB>> ]
+"10255" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>1765</SUB>> ]
+"10292" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1774</SUB>> ]
+"10306" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1778</SUB>> ]
+"10313" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>1779</SUB>> ]
+"10338" [label = <(RETURN,return chars;,return chars;)<SUB>1783</SUB>> ]
+"10195" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1759</SUB>> ]
+"10216" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1761</SUB>> ]
+"10222" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1761</SUB>> ]
+"10225" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1761</SUB>> ]
+"10234" [label = <(Runtime::Current,Runtime::Current())<SUB>1762</SUB>> ]
+"10238" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1762</SUB>> ]
+"10243" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1763</SUB>> ]
+"10247" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>1764</SUB>> ]
+"10250" [label = <(hs,hs(soa.Self()))<SUB>1764</SUB>> ]
+"10256" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>1765</SUB>> ]
+"10261" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>1765</SUB>> ]
+"10269" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1766</SUB>> ]
+"10294" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1774</SUB>> ]
+"10297" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1775</SUB>> ]
+"10308" [label = <(GetLength,s-&gt;GetLength())<SUB>1778</SUB>> ]
+"10315" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>1779</SUB>> ]
+"10323" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1780</SUB>> ]
+"10326" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1780</SUB>> ]
+"10351" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1788</SUB>> ]
+"10196" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1759</SUB>> ]
+"10200" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1759</SUB>> ]
+"10207" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1759</SUB>> ]
+"10218" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1761</SUB>> ]
+"10224" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1761</SUB>> ]
+"10227" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1761</SUB>> ]
+"10235" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1762</SUB>> ]
+"10251" [label = <(Self,soa.Self())<SUB>1764</SUB>> ]
+"10258" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1765</SUB>> ]
+"10262" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>1765</SUB>> ]
+"10272" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>1767</SUB>> ]
+"10301" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1776</SUB>> ]
+"10309" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1778</SUB>> ]
+"10320" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1780</SUB>> ]
+"10329" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1781</SUB>> ]
+"10343" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1785</SUB>> ]
+"10352" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1788</SUB>> ]
+"10201" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1759</SUB>> ]
+"10237" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1762</SUB>> ]
+"10252" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1764</SUB>> ]
+"10260" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1765</SUB>> ]
+"10263" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>1765</SUB>> ]
+"10266" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>1765</SUB>> ]
+"10273" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>1767</SUB>> ]
+"10276" [label = <(Self,soa.Self())<SUB>1767</SUB>> ]
+"10282" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>1771</SUB>> ]
+"10302" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1776</SUB>> ]
+"10311" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1778</SUB>> ]
+"10330" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1781</SUB>> ]
+"10333" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1781</SUB>> ]
+"10347" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1786</SUB>> ]
+"10353" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1788</SUB>> ]
+"10354" [label = <(GetValue,s-&gt;GetValue())<SUB>1788</SUB>> ]
+"10202" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1759</SUB>> ]
+"10204" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1759</SUB>> ]
+"10254" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1764</SUB>> ]
+"10265" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>1765</SUB>> ]
+"10275" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>1767</SUB>> ]
+"10277" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1767</SUB>> ]
+"10283" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>1771</SUB>> ]
+"10286" [label = <(Self,soa.Self())<SUB>1771</SUB>> ]
+"10334" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1781</SUB>> ]
+"10348" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1786</SUB>> ]
+"10355" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1788</SUB>> ]
+"10279" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1767</SUB>> ]
+"10285" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>1771</SUB>> ]
+"10287" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1771</SUB>> ]
+"10336" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1781</SUB>> ]
+"10357" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1788</SUB>> ]
+"10289" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1771</SUB>> ]
+"10186" [label = <(METHOD,GetStringCritical)<SUB>1758</SUB>> ]
+"10358" [label = <(METHOD_RETURN,jchar)<SUB>1758</SUB>> ]
+  "10191" -> "10196" 
+  "10191" -> "10210" 
+  "10210" -> "10218" 
+  "10212" -> "10237" 
+  "10230" -> "10243" 
+  "10213" -> "10224" 
+  "10220" -> "10212" 
+  "10232" -> "10230" 
+  "10240" -> "10247" 
+  "10240" -> "10294" 
+  "10291" -> "10297" 
+  "10291" -> "10343" 
+  "10214" -> "10213" 
+  "10221" -> "10220" 
+  "10233" -> "10232" 
+  "10241" -> "10240" 
+  "10246" -> "10260" 
+  "10255" -> "10269" 
+  "10292" -> "10291" 
+  "10306" -> "10315" 
+  "10313" -> "10320" 
+  "10338" -> "10358" 
+  "10195" -> "10202" 
+  "10195" -> "10210" 
+  "10216" -> "10214" 
+  "10222" -> "10227" 
+  "10225" -> "10221" 
+  "10234" -> "10238" 
+  "10238" -> "10233" 
+  "10243" -> "10241" 
+  "10247" -> "10254" 
+  "10250" -> "10246" 
+  "10256" -> "10265" 
+  "10261" -> "10255" 
+  "10269" -> "10275" 
+  "10269" -> "10285" 
+  "10294" -> "10292" 
+  "10297" -> "10302" 
+  "10297" -> "10311" 
+  "10308" -> "10306" 
+  "10315" -> "10313" 
+  "10323" -> "10330" 
+  "10323" -> "10338" 
+  "10326" -> "10323" 
+  "10351" -> "10358" 
+  "10196" -> "10195" 
+  "10200" -> "10207" 
+  "10207" -> "10358" 
+  "10218" -> "10216" 
+  "10224" -> "10222" 
+  "10227" -> "10225" 
+  "10235" -> "10234" 
+  "10251" -> "10250" 
+  "10258" -> "10256" 
+  "10262" -> "10261" 
+  "10272" -> "10294" 
+  "10301" -> "10311" 
+  "10309" -> "10308" 
+  "10320" -> "10323" 
+  "10329" -> "10326" 
+  "10343" -> "10353" 
+  "10343" -> "10348" 
+  "10352" -> "10351" 
+  "10201" -> "10200" 
+  "10237" -> "10235" 
+  "10252" -> "10251" 
+  "10260" -> "10258" 
+  "10263" -> "10266" 
+  "10266" -> "10262" 
+  "10273" -> "10279" 
+  "10276" -> "10272" 
+  "10282" -> "10294" 
+  "10302" -> "10301" 
+  "10311" -> "10309" 
+  "10330" -> "10336" 
+  "10333" -> "10329" 
+  "10347" -> "10353" 
+  "10353" -> "10357" 
+  "10354" -> "10352" 
+  "10202" -> "10204" 
+  "10204" -> "10201" 
+  "10254" -> "10252" 
+  "10265" -> "10263" 
+  "10275" -> "10273" 
+  "10277" -> "10276" 
+  "10283" -> "10289" 
+  "10286" -> "10282" 
+  "10334" -> "10333" 
+  "10348" -> "10347" 
+  "10355" -> "10354" 
+  "10279" -> "10277" 
+  "10285" -> "10283" 
+  "10287" -> "10286" 
+  "10336" -> "10334" 
+  "10357" -> "10355" 
+  "10289" -> "10287" 
+  "10186" -> "10191" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/185-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/185-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/185-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/185-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,143 +1,126 @@
-digraph "GetStringUTFRegion" {  
-"10190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1846</SUB>> ]
-"10208" [label = <(soa,soa(env))<SUB>1847</SUB>> ]
-"10210" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1848</SUB>> ]
-"10211" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1848</SUB>> ]
-"10218" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1848</SUB>> ]
-"10228" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1849</SUB>> ]
-"10212" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1848</SUB>> ]
-"10219" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1848</SUB>> ]
-"10229" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1849</SUB>> ]
-"10236" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1849</SUB>> ]
-"10245" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1850</SUB>> ]
-"10194" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1846</SUB>> ]
-"10214" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1848</SUB>> ]
-"10220" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1848</SUB>> ]
-"10223" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1848</SUB>> ]
-"10230" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1849</SUB>> ]
-"10233" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1849</SUB>> ]
-"10238" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1849</SUB>> ]
-"10249" [label = <(GetLength,s-&gt;GetLength())<SUB>1850</SUB>> ]
-"10255" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1852</SUB>> ]
-"10195" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1846</SUB>> ]
-"10199" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1846</SUB>> ]
-"10206" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1846</SUB>> ]
-"10216" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1848</SUB>> ]
-"10222" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1848</SUB>> ]
-"10225" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1848</SUB>> ]
-"10239" [label = <(GetLength,s-&gt;GetLength())<SUB>1849</SUB>> ]
-"10250" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1850</SUB>> ]
-"10278" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1853</SUB>> ]
-"10200" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1846</SUB>> ]
-"10240" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1849</SUB>> ]
-"10252" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1850</SUB>> ]
-"10279" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1853</SUB>> ]
-"10201" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1846</SUB>> ]
-"10203" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1846</SUB>> ]
-"10242" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1849</SUB>> ]
-"10260" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1852</SUB>> ]
-"10281" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1853</SUB>> ]
-"10289" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1854</SUB>> ]
-"10292" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1854</SUB>> ]
-"10309" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1858</SUB>> ]
-"10316" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1859</SUB>> ]
-"10323" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1860</SUB>> ]
-"10261" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1852</SUB>> ]
-"10269" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>1852</SUB>> ]
-"10276" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1852</SUB>> ]
-"10286" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1854</SUB>> ]
-"10295" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1855</SUB>> ]
-"10311" [label = <(GetValue,s-&gt;GetValue())<SUB>1858</SUB>> ]
-"10318" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1859</SUB>> ]
-"10326" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1860</SUB>> ]
-"10262" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1852</SUB>> ]
-"10265" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1852</SUB>> ]
-"10270" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1852</SUB>> ]
-"10296" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1855</SUB>> ]
-"10299" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1855</SUB>> ]
-"10312" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1858</SUB>> ]
-"10319" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1859</SUB>> ]
-"10271" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1852</SUB>> ]
-"10273" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1852</SUB>> ]
-"10300" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1855</SUB>> ]
-"10303" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1855</SUB>> ]
-"10314" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1858</SUB>> ]
-"10302" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1855</SUB>> ]
-"10183" [label = <(METHOD,GetStringUTFRegion)<SUB>1844</SUB>> ]
-"10330" [label = <(METHOD_RETURN,void)<SUB>1844</SUB>> ]
-  "10190" -> "10195" 
-  "10190" -> "10208" 
-  "10208" -> "10216" 
-  "10210" -> "10230" 
-  "10211" -> "10222" 
-  "10218" -> "10210" 
-  "10228" -> "10252" 
-  "10228" -> "10255" 
-  "10212" -> "10211" 
-  "10219" -> "10218" 
-  "10229" -> "10228" 
-  "10229" -> "10242" 
-  "10236" -> "10228" 
-  "10245" -> "10330" 
-  "10194" -> "10201" 
-  "10194" -> "10208" 
-  "10214" -> "10212" 
-  "10220" -> "10225" 
-  "10223" -> "10219" 
-  "10230" -> "10229" 
-  "10230" -> "10233" 
-  "10233" -> "10229" 
-  "10238" -> "10236" 
-  "10249" -> "10245" 
-  "10255" -> "10262" 
-  "10255" -> "10281" 
-  "10195" -> "10194" 
-  "10199" -> "10206" 
-  "10206" -> "10330" 
-  "10216" -> "10214" 
-  "10222" -> "10220" 
-  "10225" -> "10223" 
-  "10239" -> "10238" 
-  "10250" -> "10249" 
-  "10278" -> "10286" 
-  "10278" -> "10314" 
-  "10200" -> "10199" 
-  "10240" -> "10239" 
-  "10252" -> "10250" 
-  "10279" -> "10278" 
-  "10201" -> "10203" 
-  "10203" -> "10200" 
-  "10242" -> "10240" 
-  "10260" -> "10271" 
-  "10260" -> "10281" 
-  "10281" -> "10279" 
-  "10289" -> "10330" 
-  "10289" -> "10296" 
-  "10292" -> "10289" 
-  "10309" -> "10319" 
-  "10316" -> "10326" 
-  "10323" -> "10330" 
-  "10261" -> "10260" 
-  "10269" -> "10276" 
-  "10276" -> "10330" 
-  "10286" -> "10289" 
-  "10295" -> "10292" 
-  "10311" -> "10309" 
-  "10318" -> "10316" 
-  "10326" -> "10323" 
-  "10262" -> "10261" 
-  "10262" -> "10265" 
-  "10265" -> "10261" 
-  "10270" -> "10269" 
-  "10296" -> "10302" 
-  "10299" -> "10295" 
-  "10312" -> "10311" 
-  "10319" -> "10318" 
-  "10271" -> "10273" 
-  "10273" -> "10270" 
-  "10300" -> "10303" 
-  "10303" -> "10299" 
-  "10314" -> "10312" 
-  "10302" -> "10300" 
-  "10183" -> "10190" 
+digraph "ReleaseStringCritical" {  
+"10365" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1795</SUB>> ]
+"10383" [label = <(soa,soa(env))<SUB>1796</SUB>> ]
+"10386" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1797</SUB>> ]
+"10395" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1798</SUB>> ]
+"10388" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1797</SUB>> ]
+"10396" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1798</SUB>> ]
+"10403" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1798</SUB>> ]
+"10413" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1799</SUB>> ]
+"10442" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>1806</SUB>> ]
+"10389" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1797</SUB>> ]
+"10397" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1798</SUB>> ]
+"10404" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1798</SUB>> ]
+"10414" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1799</SUB>> ]
+"10443" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1806</SUB>> ]
+"10447" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>1806</SUB>> ]
+"10461" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1807</SUB>> ]
+"10369" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1795</SUB>> ]
+"10390" [label = <(Runtime::Current,Runtime::Current())<SUB>1797</SUB>> ]
+"10394" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1797</SUB>> ]
+"10399" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1798</SUB>> ]
+"10405" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1798</SUB>> ]
+"10408" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1798</SUB>> ]
+"10416" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1799</SUB>> ]
+"10420" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1800</SUB>> ]
+"10444" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1806</SUB>> ]
+"10448" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1806</SUB>> ]
+"10454" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>1806</SUB>> ]
+"10370" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1795</SUB>> ]
+"10374" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1795</SUB>> ]
+"10381" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1795</SUB>> ]
+"10391" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1797</SUB>> ]
+"10401" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1798</SUB>> ]
+"10407" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1798</SUB>> ]
+"10410" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1798</SUB>> ]
+"10423" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>1801</SUB>> ]
+"10446" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1806</SUB>> ]
+"10449" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1806</SUB>> ]
+"10455" [label = <(GetValue,s-&gt;GetValue())<SUB>1806</SUB>> ]
+"10375" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1795</SUB>> ]
+"10393" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1797</SUB>> ]
+"10424" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>1801</SUB>> ]
+"10427" [label = <(Self,soa.Self())<SUB>1801</SUB>> ]
+"10433" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>1803</SUB>> ]
+"10450" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1806</SUB>> ]
+"10456" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1806</SUB>> ]
+"10376" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1795</SUB>> ]
+"10378" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1795</SUB>> ]
+"10426" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>1801</SUB>> ]
+"10428" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1801</SUB>> ]
+"10434" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>1803</SUB>> ]
+"10437" [label = <(Self,soa.Self())<SUB>1803</SUB>> ]
+"10452" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1806</SUB>> ]
+"10458" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1806</SUB>> ]
+"10430" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1801</SUB>> ]
+"10436" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>1803</SUB>> ]
+"10438" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1803</SUB>> ]
+"10440" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1803</SUB>> ]
+"10360" [label = <(METHOD,ReleaseStringCritical)<SUB>1792</SUB>> ]
+"10463" [label = <(METHOD_RETURN,void)<SUB>1792</SUB>> ]
+  "10365" -> "10370" 
+  "10365" -> "10383" 
+  "10383" -> "10393" 
+  "10386" -> "10401" 
+  "10395" -> "10416" 
+  "10388" -> "10386" 
+  "10396" -> "10407" 
+  "10403" -> "10395" 
+  "10413" -> "10420" 
+  "10413" -> "10446" 
+  "10442" -> "10463" 
+  "10442" -> "10461" 
+  "10389" -> "10388" 
+  "10397" -> "10396" 
+  "10404" -> "10403" 
+  "10414" -> "10413" 
+  "10443" -> "10442" 
+  "10443" -> "10452" 
+  "10447" -> "10442" 
+  "10461" -> "10463" 
+  "10369" -> "10376" 
+  "10369" -> "10383" 
+  "10390" -> "10394" 
+  "10394" -> "10389" 
+  "10399" -> "10397" 
+  "10405" -> "10410" 
+  "10408" -> "10404" 
+  "10416" -> "10414" 
+  "10420" -> "10426" 
+  "10420" -> "10436" 
+  "10444" -> "10443" 
+  "10448" -> "10447" 
+  "10448" -> "10458" 
+  "10454" -> "10447" 
+  "10370" -> "10369" 
+  "10374" -> "10381" 
+  "10381" -> "10463" 
+  "10391" -> "10390" 
+  "10401" -> "10399" 
+  "10407" -> "10405" 
+  "10410" -> "10408" 
+  "10423" -> "10446" 
+  "10446" -> "10444" 
+  "10449" -> "10448" 
+  "10455" -> "10454" 
+  "10375" -> "10374" 
+  "10393" -> "10391" 
+  "10424" -> "10430" 
+  "10427" -> "10423" 
+  "10433" -> "10446" 
+  "10450" -> "10449" 
+  "10456" -> "10455" 
+  "10376" -> "10378" 
+  "10378" -> "10375" 
+  "10426" -> "10424" 
+  "10428" -> "10427" 
+  "10434" -> "10440" 
+  "10437" -> "10433" 
+  "10452" -> "10450" 
+  "10458" -> "10456" 
+  "10430" -> "10428" 
+  "10436" -> "10434" 
+  "10438" -> "10437" 
+  "10440" -> "10438" 
+  "10360" -> "10365" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/186-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/186-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/186-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/186-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,159 +1,103 @@
-digraph "GetStringChars" {  
-"10337" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1866</SUB>> ]
-"10356" [label = <(soa,soa(env))<SUB>1867</SUB>> ]
-"10358" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1868</SUB>> ]
-"10376" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1869</SUB>> ]
-"10471" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1888</SUB>> ]
-"10359" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1868</SUB>> ]
-"10366" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1868</SUB>> ]
-"10378" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1869</SUB>> ]
-"10386" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>1870</SUB>> ]
-"10463" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1885</SUB>> ]
-"10472" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1888</SUB>> ]
-"10360" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1868</SUB>> ]
-"10367" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1868</SUB>> ]
-"10379" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1869</SUB>> ]
-"10387" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1870</SUB>> ]
-"10392" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1870</SUB>> ]
-"10398" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>1871</SUB>> ]
-"10460" [label = <(RETURN,return chars;,return chars;)<SUB>1883</SUB>> ]
-"10467" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1886</SUB>> ]
-"10473" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1888</SUB>> ]
-"10474" [label = <(GetValue,s-&gt;GetValue())<SUB>1888</SUB>> ]
-"10341" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1866</SUB>> ]
-"10362" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1868</SUB>> ]
-"10368" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1868</SUB>> ]
-"10371" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1868</SUB>> ]
-"10380" [label = <(Runtime::Current,Runtime::Current())<SUB>1869</SUB>> ]
-"10384" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1869</SUB>> ]
-"10388" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1870</SUB>> ]
-"10393" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1870</SUB>> ]
-"10400" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>1871</SUB>> ]
-"10403" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1872</SUB>> ]
-"10452" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1880</SUB>> ]
-"10468" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1886</SUB>> ]
-"10475" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1888</SUB>> ]
-"10342" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1866</SUB>> ]
-"10346" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1866</SUB>> ]
-"10353" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1866</SUB>> ]
-"10364" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1868</SUB>> ]
-"10370" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1868</SUB>> ]
-"10373" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1868</SUB>> ]
-"10381" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1869</SUB>> ]
-"10390" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1870</SUB>> ]
-"10395" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1870</SUB>> ]
-"10404" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1872</SUB>> ]
-"10409" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1873</SUB>> ]
-"10456" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1881</SUB>> ]
-"10477" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1888</SUB>> ]
-"10347" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1866</SUB>> ]
-"10383" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1869</SUB>> ]
-"10406" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1872</SUB>> ]
-"10411" [label = <(GetLength,s-&gt;GetLength())<SUB>1873</SUB>> ]
-"10421" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1874</SUB>> ]
-"10424" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1874</SUB>> ]
-"10438" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>1878</SUB>> ]
-"10457" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1881</SUB>> ]
-"10348" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1866</SUB>> ]
-"10350" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1866</SUB>> ]
-"10412" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1873</SUB>> ]
-"10418" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1874</SUB>> ]
-"10427" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1875</SUB>> ]
-"10440" [label = <(GetValue,s-&gt;GetValue())<SUB>1878</SUB>> ]
-"10444" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>1878</SUB>> ]
-"10414" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1873</SUB>> ]
-"10428" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1875</SUB>> ]
-"10431" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1875</SUB>> ]
-"10441" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1878</SUB>> ]
-"10445" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1878</SUB>> ]
-"10447" [label = <(GetLength,s-&gt;GetLength())<SUB>1878</SUB>> ]
-"10432" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1875</SUB>> ]
-"10443" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1878</SUB>> ]
-"10448" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1878</SUB>> ]
-"10434" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1875</SUB>> ]
-"10450" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1878</SUB>> ]
-"10332" [label = <(METHOD,GetStringChars)<SUB>1865</SUB>> ]
-"10478" [label = <(METHOD_RETURN,jchar)<SUB>1865</SUB>> ]
-  "10337" -> "10342" 
-  "10337" -> "10356" 
-  "10356" -> "10364" 
-  "10358" -> "10383" 
-  "10376" -> "10390" 
+digraph "GetStringUTFChars" {  
+"10487" [label = <(soa,soa(env))<SUB>1818</SUB>> ]
+"10489" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1819</SUB>> ]
+"10507" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>1820</SUB>> ]
+"10514" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>1821</SUB>> ]
+"10518" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>1822</SUB>> ]
+"10566" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>1831</SUB>> ]
+"10571" [label = <(RETURN,return bytes;,return bytes;)<SUB>1832</SUB>> ]
+"10471" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>1812</SUB>> ]
+"10478" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1815</SUB>> ]
+"10490" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1819</SUB>> ]
+"10497" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1819</SUB>> ]
+"10509" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>1820</SUB>> ]
+"10516" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>1821</SUB>> ]
+"10519" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>1822</SUB>> ]
+"10523" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1823</SUB>> ]
+"10567" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>1831</SUB>> ]
+"10475" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1813</SUB>> ]
+"10482" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1816</SUB>> ]
+"10491" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1819</SUB>> ]
+"10498" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1819</SUB>> ]
+"10510" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>1820</SUB>> ]
+"10524" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1823</SUB>> ]
+"10483" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1816</SUB>> ]
+"10493" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1819</SUB>> ]
+"10499" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1819</SUB>> ]
+"10502" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1819</SUB>> ]
+"10512" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1820</SUB>> ]
+"10526" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1823</SUB>> ]
+"10534" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>1824</SUB>> ]
+"10537" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1824</SUB>> ]
+"10552" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1828</SUB>> ]
+"10558" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>1829</SUB>> ]
+"10495" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1819</SUB>> ]
+"10501" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1819</SUB>> ]
+"10504" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1819</SUB>> ]
+"10531" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1824</SUB>> ]
+"10540" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>1825</SUB>> ]
+"10554" [label = <(GetValue,s-&gt;GetValue())<SUB>1828</SUB>> ]
+"10562" [label = <(GetLength,s-&gt;GetLength())<SUB>1829</SUB>> ]
+"10541" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>1825</SUB>> ]
+"10544" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1825</SUB>> ]
+"10555" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1828</SUB>> ]
+"10563" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1829</SUB>> ]
+"10545" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1825</SUB>> ]
+"10557" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1828</SUB>> ]
+"10565" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1829</SUB>> ]
+"10547" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1825</SUB>> ]
+"10465" [label = <(METHOD,GetStringUTFChars)<SUB>1811</SUB>> ]
+"10573" [label = <(METHOD_RETURN,const char*)<SUB>1811</SUB>> ]
+  "10487" -> "10495" 
+  "10489" -> "10512" 
+  "10507" -> "10516" 
+  "10514" -> "10519" 
+  "10518" -> "10526" 
+  "10566" -> "10571" 
+  "10571" -> "10573" 
+  "10471" -> "10475" 
   "10471" -> "10478" 
-  "10359" -> "10370" 
-  "10366" -> "10358" 
-  "10378" -> "10376" 
-  "10386" -> "10400" 
-  "10386" -> "10463" 
-  "10463" -> "10473" 
-  "10463" -> "10468" 
-  "10472" -> "10471" 
-  "10360" -> "10359" 
-  "10367" -> "10366" 
-  "10379" -> "10378" 
-  "10387" -> "10386" 
-  "10387" -> "10395" 
-  "10392" -> "10386" 
-  "10398" -> "10406" 
-  "10460" -> "10478" 
-  "10467" -> "10473" 
-  "10473" -> "10477" 
-  "10474" -> "10472" 
-  "10341" -> "10348" 
-  "10341" -> "10356" 
-  "10362" -> "10360" 
-  "10368" -> "10373" 
-  "10371" -> "10367" 
-  "10380" -> "10384" 
-  "10384" -> "10379" 
-  "10388" -> "10387" 
-  "10393" -> "10392" 
-  "10400" -> "10398" 
-  "10403" -> "10414" 
-  "10403" -> "10443" 
-  "10452" -> "10457" 
-  "10452" -> "10460" 
-  "10468" -> "10467" 
-  "10475" -> "10474" 
-  "10342" -> "10341" 
-  "10346" -> "10353" 
-  "10353" -> "10478" 
-  "10364" -> "10362" 
-  "10370" -> "10368" 
-  "10373" -> "10371" 
-  "10381" -> "10380" 
-  "10390" -> "10388" 
-  "10395" -> "10393" 
-  "10404" -> "10403" 
-  "10409" -> "10418" 
-  "10456" -> "10460" 
-  "10477" -> "10475" 
-  "10347" -> "10346" 
-  "10383" -> "10381" 
-  "10406" -> "10404" 
-  "10411" -> "10409" 
-  "10421" -> "10428" 
-  "10421" -> "10452" 
-  "10424" -> "10421" 
-  "10438" -> "10452" 
-  "10457" -> "10456" 
-  "10348" -> "10350" 
-  "10350" -> "10347" 
-  "10412" -> "10411" 
-  "10418" -> "10421" 
-  "10427" -> "10424" 
-  "10440" -> "10445" 
-  "10444" -> "10438" 
-  "10414" -> "10412" 
-  "10428" -> "10434" 
-  "10431" -> "10427" 
-  "10441" -> "10440" 
-  "10445" -> "10450" 
-  "10447" -> "10444" 
-  "10432" -> "10431" 
-  "10443" -> "10441" 
-  "10448" -> "10447" 
-  "10434" -> "10432" 
-  "10450" -> "10448" 
-  "10332" -> "10337" 
+  "10478" -> "10483" 
+  "10478" -> "10487" 
+  "10490" -> "10501" 
+  "10497" -> "10489" 
+  "10509" -> "10507" 
+  "10516" -> "10514" 
+  "10519" -> "10518" 
+  "10523" -> "10531" 
+  "10523" -> "10557" 
+  "10567" -> "10566" 
+  "10475" -> "10573" 
+  "10482" -> "10487" 
+  "10491" -> "10490" 
+  "10498" -> "10497" 
+  "10510" -> "10509" 
+  "10524" -> "10523" 
+  "10483" -> "10482" 
+  "10493" -> "10491" 
+  "10499" -> "10504" 
+  "10502" -> "10498" 
+  "10512" -> "10510" 
+  "10526" -> "10524" 
+  "10534" -> "10541" 
+  "10534" -> "10567" 
+  "10537" -> "10534" 
+  "10552" -> "10565" 
+  "10558" -> "10567" 
+  "10495" -> "10493" 
+  "10501" -> "10499" 
+  "10504" -> "10502" 
+  "10531" -> "10534" 
+  "10540" -> "10537" 
+  "10554" -> "10552" 
+  "10562" -> "10558" 
+  "10541" -> "10547" 
+  "10544" -> "10540" 
+  "10555" -> "10554" 
+  "10563" -> "10562" 
+  "10545" -> "10544" 
+  "10557" -> "10555" 
+  "10565" -> "10563" 
+  "10547" -> "10545" 
+  "10465" -> "10471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/187-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/187-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/187-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/187-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,78 +1,7 @@
-digraph "ReleaseStringChars" {  
-"10485" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1892</SUB>> ]
-"10503" [label = <(soa,soa(env))<SUB>1893</SUB>> ]
-"10505" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1894</SUB>> ]
-"10506" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1894</SUB>> ]
-"10513" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1894</SUB>> ]
-"10523" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>1895</SUB>> ]
-"10507" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1894</SUB>> ]
-"10514" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1894</SUB>> ]
-"10524" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1895</SUB>> ]
-"10528" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>1895</SUB>> ]
-"10542" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1896</SUB>> ]
-"10489" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1892</SUB>> ]
-"10509" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1894</SUB>> ]
-"10515" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1894</SUB>> ]
-"10518" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1894</SUB>> ]
-"10525" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1895</SUB>> ]
-"10529" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1895</SUB>> ]
-"10535" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>1895</SUB>> ]
-"10490" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1892</SUB>> ]
-"10494" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1892</SUB>> ]
-"10501" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1892</SUB>> ]
-"10511" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1894</SUB>> ]
-"10517" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1894</SUB>> ]
-"10520" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1894</SUB>> ]
-"10527" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1895</SUB>> ]
-"10530" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1895</SUB>> ]
-"10537" [label = <(GetValue,s-&gt;GetValue())<SUB>1895</SUB>> ]
-"10495" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1892</SUB>> ]
-"10531" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1895</SUB>> ]
-"10538" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1895</SUB>> ]
-"10496" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1892</SUB>> ]
-"10498" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1892</SUB>> ]
-"10533" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1895</SUB>> ]
-"10540" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1895</SUB>> ]
-"10480" [label = <(METHOD,ReleaseStringChars)<SUB>1891</SUB>> ]
-"10544" [label = <(METHOD_RETURN,void)<SUB>1891</SUB>> ]
-  "10485" -> "10490" 
-  "10485" -> "10503" 
-  "10503" -> "10511" 
-  "10505" -> "10527" 
-  "10506" -> "10517" 
-  "10513" -> "10505" 
-  "10523" -> "10544" 
-  "10523" -> "10542" 
-  "10507" -> "10506" 
-  "10514" -> "10513" 
-  "10524" -> "10523" 
-  "10524" -> "10533" 
-  "10528" -> "10523" 
-  "10542" -> "10544" 
-  "10489" -> "10496" 
-  "10489" -> "10503" 
-  "10509" -> "10507" 
-  "10515" -> "10520" 
-  "10518" -> "10514" 
-  "10525" -> "10524" 
-  "10529" -> "10528" 
-  "10529" -> "10540" 
-  "10535" -> "10528" 
-  "10490" -> "10489" 
-  "10494" -> "10501" 
-  "10501" -> "10544" 
-  "10511" -> "10509" 
-  "10517" -> "10515" 
-  "10520" -> "10518" 
-  "10527" -> "10525" 
-  "10530" -> "10529" 
-  "10537" -> "10535" 
-  "10495" -> "10494" 
-  "10531" -> "10530" 
-  "10538" -> "10537" 
-  "10496" -> "10498" 
-  "10498" -> "10495" 
-  "10533" -> "10531" 
-  "10540" -> "10538" 
-  "10480" -> "10485" 
+digraph "ReleaseStringUTFChars" {  
+"10580" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1836</SUB>> ]
+"10575" [label = <(METHOD,ReleaseStringUTFChars)<SUB>1835</SUB>> ]
+"10582" [label = <(METHOD_RETURN,void)<SUB>1835</SUB>> ]
+  "10580" -> "10582" 
+  "10575" -> "10580" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/188-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/188-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/188-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/188-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,189 +1,100 @@
-digraph "GetStringCritical" {  
-"10551" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1901</SUB>> ]
-"10570" [label = <(soa,soa(env))<SUB>1902</SUB>> ]
-"10572" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1903</SUB>> ]
-"10590" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1904</SUB>> ]
-"10573" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1903</SUB>> ]
-"10580" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1903</SUB>> ]
-"10592" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1904</SUB>> ]
-"10600" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1905</SUB>> ]
-"10651" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1916</SUB>> ]
-"10574" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1903</SUB>> ]
-"10581" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1903</SUB>> ]
-"10593" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1904</SUB>> ]
-"10601" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1905</SUB>> ]
-"10606" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>1906</SUB>> ]
-"10615" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>1907</SUB>> ]
-"10652" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1916</SUB>> ]
-"10666" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1920</SUB>> ]
-"10673" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>1921</SUB>> ]
-"10698" [label = <(RETURN,return chars;,return chars;)<SUB>1925</SUB>> ]
-"10555" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1901</SUB>> ]
-"10576" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1903</SUB>> ]
-"10582" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1903</SUB>> ]
-"10585" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1903</SUB>> ]
-"10594" [label = <(Runtime::Current,Runtime::Current())<SUB>1904</SUB>> ]
-"10598" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1904</SUB>> ]
-"10603" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1905</SUB>> ]
-"10607" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>1906</SUB>> ]
-"10610" [label = <(hs,hs(soa.Self()))<SUB>1906</SUB>> ]
-"10616" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>1907</SUB>> ]
-"10621" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>1907</SUB>> ]
-"10629" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1908</SUB>> ]
-"10654" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1916</SUB>> ]
-"10657" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1917</SUB>> ]
-"10668" [label = <(GetLength,s-&gt;GetLength())<SUB>1920</SUB>> ]
-"10675" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>1921</SUB>> ]
-"10683" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1922</SUB>> ]
-"10686" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1922</SUB>> ]
-"10711" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1930</SUB>> ]
-"10556" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1901</SUB>> ]
-"10560" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1901</SUB>> ]
-"10567" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1901</SUB>> ]
-"10578" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1903</SUB>> ]
-"10584" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1903</SUB>> ]
-"10587" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1903</SUB>> ]
-"10595" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1904</SUB>> ]
-"10611" [label = <(Self,soa.Self())<SUB>1906</SUB>> ]
-"10618" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1907</SUB>> ]
-"10622" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>1907</SUB>> ]
-"10632" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>1909</SUB>> ]
-"10661" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1918</SUB>> ]
-"10669" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1920</SUB>> ]
-"10680" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1922</SUB>> ]
-"10689" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1923</SUB>> ]
-"10703" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1927</SUB>> ]
-"10712" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1930</SUB>> ]
-"10561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1901</SUB>> ]
-"10597" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1904</SUB>> ]
-"10612" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1906</SUB>> ]
-"10620" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1907</SUB>> ]
-"10623" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>1907</SUB>> ]
-"10626" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>1907</SUB>> ]
-"10633" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>1909</SUB>> ]
-"10636" [label = <(Self,soa.Self())<SUB>1909</SUB>> ]
-"10642" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>1913</SUB>> ]
-"10662" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1918</SUB>> ]
-"10671" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1920</SUB>> ]
-"10690" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1923</SUB>> ]
-"10693" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1923</SUB>> ]
-"10707" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1928</SUB>> ]
-"10713" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1930</SUB>> ]
-"10714" [label = <(GetValue,s-&gt;GetValue())<SUB>1930</SUB>> ]
-"10562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1901</SUB>> ]
-"10564" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1901</SUB>> ]
-"10614" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1906</SUB>> ]
-"10625" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>1907</SUB>> ]
-"10635" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>1909</SUB>> ]
-"10637" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1909</SUB>> ]
-"10643" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>1913</SUB>> ]
-"10646" [label = <(Self,soa.Self())<SUB>1913</SUB>> ]
-"10694" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1923</SUB>> ]
-"10708" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1928</SUB>> ]
-"10715" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1930</SUB>> ]
-"10639" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1909</SUB>> ]
-"10645" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>1913</SUB>> ]
-"10647" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1913</SUB>> ]
-"10696" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1923</SUB>> ]
-"10717" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1930</SUB>> ]
-"10649" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1913</SUB>> ]
-"10546" [label = <(METHOD,GetStringCritical)<SUB>1900</SUB>> ]
-"10718" [label = <(METHOD_RETURN,jchar)<SUB>1900</SUB>> ]
-  "10551" -> "10556" 
-  "10551" -> "10570" 
-  "10570" -> "10578" 
-  "10572" -> "10597" 
-  "10590" -> "10603" 
-  "10573" -> "10584" 
-  "10580" -> "10572" 
-  "10592" -> "10590" 
-  "10600" -> "10607" 
-  "10600" -> "10654" 
-  "10651" -> "10657" 
-  "10651" -> "10703" 
-  "10574" -> "10573" 
-  "10581" -> "10580" 
-  "10593" -> "10592" 
-  "10601" -> "10600" 
-  "10606" -> "10620" 
-  "10615" -> "10629" 
-  "10652" -> "10651" 
-  "10666" -> "10675" 
-  "10673" -> "10680" 
-  "10698" -> "10718" 
-  "10555" -> "10562" 
-  "10555" -> "10570" 
-  "10576" -> "10574" 
-  "10582" -> "10587" 
-  "10585" -> "10581" 
-  "10594" -> "10598" 
-  "10598" -> "10593" 
-  "10603" -> "10601" 
-  "10607" -> "10614" 
-  "10610" -> "10606" 
-  "10616" -> "10625" 
-  "10621" -> "10615" 
-  "10629" -> "10635" 
-  "10629" -> "10645" 
-  "10654" -> "10652" 
-  "10657" -> "10662" 
-  "10657" -> "10671" 
-  "10668" -> "10666" 
-  "10675" -> "10673" 
-  "10683" -> "10690" 
-  "10683" -> "10698" 
-  "10686" -> "10683" 
-  "10711" -> "10718" 
-  "10556" -> "10555" 
-  "10560" -> "10567" 
-  "10567" -> "10718" 
-  "10578" -> "10576" 
-  "10584" -> "10582" 
-  "10587" -> "10585" 
-  "10595" -> "10594" 
+digraph "GetArrayLength" {  
+"10588" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1840</SUB>> ]
+"10607" [label = <(soa,soa(env))<SUB>1841</SUB>> ]
+"10609" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1842</SUB>> ]
+"10653" [label = <(&lt;operator&gt;.assignment,* array = obj-&gt;AsArray())<SUB>1847</SUB>> ]
+"10659" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>1848</SUB>> ]
+"10610" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>1842</SUB>> ]
+"10617" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1842</SUB>> ]
+"10627" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>1843</SUB>> ]
+"10655" [label = <(AsArray,obj-&gt;AsArray())<SUB>1847</SUB>> ]
+"10660" [label = <(GetLength,array-&gt;GetLength())<SUB>1848</SUB>> ]
+"10611" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1842</SUB>> ]
+"10618" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1842</SUB>> ]
+"10628" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>1843</SUB>> ]
+"10634" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>1844</SUB>> ]
+"10650" [label = <(RETURN,return 0;,return 0;)<SUB>1845</SUB>> ]
+"10656" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>1847</SUB>> ]
+"10661" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>1848</SUB>> ]
+"10592" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1840</SUB>> ]
+"10613" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1842</SUB>> ]
+"10619" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1842</SUB>> ]
+"10622" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1842</SUB>> ]
+"10629" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>1843</SUB>> ]
+"10635" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1844</SUB>> ]
+"10643" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>1844</SUB>> ]
+"10658" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>1847</SUB>> ]
+"10663" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1848</SUB>> ]
+"10593" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1840</SUB>> ]
+"10597" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1840</SUB>> ]
+"10604" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1840</SUB>> ]
+"10615" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1842</SUB>> ]
+"10621" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1842</SUB>> ]
+"10624" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1842</SUB>> ]
+"10630" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>1843</SUB>> ]
+"10636" [label = <(Vm,soa.Vm())<SUB>1844</SUB>> ]
+"10640" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1844</SUB>> ]
+"10644" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>1844</SUB>> ]
+"10598" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1840</SUB>> ]
+"10632" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>1843</SUB>> ]
+"10637" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1844</SUB>> ]
+"10645" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>1844</SUB>> ]
+"10649" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1844</SUB>> ]
+"10599" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1840</SUB>> ]
+"10601" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1840</SUB>> ]
+"10639" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1844</SUB>> ]
+"10646" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>1844</SUB>> ]
+"10648" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>1844</SUB>> ]
+"10584" [label = <(METHOD,GetArrayLength)<SUB>1839</SUB>> ]
+"10664" [label = <(METHOD_RETURN,jsize)<SUB>1839</SUB>> ]
+  "10588" -> "10593" 
+  "10588" -> "10607" 
+  "10607" -> "10615" 
+  "10609" -> "10632" 
+  "10653" -> "10663" 
+  "10659" -> "10664" 
+  "10610" -> "10621" 
+  "10617" -> "10609" 
+  "10627" -> "10639" 
+  "10627" -> "10658" 
+  "10655" -> "10653" 
+  "10660" -> "10659" 
   "10611" -> "10610" 
-  "10618" -> "10616" 
-  "10622" -> "10621" 
-  "10632" -> "10654" 
-  "10661" -> "10671" 
-  "10669" -> "10668" 
-  "10680" -> "10683" 
-  "10689" -> "10686" 
-  "10703" -> "10713" 
-  "10703" -> "10708" 
-  "10712" -> "10711" 
-  "10561" -> "10560" 
-  "10597" -> "10595" 
-  "10612" -> "10611" 
-  "10620" -> "10618" 
-  "10623" -> "10626" 
-  "10626" -> "10622" 
-  "10633" -> "10639" 
-  "10636" -> "10632" 
-  "10642" -> "10654" 
-  "10662" -> "10661" 
-  "10671" -> "10669" 
-  "10690" -> "10696" 
-  "10693" -> "10689" 
-  "10707" -> "10713" 
-  "10713" -> "10717" 
-  "10714" -> "10712" 
-  "10562" -> "10564" 
-  "10564" -> "10561" 
-  "10614" -> "10612" 
-  "10625" -> "10623" 
-  "10635" -> "10633" 
+  "10618" -> "10617" 
+  "10628" -> "10627" 
+  "10634" -> "10650" 
+  "10650" -> "10664" 
+  "10656" -> "10655" 
+  "10661" -> "10660" 
+  "10592" -> "10599" 
+  "10592" -> "10607" 
+  "10613" -> "10611" 
+  "10619" -> "10624" 
+  "10622" -> "10618" 
+  "10629" -> "10628" 
+  "10635" -> "10648" 
+  "10643" -> "10634" 
+  "10658" -> "10656" 
+  "10663" -> "10661" 
+  "10593" -> "10592" 
+  "10597" -> "10604" 
+  "10604" -> "10664" 
+  "10615" -> "10613" 
+  "10621" -> "10619" 
+  "10624" -> "10622" 
+  "10630" -> "10629" 
+  "10636" -> "10640" 
+  "10640" -> "10635" 
+  "10644" -> "10643" 
+  "10598" -> "10597" 
+  "10632" -> "10630" 
   "10637" -> "10636" 
-  "10643" -> "10649" 
-  "10646" -> "10642" 
-  "10694" -> "10693" 
-  "10708" -> "10707" 
-  "10715" -> "10714" 
+  "10645" -> "10649" 
+  "10649" -> "10644" 
+  "10599" -> "10601" 
+  "10601" -> "10598" 
   "10639" -> "10637" 
-  "10645" -> "10643" 
-  "10647" -> "10646" 
-  "10696" -> "10694" 
-  "10717" -> "10715" 
-  "10649" -> "10647" 
-  "10546" -> "10551" 
+  "10646" -> "10645" 
+  "10648" -> "10646" 
+  "10584" -> "10588" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/189-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/189-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/189-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/189-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,126 +1,75 @@
-digraph "ReleaseStringCritical" {  
-"10725" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1937</SUB>> ]
-"10743" [label = <(soa,soa(env))<SUB>1938</SUB>> ]
-"10746" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1939</SUB>> ]
-"10755" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1940</SUB>> ]
-"10748" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1939</SUB>> ]
-"10756" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1940</SUB>> ]
-"10763" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1940</SUB>> ]
-"10773" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1941</SUB>> ]
-"10802" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>1948</SUB>> ]
-"10749" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1939</SUB>> ]
-"10757" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1940</SUB>> ]
-"10764" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1940</SUB>> ]
-"10774" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1941</SUB>> ]
-"10803" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1948</SUB>> ]
-"10807" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>1948</SUB>> ]
-"10821" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1949</SUB>> ]
-"10729" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1937</SUB>> ]
-"10750" [label = <(Runtime::Current,Runtime::Current())<SUB>1939</SUB>> ]
-"10754" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1939</SUB>> ]
-"10759" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1940</SUB>> ]
-"10765" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1940</SUB>> ]
-"10768" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1940</SUB>> ]
-"10776" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1941</SUB>> ]
-"10780" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1942</SUB>> ]
-"10804" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1948</SUB>> ]
-"10808" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1948</SUB>> ]
-"10814" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>1948</SUB>> ]
-"10730" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1937</SUB>> ]
-"10734" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1937</SUB>> ]
-"10741" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1937</SUB>> ]
-"10751" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1939</SUB>> ]
-"10761" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1940</SUB>> ]
-"10767" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1940</SUB>> ]
-"10770" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1940</SUB>> ]
-"10783" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>1943</SUB>> ]
-"10806" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1948</SUB>> ]
-"10809" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1948</SUB>> ]
-"10815" [label = <(GetValue,s-&gt;GetValue())<SUB>1948</SUB>> ]
-"10735" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1937</SUB>> ]
-"10753" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1939</SUB>> ]
-"10784" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>1943</SUB>> ]
-"10787" [label = <(Self,soa.Self())<SUB>1943</SUB>> ]
-"10793" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>1945</SUB>> ]
-"10810" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1948</SUB>> ]
-"10816" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1948</SUB>> ]
-"10736" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1937</SUB>> ]
-"10738" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1937</SUB>> ]
-"10786" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>1943</SUB>> ]
-"10788" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1943</SUB>> ]
-"10794" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>1945</SUB>> ]
-"10797" [label = <(Self,soa.Self())<SUB>1945</SUB>> ]
-"10812" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1948</SUB>> ]
-"10818" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1948</SUB>> ]
-"10790" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1943</SUB>> ]
-"10796" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>1945</SUB>> ]
-"10798" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1945</SUB>> ]
-"10800" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1945</SUB>> ]
-"10720" [label = <(METHOD,ReleaseStringCritical)<SUB>1934</SUB>> ]
-"10823" [label = <(METHOD_RETURN,void)<SUB>1934</SUB>> ]
-  "10725" -> "10730" 
-  "10725" -> "10743" 
-  "10743" -> "10753" 
-  "10746" -> "10761" 
-  "10755" -> "10776" 
-  "10748" -> "10746" 
-  "10756" -> "10767" 
-  "10763" -> "10755" 
-  "10773" -> "10780" 
-  "10773" -> "10806" 
-  "10802" -> "10823" 
-  "10802" -> "10821" 
-  "10749" -> "10748" 
-  "10757" -> "10756" 
-  "10764" -> "10763" 
-  "10774" -> "10773" 
-  "10803" -> "10802" 
-  "10803" -> "10812" 
-  "10807" -> "10802" 
-  "10821" -> "10823" 
-  "10729" -> "10736" 
-  "10729" -> "10743" 
-  "10750" -> "10754" 
-  "10754" -> "10749" 
-  "10759" -> "10757" 
-  "10765" -> "10770" 
-  "10768" -> "10764" 
-  "10776" -> "10774" 
-  "10780" -> "10786" 
-  "10780" -> "10796" 
-  "10804" -> "10803" 
-  "10808" -> "10807" 
-  "10808" -> "10818" 
-  "10814" -> "10807" 
-  "10730" -> "10729" 
-  "10734" -> "10741" 
-  "10741" -> "10823" 
-  "10751" -> "10750" 
-  "10761" -> "10759" 
-  "10767" -> "10765" 
-  "10770" -> "10768" 
-  "10783" -> "10806" 
-  "10806" -> "10804" 
-  "10809" -> "10808" 
-  "10815" -> "10814" 
-  "10735" -> "10734" 
-  "10753" -> "10751" 
-  "10784" -> "10790" 
-  "10787" -> "10783" 
-  "10793" -> "10806" 
-  "10810" -> "10809" 
-  "10816" -> "10815" 
-  "10736" -> "10738" 
-  "10738" -> "10735" 
-  "10786" -> "10784" 
-  "10788" -> "10787" 
-  "10794" -> "10800" 
-  "10797" -> "10793" 
-  "10812" -> "10810" 
-  "10818" -> "10816" 
-  "10790" -> "10788" 
-  "10796" -> "10794" 
-  "10798" -> "10797" 
-  "10800" -> "10798" 
-  "10720" -> "10725" 
+digraph "GetObjectArrayElement" {  
+"10671" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1852</SUB>> ]
+"10690" [label = <(soa,soa(env))<SUB>1853</SUB>> ]
+"10692" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1854</SUB>> ]
+"10717" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>1856</SUB>> ]
+"10693" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>1854</SUB>> ]
+"10704" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1855</SUB>> ]
+"10718" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>1856</SUB>> ]
+"10694" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>1854</SUB>> ]
+"10699" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>1854</SUB>> ]
+"10705" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>1855</SUB>> ]
+"10712" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>1855</SUB>> ]
+"10719" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1856</SUB>> ]
+"10724" [label = <(Get,array-&gt;Get(index))<SUB>1856</SUB>> ]
+"10675" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1852</SUB>> ]
+"10696" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1854</SUB>> ]
+"10700" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1854</SUB>> ]
+"10706" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1855</SUB>> ]
+"10709" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1855</SUB>> ]
+"10713" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1855</SUB>> ]
+"10720" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1856</SUB>> ]
+"10725" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>1856</SUB>> ]
+"10676" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1852</SUB>> ]
+"10680" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1852</SUB>> ]
+"10687" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1852</SUB>> ]
+"10698" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1854</SUB>> ]
+"10702" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1854</SUB>> ]
+"10708" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1855</SUB>> ]
+"10711" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1855</SUB>> ]
+"10715" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1855</SUB>> ]
+"10722" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1856</SUB>> ]
+"10727" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>1856</SUB>> ]
+"10681" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1852</SUB>> ]
+"10682" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1852</SUB>> ]
+"10684" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1852</SUB>> ]
+"10666" [label = <(METHOD,GetObjectArrayElement)<SUB>1851</SUB>> ]
+"10729" [label = <(METHOD_RETURN,jobject)<SUB>1851</SUB>> ]
+  "10671" -> "10676" 
+  "10671" -> "10690" 
+  "10690" -> "10698" 
+  "10692" -> "10722" 
+  "10717" -> "10729" 
+  "10693" -> "10708" 
+  "10704" -> "10692" 
+  "10718" -> "10717" 
+  "10694" -> "10702" 
+  "10699" -> "10693" 
+  "10705" -> "10715" 
+  "10712" -> "10704" 
+  "10719" -> "10727" 
+  "10724" -> "10718" 
+  "10675" -> "10682" 
+  "10675" -> "10690" 
+  "10696" -> "10694" 
+  "10700" -> "10699" 
+  "10706" -> "10711" 
+  "10709" -> "10705" 
+  "10713" -> "10712" 
+  "10720" -> "10719" 
+  "10725" -> "10724" 
+  "10676" -> "10675" 
+  "10680" -> "10687" 
+  "10687" -> "10729" 
+  "10698" -> "10696" 
+  "10702" -> "10700" 
+  "10708" -> "10706" 
+  "10711" -> "10709" 
+  "10715" -> "10713" 
+  "10722" -> "10720" 
+  "10727" -> "10725" 
+  "10681" -> "10680" 
+  "10682" -> "10684" 
+  "10684" -> "10681" 
+  "10666" -> "10671" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/19-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/19-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/19-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/19-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,11 +1,124 @@
-digraph "DefineClass" {  
-"515" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>428</SUB>> ]
-"519" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>429</SUB>> ]
-"516" [label = <(LOG,LOG(WARNING))<SUB>428</SUB>> ]
-"508" [label = <(METHOD,DefineClass)<SUB>427</SUB>> ]
-"521" [label = <(METHOD_RETURN,jclass)<SUB>427</SUB>> ]
-  "515" -> "519" 
-  "519" -> "521" 
-  "516" -> "515" 
-  "508" -> "516" 
+digraph "ToReflectedMethod" {  
+"576" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>387</SUB>> ]
+"595" [label = <(soa,soa(env))<SUB>388</SUB>> ]
+"598" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>389</SUB>> ]
+"605" [label = <(&lt;operator&gt;.multiplication,mirror::Executable* method)<SUB>390</SUB>> ]
+"610" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>391</SUB>> ]
+"622" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>392</SUB>> ]
+"665" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>398</SUB>> ]
+"600" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>389</SUB>> ]
+"606" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>390</SUB>> ]
+"611" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>391</SUB>> ]
+"623" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>392</SUB>> ]
+"632" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>393</SUB>> ]
+"666" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>398</SUB>> ]
+"601" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>389</SUB>> ]
+"608" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>390</SUB>> ]
+"612" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>391</SUB>> ]
+"624" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>392</SUB>> ]
+"633" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>393</SUB>> ]
+"637" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>394</SUB>> ]
+"667" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>398</SUB>> ]
+"580" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>387</SUB>> ]
+"603" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>389</SUB>> ]
+"613" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>391</SUB>> ]
+"620" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>391</SUB>> ]
+"625" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>392</SUB>> ]
+"635" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>393</SUB>> ]
+"639" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>394</SUB>> ]
+"652" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>396</SUB>> ]
+"668" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>398</SUB>> ]
+"581" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>387</SUB>> ]
+"585" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>387</SUB>> ]
+"592" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>387</SUB>> ]
+"614" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>391</SUB>> ]
+"626" [label = <(Runtime::Current,Runtime::Current())<SUB>392</SUB>> ]
+"630" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>392</SUB>> ]
+"640" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>394</SUB>> ]
+"645" [label = <(Self,soa.Self())<SUB>394</SUB>> ]
+"654" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>396</SUB>> ]
+"670" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>398</SUB>> ]
+"586" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>387</SUB>> ]
+"615" [label = <(Runtime::Current,Runtime::Current())<SUB>391</SUB>> ]
+"619" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>391</SUB>> ]
+"627" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>392</SUB>> ]
+"641" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>394</SUB>> ]
+"644" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>394</SUB>> ]
+"646" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>394</SUB>> ]
+"655" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>396</SUB>> ]
+"660" [label = <(Self,soa.Self())<SUB>396</SUB>> ]
+"587" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>387</SUB>> ]
+"589" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>387</SUB>> ]
+"616" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>391</SUB>> ]
+"629" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>392</SUB>> ]
+"648" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>394</SUB>> ]
+"656" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>396</SUB>> ]
+"659" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>396</SUB>> ]
+"661" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>396</SUB>> ]
+"618" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>391</SUB>> ]
+"663" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>396</SUB>> ]
+"570" [label = <(METHOD,ToReflectedMethod)<SUB>386</SUB>> ]
+"673" [label = <(METHOD_RETURN,jobject)<SUB>386</SUB>> ]
+  "576" -> "581" 
+  "576" -> "595" 
+  "595" -> "603" 
+  "598" -> "608" 
+  "605" -> "618" 
+  "610" -> "629" 
+  "622" -> "635" 
+  "665" -> "673" 
+  "600" -> "598" 
+  "606" -> "605" 
+  "611" -> "610" 
+  "623" -> "622" 
+  "632" -> "641" 
+  "632" -> "656" 
+  "666" -> "665" 
+  "601" -> "600" 
+  "608" -> "606" 
+  "612" -> "611" 
+  "624" -> "623" 
+  "633" -> "632" 
+  "637" -> "670" 
+  "667" -> "666" 
+  "580" -> "587" 
+  "580" -> "595" 
+  "603" -> "601" 
+  "613" -> "620" 
+  "620" -> "612" 
+  "625" -> "624" 
+  "635" -> "633" 
+  "639" -> "637" 
+  "652" -> "670" 
+  "668" -> "667" 
+  "581" -> "580" 
+  "585" -> "592" 
+  "592" -> "673" 
+  "614" -> "613" 
+  "626" -> "630" 
+  "630" -> "625" 
+  "640" -> "648" 
+  "645" -> "639" 
+  "654" -> "652" 
+  "670" -> "668" 
+  "586" -> "585" 
+  "615" -> "619" 
+  "619" -> "614" 
+  "627" -> "626" 
+  "641" -> "644" 
+  "644" -> "640" 
+  "646" -> "645" 
+  "655" -> "663" 
+  "660" -> "654" 
+  "587" -> "589" 
+  "589" -> "586" 
+  "616" -> "615" 
+  "629" -> "627" 
+  "648" -> "646" 
+  "656" -> "659" 
+  "659" -> "655" 
+  "661" -> "660" 
+  "618" -> "616" 
+  "663" -> "661" 
+  "570" -> "576" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/190-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/190-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/190-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/190-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,103 +1,99 @@
-digraph "GetStringUTFChars" {  
-"10847" [label = <(soa,soa(env))<SUB>1960</SUB>> ]
-"10849" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1961</SUB>> ]
-"10867" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>1962</SUB>> ]
-"10874" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>1963</SUB>> ]
-"10878" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>1964</SUB>> ]
-"10926" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>1973</SUB>> ]
-"10931" [label = <(RETURN,return bytes;,return bytes;)<SUB>1974</SUB>> ]
-"10831" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>1954</SUB>> ]
-"10838" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1957</SUB>> ]
-"10850" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1961</SUB>> ]
-"10857" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1961</SUB>> ]
-"10869" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>1962</SUB>> ]
-"10876" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>1963</SUB>> ]
-"10879" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>1964</SUB>> ]
-"10883" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1965</SUB>> ]
-"10927" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>1973</SUB>> ]
-"10835" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1955</SUB>> ]
-"10842" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1958</SUB>> ]
-"10851" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1961</SUB>> ]
-"10858" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1961</SUB>> ]
-"10870" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>1962</SUB>> ]
-"10884" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1965</SUB>> ]
-"10843" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1958</SUB>> ]
-"10853" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1961</SUB>> ]
-"10859" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1961</SUB>> ]
-"10862" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1961</SUB>> ]
-"10872" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1962</SUB>> ]
-"10886" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1965</SUB>> ]
-"10894" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>1966</SUB>> ]
-"10897" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1966</SUB>> ]
-"10912" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1970</SUB>> ]
-"10918" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>1971</SUB>> ]
-"10855" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1961</SUB>> ]
-"10861" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1961</SUB>> ]
-"10864" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1961</SUB>> ]
-"10891" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1966</SUB>> ]
-"10900" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>1967</SUB>> ]
-"10914" [label = <(GetValue,s-&gt;GetValue())<SUB>1970</SUB>> ]
-"10922" [label = <(GetLength,s-&gt;GetLength())<SUB>1971</SUB>> ]
-"10901" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>1967</SUB>> ]
-"10904" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1967</SUB>> ]
-"10915" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1970</SUB>> ]
-"10923" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1971</SUB>> ]
-"10905" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1967</SUB>> ]
-"10917" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1970</SUB>> ]
-"10925" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1971</SUB>> ]
-"10907" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1967</SUB>> ]
-"10825" [label = <(METHOD,GetStringUTFChars)<SUB>1953</SUB>> ]
-"10933" [label = <(METHOD_RETURN,const char*)<SUB>1953</SUB>> ]
-  "10847" -> "10855" 
-  "10849" -> "10872" 
-  "10867" -> "10876" 
-  "10874" -> "10879" 
-  "10878" -> "10886" 
-  "10926" -> "10931" 
-  "10931" -> "10933" 
-  "10831" -> "10835" 
-  "10831" -> "10838" 
-  "10838" -> "10843" 
-  "10838" -> "10847" 
-  "10850" -> "10861" 
-  "10857" -> "10849" 
-  "10869" -> "10867" 
-  "10876" -> "10874" 
-  "10879" -> "10878" 
-  "10883" -> "10891" 
-  "10883" -> "10917" 
-  "10927" -> "10926" 
-  "10835" -> "10933" 
-  "10842" -> "10847" 
-  "10851" -> "10850" 
-  "10858" -> "10857" 
-  "10870" -> "10869" 
-  "10884" -> "10883" 
-  "10843" -> "10842" 
-  "10853" -> "10851" 
-  "10859" -> "10864" 
-  "10862" -> "10858" 
-  "10872" -> "10870" 
-  "10886" -> "10884" 
-  "10894" -> "10901" 
-  "10894" -> "10927" 
-  "10897" -> "10894" 
-  "10912" -> "10925" 
-  "10918" -> "10927" 
-  "10855" -> "10853" 
-  "10861" -> "10859" 
-  "10864" -> "10862" 
-  "10891" -> "10894" 
-  "10900" -> "10897" 
-  "10914" -> "10912" 
-  "10922" -> "10918" 
-  "10901" -> "10907" 
-  "10904" -> "10900" 
-  "10915" -> "10914" 
-  "10923" -> "10922" 
-  "10905" -> "10904" 
-  "10917" -> "10915" 
-  "10925" -> "10923" 
-  "10907" -> "10905" 
-  "10825" -> "10831" 
+digraph "SetObjectArrayElement" {  
+"10737" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1861</SUB>> ]
+"10755" [label = <(soa,soa(env))<SUB>1862</SUB>> ]
+"10757" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1863</SUB>> ]
+"10782" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1865</SUB>> ]
+"10799" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value.Ptr()))<SUB>1866</SUB>> ]
+"10758" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>1863</SUB>> ]
+"10769" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1864</SUB>> ]
+"10783" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>1865</SUB>> ]
+"10790" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1865</SUB>> ]
+"10800" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>1866</SUB>> ]
+"10805" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value.Ptr()))<SUB>1866</SUB>> ]
+"10759" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>1863</SUB>> ]
+"10764" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>1863</SUB>> ]
+"10770" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>1864</SUB>> ]
+"10777" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>1864</SUB>> ]
+"10784" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1865</SUB>> ]
+"10791" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1865</SUB>> ]
+"10801" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>1866</SUB>> ]
+"10806" [label = <(&lt;operator&gt;.expressionList,index, value.Ptr())<SUB>1866</SUB>> ]
+"10741" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1861</SUB>> ]
+"10761" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1863</SUB>> ]
+"10765" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1863</SUB>> ]
+"10771" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1864</SUB>> ]
+"10774" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1864</SUB>> ]
+"10778" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1864</SUB>> ]
+"10786" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1865</SUB>> ]
+"10792" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1865</SUB>> ]
+"10795" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1865</SUB>> ]
+"10803" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>1866</SUB>> ]
+"10808" [label = <(Ptr,value.Ptr())<SUB>1866</SUB>> ]
+"10742" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1861</SUB>> ]
+"10746" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1861</SUB>> ]
+"10753" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1861</SUB>> ]
+"10763" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1863</SUB>> ]
+"10767" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1863</SUB>> ]
+"10773" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1864</SUB>> ]
+"10776" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1864</SUB>> ]
+"10780" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1864</SUB>> ]
+"10788" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1865</SUB>> ]
+"10794" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1865</SUB>> ]
+"10797" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1865</SUB>> ]
+"10809" [label = <(&lt;operator&gt;.fieldAccess,value.Ptr)<SUB>1866</SUB>> ]
+"10747" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1861</SUB>> ]
+"10811" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>1866</SUB>> ]
+"10748" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1861</SUB>> ]
+"10750" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1861</SUB>> ]
+"10731" [label = <(METHOD,SetObjectArrayElement)<SUB>1859</SUB>> ]
+"10812" [label = <(METHOD_RETURN,void)<SUB>1859</SUB>> ]
+  "10737" -> "10742" 
+  "10737" -> "10755" 
+  "10755" -> "10763" 
+  "10757" -> "10788" 
+  "10782" -> "10803" 
+  "10799" -> "10812" 
+  "10758" -> "10773" 
+  "10769" -> "10757" 
+  "10783" -> "10794" 
+  "10790" -> "10782" 
+  "10800" -> "10811" 
+  "10805" -> "10799" 
+  "10759" -> "10767" 
+  "10764" -> "10758" 
+  "10770" -> "10780" 
+  "10777" -> "10769" 
+  "10784" -> "10783" 
+  "10791" -> "10790" 
+  "10801" -> "10800" 
+  "10806" -> "10805" 
+  "10741" -> "10748" 
+  "10741" -> "10755" 
+  "10761" -> "10759" 
+  "10765" -> "10764" 
+  "10771" -> "10776" 
+  "10774" -> "10770" 
+  "10778" -> "10777" 
+  "10786" -> "10784" 
+  "10792" -> "10797" 
+  "10795" -> "10791" 
+  "10803" -> "10801" 
+  "10808" -> "10806" 
+  "10742" -> "10741" 
+  "10746" -> "10753" 
+  "10753" -> "10812" 
+  "10763" -> "10761" 
+  "10767" -> "10765" 
+  "10773" -> "10771" 
+  "10776" -> "10774" 
+  "10780" -> "10778" 
+  "10788" -> "10786" 
+  "10794" -> "10792" 
+  "10797" -> "10795" 
+  "10809" -> "10808" 
+  "10747" -> "10746" 
+  "10811" -> "10809" 
+  "10748" -> "10750" 
+  "10750" -> "10747" 
+  "10731" -> "10737" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/191-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/191-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/191-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/191-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,7 +1,9 @@
-digraph "ReleaseStringUTFChars" {  
-"10940" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1978</SUB>> ]
-"10935" [label = <(METHOD,ReleaseStringUTFChars)<SUB>1977</SUB>> ]
-"10942" [label = <(METHOD_RETURN,void)<SUB>1977</SUB>> ]
-  "10940" -> "10942" 
-  "10935" -> "10940" 
+digraph "NewBooleanArray" {  
+"10818" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>1870</SUB>> ]
+"10819" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>1870</SUB>> ]
+"10814" [label = <(METHOD,NewBooleanArray)<SUB>1869</SUB>> ]
+"10822" [label = <(METHOD_RETURN,jbooleanArray)<SUB>1869</SUB>> ]
+  "10818" -> "10822" 
+  "10819" -> "10818" 
+  "10814" -> "10819" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/192-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/192-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/192-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/192-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,100 +1,9 @@
-digraph "GetArrayLength" {  
-"10948" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1982</SUB>> ]
-"10967" [label = <(soa,soa(env))<SUB>1983</SUB>> ]
-"10969" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1984</SUB>> ]
-"11013" [label = <(&lt;operator&gt;.assignment,* array = obj-&gt;AsArray())<SUB>1989</SUB>> ]
-"11019" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>1990</SUB>> ]
-"10970" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>1984</SUB>> ]
-"10977" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1984</SUB>> ]
-"10987" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>1985</SUB>> ]
-"11015" [label = <(AsArray,obj-&gt;AsArray())<SUB>1989</SUB>> ]
-"11020" [label = <(GetLength,array-&gt;GetLength())<SUB>1990</SUB>> ]
-"10971" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1984</SUB>> ]
-"10978" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1984</SUB>> ]
-"10988" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>1985</SUB>> ]
-"10994" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>1986</SUB>> ]
-"11010" [label = <(RETURN,return 0;,return 0;)<SUB>1987</SUB>> ]
-"11016" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>1989</SUB>> ]
-"11021" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>1990</SUB>> ]
-"10952" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1982</SUB>> ]
-"10973" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1984</SUB>> ]
-"10979" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1984</SUB>> ]
-"10982" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1984</SUB>> ]
-"10989" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>1985</SUB>> ]
-"10995" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1986</SUB>> ]
-"11003" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>1986</SUB>> ]
-"11018" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>1989</SUB>> ]
-"11023" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1990</SUB>> ]
-"10953" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1982</SUB>> ]
-"10957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1982</SUB>> ]
-"10964" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1982</SUB>> ]
-"10975" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1984</SUB>> ]
-"10981" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1984</SUB>> ]
-"10984" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1984</SUB>> ]
-"10990" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>1985</SUB>> ]
-"10996" [label = <(Vm,soa.Vm())<SUB>1986</SUB>> ]
-"11000" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1986</SUB>> ]
-"11004" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>1986</SUB>> ]
-"10958" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1982</SUB>> ]
-"10992" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>1985</SUB>> ]
-"10997" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1986</SUB>> ]
-"11005" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>1986</SUB>> ]
-"11009" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1986</SUB>> ]
-"10959" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1982</SUB>> ]
-"10961" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1982</SUB>> ]
-"10999" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1986</SUB>> ]
-"11006" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>1986</SUB>> ]
-"11008" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>1986</SUB>> ]
-"10944" [label = <(METHOD,GetArrayLength)<SUB>1981</SUB>> ]
-"11024" [label = <(METHOD_RETURN,jsize)<SUB>1981</SUB>> ]
-  "10948" -> "10953" 
-  "10948" -> "10967" 
-  "10967" -> "10975" 
-  "10969" -> "10992" 
-  "11013" -> "11023" 
-  "11019" -> "11024" 
-  "10970" -> "10981" 
-  "10977" -> "10969" 
-  "10987" -> "10999" 
-  "10987" -> "11018" 
-  "11015" -> "11013" 
-  "11020" -> "11019" 
-  "10971" -> "10970" 
-  "10978" -> "10977" 
-  "10988" -> "10987" 
-  "10994" -> "11010" 
-  "11010" -> "11024" 
-  "11016" -> "11015" 
-  "11021" -> "11020" 
-  "10952" -> "10959" 
-  "10952" -> "10967" 
-  "10973" -> "10971" 
-  "10979" -> "10984" 
-  "10982" -> "10978" 
-  "10989" -> "10988" 
-  "10995" -> "11008" 
-  "11003" -> "10994" 
-  "11018" -> "11016" 
-  "11023" -> "11021" 
-  "10953" -> "10952" 
-  "10957" -> "10964" 
-  "10964" -> "11024" 
-  "10975" -> "10973" 
-  "10981" -> "10979" 
-  "10984" -> "10982" 
-  "10990" -> "10989" 
-  "10996" -> "11000" 
-  "11000" -> "10995" 
-  "11004" -> "11003" 
-  "10958" -> "10957" 
-  "10992" -> "10990" 
-  "10997" -> "10996" 
-  "11005" -> "11009" 
-  "11009" -> "11004" 
-  "10959" -> "10961" 
-  "10961" -> "10958" 
-  "10999" -> "10997" 
-  "11006" -> "11005" 
-  "11008" -> "11006" 
-  "10944" -> "10948" 
+digraph "NewByteArray" {  
+"10828" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>1874</SUB>> ]
+"10829" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>1874</SUB>> ]
+"10824" [label = <(METHOD,NewByteArray)<SUB>1873</SUB>> ]
+"10832" [label = <(METHOD_RETURN,jbyteArray)<SUB>1873</SUB>> ]
+  "10828" -> "10832" 
+  "10829" -> "10828" 
+  "10824" -> "10829" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/193-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/193-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/193-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/193-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,75 +1,9 @@
-digraph "GetObjectArrayElement" {  
-"11031" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1994</SUB>> ]
-"11050" [label = <(soa,soa(env))<SUB>1995</SUB>> ]
-"11052" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1996</SUB>> ]
-"11077" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>1998</SUB>> ]
-"11053" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>1996</SUB>> ]
-"11064" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1997</SUB>> ]
-"11078" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>1998</SUB>> ]
-"11054" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>1996</SUB>> ]
-"11059" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>1996</SUB>> ]
-"11065" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>1997</SUB>> ]
-"11072" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>1997</SUB>> ]
-"11079" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1998</SUB>> ]
-"11084" [label = <(Get,array-&gt;Get(index))<SUB>1998</SUB>> ]
-"11035" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1994</SUB>> ]
-"11056" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1996</SUB>> ]
-"11060" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1996</SUB>> ]
-"11066" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1997</SUB>> ]
-"11069" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1997</SUB>> ]
-"11073" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1997</SUB>> ]
-"11080" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1998</SUB>> ]
-"11085" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>1998</SUB>> ]
-"11036" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1994</SUB>> ]
-"11040" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1994</SUB>> ]
-"11047" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1994</SUB>> ]
-"11058" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1996</SUB>> ]
-"11062" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1996</SUB>> ]
-"11068" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1997</SUB>> ]
-"11071" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1997</SUB>> ]
-"11075" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1997</SUB>> ]
-"11082" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1998</SUB>> ]
-"11087" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>1998</SUB>> ]
-"11041" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1994</SUB>> ]
-"11042" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1994</SUB>> ]
-"11044" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1994</SUB>> ]
-"11026" [label = <(METHOD,GetObjectArrayElement)<SUB>1993</SUB>> ]
-"11089" [label = <(METHOD_RETURN,jobject)<SUB>1993</SUB>> ]
-  "11031" -> "11036" 
-  "11031" -> "11050" 
-  "11050" -> "11058" 
-  "11052" -> "11082" 
-  "11077" -> "11089" 
-  "11053" -> "11068" 
-  "11064" -> "11052" 
-  "11078" -> "11077" 
-  "11054" -> "11062" 
-  "11059" -> "11053" 
-  "11065" -> "11075" 
-  "11072" -> "11064" 
-  "11079" -> "11087" 
-  "11084" -> "11078" 
-  "11035" -> "11042" 
-  "11035" -> "11050" 
-  "11056" -> "11054" 
-  "11060" -> "11059" 
-  "11066" -> "11071" 
-  "11069" -> "11065" 
-  "11073" -> "11072" 
-  "11080" -> "11079" 
-  "11085" -> "11084" 
-  "11036" -> "11035" 
-  "11040" -> "11047" 
-  "11047" -> "11089" 
-  "11058" -> "11056" 
-  "11062" -> "11060" 
-  "11068" -> "11066" 
-  "11071" -> "11069" 
-  "11075" -> "11073" 
-  "11082" -> "11080" 
-  "11087" -> "11085" 
-  "11041" -> "11040" 
-  "11042" -> "11044" 
-  "11044" -> "11041" 
-  "11026" -> "11031" 
+digraph "NewCharArray" {  
+"10838" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>1878</SUB>> ]
+"10839" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>1878</SUB>> ]
+"10834" [label = <(METHOD,NewCharArray)<SUB>1877</SUB>> ]
+"10842" [label = <(METHOD_RETURN,jcharArray)<SUB>1877</SUB>> ]
+  "10838" -> "10842" 
+  "10839" -> "10838" 
+  "10834" -> "10839" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/194-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/194-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/194-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/194-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,99 +1,9 @@
-digraph "SetObjectArrayElement" {  
-"11097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2003</SUB>> ]
-"11115" [label = <(soa,soa(env))<SUB>2004</SUB>> ]
-"11117" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2005</SUB>> ]
-"11142" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2007</SUB>> ]
-"11159" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value.Ptr()))<SUB>2008</SUB>> ]
-"11118" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2005</SUB>> ]
-"11129" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2006</SUB>> ]
-"11143" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2007</SUB>> ]
-"11150" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2007</SUB>> ]
-"11160" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2008</SUB>> ]
-"11165" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value.Ptr()))<SUB>2008</SUB>> ]
-"11119" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2005</SUB>> ]
-"11124" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2005</SUB>> ]
-"11130" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2006</SUB>> ]
-"11137" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2006</SUB>> ]
-"11144" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2007</SUB>> ]
-"11151" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2007</SUB>> ]
-"11161" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2008</SUB>> ]
-"11166" [label = <(&lt;operator&gt;.expressionList,index, value.Ptr())<SUB>2008</SUB>> ]
-"11101" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2003</SUB>> ]
-"11121" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2005</SUB>> ]
-"11125" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2005</SUB>> ]
-"11131" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2006</SUB>> ]
-"11134" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2006</SUB>> ]
-"11138" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2006</SUB>> ]
-"11146" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2007</SUB>> ]
-"11152" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2007</SUB>> ]
-"11155" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2007</SUB>> ]
-"11163" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2008</SUB>> ]
-"11168" [label = <(Ptr,value.Ptr())<SUB>2008</SUB>> ]
-"11102" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2003</SUB>> ]
-"11106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2003</SUB>> ]
-"11113" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2003</SUB>> ]
-"11123" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2005</SUB>> ]
-"11127" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2005</SUB>> ]
-"11133" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2006</SUB>> ]
-"11136" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2006</SUB>> ]
-"11140" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2006</SUB>> ]
-"11148" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2007</SUB>> ]
-"11154" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2007</SUB>> ]
-"11157" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2007</SUB>> ]
-"11169" [label = <(&lt;operator&gt;.fieldAccess,value.Ptr)<SUB>2008</SUB>> ]
-"11107" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2003</SUB>> ]
-"11171" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2008</SUB>> ]
-"11108" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2003</SUB>> ]
-"11110" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2003</SUB>> ]
-"11091" [label = <(METHOD,SetObjectArrayElement)<SUB>2001</SUB>> ]
-"11172" [label = <(METHOD_RETURN,void)<SUB>2001</SUB>> ]
-  "11097" -> "11102" 
-  "11097" -> "11115" 
-  "11115" -> "11123" 
-  "11117" -> "11148" 
-  "11142" -> "11163" 
-  "11159" -> "11172" 
-  "11118" -> "11133" 
-  "11129" -> "11117" 
-  "11143" -> "11154" 
-  "11150" -> "11142" 
-  "11160" -> "11171" 
-  "11165" -> "11159" 
-  "11119" -> "11127" 
-  "11124" -> "11118" 
-  "11130" -> "11140" 
-  "11137" -> "11129" 
-  "11144" -> "11143" 
-  "11151" -> "11150" 
-  "11161" -> "11160" 
-  "11166" -> "11165" 
-  "11101" -> "11108" 
-  "11101" -> "11115" 
-  "11121" -> "11119" 
-  "11125" -> "11124" 
-  "11131" -> "11136" 
-  "11134" -> "11130" 
-  "11138" -> "11137" 
-  "11146" -> "11144" 
-  "11152" -> "11157" 
-  "11155" -> "11151" 
-  "11163" -> "11161" 
-  "11168" -> "11166" 
-  "11102" -> "11101" 
-  "11106" -> "11113" 
-  "11113" -> "11172" 
-  "11123" -> "11121" 
-  "11127" -> "11125" 
-  "11133" -> "11131" 
-  "11136" -> "11134" 
-  "11140" -> "11138" 
-  "11148" -> "11146" 
-  "11154" -> "11152" 
-  "11157" -> "11155" 
-  "11169" -> "11168" 
-  "11107" -> "11106" 
-  "11171" -> "11169" 
-  "11108" -> "11110" 
-  "11110" -> "11107" 
-  "11091" -> "11097" 
+digraph "NewDoubleArray" {  
+"10848" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>1882</SUB>> ]
+"10849" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>1882</SUB>> ]
+"10844" [label = <(METHOD,NewDoubleArray)<SUB>1881</SUB>> ]
+"10852" [label = <(METHOD_RETURN,jdoubleArray)<SUB>1881</SUB>> ]
+  "10848" -> "10852" 
+  "10849" -> "10848" 
+  "10844" -> "10849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/195-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/195-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/195-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/195-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,9 +1,9 @@
-digraph "NewBooleanArray" {  
-"11178" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2012</SUB>> ]
-"11179" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2012</SUB>> ]
-"11174" [label = <(METHOD,NewBooleanArray)<SUB>2011</SUB>> ]
-"11182" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2011</SUB>> ]
-  "11178" -> "11182" 
-  "11179" -> "11178" 
-  "11174" -> "11179" 
+digraph "NewFloatArray" {  
+"10858" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>1886</SUB>> ]
+"10859" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>1886</SUB>> ]
+"10854" [label = <(METHOD,NewFloatArray)<SUB>1885</SUB>> ]
+"10862" [label = <(METHOD_RETURN,jfloatArray)<SUB>1885</SUB>> ]
+  "10858" -> "10862" 
+  "10859" -> "10858" 
+  "10854" -> "10859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/196-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/196-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/196-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/196-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,9 +1,9 @@
-digraph "NewByteArray" {  
-"11188" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2016</SUB>> ]
-"11189" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2016</SUB>> ]
-"11184" [label = <(METHOD,NewByteArray)<SUB>2015</SUB>> ]
-"11192" [label = <(METHOD_RETURN,jbyteArray)<SUB>2015</SUB>> ]
-  "11188" -> "11192" 
-  "11189" -> "11188" 
-  "11184" -> "11189" 
+digraph "NewIntArray" {  
+"10868" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>1890</SUB>> ]
+"10869" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>1890</SUB>> ]
+"10864" [label = <(METHOD,NewIntArray)<SUB>1889</SUB>> ]
+"10872" [label = <(METHOD_RETURN,jintArray)<SUB>1889</SUB>> ]
+  "10868" -> "10872" 
+  "10869" -> "10868" 
+  "10864" -> "10869" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/197-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/197-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/197-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/197-cfg.dot	2023-06-07 19:35:21.327385041 +0330
@@ -1,9 +1,9 @@
-digraph "NewCharArray" {  
-"11198" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2020</SUB>> ]
-"11199" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2020</SUB>> ]
-"11194" [label = <(METHOD,NewCharArray)<SUB>2019</SUB>> ]
-"11202" [label = <(METHOD_RETURN,jcharArray)<SUB>2019</SUB>> ]
-  "11198" -> "11202" 
-  "11199" -> "11198" 
-  "11194" -> "11199" 
+digraph "NewLongArray" {  
+"10878" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>1894</SUB>> ]
+"10879" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>1894</SUB>> ]
+"10874" [label = <(METHOD,NewLongArray)<SUB>1893</SUB>> ]
+"10882" [label = <(METHOD_RETURN,jlongArray)<SUB>1893</SUB>> ]
+  "10878" -> "10882" 
+  "10879" -> "10878" 
+  "10874" -> "10879" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/198-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/198-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/198-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/198-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,333 @@
-digraph "NewDoubleArray" {  
-"11208" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2024</SUB>> ]
-"11209" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2024</SUB>> ]
-"11204" [label = <(METHOD,NewDoubleArray)<SUB>2023</SUB>> ]
-"11212" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2023</SUB>> ]
-  "11208" -> "11212" 
-  "11209" -> "11208" 
-  "11204" -> "11209" 
+digraph "NewObjectArray" {  
+"10906" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>1903</SUB>> ]
+"10925" [label = <(soa,soa(env))<SUB>1906</SUB>> ]
+"10927" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>1907</SUB>> ]
+"11010" [label = <(&lt;operator&gt;.assignment,mirror::ObjectArray&lt;mirror::Object&gt;* result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>1924</SUB>> ]
+"11150" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>1943</SUB>> ]
+"10891" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>1899</SUB>> ]
+"10928" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>1907</SUB>> ]
+"10935" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>1909</SUB>> ]
+"10981" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>1916</SUB>> ]
+"10990" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>1917</SUB>> ]
+"11011" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;* result)<SUB>1924</SUB>> ]
+"11021" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>1925</SUB>> ]
+"11040" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>1926</SUB>> ]
+"11151" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>1943</SUB>> ]
+"10892" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1899</SUB>> ]
+"10896" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>1900</SUB>> ]
+"10904" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1901</SUB>> ]
+"10930" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1907</SUB>> ]
+"10936" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>1909</SUB>> ]
+"10943" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>1909</SUB>> ]
+"10956" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>1910</SUB>> ]
+"10983" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>1916</SUB>> ]
+"10992" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>1917</SUB>> ]
+"11003" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>1918</SUB>> ]
+"11012" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>1924</SUB>> ]
+"11019" [label = <(&lt;operator&gt;.indirection,* result)<SUB>1924</SUB>> ]
+"11022" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>1925</SUB>> ]
+"11029" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>1925</SUB>> ]
+"11041" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>1926</SUB>> ]
+"11044" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>1926</SUB>> ]
+"11048" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>1927</SUB>> ]
+"11152" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>1943</SUB>> ]
+"10897" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1900</SUB>> ]
+"10910" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>1903</SUB>> ]
+"10932" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1907</SUB>> ]
+"10937" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>1909</SUB>> ]
+"10944" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>1909</SUB>> ]
+"10951" [label = <(Ptr,(element_jclass).Ptr())<SUB>1909</SUB>> ]
+"10957" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>1910</SUB>> ]
+"10962" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>1911</SUB>> ]
+"10978" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1914</SUB>> ]
+"10984" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>1916</SUB>> ]
+"10993" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>1917</SUB>> ]
+"10996" [label = <(Self,soa.Self())<SUB>1917</SUB>> ]
+"11000" [label = <(&lt;operator&gt;.addressOf,&amp;element_class)<SUB>1917</SUB>> ]
+"11004" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>1918</SUB>> ]
+"11008" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1919</SUB>> ]
+"11013" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1924</SUB>> ]
+"11016" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1924</SUB>> ]
+"11023" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1925</SUB>> ]
+"11026" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1925</SUB>> ]
+"11030" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>1925</SUB>> ]
+"11033" [label = <(Self,soa.Self())<SUB>1925</SUB>> ]
+"11049" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>1927</SUB>> ]
+"11056" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>1927</SUB>> ]
+"11066" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>1928</SUB>> ]
+"11153" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1943</SUB>> ]
+"10898" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1900</SUB>> ]
+"10900" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1900</SUB>> ]
+"10911" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>1903</SUB>> ]
+"10915" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>1903</SUB>> ]
+"10922" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>1903</SUB>> ]
+"10939" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1909</SUB>> ]
+"10945" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1909</SUB>> ]
+"10948" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1909</SUB>> ]
+"10952" [label = <(&lt;operator&gt;.fieldAccess,(element_jclass).Ptr)<SUB>1909</SUB>> ]
+"10958" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>1910</SUB>> ]
+"10963" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1911</SUB>> ]
+"10971" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>1913</SUB>> ]
+"10985" [label = <(Runtime::Current,Runtime::Current())<SUB>1916</SUB>> ]
+"10989" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>1916</SUB>> ]
+"10995" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>1917</SUB>> ]
+"10997" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1917</SUB>> ]
+"11015" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1924</SUB>> ]
+"11018" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1924</SUB>> ]
+"11025" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1925</SUB>> ]
+"11028" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1925</SUB>> ]
+"11032" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>1925</SUB>> ]
+"11034" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1925</SUB>> ]
+"11050" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1927</SUB>> ]
+"11057" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1927</SUB>> ]
+"11071" [label = <(&lt;operator&gt;.assignment,* element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>1929</SUB>> ]
+"11155" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1943</SUB>> ]
+"10916" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1903</SUB>> ]
+"10941" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1909</SUB>> ]
+"10947" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1909</SUB>> ]
+"10950" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1909</SUB>> ]
+"10954" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>1909</SUB>> ]
+"10960" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>1910</SUB>> ]
+"10964" [label = <(Vm,soa.Vm())<SUB>1911</SUB>> ]
+"10968" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1911</SUB>> ]
+"10972" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>1913</SUB>> ]
+"10986" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1916</SUB>> ]
+"10999" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1917</SUB>> ]
+"11036" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1925</SUB>> ]
+"11052" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1927</SUB>> ]
+"11058" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1927</SUB>> ]
+"11061" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1927</SUB>> ]
+"11073" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>1929</SUB>> ]
+"11081" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>1930</SUB>> ]
+"10917" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1903</SUB>> ]
+"10919" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1903</SUB>> ]
+"10965" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1911</SUB>> ]
+"10973" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>1913</SUB>> ]
+"10977" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1913</SUB>> ]
+"10988" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1916</SUB>> ]
+"11054" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1927</SUB>> ]
+"11060" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1927</SUB>> ]
+"11063" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1927</SUB>> ]
+"11074" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>1929</SUB>> ]
+"11082" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>1930</SUB>> ]
+"11092" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>1931</SUB>> ]
+"11121" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1935</SUB>> ]
+"10967" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1911</SUB>> ]
+"10974" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>1913</SUB>> ]
+"11075" [label = <(GetClass,result-&gt;GetClass())<SUB>1929</SUB>> ]
+"11079" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>1929</SUB>> ]
+"11083" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>1930</SUB>> ]
+"11093" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1931</SUB>> ]
+"11101" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>1933</SUB>> ]
+"11114" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>1934</SUB>> ]
+"10976" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>1913</SUB>> ]
+"11076" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>1929</SUB>> ]
+"11084" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>1930</SUB>> ]
+"11087" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>1930</SUB>> ]
+"11094" [label = <(Vm,soa.Vm())<SUB>1931</SUB>> ]
+"11098" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1931</SUB>> ]
+"11102" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>1933</SUB>> ]
+"11115" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>1934</SUB>> ]
+"11131" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1937</SUB>> ]
+"11134" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1937</SUB>> ]
+"11078" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1929</SUB>> ]
+"11086" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>1930</SUB>> ]
+"11088" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>1930</SUB>> ]
+"11095" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1931</SUB>> ]
+"11103" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>1933</SUB>> ]
+"11113" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1933</SUB>> ]
+"11116" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>1934</SUB>> ]
+"11120" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1934</SUB>> ]
+"11128" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1937</SUB>> ]
+"11137" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object.Ptr()))<SUB>1938</SUB>> ]
+"11090" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1930</SUB>> ]
+"11097" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1931</SUB>> ]
+"11104" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>1933</SUB>> ]
+"11109" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>1933</SUB>> ]
+"11117" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>1934</SUB>> ]
+"11138" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>1938</SUB>> ]
+"11143" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object.Ptr()))<SUB>1938</SUB>> ]
+"11105" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1933</SUB>> ]
+"11108" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>1933</SUB>> ]
+"11110" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>1933</SUB>> ]
+"11119" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>1934</SUB>> ]
+"11139" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>1938</SUB>> ]
+"11144" [label = <(&lt;operator&gt;.expressionList,i, initial_object.Ptr())<SUB>1938</SUB>> ]
+"11112" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1933</SUB>> ]
+"11141" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>1938</SUB>> ]
+"11146" [label = <(Ptr,initial_object.Ptr())<SUB>1938</SUB>> ]
+"11147" [label = <(&lt;operator&gt;.fieldAccess,initial_object.Ptr)<SUB>1938</SUB>> ]
+"11149" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>1938</SUB>> ]
+"10884" [label = <(METHOD,NewObjectArray)<SUB>1897</SUB>> ]
+"11158" [label = <(METHOD_RETURN,jobjectArray)<SUB>1897</SUB>> ]
+  "10906" -> "10911" 
+  "10906" -> "10925" 
+  "10925" -> "10932" 
+  "10927" -> "10941" 
+  "11010" -> "11041" 
+  "11150" -> "11158" 
+  "10891" -> "10898" 
+  "10891" -> "10906" 
+  "10928" -> "10927" 
+  "10935" -> "10960" 
+  "10981" -> "10995" 
+  "10990" -> "11004" 
+  "11011" -> "11025" 
+  "11021" -> "11010" 
+  "11040" -> "11054" 
+  "11040" -> "11155" 
+  "11151" -> "11150" 
+  "10892" -> "10891" 
+  "10896" -> "10904" 
+  "10904" -> "11158" 
+  "10930" -> "10928" 
+  "10936" -> "10947" 
+  "10943" -> "10935" 
+  "10956" -> "10967" 
+  "10956" -> "10988" 
+  "10983" -> "10981" 
+  "10992" -> "10990" 
+  "11003" -> "11008" 
+  "11003" -> "11015" 
+  "11012" -> "11019" 
+  "11019" -> "11011" 
+  "11022" -> "11032" 
+  "11029" -> "11021" 
+  "11041" -> "11040" 
+  "11041" -> "11044" 
+  "11044" -> "11040" 
+  "11048" -> "11066" 
+  "11152" -> "11151" 
+  "10897" -> "10896" 
+  "10910" -> "10917" 
+  "10910" -> "10925" 
+  "10932" -> "10930" 
+  "10937" -> "10936" 
+  "10944" -> "10954" 
+  "10951" -> "10943" 
+  "10957" -> "10956" 
+  "10962" -> "10978" 
+  "10978" -> "11158" 
+  "10984" -> "10983" 
+  "10993" -> "10999" 
+  "10996" -> "11000" 
+  "11000" -> "10992" 
+  "11004" -> "11003" 
+  "11008" -> "11158" 
+  "11013" -> "11018" 
+  "11016" -> "11012" 
+  "11023" -> "11028" 
+  "11026" -> "11022" 
+  "11030" -> "11036" 
+  "11033" -> "11029" 
+  "11049" -> "11060" 
+  "11056" -> "11048" 
+  "11066" -> "11078" 
+  "11066" -> "11155" 
+  "11153" -> "11152" 
+  "10898" -> "10900" 
+  "10900" -> "10897" 
+  "10911" -> "10910" 
+  "10915" -> "10922" 
+  "10922" -> "11158" 
+  "10939" -> "10937" 
+  "10945" -> "10950" 
+  "10948" -> "10944" 
+  "10952" -> "10951" 
+  "10958" -> "10957" 
+  "10963" -> "10976" 
+  "10971" -> "10962" 
+  "10985" -> "10989" 
+  "10989" -> "10984" 
+  "10995" -> "10993" 
+  "10997" -> "10996" 
+  "11015" -> "11013" 
+  "11018" -> "11016" 
+  "11025" -> "11023" 
+  "11028" -> "11026" 
+  "11032" -> "11030" 
+  "11034" -> "11033" 
+  "11050" -> "11049" 
+  "11057" -> "11056" 
+  "11071" -> "11086" 
+  "11155" -> "11153" 
+  "10916" -> "10915" 
+  "10941" -> "10939" 
+  "10947" -> "10945" 
+  "10950" -> "10948" 
+  "10954" -> "10952" 
+  "10960" -> "10958" 
+  "10964" -> "10968" 
+  "10968" -> "10963" 
+  "10972" -> "10971" 
+  "10986" -> "10985" 
+  "10999" -> "10997" 
+  "11036" -> "11034" 
+  "11052" -> "11050" 
+  "11058" -> "11063" 
+  "11061" -> "11057" 
+  "11073" -> "11071" 
+  "11081" -> "11097" 
+  "11081" -> "11128" 
+  "10917" -> "10919" 
+  "10919" -> "10916" 
+  "10965" -> "10964" 
+  "10973" -> "10977" 
+  "10977" -> "10972" 
+  "10988" -> "10986" 
+  "11054" -> "11052" 
+  "11060" -> "11058" 
+  "11063" -> "11061" 
+  "11074" -> "11073" 
+  "11082" -> "11081" 
+  "11092" -> "11121" 
+  "11121" -> "11158" 
+  "10967" -> "10965" 
+  "10974" -> "10973" 
+  "11075" -> "11079" 
+  "11079" -> "11074" 
+  "11083" -> "11082" 
+  "11093" -> "11105" 
+  "11101" -> "11119" 
+  "11114" -> "11092" 
+  "10976" -> "10974" 
+  "11076" -> "11075" 
+  "11084" -> "11090" 
+  "11087" -> "11083" 
+  "11094" -> "11098" 
+  "11098" -> "11093" 
+  "11102" -> "11101" 
+  "11115" -> "11114" 
+  "11131" -> "11141" 
+  "11131" -> "11155" 
+  "11134" -> "11131" 
+  "11078" -> "11076" 
+  "11086" -> "11084" 
+  "11088" -> "11087" 
+  "11095" -> "11094" 
+  "11103" -> "11113" 
+  "11113" -> "11102" 
+  "11116" -> "11120" 
+  "11120" -> "11115" 
+  "11128" -> "11131" 
+  "11137" -> "11134" 
+  "11090" -> "11088" 
+  "11097" -> "11095" 
+  "11104" -> "11112" 
+  "11109" -> "11103" 
+  "11117" -> "11116" 
+  "11138" -> "11149" 
+  "11143" -> "11137" 
+  "11105" -> "11108" 
+  "11108" -> "11104" 
+  "11110" -> "11109" 
+  "11119" -> "11117" 
+  "11139" -> "11138" 
+  "11144" -> "11143" 
+  "11112" -> "11110" 
+  "11141" -> "11139" 
+  "11146" -> "11144" 
+  "11147" -> "11146" 
+  "11149" -> "11147" 
+  "10884" -> "10892" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/199-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/199-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/199-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/199-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "NewFloatArray" {  
-"11218" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2028</SUB>> ]
-"11219" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2028</SUB>> ]
-"11214" [label = <(METHOD,NewFloatArray)<SUB>2027</SUB>> ]
-"11222" [label = <(METHOD_RETURN,jfloatArray)<SUB>2027</SUB>> ]
-  "11218" -> "11222" 
-  "11219" -> "11218" 
-  "11214" -> "11219" 
+digraph "NewShortArray" {  
+"11164" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>1947</SUB>> ]
+"11165" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>1947</SUB>> ]
+"11160" [label = <(METHOD,NewShortArray)<SUB>1946</SUB>> ]
+"11168" [label = <(METHOD_RETURN,jshortArray)<SUB>1946</SUB>> ]
+  "11164" -> "11168" 
+  "11165" -> "11164" 
+  "11160" -> "11165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/2-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/2-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/2-cfg.dot	2023-06-07 19:35:14.437385880 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/2-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_5" {  
-"15" [label = <(METHOD,anonymous_lambda_5)<SUB>1790</SUB>> ]
-"17" [label = <(METHOD_RETURN,ANY)<SUB>1790</SUB>> ]
-  "15" -> "17" 
+digraph "ThrowNoSuchMethodError" {  
+"78" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>91</SUB>> ]
+"85" [label = <(METHOD_RETURN,void)<SUB>91</SUB>> ]
+  "78" -> "85" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/20-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/20-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/20-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/20-cfg.dot	2023-06-07 19:35:21.197385056 +0330
@@ -1,134 +1,63 @@
-digraph "FindClass" {  
-"527" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>433</SUB>> ]
-"546" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>434</SUB>> ]
-"553" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>435</SUB>> ]
-"560" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>436</SUB>> ]
-"564" [label = <(soa,soa(env))<SUB>437</SUB>> ]
-"567" [label = <(&lt;operator&gt;.assignment,* c = nullptr)<SUB>438</SUB>> ]
-"629" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>446</SUB>> ]
-"548" [label = <(Runtime::Current,Runtime::Current())<SUB>434</SUB>> ]
-"555" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>435</SUB>> ]
-"561" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>436</SUB>> ]
-"571" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>439</SUB>> ]
-"630" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>446</SUB>> ]
-"549" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>434</SUB>> ]
-"556" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>435</SUB>> ]
-"572" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>439</SUB>> ]
-"576" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>440</SUB>> ]
-"585" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>441</SUB>> ]
-"598" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>442</SUB>> ]
-"631" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>446</SUB>> ]
-"531" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>433</SUB>> ]
-"551" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>434</SUB>> ]
-"558" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>435</SUB>> ]
-"574" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>439</SUB>> ]
-"577" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>440</SUB>> ]
-"580" [label = <(hs,hs(soa.Self()))<SUB>440</SUB>> ]
-"586" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>441</SUB>> ]
-"591" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>441</SUB>> ]
-"600" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>442</SUB>> ]
-"615" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>444</SUB>> ]
-"632" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>446</SUB>> ]
-"532" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>433</SUB>> ]
-"536" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>433</SUB>> ]
-"543" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>433</SUB>> ]
-"581" [label = <(Self,soa.Self())<SUB>440</SUB>> ]
-"588" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>441</SUB>> ]
-"592" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>441</SUB>> ]
-"601" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>442</SUB>> ]
-"604" [label = <(Self,soa.Self())<SUB>442</SUB>> ]
-"608" [label = <(c_str,descriptor.c_str())<SUB>442</SUB>> ]
-"617" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>444</SUB>> ]
-"634" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>446</SUB>> ]
-"537" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>433</SUB>> ]
-"582" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>440</SUB>> ]
-"590" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>441</SUB>> ]
-"593" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>441</SUB>> ]
-"596" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>441</SUB>> ]
-"603" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>442</SUB>> ]
-"605" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>442</SUB>> ]
-"609" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>442</SUB>> ]
-"618" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>444</SUB>> ]
-"621" [label = <(Self,soa.Self())<SUB>444</SUB>> ]
-"625" [label = <(c_str,descriptor.c_str())<SUB>444</SUB>> ]
-"538" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>433</SUB>> ]
-"540" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>433</SUB>> ]
-"584" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>440</SUB>> ]
-"595" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>441</SUB>> ]
-"607" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>442</SUB>> ]
-"611" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>442</SUB>> ]
-"620" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>444</SUB>> ]
-"622" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>444</SUB>> ]
-"626" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>444</SUB>> ]
-"624" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>444</SUB>> ]
-"628" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>444</SUB>> ]
-"523" [label = <(METHOD,FindClass)<SUB>432</SUB>> ]
-"637" [label = <(METHOD_RETURN,jclass)<SUB>432</SUB>> ]
-  "527" -> "532" 
-  "527" -> "551" 
-  "546" -> "558" 
-  "553" -> "561" 
-  "560" -> "564" 
-  "564" -> "567" 
-  "567" -> "574" 
-  "629" -> "637" 
-  "548" -> "546" 
-  "555" -> "553" 
-  "561" -> "560" 
-  "571" -> "577" 
-  "571" -> "620" 
-  "630" -> "629" 
-  "549" -> "548" 
-  "556" -> "555" 
-  "572" -> "571" 
-  "576" -> "590" 
-  "585" -> "603" 
-  "598" -> "634" 
-  "631" -> "630" 
-  "531" -> "538" 
-  "531" -> "551" 
-  "551" -> "549" 
-  "558" -> "556" 
-  "574" -> "572" 
-  "577" -> "584" 
-  "580" -> "576" 
-  "586" -> "595" 
-  "591" -> "585" 
-  "600" -> "598" 
-  "615" -> "634" 
-  "632" -> "631" 
-  "532" -> "531" 
-  "536" -> "543" 
-  "543" -> "637" 
-  "581" -> "580" 
-  "588" -> "586" 
-  "592" -> "591" 
-  "601" -> "607" 
-  "604" -> "611" 
-  "608" -> "600" 
-  "617" -> "615" 
-  "634" -> "632" 
-  "537" -> "536" 
-  "582" -> "581" 
-  "590" -> "588" 
-  "593" -> "596" 
-  "596" -> "592" 
-  "603" -> "601" 
-  "605" -> "604" 
-  "609" -> "608" 
-  "618" -> "624" 
-  "621" -> "628" 
-  "625" -> "617" 
-  "538" -> "540" 
-  "540" -> "537" 
-  "584" -> "582" 
-  "595" -> "593" 
-  "607" -> "605" 
-  "611" -> "609" 
-  "620" -> "618" 
-  "622" -> "621" 
-  "626" -> "625" 
-  "624" -> "622" 
-  "628" -> "626" 
-  "523" -> "527" 
+digraph "ToReflectedField" {  
+"681" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>402</SUB>> ]
+"700" [label = <(soa,soa(env))<SUB>403</SUB>> ]
+"703" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>404</SUB>> ]
+"710" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>405</SUB>> ]
+"705" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>404</SUB>> ]
+"711" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>405</SUB>> ]
+"706" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>404</SUB>> ]
+"712" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>405</SUB>> ]
+"717" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>406</SUB>> ]
+"685" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>402</SUB>> ]
+"708" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>404</SUB>> ]
+"713" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>405</SUB>> ]
+"718" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>406</SUB>> ]
+"725" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>406</SUB>> ]
+"686" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>402</SUB>> ]
+"690" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>402</SUB>> ]
+"697" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>402</SUB>> ]
+"715" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>405</SUB>> ]
+"719" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>406</SUB>> ]
+"726" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>406</SUB>> ]
+"691" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>402</SUB>> ]
+"720" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>406</SUB>> ]
+"723" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>406</SUB>> ]
+"727" [label = <(Self,soa.Self())<SUB>406</SUB>> ]
+"692" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>402</SUB>> ]
+"694" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>402</SUB>> ]
+"728" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>406</SUB>> ]
+"730" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>406</SUB>> ]
+"675" [label = <(METHOD,ToReflectedField)<SUB>401</SUB>> ]
+"733" [label = <(METHOD_RETURN,jobject)<SUB>401</SUB>> ]
+  "681" -> "686" 
+  "681" -> "700" 
+  "700" -> "708" 
+  "703" -> "715" 
+  "710" -> "733" 
+  "705" -> "703" 
+  "711" -> "710" 
+  "706" -> "705" 
+  "712" -> "720" 
+  "717" -> "711" 
+  "685" -> "692" 
+  "685" -> "700" 
+  "708" -> "706" 
+  "713" -> "712" 
+  "718" -> "730" 
+  "725" -> "717" 
+  "686" -> "685" 
+  "690" -> "697" 
+  "697" -> "733" 
+  "715" -> "713" 
+  "719" -> "718" 
+  "726" -> "725" 
+  "691" -> "690" 
+  "720" -> "723" 
+  "723" -> "719" 
+  "727" -> "726" 
+  "692" -> "694" 
+  "694" -> "691" 
+  "728" -> "727" 
+  "730" -> "728" 
+  "675" -> "681" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/200-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/200-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/200-cfg.dot	2023-06-07 19:35:14.797385844 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/200-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,185 @@
-digraph "NewIntArray" {  
-"11228" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2032</SUB>> ]
-"11229" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2032</SUB>> ]
-"11224" [label = <(METHOD,NewIntArray)<SUB>2031</SUB>> ]
-"11232" [label = <(METHOD_RETURN,jintArray)<SUB>2031</SUB>> ]
-  "11228" -> "11232" 
-  "11229" -> "11228" 
-  "11224" -> "11229" 
+digraph "GetPrimitiveArrayCritical" {  
+"11175" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1951</SUB>> ]
+"11194" [label = <(soa,soa(env))<SUB>1952</SUB>> ]
+"11196" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1953</SUB>> ]
+"11246" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1959</SUB>> ]
+"11304" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>1974</SUB>> ]
+"11197" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>1953</SUB>> ]
+"11204" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1953</SUB>> ]
+"11214" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>1954</SUB>> ]
+"11248" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1959</SUB>> ]
+"11256" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>1960</SUB>> ]
+"11296" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1971</SUB>> ]
+"11305" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>1974</SUB>> ]
+"11198" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>1953</SUB>> ]
+"11205" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>1953</SUB>> ]
+"11215" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>1954</SUB>> ]
+"11224" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>1955</SUB>> ]
+"11243" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1957</SUB>> ]
+"11249" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1959</SUB>> ]
+"11257" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1960</SUB>> ]
+"11284" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1969</SUB>> ]
+"11300" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1972</SUB>> ]
+"11306" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>1974</SUB>> ]
+"11309" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>1974</SUB>> ]
+"11179" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1951</SUB>> ]
+"11200" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1953</SUB>> ]
+"11206" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1953</SUB>> ]
+"11209" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1953</SUB>> ]
+"11216" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>1954</SUB>> ]
+"11225" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1955</SUB>> ]
+"11233" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>1956</SUB>> ]
+"11250" [label = <(Runtime::Current,Runtime::Current())<SUB>1959</SUB>> ]
+"11254" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1959</SUB>> ]
+"11259" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1960</SUB>> ]
+"11263" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1961</SUB>> ]
+"11286" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1969</SUB>> ]
+"11301" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1972</SUB>> ]
+"11308" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>1974</SUB>> ]
+"11310" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>1974</SUB>> ]
+"11180" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1951</SUB>> ]
+"11184" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1951</SUB>> ]
+"11191" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1951</SUB>> ]
+"11202" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1953</SUB>> ]
+"11208" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1953</SUB>> ]
+"11211" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1953</SUB>> ]
+"11217" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>1954</SUB>> ]
+"11226" [label = <(Vm,soa.Vm())<SUB>1955</SUB>> ]
+"11230" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1955</SUB>> ]
+"11234" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>1956</SUB>> ]
+"11251" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1959</SUB>> ]
+"11266" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>1962</SUB>> ]
+"11287" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>1969</SUB>> ]
+"11311" [label = <(GetClass,array-&gt;GetClass())<SUB>1974</SUB>> ]
+"11315" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>1974</SUB>> ]
+"11185" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1951</SUB>> ]
+"11218" [label = <(GetClass,array-&gt;GetClass())<SUB>1954</SUB>> ]
+"11222" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>1954</SUB>> ]
+"11227" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1955</SUB>> ]
+"11235" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>1956</SUB>> ]
+"11242" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1956</SUB>> ]
+"11253" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1959</SUB>> ]
+"11267" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>1962</SUB>> ]
+"11270" [label = <(Self,soa.Self())<SUB>1962</SUB>> ]
+"11276" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>1966</SUB>> ]
+"11288" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1969</SUB>> ]
+"11291" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1969</SUB>> ]
+"11312" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1974</SUB>> ]
+"11186" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1951</SUB>> ]
+"11188" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1951</SUB>> ]
+"11219" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1954</SUB>> ]
+"11229" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1955</SUB>> ]
+"11236" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>1956</SUB>> ]
+"11269" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>1962</SUB>> ]
+"11271" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1962</SUB>> ]
+"11277" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>1966</SUB>> ]
+"11280" [label = <(Self,soa.Self())<SUB>1966</SUB>> ]
+"11290" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1969</SUB>> ]
+"11293" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1969</SUB>> ]
+"11314" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1974</SUB>> ]
+"11221" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1954</SUB>> ]
+"11237" [label = <(GetClass,array-&gt;GetClass())<SUB>1956</SUB>> ]
+"11241" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>1956</SUB>> ]
+"11273" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1962</SUB>> ]
+"11279" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>1966</SUB>> ]
+"11281" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1966</SUB>> ]
+"11238" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1956</SUB>> ]
+"11283" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1966</SUB>> ]
+"11240" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1956</SUB>> ]
+"11170" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>1950</SUB>> ]
+"11317" [label = <(METHOD_RETURN,void*)<SUB>1950</SUB>> ]
+  "11175" -> "11180" 
+  "11175" -> "11194" 
+  "11194" -> "11202" 
+  "11196" -> "11221" 
+  "11246" -> "11259" 
+  "11304" -> "11317" 
+  "11197" -> "11208" 
+  "11204" -> "11196" 
+  "11214" -> "11229" 
+  "11214" -> "11253" 
+  "11248" -> "11246" 
+  "11256" -> "11263" 
+  "11256" -> "11296" 
+  "11296" -> "11301" 
+  "11296" -> "11308" 
+  "11305" -> "11304" 
+  "11198" -> "11197" 
+  "11205" -> "11204" 
+  "11215" -> "11214" 
+  "11224" -> "11243" 
+  "11243" -> "11317" 
+  "11249" -> "11248" 
+  "11257" -> "11256" 
+  "11284" -> "11296" 
+  "11300" -> "11308" 
+  "11306" -> "11314" 
+  "11309" -> "11305" 
+  "11179" -> "11186" 
+  "11179" -> "11194" 
+  "11200" -> "11198" 
+  "11206" -> "11211" 
+  "11209" -> "11205" 
+  "11216" -> "11215" 
+  "11225" -> "11240" 
+  "11233" -> "11224" 
+  "11250" -> "11254" 
+  "11254" -> "11249" 
+  "11259" -> "11257" 
+  "11263" -> "11269" 
+  "11263" -> "11279" 
+  "11286" -> "11284" 
+  "11301" -> "11300" 
+  "11308" -> "11306" 
+  "11310" -> "11309" 
+  "11180" -> "11179" 
+  "11184" -> "11191" 
+  "11191" -> "11317" 
+  "11202" -> "11200" 
+  "11208" -> "11206" 
+  "11211" -> "11209" 
+  "11217" -> "11216" 
+  "11226" -> "11230" 
+  "11230" -> "11225" 
+  "11234" -> "11233" 
+  "11251" -> "11250" 
+  "11266" -> "11290" 
+  "11287" -> "11286" 
+  "11311" -> "11315" 
+  "11315" -> "11310" 
+  "11185" -> "11184" 
+  "11218" -> "11222" 
+  "11222" -> "11217" 
+  "11227" -> "11226" 
+  "11235" -> "11242" 
+  "11242" -> "11234" 
+  "11253" -> "11251" 
+  "11267" -> "11273" 
+  "11270" -> "11266" 
+  "11276" -> "11290" 
+  "11288" -> "11293" 
+  "11291" -> "11287" 
+  "11312" -> "11311" 
+  "11186" -> "11188" 
+  "11188" -> "11185" 
+  "11219" -> "11218" 
+  "11229" -> "11227" 
+  "11236" -> "11235" 
+  "11269" -> "11267" 
+  "11271" -> "11270" 
+  "11277" -> "11283" 
+  "11280" -> "11276" 
+  "11290" -> "11288" 
+  "11293" -> "11291" 
+  "11314" -> "11312" 
+  "11221" -> "11219" 
+  "11237" -> "11241" 
+  "11241" -> "11236" 
+  "11273" -> "11271" 
+  "11279" -> "11277" 
+  "11281" -> "11280" 
+  "11238" -> "11237" 
+  "11283" -> "11281" 
+  "11240" -> "11238" 
+  "11170" -> "11175" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/201-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/201-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/201-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/201-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,118 @@
-digraph "NewLongArray" {  
-"11238" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2036</SUB>> ]
-"11239" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2036</SUB>> ]
-"11234" [label = <(METHOD,NewLongArray)<SUB>2035</SUB>> ]
-"11242" [label = <(METHOD_RETURN,jlongArray)<SUB>2035</SUB>> ]
-  "11238" -> "11242" 
-  "11239" -> "11238" 
-  "11234" -> "11239" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"11325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1979</SUB>> ]
+"11343" [label = <(soa,soa(env))<SUB>1980</SUB>> ]
+"11345" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1981</SUB>> ]
+"11394" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>1987</SUB>> ]
+"11403" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array.Ptr(), component_size, elements, mode))<SUB>1988</SUB>> ]
+"11346" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>1981</SUB>> ]
+"11353" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>1981</SUB>> ]
+"11363" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>1982</SUB>> ]
+"11396" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>1987</SUB>> ]
+"11405" [label = <(Ptr,array.Ptr())<SUB>1988</SUB>> ]
+"11347" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>1981</SUB>> ]
+"11354" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>1981</SUB>> ]
+"11364" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>1982</SUB>> ]
+"11373" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>1983</SUB>> ]
+"11392" [label = <(RETURN,return;,return;)<SUB>1985</SUB>> ]
+"11397" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>1987</SUB>> ]
+"11406" [label = <(&lt;operator&gt;.fieldAccess,array.Ptr)<SUB>1988</SUB>> ]
+"11329" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1979</SUB>> ]
+"11349" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1981</SUB>> ]
+"11355" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1981</SUB>> ]
+"11358" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1981</SUB>> ]
+"11365" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>1982</SUB>> ]
+"11374" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1983</SUB>> ]
+"11382" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>1984</SUB>> ]
+"11398" [label = <(GetClass,array-&gt;GetClass())<SUB>1987</SUB>> ]
+"11402" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>1987</SUB>> ]
+"11408" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>1988</SUB>> ]
+"11330" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1979</SUB>> ]
+"11334" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1979</SUB>> ]
+"11341" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1979</SUB>> ]
+"11351" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1981</SUB>> ]
+"11357" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1981</SUB>> ]
+"11360" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1981</SUB>> ]
+"11366" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>1982</SUB>> ]
+"11375" [label = <(Vm,soa.Vm())<SUB>1983</SUB>> ]
+"11379" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1983</SUB>> ]
+"11383" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>1984</SUB>> ]
+"11399" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1987</SUB>> ]
+"11335" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1979</SUB>> ]
+"11367" [label = <(GetClass,array-&gt;GetClass())<SUB>1982</SUB>> ]
+"11371" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>1982</SUB>> ]
+"11376" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1983</SUB>> ]
+"11384" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>1984</SUB>> ]
+"11391" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1984</SUB>> ]
+"11401" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1987</SUB>> ]
+"11336" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1979</SUB>> ]
+"11338" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1979</SUB>> ]
+"11368" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1982</SUB>> ]
+"11378" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1983</SUB>> ]
+"11385" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>1984</SUB>> ]
+"11370" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1982</SUB>> ]
+"11386" [label = <(GetClass,array-&gt;GetClass())<SUB>1984</SUB>> ]
+"11390" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>1984</SUB>> ]
+"11387" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>1984</SUB>> ]
+"11389" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>1984</SUB>> ]
+"11319" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>1977</SUB>> ]
+"11412" [label = <(METHOD_RETURN,void)<SUB>1977</SUB>> ]
+  "11325" -> "11330" 
+  "11325" -> "11343" 
+  "11343" -> "11351" 
+  "11345" -> "11370" 
+  "11394" -> "11408" 
+  "11403" -> "11412" 
+  "11346" -> "11357" 
+  "11353" -> "11345" 
+  "11363" -> "11378" 
+  "11363" -> "11401" 
+  "11396" -> "11394" 
+  "11405" -> "11403" 
+  "11347" -> "11346" 
+  "11354" -> "11353" 
+  "11364" -> "11363" 
+  "11373" -> "11392" 
+  "11392" -> "11412" 
+  "11397" -> "11396" 
+  "11406" -> "11405" 
+  "11329" -> "11336" 
+  "11329" -> "11343" 
+  "11349" -> "11347" 
+  "11355" -> "11360" 
+  "11358" -> "11354" 
+  "11365" -> "11364" 
+  "11374" -> "11389" 
+  "11382" -> "11373" 
+  "11398" -> "11402" 
+  "11402" -> "11397" 
+  "11408" -> "11406" 
+  "11330" -> "11329" 
+  "11334" -> "11341" 
+  "11341" -> "11412" 
+  "11351" -> "11349" 
+  "11357" -> "11355" 
+  "11360" -> "11358" 
+  "11366" -> "11365" 
+  "11375" -> "11379" 
+  "11379" -> "11374" 
+  "11383" -> "11382" 
+  "11399" -> "11398" 
+  "11335" -> "11334" 
+  "11367" -> "11371" 
+  "11371" -> "11366" 
+  "11376" -> "11375" 
+  "11384" -> "11391" 
+  "11391" -> "11383" 
+  "11401" -> "11399" 
+  "11336" -> "11338" 
+  "11338" -> "11335" 
+  "11368" -> "11367" 
+  "11378" -> "11376" 
+  "11385" -> "11384" 
+  "11370" -> "11368" 
+  "11386" -> "11390" 
+  "11390" -> "11385" 
+  "11387" -> "11386" 
+  "11389" -> "11387" 
+  "11319" -> "11325" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/202-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/202-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/202-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/202-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,333 +1,9 @@
-digraph "NewObjectArray" {  
-"11266" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2045</SUB>> ]
-"11285" [label = <(soa,soa(env))<SUB>2048</SUB>> ]
-"11287" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2049</SUB>> ]
-"11370" [label = <(&lt;operator&gt;.assignment,mirror::ObjectArray&lt;mirror::Object&gt;* result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2066</SUB>> ]
-"11510" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2085</SUB>> ]
-"11251" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2041</SUB>> ]
-"11288" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2049</SUB>> ]
-"11295" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2051</SUB>> ]
-"11341" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2058</SUB>> ]
-"11350" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2059</SUB>> ]
-"11371" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;* result)<SUB>2066</SUB>> ]
-"11381" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2067</SUB>> ]
-"11400" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2068</SUB>> ]
-"11511" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2085</SUB>> ]
-"11252" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2041</SUB>> ]
-"11256" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2042</SUB>> ]
-"11264" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2043</SUB>> ]
-"11290" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2049</SUB>> ]
-"11296" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2051</SUB>> ]
-"11303" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2051</SUB>> ]
-"11316" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2052</SUB>> ]
-"11343" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2058</SUB>> ]
-"11352" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2059</SUB>> ]
-"11363" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2060</SUB>> ]
-"11372" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2066</SUB>> ]
-"11379" [label = <(&lt;operator&gt;.indirection,* result)<SUB>2066</SUB>> ]
-"11382" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2067</SUB>> ]
-"11389" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2067</SUB>> ]
-"11401" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2068</SUB>> ]
-"11404" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2068</SUB>> ]
-"11408" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2069</SUB>> ]
-"11512" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2085</SUB>> ]
-"11257" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2042</SUB>> ]
-"11270" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2045</SUB>> ]
-"11292" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2049</SUB>> ]
-"11297" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2051</SUB>> ]
-"11304" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2051</SUB>> ]
-"11311" [label = <(Ptr,(element_jclass).Ptr())<SUB>2051</SUB>> ]
-"11317" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2052</SUB>> ]
-"11322" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2053</SUB>> ]
-"11338" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2056</SUB>> ]
-"11344" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2058</SUB>> ]
-"11353" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2059</SUB>> ]
-"11356" [label = <(Self,soa.Self())<SUB>2059</SUB>> ]
-"11360" [label = <(&lt;operator&gt;.addressOf,&amp;element_class)<SUB>2059</SUB>> ]
-"11364" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2060</SUB>> ]
-"11368" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2061</SUB>> ]
-"11373" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2066</SUB>> ]
-"11376" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2066</SUB>> ]
-"11383" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2067</SUB>> ]
-"11386" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2067</SUB>> ]
-"11390" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2067</SUB>> ]
-"11393" [label = <(Self,soa.Self())<SUB>2067</SUB>> ]
-"11409" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2069</SUB>> ]
-"11416" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2069</SUB>> ]
-"11426" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2070</SUB>> ]
-"11513" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2085</SUB>> ]
-"11258" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2042</SUB>> ]
-"11260" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2042</SUB>> ]
-"11271" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2045</SUB>> ]
-"11275" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2045</SUB>> ]
-"11282" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2045</SUB>> ]
-"11299" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2051</SUB>> ]
-"11305" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2051</SUB>> ]
-"11308" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2051</SUB>> ]
-"11312" [label = <(&lt;operator&gt;.fieldAccess,(element_jclass).Ptr)<SUB>2051</SUB>> ]
-"11318" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2052</SUB>> ]
-"11323" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2053</SUB>> ]
-"11331" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2055</SUB>> ]
-"11345" [label = <(Runtime::Current,Runtime::Current())<SUB>2058</SUB>> ]
-"11349" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2058</SUB>> ]
-"11355" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2059</SUB>> ]
-"11357" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2059</SUB>> ]
-"11375" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2066</SUB>> ]
-"11378" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2066</SUB>> ]
-"11385" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2067</SUB>> ]
-"11388" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2067</SUB>> ]
-"11392" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2067</SUB>> ]
-"11394" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2067</SUB>> ]
-"11410" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2069</SUB>> ]
-"11417" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2069</SUB>> ]
-"11431" [label = <(&lt;operator&gt;.assignment,* element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2071</SUB>> ]
-"11515" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2085</SUB>> ]
-"11276" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2045</SUB>> ]
-"11301" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2051</SUB>> ]
-"11307" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2051</SUB>> ]
-"11310" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2051</SUB>> ]
-"11314" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2051</SUB>> ]
-"11320" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2052</SUB>> ]
-"11324" [label = <(Vm,soa.Vm())<SUB>2053</SUB>> ]
-"11328" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2053</SUB>> ]
-"11332" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2055</SUB>> ]
-"11346" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2058</SUB>> ]
-"11359" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2059</SUB>> ]
-"11396" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2067</SUB>> ]
-"11412" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2069</SUB>> ]
-"11418" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2069</SUB>> ]
-"11421" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2069</SUB>> ]
-"11433" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2071</SUB>> ]
-"11441" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2072</SUB>> ]
-"11277" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2045</SUB>> ]
-"11279" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2045</SUB>> ]
-"11325" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2053</SUB>> ]
-"11333" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2055</SUB>> ]
-"11337" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2055</SUB>> ]
-"11348" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2058</SUB>> ]
-"11414" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2069</SUB>> ]
-"11420" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2069</SUB>> ]
-"11423" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2069</SUB>> ]
-"11434" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2071</SUB>> ]
-"11442" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2072</SUB>> ]
-"11452" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2073</SUB>> ]
-"11481" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2077</SUB>> ]
-"11327" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2053</SUB>> ]
-"11334" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2055</SUB>> ]
-"11435" [label = <(GetClass,result-&gt;GetClass())<SUB>2071</SUB>> ]
-"11439" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2071</SUB>> ]
-"11443" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2072</SUB>> ]
-"11453" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2073</SUB>> ]
-"11461" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2075</SUB>> ]
-"11474" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2076</SUB>> ]
-"11336" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2055</SUB>> ]
-"11436" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2071</SUB>> ]
-"11444" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2072</SUB>> ]
-"11447" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2072</SUB>> ]
-"11454" [label = <(Vm,soa.Vm())<SUB>2073</SUB>> ]
-"11458" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2073</SUB>> ]
-"11462" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2075</SUB>> ]
-"11475" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2076</SUB>> ]
-"11491" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2079</SUB>> ]
-"11494" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2079</SUB>> ]
-"11438" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2071</SUB>> ]
-"11446" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2072</SUB>> ]
-"11448" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2072</SUB>> ]
-"11455" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2073</SUB>> ]
-"11463" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2075</SUB>> ]
-"11473" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2075</SUB>> ]
-"11476" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2076</SUB>> ]
-"11480" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2076</SUB>> ]
-"11488" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2079</SUB>> ]
-"11497" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object.Ptr()))<SUB>2080</SUB>> ]
-"11450" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2072</SUB>> ]
-"11457" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2073</SUB>> ]
-"11464" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2075</SUB>> ]
-"11469" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2075</SUB>> ]
-"11477" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2076</SUB>> ]
-"11498" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2080</SUB>> ]
-"11503" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object.Ptr()))<SUB>2080</SUB>> ]
-"11465" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2075</SUB>> ]
-"11468" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2075</SUB>> ]
-"11470" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2075</SUB>> ]
-"11479" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2076</SUB>> ]
-"11499" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2080</SUB>> ]
-"11504" [label = <(&lt;operator&gt;.expressionList,i, initial_object.Ptr())<SUB>2080</SUB>> ]
-"11472" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2075</SUB>> ]
-"11501" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2080</SUB>> ]
-"11506" [label = <(Ptr,initial_object.Ptr())<SUB>2080</SUB>> ]
-"11507" [label = <(&lt;operator&gt;.fieldAccess,initial_object.Ptr)<SUB>2080</SUB>> ]
-"11509" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2080</SUB>> ]
-"11244" [label = <(METHOD,NewObjectArray)<SUB>2039</SUB>> ]
-"11518" [label = <(METHOD_RETURN,jobjectArray)<SUB>2039</SUB>> ]
-  "11266" -> "11271" 
-  "11266" -> "11285" 
-  "11285" -> "11292" 
-  "11287" -> "11301" 
-  "11370" -> "11401" 
-  "11510" -> "11518" 
-  "11251" -> "11258" 
-  "11251" -> "11266" 
-  "11288" -> "11287" 
-  "11295" -> "11320" 
-  "11341" -> "11355" 
-  "11350" -> "11364" 
-  "11371" -> "11385" 
-  "11381" -> "11370" 
-  "11400" -> "11414" 
-  "11400" -> "11515" 
-  "11511" -> "11510" 
-  "11252" -> "11251" 
-  "11256" -> "11264" 
-  "11264" -> "11518" 
-  "11290" -> "11288" 
-  "11296" -> "11307" 
-  "11303" -> "11295" 
-  "11316" -> "11327" 
-  "11316" -> "11348" 
-  "11343" -> "11341" 
-  "11352" -> "11350" 
-  "11363" -> "11368" 
-  "11363" -> "11375" 
-  "11372" -> "11379" 
-  "11379" -> "11371" 
-  "11382" -> "11392" 
-  "11389" -> "11381" 
-  "11401" -> "11400" 
-  "11401" -> "11404" 
-  "11404" -> "11400" 
-  "11408" -> "11426" 
-  "11512" -> "11511" 
-  "11257" -> "11256" 
-  "11270" -> "11277" 
-  "11270" -> "11285" 
-  "11292" -> "11290" 
-  "11297" -> "11296" 
-  "11304" -> "11314" 
-  "11311" -> "11303" 
-  "11317" -> "11316" 
-  "11322" -> "11338" 
-  "11338" -> "11518" 
-  "11344" -> "11343" 
-  "11353" -> "11359" 
-  "11356" -> "11360" 
-  "11360" -> "11352" 
-  "11364" -> "11363" 
-  "11368" -> "11518" 
-  "11373" -> "11378" 
-  "11376" -> "11372" 
-  "11383" -> "11388" 
-  "11386" -> "11382" 
-  "11390" -> "11396" 
-  "11393" -> "11389" 
-  "11409" -> "11420" 
-  "11416" -> "11408" 
-  "11426" -> "11438" 
-  "11426" -> "11515" 
-  "11513" -> "11512" 
-  "11258" -> "11260" 
-  "11260" -> "11257" 
-  "11271" -> "11270" 
-  "11275" -> "11282" 
-  "11282" -> "11518" 
-  "11299" -> "11297" 
-  "11305" -> "11310" 
-  "11308" -> "11304" 
-  "11312" -> "11311" 
-  "11318" -> "11317" 
-  "11323" -> "11336" 
-  "11331" -> "11322" 
-  "11345" -> "11349" 
-  "11349" -> "11344" 
-  "11355" -> "11353" 
-  "11357" -> "11356" 
-  "11375" -> "11373" 
-  "11378" -> "11376" 
-  "11385" -> "11383" 
-  "11388" -> "11386" 
-  "11392" -> "11390" 
-  "11394" -> "11393" 
-  "11410" -> "11409" 
-  "11417" -> "11416" 
-  "11431" -> "11446" 
-  "11515" -> "11513" 
-  "11276" -> "11275" 
-  "11301" -> "11299" 
-  "11307" -> "11305" 
-  "11310" -> "11308" 
-  "11314" -> "11312" 
-  "11320" -> "11318" 
-  "11324" -> "11328" 
-  "11328" -> "11323" 
-  "11332" -> "11331" 
-  "11346" -> "11345" 
-  "11359" -> "11357" 
-  "11396" -> "11394" 
-  "11412" -> "11410" 
-  "11418" -> "11423" 
-  "11421" -> "11417" 
-  "11433" -> "11431" 
-  "11441" -> "11457" 
-  "11441" -> "11488" 
-  "11277" -> "11279" 
-  "11279" -> "11276" 
-  "11325" -> "11324" 
-  "11333" -> "11337" 
-  "11337" -> "11332" 
-  "11348" -> "11346" 
-  "11414" -> "11412" 
-  "11420" -> "11418" 
-  "11423" -> "11421" 
-  "11434" -> "11433" 
-  "11442" -> "11441" 
-  "11452" -> "11481" 
-  "11481" -> "11518" 
-  "11327" -> "11325" 
-  "11334" -> "11333" 
-  "11435" -> "11439" 
-  "11439" -> "11434" 
-  "11443" -> "11442" 
-  "11453" -> "11465" 
-  "11461" -> "11479" 
-  "11474" -> "11452" 
-  "11336" -> "11334" 
-  "11436" -> "11435" 
-  "11444" -> "11450" 
-  "11447" -> "11443" 
-  "11454" -> "11458" 
-  "11458" -> "11453" 
-  "11462" -> "11461" 
-  "11475" -> "11474" 
-  "11491" -> "11501" 
-  "11491" -> "11515" 
-  "11494" -> "11491" 
-  "11438" -> "11436" 
-  "11446" -> "11444" 
-  "11448" -> "11447" 
-  "11455" -> "11454" 
-  "11463" -> "11473" 
-  "11473" -> "11462" 
-  "11476" -> "11480" 
-  "11480" -> "11475" 
-  "11488" -> "11491" 
-  "11497" -> "11494" 
-  "11450" -> "11448" 
-  "11457" -> "11455" 
-  "11464" -> "11472" 
-  "11469" -> "11463" 
-  "11477" -> "11476" 
-  "11498" -> "11509" 
-  "11503" -> "11497" 
-  "11465" -> "11468" 
-  "11468" -> "11464" 
-  "11470" -> "11469" 
-  "11479" -> "11477" 
-  "11499" -> "11498" 
-  "11504" -> "11503" 
-  "11472" -> "11470" 
-  "11501" -> "11499" 
-  "11506" -> "11504" 
-  "11507" -> "11506" 
-  "11509" -> "11507" 
-  "11244" -> "11252" 
+digraph "GetBooleanArrayElements" {  
+"11419" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>1992</SUB>> ]
+"11420" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>1992</SUB>> ]
+"11414" [label = <(METHOD,GetBooleanArrayElements)<SUB>1991</SUB>> ]
+"11424" [label = <(METHOD_RETURN,jboolean)<SUB>1991</SUB>> ]
+  "11419" -> "11424" 
+  "11420" -> "11419" 
+  "11414" -> "11420" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/203-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/203-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/203-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/203-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "NewShortArray" {  
-"11524" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2089</SUB>> ]
-"11525" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2089</SUB>> ]
-"11520" [label = <(METHOD,NewShortArray)<SUB>2088</SUB>> ]
-"11528" [label = <(METHOD_RETURN,jshortArray)<SUB>2088</SUB>> ]
-  "11524" -> "11528" 
-  "11525" -> "11524" 
-  "11520" -> "11525" 
+digraph "GetByteArrayElements" {  
+"11431" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>1996</SUB>> ]
+"11432" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>1996</SUB>> ]
+"11426" [label = <(METHOD,GetByteArrayElements)<SUB>1995</SUB>> ]
+"11436" [label = <(METHOD_RETURN,jbyte)<SUB>1995</SUB>> ]
+  "11431" -> "11436" 
+  "11432" -> "11431" 
+  "11426" -> "11432" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/204-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/204-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/204-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/204-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,185 +1,9 @@
-digraph "GetPrimitiveArrayCritical" {  
-"11535" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2093</SUB>> ]
-"11554" [label = <(soa,soa(env))<SUB>2094</SUB>> ]
-"11556" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2095</SUB>> ]
-"11606" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2101</SUB>> ]
-"11664" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2116</SUB>> ]
-"11557" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2095</SUB>> ]
-"11564" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2095</SUB>> ]
-"11574" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2096</SUB>> ]
-"11608" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2101</SUB>> ]
-"11616" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2102</SUB>> ]
-"11656" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2113</SUB>> ]
-"11665" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2116</SUB>> ]
-"11558" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2095</SUB>> ]
-"11565" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2095</SUB>> ]
-"11575" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2096</SUB>> ]
-"11584" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2097</SUB>> ]
-"11603" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2099</SUB>> ]
-"11609" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2101</SUB>> ]
-"11617" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2102</SUB>> ]
-"11644" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2111</SUB>> ]
-"11660" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2114</SUB>> ]
-"11666" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2116</SUB>> ]
-"11669" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2116</SUB>> ]
-"11539" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2093</SUB>> ]
-"11560" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2095</SUB>> ]
-"11566" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2095</SUB>> ]
-"11569" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2095</SUB>> ]
-"11576" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2096</SUB>> ]
-"11585" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2097</SUB>> ]
-"11593" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2098</SUB>> ]
-"11610" [label = <(Runtime::Current,Runtime::Current())<SUB>2101</SUB>> ]
-"11614" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2101</SUB>> ]
-"11619" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2102</SUB>> ]
-"11623" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2103</SUB>> ]
-"11646" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2111</SUB>> ]
-"11661" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2114</SUB>> ]
-"11668" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2116</SUB>> ]
-"11670" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2116</SUB>> ]
-"11540" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2093</SUB>> ]
-"11544" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2093</SUB>> ]
-"11551" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2093</SUB>> ]
-"11562" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2095</SUB>> ]
-"11568" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2095</SUB>> ]
-"11571" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2095</SUB>> ]
-"11577" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2096</SUB>> ]
-"11586" [label = <(Vm,soa.Vm())<SUB>2097</SUB>> ]
-"11590" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2097</SUB>> ]
-"11594" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2098</SUB>> ]
-"11611" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2101</SUB>> ]
-"11626" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2104</SUB>> ]
-"11647" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2111</SUB>> ]
-"11671" [label = <(GetClass,array-&gt;GetClass())<SUB>2116</SUB>> ]
-"11675" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2116</SUB>> ]
-"11545" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2093</SUB>> ]
-"11578" [label = <(GetClass,array-&gt;GetClass())<SUB>2096</SUB>> ]
-"11582" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2096</SUB>> ]
-"11587" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2097</SUB>> ]
-"11595" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2098</SUB>> ]
-"11602" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2098</SUB>> ]
-"11613" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2101</SUB>> ]
-"11627" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2104</SUB>> ]
-"11630" [label = <(Self,soa.Self())<SUB>2104</SUB>> ]
-"11636" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2108</SUB>> ]
-"11648" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2111</SUB>> ]
-"11651" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2111</SUB>> ]
-"11672" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2116</SUB>> ]
-"11546" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2093</SUB>> ]
-"11548" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2093</SUB>> ]
-"11579" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2096</SUB>> ]
-"11589" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2097</SUB>> ]
-"11596" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2098</SUB>> ]
-"11629" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2104</SUB>> ]
-"11631" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2104</SUB>> ]
-"11637" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2108</SUB>> ]
-"11640" [label = <(Self,soa.Self())<SUB>2108</SUB>> ]
-"11650" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2111</SUB>> ]
-"11653" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2111</SUB>> ]
-"11674" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2116</SUB>> ]
-"11581" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2096</SUB>> ]
-"11597" [label = <(GetClass,array-&gt;GetClass())<SUB>2098</SUB>> ]
-"11601" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2098</SUB>> ]
-"11633" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2104</SUB>> ]
-"11639" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2108</SUB>> ]
-"11641" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2108</SUB>> ]
-"11598" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2098</SUB>> ]
-"11643" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2108</SUB>> ]
-"11600" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2098</SUB>> ]
-"11530" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2092</SUB>> ]
-"11677" [label = <(METHOD_RETURN,void*)<SUB>2092</SUB>> ]
-  "11535" -> "11540" 
-  "11535" -> "11554" 
-  "11554" -> "11562" 
-  "11556" -> "11581" 
-  "11606" -> "11619" 
-  "11664" -> "11677" 
-  "11557" -> "11568" 
-  "11564" -> "11556" 
-  "11574" -> "11589" 
-  "11574" -> "11613" 
-  "11608" -> "11606" 
-  "11616" -> "11623" 
-  "11616" -> "11656" 
-  "11656" -> "11661" 
-  "11656" -> "11668" 
-  "11665" -> "11664" 
-  "11558" -> "11557" 
-  "11565" -> "11564" 
-  "11575" -> "11574" 
-  "11584" -> "11603" 
-  "11603" -> "11677" 
-  "11609" -> "11608" 
-  "11617" -> "11616" 
-  "11644" -> "11656" 
-  "11660" -> "11668" 
-  "11666" -> "11674" 
-  "11669" -> "11665" 
-  "11539" -> "11546" 
-  "11539" -> "11554" 
-  "11560" -> "11558" 
-  "11566" -> "11571" 
-  "11569" -> "11565" 
-  "11576" -> "11575" 
-  "11585" -> "11600" 
-  "11593" -> "11584" 
-  "11610" -> "11614" 
-  "11614" -> "11609" 
-  "11619" -> "11617" 
-  "11623" -> "11629" 
-  "11623" -> "11639" 
-  "11646" -> "11644" 
-  "11661" -> "11660" 
-  "11668" -> "11666" 
-  "11670" -> "11669" 
-  "11540" -> "11539" 
-  "11544" -> "11551" 
-  "11551" -> "11677" 
-  "11562" -> "11560" 
-  "11568" -> "11566" 
-  "11571" -> "11569" 
-  "11577" -> "11576" 
-  "11586" -> "11590" 
-  "11590" -> "11585" 
-  "11594" -> "11593" 
-  "11611" -> "11610" 
-  "11626" -> "11650" 
-  "11647" -> "11646" 
-  "11671" -> "11675" 
-  "11675" -> "11670" 
-  "11545" -> "11544" 
-  "11578" -> "11582" 
-  "11582" -> "11577" 
-  "11587" -> "11586" 
-  "11595" -> "11602" 
-  "11602" -> "11594" 
-  "11613" -> "11611" 
-  "11627" -> "11633" 
-  "11630" -> "11626" 
-  "11636" -> "11650" 
-  "11648" -> "11653" 
-  "11651" -> "11647" 
-  "11672" -> "11671" 
-  "11546" -> "11548" 
-  "11548" -> "11545" 
-  "11579" -> "11578" 
-  "11589" -> "11587" 
-  "11596" -> "11595" 
-  "11629" -> "11627" 
-  "11631" -> "11630" 
-  "11637" -> "11643" 
-  "11640" -> "11636" 
-  "11650" -> "11648" 
-  "11653" -> "11651" 
-  "11674" -> "11672" 
-  "11581" -> "11579" 
-  "11597" -> "11601" 
-  "11601" -> "11596" 
-  "11633" -> "11631" 
-  "11639" -> "11637" 
-  "11641" -> "11640" 
-  "11598" -> "11597" 
-  "11643" -> "11641" 
-  "11600" -> "11598" 
-  "11530" -> "11535" 
+digraph "GetCharArrayElements" {  
+"11443" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2000</SUB>> ]
+"11444" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2000</SUB>> ]
+"11438" [label = <(METHOD,GetCharArrayElements)<SUB>1999</SUB>> ]
+"11448" [label = <(METHOD_RETURN,jchar)<SUB>1999</SUB>> ]
+  "11443" -> "11448" 
+  "11444" -> "11443" 
+  "11438" -> "11444" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/205-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/205-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/205-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/205-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,118 +1,9 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"11685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2121</SUB>> ]
-"11703" [label = <(soa,soa(env))<SUB>2122</SUB>> ]
-"11705" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2123</SUB>> ]
-"11754" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2129</SUB>> ]
-"11763" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array.Ptr(), component_size, elements, mode))<SUB>2130</SUB>> ]
-"11706" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2123</SUB>> ]
-"11713" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2123</SUB>> ]
-"11723" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2124</SUB>> ]
-"11756" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2129</SUB>> ]
-"11765" [label = <(Ptr,array.Ptr())<SUB>2130</SUB>> ]
-"11707" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2123</SUB>> ]
-"11714" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2123</SUB>> ]
-"11724" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2124</SUB>> ]
-"11733" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2125</SUB>> ]
-"11752" [label = <(RETURN,return;,return;)<SUB>2127</SUB>> ]
-"11757" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2129</SUB>> ]
-"11766" [label = <(&lt;operator&gt;.fieldAccess,array.Ptr)<SUB>2130</SUB>> ]
-"11689" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2121</SUB>> ]
-"11709" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2123</SUB>> ]
-"11715" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2123</SUB>> ]
-"11718" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2123</SUB>> ]
-"11725" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2124</SUB>> ]
-"11734" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2125</SUB>> ]
-"11742" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2126</SUB>> ]
-"11758" [label = <(GetClass,array-&gt;GetClass())<SUB>2129</SUB>> ]
-"11762" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2129</SUB>> ]
-"11768" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2130</SUB>> ]
-"11690" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2121</SUB>> ]
-"11694" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2121</SUB>> ]
-"11701" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2121</SUB>> ]
-"11711" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2123</SUB>> ]
-"11717" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2123</SUB>> ]
-"11720" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2123</SUB>> ]
-"11726" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2124</SUB>> ]
-"11735" [label = <(Vm,soa.Vm())<SUB>2125</SUB>> ]
-"11739" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2125</SUB>> ]
-"11743" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2126</SUB>> ]
-"11759" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2129</SUB>> ]
-"11695" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2121</SUB>> ]
-"11727" [label = <(GetClass,array-&gt;GetClass())<SUB>2124</SUB>> ]
-"11731" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2124</SUB>> ]
-"11736" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2125</SUB>> ]
-"11744" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2126</SUB>> ]
-"11751" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2126</SUB>> ]
-"11761" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2129</SUB>> ]
-"11696" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2121</SUB>> ]
-"11698" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2121</SUB>> ]
-"11728" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2124</SUB>> ]
-"11738" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2125</SUB>> ]
-"11745" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2126</SUB>> ]
-"11730" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2124</SUB>> ]
-"11746" [label = <(GetClass,array-&gt;GetClass())<SUB>2126</SUB>> ]
-"11750" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2126</SUB>> ]
-"11747" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2126</SUB>> ]
-"11749" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2126</SUB>> ]
-"11679" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2119</SUB>> ]
-"11772" [label = <(METHOD_RETURN,void)<SUB>2119</SUB>> ]
-  "11685" -> "11690" 
-  "11685" -> "11703" 
-  "11703" -> "11711" 
-  "11705" -> "11730" 
-  "11754" -> "11768" 
-  "11763" -> "11772" 
-  "11706" -> "11717" 
-  "11713" -> "11705" 
-  "11723" -> "11738" 
-  "11723" -> "11761" 
-  "11756" -> "11754" 
-  "11765" -> "11763" 
-  "11707" -> "11706" 
-  "11714" -> "11713" 
-  "11724" -> "11723" 
-  "11733" -> "11752" 
-  "11752" -> "11772" 
-  "11757" -> "11756" 
-  "11766" -> "11765" 
-  "11689" -> "11696" 
-  "11689" -> "11703" 
-  "11709" -> "11707" 
-  "11715" -> "11720" 
-  "11718" -> "11714" 
-  "11725" -> "11724" 
-  "11734" -> "11749" 
-  "11742" -> "11733" 
-  "11758" -> "11762" 
-  "11762" -> "11757" 
-  "11768" -> "11766" 
-  "11690" -> "11689" 
-  "11694" -> "11701" 
-  "11701" -> "11772" 
-  "11711" -> "11709" 
-  "11717" -> "11715" 
-  "11720" -> "11718" 
-  "11726" -> "11725" 
-  "11735" -> "11739" 
-  "11739" -> "11734" 
-  "11743" -> "11742" 
-  "11759" -> "11758" 
-  "11695" -> "11694" 
-  "11727" -> "11731" 
-  "11731" -> "11726" 
-  "11736" -> "11735" 
-  "11744" -> "11751" 
-  "11751" -> "11743" 
-  "11761" -> "11759" 
-  "11696" -> "11698" 
-  "11698" -> "11695" 
-  "11728" -> "11727" 
-  "11738" -> "11736" 
-  "11745" -> "11744" 
-  "11730" -> "11728" 
-  "11746" -> "11750" 
-  "11750" -> "11745" 
-  "11747" -> "11746" 
-  "11749" -> "11747" 
-  "11679" -> "11685" 
+digraph "GetDoubleArrayElements" {  
+"11455" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2004</SUB>> ]
+"11456" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2004</SUB>> ]
+"11450" [label = <(METHOD,GetDoubleArrayElements)<SUB>2003</SUB>> ]
+"11460" [label = <(METHOD_RETURN,jdouble)<SUB>2003</SUB>> ]
+  "11455" -> "11460" 
+  "11456" -> "11455" 
+  "11450" -> "11456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/206-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/206-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/206-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/206-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "GetBooleanArrayElements" {  
-"11779" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2134</SUB>> ]
-"11780" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2134</SUB>> ]
-"11774" [label = <(METHOD,GetBooleanArrayElements)<SUB>2133</SUB>> ]
-"11784" [label = <(METHOD_RETURN,jboolean)<SUB>2133</SUB>> ]
-  "11779" -> "11784" 
-  "11780" -> "11779" 
-  "11774" -> "11780" 
+digraph "GetFloatArrayElements" {  
+"11467" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2008</SUB>> ]
+"11468" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2008</SUB>> ]
+"11462" [label = <(METHOD,GetFloatArrayElements)<SUB>2007</SUB>> ]
+"11472" [label = <(METHOD_RETURN,jfloat)<SUB>2007</SUB>> ]
+  "11467" -> "11472" 
+  "11468" -> "11467" 
+  "11462" -> "11468" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/207-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/207-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/207-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/207-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "GetByteArrayElements" {  
-"11791" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2138</SUB>> ]
-"11792" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2138</SUB>> ]
-"11786" [label = <(METHOD,GetByteArrayElements)<SUB>2137</SUB>> ]
-"11796" [label = <(METHOD_RETURN,jbyte)<SUB>2137</SUB>> ]
-  "11791" -> "11796" 
-  "11792" -> "11791" 
-  "11786" -> "11792" 
+digraph "GetIntArrayElements" {  
+"11479" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2012</SUB>> ]
+"11480" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2012</SUB>> ]
+"11474" [label = <(METHOD,GetIntArrayElements)<SUB>2011</SUB>> ]
+"11484" [label = <(METHOD_RETURN,jint)<SUB>2011</SUB>> ]
+  "11479" -> "11484" 
+  "11480" -> "11479" 
+  "11474" -> "11480" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/208-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/208-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/208-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/208-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "GetCharArrayElements" {  
-"11803" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2142</SUB>> ]
-"11804" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2142</SUB>> ]
-"11798" [label = <(METHOD,GetCharArrayElements)<SUB>2141</SUB>> ]
-"11808" [label = <(METHOD_RETURN,jchar)<SUB>2141</SUB>> ]
-  "11803" -> "11808" 
-  "11804" -> "11803" 
-  "11798" -> "11804" 
+digraph "GetLongArrayElements" {  
+"11491" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2016</SUB>> ]
+"11492" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2016</SUB>> ]
+"11486" [label = <(METHOD,GetLongArrayElements)<SUB>2015</SUB>> ]
+"11496" [label = <(METHOD_RETURN,jlong)<SUB>2015</SUB>> ]
+  "11491" -> "11496" 
+  "11492" -> "11491" 
+  "11486" -> "11492" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/209-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/209-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/209-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/209-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,9 @@
-digraph "GetDoubleArrayElements" {  
-"11815" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2146</SUB>> ]
-"11816" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2146</SUB>> ]
-"11810" [label = <(METHOD,GetDoubleArrayElements)<SUB>2145</SUB>> ]
-"11820" [label = <(METHOD_RETURN,jdouble)<SUB>2145</SUB>> ]
-  "11815" -> "11820" 
-  "11816" -> "11815" 
-  "11810" -> "11816" 
+digraph "GetShortArrayElements" {  
+"11503" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2020</SUB>> ]
+"11504" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2020</SUB>> ]
+"11498" [label = <(METHOD,GetShortArrayElements)<SUB>2019</SUB>> ]
+"11508" [label = <(METHOD_RETURN,jshort)<SUB>2019</SUB>> ]
+  "11503" -> "11508" 
+  "11504" -> "11503" 
+  "11498" -> "11504" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/21-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/21-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/21-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/21-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,39 +1,63 @@
-digraph "FromReflectedMethod" {  
-"643" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>450</SUB>> ]
-"662" [label = <(soa,soa(env))<SUB>451</SUB>> ]
-"664" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>452</SUB>> ]
-"665" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>452</SUB>> ]
-"666" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>452</SUB>> ]
-"669" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>452</SUB>> ]
-"647" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>450</SUB>> ]
-"668" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>452</SUB>> ]
-"670" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>452</SUB>> ]
-"648" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>450</SUB>> ]
-"652" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>450</SUB>> ]
-"659" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>450</SUB>> ]
-"672" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>452</SUB>> ]
-"653" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>450</SUB>> ]
-"654" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>450</SUB>> ]
-"656" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>450</SUB>> ]
-"639" [label = <(METHOD,FromReflectedMethod)<SUB>449</SUB>> ]
-"675" [label = <(METHOD_RETURN,jmethodID)<SUB>449</SUB>> ]
-  "643" -> "648" 
-  "643" -> "662" 
-  "662" -> "668" 
-  "664" -> "675" 
-  "665" -> "664" 
-  "666" -> "672" 
-  "669" -> "665" 
-  "647" -> "654" 
-  "647" -> "662" 
-  "668" -> "666" 
-  "670" -> "669" 
-  "648" -> "647" 
-  "652" -> "659" 
-  "659" -> "675" 
-  "672" -> "670" 
-  "653" -> "652" 
-  "654" -> "656" 
-  "656" -> "653" 
-  "639" -> "643" 
+digraph "GetObjectClass" {  
+"739" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>410</SUB>> ]
+"758" [label = <(soa,soa(env))<SUB>411</SUB>> ]
+"760" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>412</SUB>> ]
+"777" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>413</SUB>> ]
+"761" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>412</SUB>> ]
+"768" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>412</SUB>> ]
+"778" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>413</SUB>> ]
+"762" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>412</SUB>> ]
+"769" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>412</SUB>> ]
+"779" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>413</SUB>> ]
+"784" [label = <(GetClass,o-&gt;GetClass())<SUB>413</SUB>> ]
+"743" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>410</SUB>> ]
+"764" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>412</SUB>> ]
+"770" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>412</SUB>> ]
+"773" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>412</SUB>> ]
+"780" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>413</SUB>> ]
+"785" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>413</SUB>> ]
+"744" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>410</SUB>> ]
+"748" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_object == null&quot;))<SUB>410</SUB>> ]
+"755" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>410</SUB>> ]
+"766" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>412</SUB>> ]
+"772" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>412</SUB>> ]
+"775" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>412</SUB>> ]
+"782" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>413</SUB>> ]
+"787" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>413</SUB>> ]
+"749" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>410</SUB>> ]
+"750" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>410</SUB>> ]
+"752" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>410</SUB>> ]
+"735" [label = <(METHOD,GetObjectClass)<SUB>409</SUB>> ]
+"788" [label = <(METHOD_RETURN,jclass)<SUB>409</SUB>> ]
+  "739" -> "744" 
+  "739" -> "758" 
+  "758" -> "766" 
+  "760" -> "782" 
+  "777" -> "788" 
+  "761" -> "772" 
+  "768" -> "760" 
+  "778" -> "777" 
+  "762" -> "761" 
+  "769" -> "768" 
+  "779" -> "787" 
+  "784" -> "778" 
+  "743" -> "750" 
+  "743" -> "758" 
+  "764" -> "762" 
+  "770" -> "775" 
+  "773" -> "769" 
+  "780" -> "779" 
+  "785" -> "784" 
+  "744" -> "743" 
+  "748" -> "755" 
+  "755" -> "788" 
+  "766" -> "764" 
+  "772" -> "770" 
+  "775" -> "773" 
+  "782" -> "780" 
+  "787" -> "785" 
+  "749" -> "748" 
+  "750" -> "752" 
+  "752" -> "749" 
+  "735" -> "739" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/210-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/210-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/210-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/210-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,7 @@
-digraph "GetFloatArrayElements" {  
-"11827" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2150</SUB>> ]
-"11828" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2150</SUB>> ]
-"11822" [label = <(METHOD,GetFloatArrayElements)<SUB>2149</SUB>> ]
-"11832" [label = <(METHOD_RETURN,jfloat)<SUB>2149</SUB>> ]
-  "11827" -> "11832" 
-  "11828" -> "11827" 
-  "11822" -> "11828" 
+digraph "ReleaseBooleanArrayElements" {  
+"11516" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2025</SUB>> ]
+"11510" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2023</SUB>> ]
+"11521" [label = <(METHOD_RETURN,void)<SUB>2023</SUB>> ]
+  "11516" -> "11521" 
+  "11510" -> "11516" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/211-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/211-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/211-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/211-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,7 @@
-digraph "GetIntArrayElements" {  
-"11839" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2154</SUB>> ]
-"11840" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2154</SUB>> ]
-"11834" [label = <(METHOD,GetIntArrayElements)<SUB>2153</SUB>> ]
-"11844" [label = <(METHOD_RETURN,jint)<SUB>2153</SUB>> ]
-  "11839" -> "11844" 
-  "11840" -> "11839" 
-  "11834" -> "11840" 
+digraph "ReleaseByteArrayElements" {  
+"11529" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2030</SUB>> ]
+"11523" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2029</SUB>> ]
+"11534" [label = <(METHOD_RETURN,void)<SUB>2029</SUB>> ]
+  "11529" -> "11534" 
+  "11523" -> "11529" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/212-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/212-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/212-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/212-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,7 @@
-digraph "GetLongArrayElements" {  
-"11851" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2158</SUB>> ]
-"11852" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2158</SUB>> ]
-"11846" [label = <(METHOD,GetLongArrayElements)<SUB>2157</SUB>> ]
-"11856" [label = <(METHOD_RETURN,jlong)<SUB>2157</SUB>> ]
-  "11851" -> "11856" 
-  "11852" -> "11851" 
-  "11846" -> "11852" 
+digraph "ReleaseCharArrayElements" {  
+"11542" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2034</SUB>> ]
+"11536" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2033</SUB>> ]
+"11547" [label = <(METHOD_RETURN,void)<SUB>2033</SUB>> ]
+  "11542" -> "11547" 
+  "11536" -> "11542" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/213-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/213-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/213-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/213-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,9 +1,7 @@
-digraph "GetShortArrayElements" {  
-"11863" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2162</SUB>> ]
-"11864" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2162</SUB>> ]
-"11858" [label = <(METHOD,GetShortArrayElements)<SUB>2161</SUB>> ]
-"11868" [label = <(METHOD_RETURN,jshort)<SUB>2161</SUB>> ]
-  "11863" -> "11868" 
-  "11864" -> "11863" 
-  "11858" -> "11864" 
+digraph "ReleaseDoubleArrayElements" {  
+"11555" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2039</SUB>> ]
+"11549" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2037</SUB>> ]
+"11560" [label = <(METHOD_RETURN,void)<SUB>2037</SUB>> ]
+  "11555" -> "11560" 
+  "11549" -> "11555" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/214-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/214-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/214-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/214-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseBooleanArrayElements" {  
-"11876" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2167</SUB>> ]
-"11870" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2165</SUB>> ]
-"11881" [label = <(METHOD_RETURN,void)<SUB>2165</SUB>> ]
-  "11876" -> "11881" 
-  "11870" -> "11876" 
+digraph "ReleaseFloatArrayElements" {  
+"11568" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2044</SUB>> ]
+"11562" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2042</SUB>> ]
+"11573" [label = <(METHOD_RETURN,void)<SUB>2042</SUB>> ]
+  "11568" -> "11573" 
+  "11562" -> "11568" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/215-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/215-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/215-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/215-cfg.dot	2023-06-07 19:35:21.337385039 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseByteArrayElements" {  
-"11889" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2172</SUB>> ]
-"11883" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2171</SUB>> ]
-"11894" [label = <(METHOD_RETURN,void)<SUB>2171</SUB>> ]
-  "11889" -> "11894" 
-  "11883" -> "11889" 
+digraph "ReleaseIntArrayElements" {  
+"11581" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2048</SUB>> ]
+"11575" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2047</SUB>> ]
+"11586" [label = <(METHOD_RETURN,void)<SUB>2047</SUB>> ]
+  "11581" -> "11586" 
+  "11575" -> "11581" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/216-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/216-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/216-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/216-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseCharArrayElements" {  
-"11902" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2176</SUB>> ]
-"11896" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2175</SUB>> ]
-"11907" [label = <(METHOD_RETURN,void)<SUB>2175</SUB>> ]
-  "11902" -> "11907" 
-  "11896" -> "11902" 
+digraph "ReleaseLongArrayElements" {  
+"11594" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2052</SUB>> ]
+"11588" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2051</SUB>> ]
+"11599" [label = <(METHOD_RETURN,void)<SUB>2051</SUB>> ]
+  "11594" -> "11599" 
+  "11588" -> "11594" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/217-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/217-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/217-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/217-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseDoubleArrayElements" {  
-"11915" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2181</SUB>> ]
-"11909" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2179</SUB>> ]
-"11920" [label = <(METHOD_RETURN,void)<SUB>2179</SUB>> ]
-  "11915" -> "11920" 
-  "11909" -> "11915" 
+digraph "ReleaseShortArrayElements" {  
+"11607" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2057</SUB>> ]
+"11601" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2055</SUB>> ]
+"11612" [label = <(METHOD_RETURN,void)<SUB>2055</SUB>> ]
+  "11607" -> "11612" 
+  "11601" -> "11607" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/218-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/218-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/218-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/218-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseFloatArrayElements" {  
-"11928" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2186</SUB>> ]
-"11922" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2184</SUB>> ]
-"11933" [label = <(METHOD_RETURN,void)<SUB>2184</SUB>> ]
-  "11928" -> "11933" 
-  "11922" -> "11928" 
+digraph "GetBooleanArrayRegion" {  
+"11621" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2062</SUB>> ]
+"11614" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2060</SUB>> ]
+"11627" [label = <(METHOD_RETURN,void)<SUB>2060</SUB>> ]
+  "11621" -> "11627" 
+  "11614" -> "11621" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/219-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/219-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/219-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/219-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseIntArrayElements" {  
-"11941" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2190</SUB>> ]
-"11935" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2189</SUB>> ]
-"11946" [label = <(METHOD_RETURN,void)<SUB>2189</SUB>> ]
-  "11941" -> "11946" 
-  "11935" -> "11941" 
+digraph "GetByteArrayRegion" {  
+"11636" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2068</SUB>> ]
+"11629" [label = <(METHOD,GetByteArrayRegion)<SUB>2066</SUB>> ]
+"11642" [label = <(METHOD_RETURN,void)<SUB>2066</SUB>> ]
+  "11636" -> "11642" 
+  "11629" -> "11636" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/22-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/22-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/22-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/22-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,104 +1,72 @@
-digraph "FromReflectedField" {  
-"681" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>456</SUB>> ]
-"700" [label = <(soa,soa(env))<SUB>457</SUB>> ]
-"702" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>458</SUB>> ]
-"734" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>463</SUB>> ]
-"753" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>464</SUB>> ]
-"703" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>458</SUB>> ]
-"710" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>458</SUB>> ]
-"720" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != mirror::Field::StaticClass())<SUB>459</SUB>> ]
-"735" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>463</SUB>> ]
-"742" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>463</SUB>> ]
-"754" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>464</SUB>> ]
-"704" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>458</SUB>> ]
-"711" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>458</SUB>> ]
-"721" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>459</SUB>> ]
-"725" [label = <(mirror::Field::StaticClass,mirror::Field::StaticClass())<SUB>459</SUB>> ]
-"732" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>461</SUB>> ]
-"736" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>463</SUB>> ]
-"743" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>463</SUB>> ]
-"748" [label = <(::DownCast,::DownCast(obj_field))<SUB>463</SUB>> ]
-"755" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>464</SUB>> ]
-"758" [label = <(GetArtField,field-&gt;GetArtField())<SUB>464</SUB>> ]
-"685" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>456</SUB>> ]
-"706" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>458</SUB>> ]
-"712" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>458</SUB>> ]
-"715" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>458</SUB>> ]
-"722" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>459</SUB>> ]
-"726" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::StaticClass)<SUB>459</SUB>> ]
-"738" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>463</SUB>> ]
-"745" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>463</SUB>> ]
-"749" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>463</SUB>> ]
-"757" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>464</SUB>> ]
-"759" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>464</SUB>> ]
-"686" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>456</SUB>> ]
-"690" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>456</SUB>> ]
-"697" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>456</SUB>> ]
-"708" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>458</SUB>> ]
-"714" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>458</SUB>> ]
-"717" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>458</SUB>> ]
-"724" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>459</SUB>> ]
-"727" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>459</SUB>> ]
-"730" [label = <(FIELD_IDENTIFIER,StaticClass,StaticClass)<SUB>459</SUB>> ]
-"740" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>463</SUB>> ]
-"747" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>463</SUB>> ]
-"751" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>463</SUB>> ]
-"761" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>464</SUB>> ]
-"691" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>456</SUB>> ]
-"692" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>456</SUB>> ]
-"694" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>456</SUB>> ]
-"677" [label = <(METHOD,FromReflectedField)<SUB>455</SUB>> ]
-"762" [label = <(METHOD_RETURN,jfieldID)<SUB>455</SUB>> ]
-  "681" -> "686" 
-  "681" -> "700" 
-  "700" -> "708" 
-  "702" -> "724" 
-  "734" -> "757" 
-  "753" -> "762" 
-  "703" -> "714" 
-  "710" -> "702" 
-  "720" -> "732" 
-  "720" -> "740" 
-  "735" -> "747" 
-  "742" -> "734" 
-  "754" -> "753" 
-  "704" -> "703" 
-  "711" -> "710" 
-  "721" -> "727" 
-  "725" -> "720" 
-  "732" -> "762" 
-  "736" -> "735" 
-  "743" -> "751" 
-  "748" -> "742" 
-  "755" -> "761" 
-  "758" -> "754" 
-  "685" -> "692" 
-  "685" -> "700" 
-  "706" -> "704" 
-  "712" -> "717" 
-  "715" -> "711" 
-  "722" -> "721" 
-  "726" -> "725" 
-  "738" -> "736" 
-  "745" -> "743" 
-  "749" -> "748" 
-  "757" -> "755" 
-  "759" -> "758" 
-  "686" -> "685" 
-  "690" -> "697" 
-  "697" -> "762" 
-  "708" -> "706" 
-  "714" -> "712" 
-  "717" -> "715" 
-  "724" -> "722" 
-  "727" -> "730" 
-  "730" -> "726" 
-  "740" -> "738" 
-  "747" -> "745" 
-  "751" -> "749" 
-  "761" -> "759" 
-  "691" -> "690" 
-  "692" -> "694" 
-  "694" -> "691" 
-  "677" -> "681" 
+digraph "GetSuperclass" {  
+"794" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>417</SUB>> ]
+"813" [label = <(soa,soa(env))<SUB>418</SUB>> ]
+"815" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>419</SUB>> ]
+"832" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>420</SUB>> ]
+"816" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>419</SUB>> ]
+"823" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>419</SUB>> ]
+"833" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>420</SUB>> ]
+"817" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>419</SUB>> ]
+"824" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>419</SUB>> ]
+"834" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>420</SUB>> ]
+"839" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>420</SUB>> ]
+"798" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>417</SUB>> ]
+"819" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>419</SUB>> ]
+"825" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>419</SUB>> ]
+"828" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>419</SUB>> ]
+"835" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>420</SUB>> ]
+"840" [label = <(IsInterface,c-&gt;IsInterface())<SUB>420</SUB>> ]
+"845" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>420</SUB>> ]
+"799" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>417</SUB>> ]
+"803" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>417</SUB>> ]
+"810" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>417</SUB>> ]
+"821" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>419</SUB>> ]
+"827" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>419</SUB>> ]
+"830" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>419</SUB>> ]
+"837" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>420</SUB>> ]
+"841" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>420</SUB>> ]
+"846" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>420</SUB>> ]
+"804" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>417</SUB>> ]
+"843" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>420</SUB>> ]
+"848" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>420</SUB>> ]
+"805" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>417</SUB>> ]
+"807" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>417</SUB>> ]
+"790" [label = <(METHOD,GetSuperclass)<SUB>416</SUB>> ]
+"849" [label = <(METHOD_RETURN,jclass)<SUB>416</SUB>> ]
+  "794" -> "799" 
+  "794" -> "813" 
+  "813" -> "821" 
+  "815" -> "837" 
+  "832" -> "849" 
+  "816" -> "827" 
+  "823" -> "815" 
+  "833" -> "832" 
+  "817" -> "816" 
+  "824" -> "823" 
+  "834" -> "843" 
+  "839" -> "833" 
+  "798" -> "805" 
+  "798" -> "813" 
+  "819" -> "817" 
+  "825" -> "830" 
+  "828" -> "824" 
+  "835" -> "834" 
+  "840" -> "839" 
+  "840" -> "848" 
+  "845" -> "839" 
+  "799" -> "798" 
+  "803" -> "810" 
+  "810" -> "849" 
+  "821" -> "819" 
+  "827" -> "825" 
+  "830" -> "828" 
+  "837" -> "835" 
+  "841" -> "840" 
+  "846" -> "845" 
+  "804" -> "803" 
+  "843" -> "841" 
+  "848" -> "846" 
+  "805" -> "807" 
+  "807" -> "804" 
+  "790" -> "794" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/220-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/220-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/220-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/220-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseLongArrayElements" {  
-"11954" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2194</SUB>> ]
-"11948" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2193</SUB>> ]
-"11959" [label = <(METHOD_RETURN,void)<SUB>2193</SUB>> ]
-  "11954" -> "11959" 
-  "11948" -> "11954" 
+digraph "GetCharArrayRegion" {  
+"11651" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2073</SUB>> ]
+"11644" [label = <(METHOD,GetCharArrayRegion)<SUB>2071</SUB>> ]
+"11657" [label = <(METHOD_RETURN,void)<SUB>2071</SUB>> ]
+  "11651" -> "11657" 
+  "11644" -> "11651" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/221-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/221-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/221-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/221-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseShortArrayElements" {  
-"11967" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2199</SUB>> ]
-"11961" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2197</SUB>> ]
-"11972" [label = <(METHOD_RETURN,void)<SUB>2197</SUB>> ]
-  "11967" -> "11972" 
-  "11961" -> "11967" 
+digraph "GetDoubleArrayRegion" {  
+"11666" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2078</SUB>> ]
+"11659" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2076</SUB>> ]
+"11672" [label = <(METHOD_RETURN,void)<SUB>2076</SUB>> ]
+  "11666" -> "11672" 
+  "11659" -> "11666" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/222-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/222-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/222-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/222-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetBooleanArrayRegion" {  
-"11981" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2204</SUB>> ]
-"11974" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2202</SUB>> ]
-"11987" [label = <(METHOD_RETURN,void)<SUB>2202</SUB>> ]
-  "11981" -> "11987" 
-  "11974" -> "11981" 
+digraph "GetFloatArrayRegion" {  
+"11681" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2084</SUB>> ]
+"11674" [label = <(METHOD,GetFloatArrayRegion)<SUB>2082</SUB>> ]
+"11687" [label = <(METHOD_RETURN,void)<SUB>2082</SUB>> ]
+  "11681" -> "11687" 
+  "11674" -> "11681" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/223-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/223-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/223-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/223-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetByteArrayRegion" {  
-"11996" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2210</SUB>> ]
-"11989" [label = <(METHOD,GetByteArrayRegion)<SUB>2208</SUB>> ]
-"12002" [label = <(METHOD_RETURN,void)<SUB>2208</SUB>> ]
-  "11996" -> "12002" 
-  "11989" -> "11996" 
+digraph "GetIntArrayRegion" {  
+"11696" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2090</SUB>> ]
+"11689" [label = <(METHOD,GetIntArrayRegion)<SUB>2088</SUB>> ]
+"11702" [label = <(METHOD_RETURN,void)<SUB>2088</SUB>> ]
+  "11696" -> "11702" 
+  "11689" -> "11696" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/224-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/224-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/224-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/224-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetCharArrayRegion" {  
-"12011" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2215</SUB>> ]
-"12004" [label = <(METHOD,GetCharArrayRegion)<SUB>2213</SUB>> ]
-"12017" [label = <(METHOD_RETURN,void)<SUB>2213</SUB>> ]
-  "12011" -> "12017" 
-  "12004" -> "12011" 
+digraph "GetLongArrayRegion" {  
+"11711" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2095</SUB>> ]
+"11704" [label = <(METHOD,GetLongArrayRegion)<SUB>2093</SUB>> ]
+"11717" [label = <(METHOD_RETURN,void)<SUB>2093</SUB>> ]
+  "11711" -> "11717" 
+  "11704" -> "11711" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/225-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/225-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/225-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/225-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetDoubleArrayRegion" {  
-"12026" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2220</SUB>> ]
-"12019" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2218</SUB>> ]
-"12032" [label = <(METHOD_RETURN,void)<SUB>2218</SUB>> ]
-  "12026" -> "12032" 
-  "12019" -> "12026" 
+digraph "GetShortArrayRegion" {  
+"11726" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2100</SUB>> ]
+"11719" [label = <(METHOD,GetShortArrayRegion)<SUB>2098</SUB>> ]
+"11732" [label = <(METHOD_RETURN,void)<SUB>2098</SUB>> ]
+  "11726" -> "11732" 
+  "11719" -> "11726" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/226-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/226-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/226-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/226-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetFloatArrayRegion" {  
-"12041" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2226</SUB>> ]
-"12034" [label = <(METHOD,GetFloatArrayRegion)<SUB>2224</SUB>> ]
-"12047" [label = <(METHOD_RETURN,void)<SUB>2224</SUB>> ]
-  "12041" -> "12047" 
-  "12034" -> "12041" 
+digraph "SetBooleanArrayRegion" {  
+"11741" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2106</SUB>> ]
+"11734" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2104</SUB>> ]
+"11747" [label = <(METHOD_RETURN,void)<SUB>2104</SUB>> ]
+  "11741" -> "11747" 
+  "11734" -> "11741" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/227-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/227-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/227-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/227-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetIntArrayRegion" {  
-"12056" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2232</SUB>> ]
-"12049" [label = <(METHOD,GetIntArrayRegion)<SUB>2230</SUB>> ]
-"12062" [label = <(METHOD_RETURN,void)<SUB>2230</SUB>> ]
-  "12056" -> "12062" 
-  "12049" -> "12056" 
+digraph "SetByteArrayRegion" {  
+"11756" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2112</SUB>> ]
+"11749" [label = <(METHOD,SetByteArrayRegion)<SUB>2110</SUB>> ]
+"11762" [label = <(METHOD_RETURN,void)<SUB>2110</SUB>> ]
+  "11756" -> "11762" 
+  "11749" -> "11756" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/228-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/228-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/228-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/228-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetLongArrayRegion" {  
-"12071" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2237</SUB>> ]
-"12064" [label = <(METHOD,GetLongArrayRegion)<SUB>2235</SUB>> ]
-"12077" [label = <(METHOD_RETURN,void)<SUB>2235</SUB>> ]
-  "12071" -> "12077" 
-  "12064" -> "12071" 
+digraph "SetCharArrayRegion" {  
+"11771" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2117</SUB>> ]
+"11764" [label = <(METHOD,SetCharArrayRegion)<SUB>2115</SUB>> ]
+"11777" [label = <(METHOD_RETURN,void)<SUB>2115</SUB>> ]
+  "11771" -> "11777" 
+  "11764" -> "11771" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/229-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/229-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/229-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/229-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "GetShortArrayRegion" {  
-"12086" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2242</SUB>> ]
-"12079" [label = <(METHOD,GetShortArrayRegion)<SUB>2240</SUB>> ]
-"12092" [label = <(METHOD_RETURN,void)<SUB>2240</SUB>> ]
-  "12086" -> "12092" 
-  "12079" -> "12086" 
+digraph "SetDoubleArrayRegion" {  
+"11786" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2122</SUB>> ]
+"11779" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2120</SUB>> ]
+"11792" [label = <(METHOD_RETURN,void)<SUB>2120</SUB>> ]
+  "11786" -> "11792" 
+  "11779" -> "11786" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/23-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/23-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/23-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/23-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,124 +1,97 @@
-digraph "ToReflectedMethod" {  
-"770" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>468</SUB>> ]
-"789" [label = <(soa,soa(env))<SUB>469</SUB>> ]
-"792" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>470</SUB>> ]
-"799" [label = <(&lt;operator&gt;.multiplication,mirror::Executable* method)<SUB>471</SUB>> ]
-"804" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>472</SUB>> ]
-"816" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>473</SUB>> ]
-"859" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>479</SUB>> ]
-"794" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>470</SUB>> ]
-"800" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>471</SUB>> ]
-"805" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>472</SUB>> ]
-"817" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>473</SUB>> ]
-"826" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>474</SUB>> ]
-"860" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>479</SUB>> ]
-"795" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>470</SUB>> ]
-"802" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>471</SUB>> ]
-"806" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>472</SUB>> ]
-"818" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>473</SUB>> ]
-"827" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>474</SUB>> ]
-"831" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>475</SUB>> ]
-"861" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>479</SUB>> ]
-"774" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>468</SUB>> ]
-"797" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>470</SUB>> ]
-"807" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>472</SUB>> ]
-"814" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>472</SUB>> ]
-"819" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>473</SUB>> ]
-"829" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>474</SUB>> ]
-"833" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>475</SUB>> ]
-"846" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>477</SUB>> ]
-"862" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>479</SUB>> ]
-"775" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>468</SUB>> ]
-"779" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>468</SUB>> ]
-"786" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>468</SUB>> ]
-"808" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>472</SUB>> ]
-"820" [label = <(Runtime::Current,Runtime::Current())<SUB>473</SUB>> ]
-"824" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>473</SUB>> ]
-"834" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>475</SUB>> ]
-"839" [label = <(Self,soa.Self())<SUB>475</SUB>> ]
-"848" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>477</SUB>> ]
-"864" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>479</SUB>> ]
-"780" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>468</SUB>> ]
-"809" [label = <(Runtime::Current,Runtime::Current())<SUB>472</SUB>> ]
-"813" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>472</SUB>> ]
-"821" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>473</SUB>> ]
-"835" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>475</SUB>> ]
-"838" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>475</SUB>> ]
-"840" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>475</SUB>> ]
-"849" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>477</SUB>> ]
-"854" [label = <(Self,soa.Self())<SUB>477</SUB>> ]
-"781" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>468</SUB>> ]
-"783" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>468</SUB>> ]
-"810" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>472</SUB>> ]
-"823" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>473</SUB>> ]
-"842" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>475</SUB>> ]
-"850" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>477</SUB>> ]
-"853" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>477</SUB>> ]
-"855" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>477</SUB>> ]
-"812" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>472</SUB>> ]
-"857" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>477</SUB>> ]
-"764" [label = <(METHOD,ToReflectedMethod)<SUB>467</SUB>> ]
-"867" [label = <(METHOD_RETURN,jobject)<SUB>467</SUB>> ]
-  "770" -> "775" 
-  "770" -> "789" 
-  "789" -> "797" 
-  "792" -> "802" 
-  "799" -> "812" 
-  "804" -> "823" 
-  "816" -> "829" 
-  "859" -> "867" 
-  "794" -> "792" 
-  "800" -> "799" 
-  "805" -> "804" 
-  "817" -> "816" 
-  "826" -> "835" 
-  "826" -> "850" 
-  "860" -> "859" 
-  "795" -> "794" 
-  "802" -> "800" 
-  "806" -> "805" 
-  "818" -> "817" 
-  "827" -> "826" 
-  "831" -> "864" 
-  "861" -> "860" 
-  "774" -> "781" 
-  "774" -> "789" 
-  "797" -> "795" 
-  "807" -> "814" 
-  "814" -> "806" 
-  "819" -> "818" 
-  "829" -> "827" 
-  "833" -> "831" 
-  "846" -> "864" 
+digraph "IsAssignableFrom" {  
+"856" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>426</SUB>> ]
+"875" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>427</SUB>> ]
+"895" [label = <(soa,soa(env))<SUB>428</SUB>> ]
+"897" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>429</SUB>> ]
+"914" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>430</SUB>> ]
+"931" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>431</SUB>> ]
+"898" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>429</SUB>> ]
+"905" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>429</SUB>> ]
+"915" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>430</SUB>> ]
+"922" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>430</SUB>> ]
+"932" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>431</SUB>> ]
+"899" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>429</SUB>> ]
+"906" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>429</SUB>> ]
+"916" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>430</SUB>> ]
+"923" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>430</SUB>> ]
+"933" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>431</SUB>> ]
+"861" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>426</SUB>> ]
+"880" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>427</SUB>> ]
+"901" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>429</SUB>> ]
+"907" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>429</SUB>> ]
+"910" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>429</SUB>> ]
+"918" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>430</SUB>> ]
+"924" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>430</SUB>> ]
+"927" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>430</SUB>> ]
+"934" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>431</SUB>> ]
+"862" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>426</SUB>> ]
+"866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>426</SUB>> ]
+"873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>426</SUB>> ]
+"881" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>427</SUB>> ]
+"885" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>427</SUB>> ]
+"892" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>427</SUB>> ]
+"903" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>429</SUB>> ]
+"909" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>429</SUB>> ]
+"912" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>429</SUB>> ]
+"920" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>430</SUB>> ]
+"926" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>430</SUB>> ]
+"929" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>430</SUB>> ]
+"936" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>431</SUB>> ]
+"867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>426</SUB>> ]
+"886" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>427</SUB>> ]
+"868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>426</SUB>> ]
+"870" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>426</SUB>> ]
+"887" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>427</SUB>> ]
+"889" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>427</SUB>> ]
+"851" [label = <(METHOD,IsAssignableFrom)<SUB>425</SUB>> ]
+"940" [label = <(METHOD_RETURN,jboolean)<SUB>425</SUB>> ]
+  "856" -> "862" 
+  "856" -> "875" 
+  "875" -> "881" 
+  "875" -> "895" 
+  "895" -> "903" 
+  "897" -> "920" 
+  "914" -> "936" 
+  "931" -> "940" 
+  "898" -> "909" 
+  "905" -> "897" 
+  "915" -> "926" 
+  "922" -> "914" 
+  "932" -> "931" 
+  "899" -> "898" 
+  "906" -> "905" 
+  "916" -> "915" 
+  "923" -> "922" 
+  "933" -> "932" 
+  "861" -> "868" 
+  "861" -> "875" 
+  "880" -> "887" 
+  "880" -> "895" 
+  "901" -> "899" 
+  "907" -> "912" 
+  "910" -> "906" 
+  "918" -> "916" 
+  "924" -> "929" 
+  "927" -> "923" 
+  "934" -> "933" 
   "862" -> "861" 
-  "775" -> "774" 
-  "779" -> "786" 
-  "786" -> "867" 
-  "808" -> "807" 
-  "820" -> "824" 
-  "824" -> "819" 
-  "834" -> "842" 
-  "839" -> "833" 
-  "848" -> "846" 
-  "864" -> "862" 
-  "780" -> "779" 
-  "809" -> "813" 
-  "813" -> "808" 
-  "821" -> "820" 
-  "835" -> "838" 
-  "838" -> "834" 
-  "840" -> "839" 
-  "849" -> "857" 
-  "854" -> "848" 
-  "781" -> "783" 
-  "783" -> "780" 
-  "810" -> "809" 
-  "823" -> "821" 
-  "842" -> "840" 
-  "850" -> "853" 
-  "853" -> "849" 
-  "855" -> "854" 
-  "812" -> "810" 
-  "857" -> "855" 
-  "764" -> "770" 
+  "866" -> "873" 
+  "873" -> "940" 
+  "881" -> "880" 
+  "885" -> "892" 
+  "892" -> "940" 
+  "903" -> "901" 
+  "909" -> "907" 
+  "912" -> "910" 
+  "920" -> "918" 
+  "926" -> "924" 
+  "929" -> "927" 
+  "936" -> "934" 
+  "867" -> "866" 
+  "886" -> "885" 
+  "868" -> "870" 
+  "870" -> "867" 
+  "887" -> "889" 
+  "889" -> "886" 
+  "851" -> "856" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/230-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/230-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/230-cfg.dot	2023-06-07 19:35:14.807385842 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/230-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "SetBooleanArrayRegion" {  
-"12101" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2248</SUB>> ]
-"12094" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2246</SUB>> ]
-"12107" [label = <(METHOD_RETURN,void)<SUB>2246</SUB>> ]
-  "12101" -> "12107" 
-  "12094" -> "12101" 
+digraph "SetFloatArrayRegion" {  
+"11801" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2128</SUB>> ]
+"11794" [label = <(METHOD,SetFloatArrayRegion)<SUB>2126</SUB>> ]
+"11807" [label = <(METHOD_RETURN,void)<SUB>2126</SUB>> ]
+  "11801" -> "11807" 
+  "11794" -> "11801" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/231-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/231-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/231-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/231-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "SetByteArrayRegion" {  
-"12116" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2254</SUB>> ]
-"12109" [label = <(METHOD,SetByteArrayRegion)<SUB>2252</SUB>> ]
-"12122" [label = <(METHOD_RETURN,void)<SUB>2252</SUB>> ]
-  "12116" -> "12122" 
-  "12109" -> "12116" 
+digraph "SetIntArrayRegion" {  
+"11816" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2134</SUB>> ]
+"11809" [label = <(METHOD,SetIntArrayRegion)<SUB>2132</SUB>> ]
+"11822" [label = <(METHOD_RETURN,void)<SUB>2132</SUB>> ]
+  "11816" -> "11822" 
+  "11809" -> "11816" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/232-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/232-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/232-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/232-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "SetCharArrayRegion" {  
-"12131" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2259</SUB>> ]
-"12124" [label = <(METHOD,SetCharArrayRegion)<SUB>2257</SUB>> ]
-"12137" [label = <(METHOD_RETURN,void)<SUB>2257</SUB>> ]
-  "12131" -> "12137" 
-  "12124" -> "12131" 
+digraph "SetLongArrayRegion" {  
+"11831" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2139</SUB>> ]
+"11824" [label = <(METHOD,SetLongArrayRegion)<SUB>2137</SUB>> ]
+"11837" [label = <(METHOD_RETURN,void)<SUB>2137</SUB>> ]
+  "11831" -> "11837" 
+  "11824" -> "11831" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/233-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/233-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/233-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/233-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,7 @@
-digraph "SetDoubleArrayRegion" {  
-"12146" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2264</SUB>> ]
-"12139" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2262</SUB>> ]
-"12152" [label = <(METHOD_RETURN,void)<SUB>2262</SUB>> ]
-  "12146" -> "12152" 
-  "12139" -> "12146" 
+digraph "SetShortArrayRegion" {  
+"11846" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2144</SUB>> ]
+"11839" [label = <(METHOD,SetShortArrayRegion)<SUB>2142</SUB>> ]
+"11852" [label = <(METHOD_RETURN,void)<SUB>2142</SUB>> ]
+  "11846" -> "11852" 
+  "11839" -> "11846" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/234-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/234-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/234-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/234-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,9 @@
-digraph "SetFloatArrayRegion" {  
-"12161" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2270</SUB>> ]
-"12154" [label = <(METHOD,SetFloatArrayRegion)<SUB>2268</SUB>> ]
-"12167" [label = <(METHOD_RETURN,void)<SUB>2268</SUB>> ]
-  "12161" -> "12167" 
-  "12154" -> "12161" 
+digraph "RegisterNatives" {  
+"11860" [label = <(RETURN,return RegisterNativeMethods(env, java_class, methods, method_count, true);,return RegisterNativeMethods(env, java_class, methods, method_count, true);)<SUB>2150</SUB>> ]
+"11861" [label = <(RegisterNativeMethods,RegisterNativeMethods(env, java_class, methods, method_count, true))<SUB>2150</SUB>> ]
+"11854" [label = <(METHOD,RegisterNatives)<SUB>2148</SUB>> ]
+"11867" [label = <(METHOD_RETURN,jint)<SUB>2148</SUB>> ]
+  "11860" -> "11867" 
+  "11861" -> "11860" 
+  "11854" -> "11861" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/235-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/235-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/235-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/235-cfg.dot	2023-06-07 19:35:21.347385038 +0330
@@ -1,7 +1,492 @@
-digraph "SetIntArrayRegion" {  
-"12176" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2276</SUB>> ]
-"12169" [label = <(METHOD,SetIntArrayRegion)<SUB>2274</SUB>> ]
-"12182" [label = <(METHOD_RETURN,void)<SUB>2274</SUB>> ]
-  "12176" -> "12182" 
-  "12169" -> "12176" 
+digraph "RegisterNativeMethods" {  
+"11892" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2160</SUB>> ]
+"11913" [label = <(soa,soa(env))<SUB>2161</SUB>> ]
+"11915" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2162</SUB>> ]
+"11924" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2163</SUB>> ]
+"11962" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2169</SUB>> ]
+"12345" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2284</SUB>> ]
+"11877" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2155</SUB>> ]
+"11916" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2162</SUB>> ]
+"11919" [label = <(hs,hs(soa.Self()))<SUB>2162</SUB>> ]
+"11925" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2163</SUB>> ]
+"11932" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2163</SUB>> ]
+"11946" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2164</SUB>> ]
+"11988" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2170</SUB>> ]
+"11991" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2170</SUB>> ]
+"11878" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2155</SUB>> ]
+"11882" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2156</SUB>> ]
+"11890" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2158</SUB>> ]
+"11920" [label = <(Self,soa.Self())<SUB>2162</SUB>> ]
+"11926" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2163</SUB>> ]
+"11933" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2163</SUB>> ]
+"11936" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2163</SUB>> ]
+"11947" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2164</SUB>> ]
+"11951" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2165</SUB>> ]
+"11960" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2167</SUB>> ]
+"11985" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2170</SUB>> ]
+"11995" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2171</SUB>> ]
+"12003" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2172</SUB>> ]
+"12011" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2173</SUB>> ]
+"12074" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2184</SUB>> ]
+"12089" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2222</SUB>> ]
+"12093" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled())<SUB>2223</SUB>> ]
+"12307" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2267</SUB>> ]
+"12335" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr, is_fast))<SUB>2281</SUB>> ]
+"12343" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2282</SUB>> ]
+"11883" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2156</SUB>> ]
+"11898" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2160</SUB>> ]
+"11921" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2162</SUB>> ]
+"11928" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2163</SUB>> ]
+"11935" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2163</SUB>> ]
+"11937" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2163</SUB>> ]
+"11952" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2165</SUB>> ]
+"11956" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2166</SUB>> ]
+"11968" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2169</SUB>> ]
+"11997" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2171</SUB>> ]
+"12005" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2172</SUB>> ]
+"12013" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2173</SUB>> ]
+"12019" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2174</SUB>> ]
+"12078" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2214</SUB>> ]
+"12095" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled())<SUB>2223</SUB>> ]
+"12116" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2225</SUB>> ]
+"12119" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2226</SUB>> ]
+"12183" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2246</SUB>> ]
+"12308" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2267</SUB>> ]
+"12319" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2269</SUB>> ]
+"12337" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr, is_fast))<SUB>2281</SUB>> ]
+"11884" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2156</SUB>> ]
+"11886" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2156</SUB>> ]
+"11899" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2160</SUB>> ]
+"11903" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2160</SUB>> ]
+"11910" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2160</SUB>> ]
+"11923" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2162</SUB>> ]
+"11930" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2163</SUB>> ]
+"11938" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2163</SUB>> ]
+"11941" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2163</SUB>> ]
+"11953" [label = <(LOG,LOG(WARNING))<SUB>2165</SUB>> ]
+"11957" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2166</SUB>> ]
+"11969" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2169</SUB>> ]
+"11973" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2169</SUB>> ]
+"11980" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2169</SUB>> ]
+"11998" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2171</SUB>> ]
+"12001" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2171</SUB>> ]
+"12006" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2172</SUB>> ]
+"12009" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2172</SUB>> ]
+"12014" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2173</SUB>> ]
+"12017" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2173</SUB>> ]
+"12020" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2174</SUB>> ]
+"12024" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i, return_errors))<SUB>2175</SUB>> ]
+"12033" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2176</SUB>> ]
+"12079" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2214</SUB>> ]
+"12083" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2215</SUB>> ]
+"12086" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2216</SUB>> ]
+"12096" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled)<SUB>2223</SUB>> ]
+"12104" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2224</SUB>> ]
+"12121" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2226</SUB>> ]
+"12126" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2228</SUB>> ]
+"12146" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2234</SUB>> ]
+"12187" [label = <(DumpClass,c-&gt;DumpClass(\012            LOG_STREAM(return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT),\012            mirror::Class::kDumpClassFullDetail))<SUB>2247</SUB>> ]
+"12209" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2252</SUB>> ]
+"12248" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2256</SUB>> ]
+"12257" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2257</SUB>> ]
+"12309" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2267</SUB>> ]
+"12313" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2267</SUB>> ]
+"12322" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2276</SUB>> ]
+"12331" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2277</SUB>> ]
+"12338" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2281</SUB>> ]
+"11904" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2160</SUB>> ]
+"11940" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2163</SUB>> ]
+"11943" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2163</SUB>> ]
+"11959" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2166</SUB>> ]
+"11974" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2169</SUB>> ]
+"12026" [label = <(Get,c.Get())<SUB>2175</SUB>> ]
+"12097" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>2223</SUB>> ]
+"12101" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2223</SUB>> ]
+"12105" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2224</SUB>> ]
+"12112" [label = <(Get,c.Get())<SUB>2224</SUB>> ]
+"12122" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2226</SUB>> ]
+"12128" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2228</SUB>> ]
+"12141" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2229</SUB>> ]
+"12148" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2234</SUB>> ]
+"12161" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2235</SUB>> ]
+"12188" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2247</SUB>> ]
+"12191" [label = <(LOG_STREAM,LOG_STREAM(return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT))<SUB>2248</SUB>> ]
+"12204" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2251</SUB>> ]
+"12210" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2252</SUB>> ]
+"12238" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2255</SUB>> ]
+"12250" [label = <(Get,c.Get())<SUB>2256</SUB>> ]
+"12310" [label = <(VLOG,VLOG(jni))<SUB>2267</SUB>> ]
+"12314" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2267</SUB>> ]
+"12323" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2276</SUB>> ]
+"12327" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2276</SUB>> ]
+"12340" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2281</SUB>> ]
+"11905" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2160</SUB>> ]
+"11907" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2160</SUB>> ]
+"11975" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2169</SUB>> ]
+"11977" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2169</SUB>> ]
+"12027" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2175</SUB>> ]
+"12038" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2177</SUB>> ]
+"12098" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2223</SUB>> ]
+"12100" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>2223</SUB>> ]
+"12106" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2224</SUB>> ]
+"12113" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2224</SUB>> ]
+"12124" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2226</SUB>> ]
+"12129" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2228</SUB>> ]
+"12132" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2228</SUB>> ]
+"12149" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2234</SUB>> ]
+"12152" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2234</SUB>> ]
+"12169" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2240</SUB>> ]
+"12179" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2242</SUB>> ]
+"12190" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2247</SUB>> ]
+"12192" [label = <(&lt;operator&gt;.conditional,return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT)<SUB>2248</SUB>> ]
+"12205" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2251</SUB>> ]
+"12208" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2251</SUB>> ]
+"12211" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2252</SUB>> ]
+"12239" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2255</SUB>> ]
+"12251" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2256</SUB>> ]
+"12262" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2258</SUB>> ]
+"12316" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2267</SUB>> ]
+"12324" [label = <(LOG,LOG(WARNING))<SUB>2276</SUB>> ]
+"12328" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2276</SUB>> ]
+"12029" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2175</SUB>> ]
+"12039" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2177</SUB>> ]
+"12043" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i, return_errors))<SUB>2178</SUB>> ]
+"12052" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2179</SUB>> ]
+"12108" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2224</SUB>> ]
+"12115" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2224</SUB>> ]
+"12133" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2228</SUB>> ]
+"12153" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2234</SUB>> ]
+"12170" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2240</SUB>> ]
+"12194" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2249</SUB>> ]
+"12199" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL_WITHOUT_ABORT)<SUB>2250</SUB>> ]
+"12212" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2252</SUB>> ]
+"12240" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2255</SUB>> ]
+"12247" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2255</SUB>> ]
+"12253" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2256</SUB>> ]
+"12263" [label = <(IsNative,m-&gt;IsNative())<SUB>2258</SUB>> ]
+"12268" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2259</SUB>> ]
+"12296" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2263</SUB>> ]
+"12305" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2264</SUB>> ]
+"12330" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2276</SUB>> ]
+"12045" [label = <(Get,c.Get())<SUB>2178</SUB>> ]
+"12110" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2224</SUB>> ]
+"12134" [label = <(Ptr,current_class.Ptr())<SUB>2228</SUB>> ]
+"12154" [label = <(Ptr,current_class.Ptr())<SUB>2234</SUB>> ]
+"12171" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2240</SUB>> ]
+"12195" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2249</SUB>> ]
+"12198" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2249</SUB>> ]
+"12200" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2250</SUB>> ]
+"12203" [label = <(FIELD_IDENTIFIER,FATAL_WITHOUT_ABORT,FATAL_WITHOUT_ABORT)<SUB>2250</SUB>> ]
+"12213" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2252</SUB>> ]
+"12241" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2255</SUB>> ]
+"12264" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2258</SUB>> ]
+"12269" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2259</SUB>> ]
+"12298" [label = <(Get,c.Get())<SUB>2263</SUB>> ]
+"12046" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2178</SUB>> ]
+"12057" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2180</SUB>> ]
+"12135" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2228</SUB>> ]
+"12155" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2234</SUB>> ]
+"12172" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2240</SUB>> ]
+"12214" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2252</SUB>> ]
+"12242" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2255</SUB>> ]
+"12246" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2255</SUB>> ]
+"12266" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2258</SUB>> ]
+"12270" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2259</SUB>> ]
+"12299" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2263</SUB>> ]
+"12048" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2178</SUB>> ]
+"12058" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2180</SUB>> ]
+"12062" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i, return_errors))<SUB>2181</SUB>> ]
+"12071" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2182</SUB>> ]
+"12137" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2228</SUB>> ]
+"12157" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2234</SUB>> ]
+"12173" [label = <(LOG,LOG(WARNING))<SUB>2240</SUB>> ]
+"12215" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2252</SUB>> ]
+"12230" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2254</SUB>> ]
+"12243" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2255</SUB>> ]
+"12271" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2259</SUB>> ]
+"12301" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2263</SUB>> ]
+"12064" [label = <(Get,c.Get())<SUB>2181</SUB>> ]
+"12216" [label = <(LOG,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL))<SUB>2252</SUB>> ]
+"12231" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2254</SUB>> ]
+"12245" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2255</SUB>> ]
+"12272" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2259</SUB>> ]
+"12065" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2181</SUB>> ]
+"12217" [label = <(&lt;operator&gt;.conditional,return_errors ? ::android::base::ERROR : ::android::base::FATAL)<SUB>2252</SUB>> ]
+"12233" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2254</SUB>> ]
+"12273" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2259</SUB>> ]
+"12288" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2261</SUB>> ]
+"12067" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2181</SUB>> ]
+"12219" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2252</SUB>> ]
+"12224" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL)<SUB>2252</SUB>> ]
+"12274" [label = <(LOG,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL))<SUB>2259</SUB>> ]
+"12289" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2261</SUB>> ]
+"12220" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2252</SUB>> ]
+"12223" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2252</SUB>> ]
+"12225" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2252</SUB>> ]
+"12228" [label = <(FIELD_IDENTIFIER,FATAL,FATAL)<SUB>2252</SUB>> ]
+"12275" [label = <(&lt;operator&gt;.conditional,return_errors ? ::android::base::ERROR : ::android::base::FATAL)<SUB>2259</SUB>> ]
+"12291" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2261</SUB>> ]
+"12277" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2259</SUB>> ]
+"12282" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL)<SUB>2259</SUB>> ]
+"12278" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2259</SUB>> ]
+"12281" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2259</SUB>> ]
+"12283" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2259</SUB>> ]
+"12286" [label = <(FIELD_IDENTIFIER,FATAL,FATAL)<SUB>2259</SUB>> ]
+"11869" [label = <(METHOD,RegisterNativeMethods)<SUB>2153</SUB>> ]
+"12347" [label = <(METHOD_RETURN,jint)<SUB>2153</SUB>> ]
+  "11892" -> "11899" 
+  "11892" -> "11913" 
+  "11913" -> "11916" 
+  "11915" -> "11930" 
+  "11924" -> "11947" 
+  "11962" -> "11969" 
+  "11962" -> "11985" 
+  "12345" -> "12347" 
+  "11877" -> "11884" 
+  "11877" -> "11892" 
+  "11916" -> "11923" 
+  "11919" -> "11915" 
+  "11925" -> "11935" 
+  "11932" -> "11924" 
+  "11946" -> "11953" 
+  "11946" -> "11962" 
+  "11988" -> "11998" 
+  "11988" -> "12345" 
+  "11991" -> "11988" 
+  "11878" -> "11877" 
+  "11882" -> "11890" 
+  "11890" -> "12347" 
+  "11920" -> "11919" 
+  "11926" -> "11925" 
+  "11933" -> "11940" 
+  "11936" -> "11932" 
+  "11947" -> "11946" 
+  "11951" -> "11960" 
+  "11960" -> "12347" 
+  "11985" -> "11988" 
+  "11995" -> "12006" 
+  "12003" -> "12014" 
+  "12011" -> "12020" 
+  "12074" -> "12079" 
+  "12089" -> "12098" 
+  "12093" -> "12110" 
+  "12307" -> "12319" 
+  "12335" -> "12343" 
+  "12343" -> "11991" 
+  "11883" -> "11882" 
+  "11898" -> "11905" 
+  "11898" -> "11913" 
+  "11921" -> "11920" 
+  "11928" -> "11926" 
+  "11935" -> "11933" 
+  "11937" -> "11936" 
+  "11952" -> "11959" 
+  "11956" -> "11951" 
+  "11968" -> "11975" 
+  "11968" -> "11985" 
+  "11997" -> "11995" 
+  "12005" -> "12003" 
+  "12013" -> "12011" 
+  "12019" -> "12029" 
+  "12019" -> "12039" 
+  "12078" -> "12083" 
+  "12078" -> "12089" 
+  "12095" -> "12093" 
+  "12116" -> "12129" 
+  "12116" -> "12183" 
+  "12119" -> "12116" 
+  "12183" -> "12190" 
+  "12183" -> "12266" 
+  "12308" -> "12307" 
+  "12319" -> "12324" 
+  "12319" -> "12340" 
+  "12337" -> "12335" 
+  "11884" -> "11886" 
+  "11886" -> "11883" 
+  "11899" -> "11898" 
+  "11903" -> "11910" 
+  "11910" -> "12347" 
+  "11923" -> "11921" 
+  "11930" -> "11928" 
+  "11938" -> "11943" 
+  "11941" -> "11937" 
+  "11953" -> "11952" 
+  "11957" -> "11956" 
+  "11969" -> "11968" 
+  "11973" -> "11980" 
+  "11980" -> "12347" 
+  "11998" -> "12001" 
+  "12001" -> "11997" 
+  "12006" -> "12009" 
+  "12009" -> "12005" 
+  "12014" -> "12017" 
+  "12017" -> "12013" 
+  "12020" -> "12019" 
+  "12024" -> "12033" 
+  "12033" -> "12347" 
+  "12079" -> "12078" 
+  "12083" -> "12086" 
+  "12086" -> "12089" 
+  "12096" -> "12095" 
+  "12104" -> "12116" 
+  "12121" -> "12119" 
+  "12126" -> "12141" 
+  "12146" -> "12161" 
+  "12187" -> "12220" 
+  "12187" -> "12225" 
+  "12209" -> "12253" 
+  "12248" -> "12257" 
+  "12257" -> "12347" 
+  "12309" -> "12316" 
+  "12313" -> "12308" 
+  "12322" -> "12331" 
+  "12331" -> "12340" 
+  "12338" -> "12337" 
+  "11904" -> "11903" 
+  "11940" -> "11938" 
+  "11943" -> "11941" 
+  "11959" -> "11957" 
+  "11974" -> "11973" 
+  "12026" -> "12024" 
+  "12097" -> "12101" 
+  "12101" -> "12096" 
+  "12105" -> "12115" 
+  "12112" -> "12104" 
+  "12122" -> "12121" 
+  "12128" -> "12126" 
+  "12141" -> "12183" 
+  "12141" -> "12149" 
+  "12148" -> "12146" 
+  "12161" -> "12183" 
+  "12161" -> "12173" 
+  "12161" -> "12124" 
+  "12188" -> "12195" 
+  "12188" -> "12200" 
+  "12191" -> "12205" 
+  "12204" -> "12187" 
+  "12210" -> "12245" 
+  "12238" -> "12209" 
+  "12250" -> "12248" 
+  "12310" -> "12309" 
+  "12314" -> "12313" 
+  "12323" -> "12330" 
+  "12327" -> "12322" 
+  "12340" -> "12338" 
+  "11905" -> "11907" 
+  "11907" -> "11904" 
+  "11975" -> "11977" 
+  "11977" -> "11974" 
+  "12027" -> "12026" 
+  "12038" -> "12048" 
+  "12038" -> "12058" 
+  "12098" -> "12100" 
+  "12100" -> "12097" 
+  "12106" -> "12105" 
+  "12113" -> "12112" 
+  "12124" -> "12122" 
+  "12129" -> "12137" 
+  "12132" -> "12128" 
+  "12149" -> "12157" 
+  "12152" -> "12148" 
+  "12169" -> "12179" 
+  "12179" -> "12124" 
+  "12190" -> "12188" 
+  "12192" -> "12191" 
+  "12205" -> "12208" 
+  "12208" -> "12204" 
+  "12211" -> "12210" 
+  "12239" -> "12238" 
+  "12251" -> "12250" 
+  "12262" -> "12278" 
+  "12262" -> "12283" 
+  "12262" -> "12310" 
+  "12316" -> "12314" 
+  "12324" -> "12323" 
+  "12328" -> "12327" 
+  "12029" -> "12027" 
+  "12039" -> "12038" 
+  "12043" -> "12052" 
+  "12052" -> "12347" 
+  "12108" -> "12106" 
+  "12115" -> "12113" 
+  "12133" -> "12132" 
+  "12153" -> "12152" 
+  "12170" -> "12169" 
+  "12194" -> "12192" 
+  "12199" -> "12192" 
+  "12212" -> "12211" 
+  "12240" -> "12247" 
+  "12247" -> "12239" 
+  "12253" -> "12251" 
+  "12263" -> "12262" 
+  "12268" -> "12301" 
+  "12296" -> "12305" 
+  "12305" -> "12347" 
+  "12330" -> "12328" 
+  "12045" -> "12043" 
+  "12110" -> "12108" 
+  "12134" -> "12133" 
+  "12154" -> "12153" 
+  "12171" -> "12170" 
+  "12195" -> "12198" 
+  "12198" -> "12194" 
+  "12200" -> "12203" 
+  "12203" -> "12199" 
+  "12213" -> "12212" 
+  "12241" -> "12240" 
+  "12264" -> "12263" 
+  "12269" -> "12268" 
+  "12298" -> "12296" 
+  "12046" -> "12045" 
+  "12057" -> "12067" 
+  "12057" -> "12074" 
+  "12135" -> "12134" 
+  "12155" -> "12154" 
+  "12172" -> "12171" 
+  "12214" -> "12213" 
+  "12242" -> "12246" 
+  "12246" -> "12241" 
+  "12266" -> "12264" 
+  "12270" -> "12269" 
+  "12299" -> "12298" 
+  "12048" -> "12046" 
+  "12058" -> "12057" 
+  "12062" -> "12071" 
+  "12071" -> "12347" 
+  "12137" -> "12135" 
+  "12157" -> "12155" 
+  "12173" -> "12172" 
+  "12215" -> "12233" 
+  "12230" -> "12214" 
+  "12243" -> "12242" 
+  "12271" -> "12270" 
+  "12301" -> "12299" 
+  "12064" -> "12062" 
+  "12216" -> "12215" 
+  "12231" -> "12230" 
+  "12245" -> "12243" 
+  "12272" -> "12271" 
+  "12065" -> "12064" 
+  "12217" -> "12216" 
+  "12233" -> "12231" 
+  "12273" -> "12291" 
+  "12288" -> "12272" 
+  "12067" -> "12065" 
+  "12219" -> "12217" 
+  "12224" -> "12217" 
+  "12274" -> "12273" 
+  "12289" -> "12288" 
+  "12220" -> "12223" 
+  "12223" -> "12219" 
+  "12225" -> "12228" 
+  "12228" -> "12224" 
+  "12275" -> "12274" 
+  "12291" -> "12289" 
+  "12277" -> "12275" 
+  "12282" -> "12275" 
+  "12278" -> "12281" 
+  "12281" -> "12277" 
+  "12283" -> "12286" 
+  "12286" -> "12282" 
+  "11869" -> "11878" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/236-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/236-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/236-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/236-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,7 +1,123 @@
-digraph "SetLongArrayRegion" {  
-"12191" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2281</SUB>> ]
-"12184" [label = <(METHOD,SetLongArrayRegion)<SUB>2279</SUB>> ]
-"12197" [label = <(METHOD_RETURN,void)<SUB>2279</SUB>> ]
-  "12191" -> "12197" 
-  "12184" -> "12191" 
+digraph "UnregisterNatives" {  
+"12353" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2288</SUB>> ]
+"12373" [label = <(soa,soa(env))<SUB>2289</SUB>> ]
+"12375" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2290</SUB>> ]
+"12392" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2292</SUB>> ]
+"12407" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2294</SUB>> ]
+"12411" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2295</SUB>> ]
+"12462" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2307</SUB>> ]
+"12376" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2290</SUB>> ]
+"12383" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2290</SUB>> ]
+"12393" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2292</SUB>> ]
+"12413" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2295</SUB>> ]
+"12444" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2303</SUB>> ]
+"12377" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2290</SUB>> ]
+"12384" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2290</SUB>> ]
+"12394" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2292</SUB>> ]
+"12398" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2292</SUB>> ]
+"12414" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2295</SUB>> ]
+"12448" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2304</SUB>> ]
+"12358" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2288</SUB>> ]
+"12379" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2290</SUB>> ]
+"12385" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2290</SUB>> ]
+"12388" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2290</SUB>> ]
+"12395" [label = <(VLOG,VLOG(jni))<SUB>2292</SUB>> ]
+"12399" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2292</SUB>> ]
+"12415" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2295</SUB>> ]
+"12422" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2295</SUB>> ]
+"12432" [label = <(IsNative,m.IsNative())<SUB>2297</SUB>> ]
+"12449" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2304</SUB>> ]
+"12359" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2288</SUB>> ]
+"12363" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2288</SUB>> ]
+"12370" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2288</SUB>> ]
+"12381" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2290</SUB>> ]
+"12387" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2290</SUB>> ]
+"12390" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2290</SUB>> ]
+"12400" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2292</SUB>> ]
+"12403" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2292</SUB>> ]
+"12416" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2295</SUB>> ]
+"12433" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2297</SUB>> ]
+"12437" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2298</SUB>> ]
+"12441" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2299</SUB>> ]
+"12450" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2304</SUB>> ]
+"12454" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2305</SUB>> ]
+"12364" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2288</SUB>> ]
+"12417" [label = <(Runtime::Current,Runtime::Current())<SUB>2295</SUB>> ]
+"12421" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2295</SUB>> ]
+"12435" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2297</SUB>> ]
+"12438" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2298</SUB>> ]
+"12451" [label = <(LOG,LOG(WARNING))<SUB>2304</SUB>> ]
+"12455" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2305</SUB>> ]
+"12365" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2288</SUB>> ]
+"12367" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2288</SUB>> ]
+"12418" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2295</SUB>> ]
+"12440" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2298</SUB>> ]
+"12456" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2305</SUB>> ]
+"12459" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2305</SUB>> ]
+"12420" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2295</SUB>> ]
+"12349" [label = <(METHOD,UnregisterNatives)<SUB>2287</SUB>> ]
+"12464" [label = <(METHOD_RETURN,jint)<SUB>2287</SUB>> ]
+  "12353" -> "12359" 
+  "12353" -> "12373" 
+  "12373" -> "12381" 
+  "12375" -> "12395" 
+  "12392" -> "12407" 
+  "12407" -> "12420" 
+  "12411" -> "12435" 
+  "12462" -> "12464" 
+  "12376" -> "12387" 
+  "12383" -> "12375" 
+  "12393" -> "12392" 
+  "12413" -> "12411" 
+  "12444" -> "12451" 
+  "12444" -> "12462" 
+  "12377" -> "12376" 
+  "12384" -> "12383" 
+  "12394" -> "12400" 
+  "12398" -> "12393" 
+  "12414" -> "12413" 
+  "12448" -> "12462" 
+  "12358" -> "12365" 
+  "12358" -> "12373" 
+  "12379" -> "12377" 
+  "12385" -> "12390" 
+  "12388" -> "12384" 
+  "12395" -> "12394" 
+  "12399" -> "12398" 
+  "12415" -> "12422" 
+  "12422" -> "12414" 
+  "12432" -> "12435" 
+  "12432" -> "12440" 
+  "12432" -> "12444" 
+  "12449" -> "12448" 
+  "12359" -> "12358" 
+  "12363" -> "12370" 
+  "12370" -> "12464" 
+  "12381" -> "12379" 
+  "12387" -> "12385" 
+  "12390" -> "12388" 
+  "12400" -> "12403" 
+  "12403" -> "12399" 
+  "12416" -> "12415" 
+  "12433" -> "12432" 
+  "12437" -> "12441" 
+  "12441" -> "12435" 
+  "12441" -> "12444" 
+  "12450" -> "12456" 
+  "12454" -> "12449" 
+  "12364" -> "12363" 
+  "12417" -> "12421" 
+  "12421" -> "12416" 
+  "12435" -> "12433" 
+  "12438" -> "12437" 
+  "12451" -> "12450" 
+  "12455" -> "12454" 
+  "12365" -> "12367" 
+  "12367" -> "12364" 
+  "12418" -> "12417" 
+  "12440" -> "12438" 
+  "12456" -> "12459" 
+  "12459" -> "12455" 
+  "12420" -> "12418" 
+  "12349" -> "12353" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/237-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/237-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/237-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/237-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,7 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"12206" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2286</SUB>> ]
-"12199" [label = <(METHOD,SetShortArrayRegion)<SUB>2284</SUB>> ]
-"12212" [label = <(METHOD_RETURN,void)<SUB>2284</SUB>> ]
-  "12206" -> "12212" 
-  "12199" -> "12206" 
+digraph "MonitorEnter" {  
+"12466" [label = <(METHOD,MonitorEnter)<SUB>2310</SUB>> ]
+"12470" [label = <(METHOD_RETURN,jint)<SUB>2310</SUB>> ]
+  "12466" -> "12470" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/238-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/238-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/238-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/238-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,9 +1,5 @@
-digraph "RegisterNatives" {  
-"12220" [label = <(RETURN,return RegisterNativeMethods(env, java_class, methods, method_count, true);,return RegisterNativeMethods(env, java_class, methods, method_count, true);)<SUB>2292</SUB>> ]
-"12221" [label = <(RegisterNativeMethods,RegisterNativeMethods(env, java_class, methods, method_count, true))<SUB>2292</SUB>> ]
-"12214" [label = <(METHOD,RegisterNatives)<SUB>2290</SUB>> ]
-"12227" [label = <(METHOD_RETURN,jint)<SUB>2290</SUB>> ]
-  "12220" -> "12227" 
-  "12221" -> "12220" 
-  "12214" -> "12221" 
+digraph "MonitorExit" {  
+"12474" [label = <(METHOD,MonitorExit)<SUB>2322</SUB>> ]
+"12478" [label = <(METHOD_RETURN,jint)<SUB>2322</SUB>> ]
+  "12474" -> "12478" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/239-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/239-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/239-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/239-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,492 +1,56 @@
-digraph "RegisterNativeMethods" {  
-"12252" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2302</SUB>> ]
-"12273" [label = <(soa,soa(env))<SUB>2303</SUB>> ]
-"12275" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2304</SUB>> ]
-"12284" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2305</SUB>> ]
-"12322" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2311</SUB>> ]
-"12705" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2426</SUB>> ]
-"12237" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2297</SUB>> ]
-"12276" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2304</SUB>> ]
-"12279" [label = <(hs,hs(soa.Self()))<SUB>2304</SUB>> ]
-"12285" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2305</SUB>> ]
-"12292" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2305</SUB>> ]
-"12306" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2306</SUB>> ]
-"12348" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2312</SUB>> ]
-"12351" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2312</SUB>> ]
-"12238" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2297</SUB>> ]
-"12242" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2298</SUB>> ]
-"12250" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2300</SUB>> ]
-"12280" [label = <(Self,soa.Self())<SUB>2304</SUB>> ]
-"12286" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2305</SUB>> ]
-"12293" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2305</SUB>> ]
-"12296" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2305</SUB>> ]
-"12307" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2306</SUB>> ]
-"12311" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2307</SUB>> ]
-"12320" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2309</SUB>> ]
-"12345" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2312</SUB>> ]
-"12355" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2313</SUB>> ]
-"12363" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2314</SUB>> ]
-"12371" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2315</SUB>> ]
-"12434" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2326</SUB>> ]
-"12449" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2364</SUB>> ]
-"12453" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled())<SUB>2365</SUB>> ]
-"12667" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2409</SUB>> ]
-"12695" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr, is_fast))<SUB>2423</SUB>> ]
-"12703" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2424</SUB>> ]
-"12243" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2298</SUB>> ]
-"12258" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2302</SUB>> ]
-"12281" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2304</SUB>> ]
-"12288" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2305</SUB>> ]
-"12295" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2305</SUB>> ]
-"12297" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2305</SUB>> ]
-"12312" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2307</SUB>> ]
-"12316" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2308</SUB>> ]
-"12328" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2311</SUB>> ]
-"12357" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2313</SUB>> ]
-"12365" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2314</SUB>> ]
-"12373" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2315</SUB>> ]
-"12379" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2316</SUB>> ]
-"12438" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2356</SUB>> ]
-"12455" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled())<SUB>2365</SUB>> ]
-"12476" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2367</SUB>> ]
-"12479" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2368</SUB>> ]
-"12543" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2388</SUB>> ]
-"12668" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2409</SUB>> ]
-"12679" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2411</SUB>> ]
-"12697" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr, is_fast))<SUB>2423</SUB>> ]
-"12244" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2298</SUB>> ]
-"12246" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2298</SUB>> ]
-"12259" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2302</SUB>> ]
-"12263" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2302</SUB>> ]
-"12270" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2302</SUB>> ]
-"12283" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2304</SUB>> ]
-"12290" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2305</SUB>> ]
-"12298" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2305</SUB>> ]
-"12301" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2305</SUB>> ]
-"12313" [label = <(LOG,LOG(WARNING))<SUB>2307</SUB>> ]
-"12317" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2308</SUB>> ]
-"12329" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2311</SUB>> ]
-"12333" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2311</SUB>> ]
-"12340" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2311</SUB>> ]
-"12358" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2313</SUB>> ]
-"12361" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2313</SUB>> ]
-"12366" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2314</SUB>> ]
-"12369" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2314</SUB>> ]
-"12374" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2315</SUB>> ]
-"12377" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2315</SUB>> ]
-"12380" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2316</SUB>> ]
-"12384" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i, return_errors))<SUB>2317</SUB>> ]
-"12393" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2318</SUB>> ]
-"12439" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2356</SUB>> ]
-"12443" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2357</SUB>> ]
-"12446" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2358</SUB>> ]
-"12456" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm-&gt;IsCheckJniEnabled)<SUB>2365</SUB>> ]
-"12464" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2366</SUB>> ]
-"12481" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2368</SUB>> ]
-"12486" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2370</SUB>> ]
-"12506" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2376</SUB>> ]
-"12547" [label = <(DumpClass,c-&gt;DumpClass(\012            LOG_STREAM(return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT),\012            mirror::Class::kDumpClassFullDetail))<SUB>2389</SUB>> ]
-"12569" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2394</SUB>> ]
-"12608" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2398</SUB>> ]
-"12617" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2399</SUB>> ]
-"12669" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2409</SUB>> ]
-"12673" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2409</SUB>> ]
-"12682" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2418</SUB>> ]
-"12691" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2419</SUB>> ]
-"12698" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2423</SUB>> ]
-"12264" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2302</SUB>> ]
-"12300" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2305</SUB>> ]
-"12303" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2305</SUB>> ]
-"12319" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2308</SUB>> ]
-"12334" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2311</SUB>> ]
-"12386" [label = <(Get,c.Get())<SUB>2317</SUB>> ]
-"12457" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>2365</SUB>> ]
-"12461" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2365</SUB>> ]
-"12465" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2366</SUB>> ]
-"12472" [label = <(Get,c.Get())<SUB>2366</SUB>> ]
-"12482" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2368</SUB>> ]
-"12488" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2370</SUB>> ]
-"12501" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2371</SUB>> ]
-"12508" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2376</SUB>> ]
-"12521" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2377</SUB>> ]
-"12548" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2389</SUB>> ]
-"12551" [label = <(LOG_STREAM,LOG_STREAM(return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT))<SUB>2390</SUB>> ]
-"12564" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2393</SUB>> ]
-"12570" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2394</SUB>> ]
-"12598" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2397</SUB>> ]
-"12610" [label = <(Get,c.Get())<SUB>2398</SUB>> ]
-"12670" [label = <(VLOG,VLOG(jni))<SUB>2409</SUB>> ]
-"12674" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2409</SUB>> ]
-"12683" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2418</SUB>> ]
-"12687" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2418</SUB>> ]
-"12700" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2423</SUB>> ]
-"12265" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2302</SUB>> ]
-"12267" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2302</SUB>> ]
-"12335" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2311</SUB>> ]
-"12337" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2311</SUB>> ]
-"12387" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2317</SUB>> ]
-"12398" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2319</SUB>> ]
-"12458" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2365</SUB>> ]
-"12460" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>2365</SUB>> ]
-"12466" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2366</SUB>> ]
-"12473" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2366</SUB>> ]
-"12484" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2368</SUB>> ]
-"12489" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2370</SUB>> ]
-"12492" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2370</SUB>> ]
-"12509" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2376</SUB>> ]
-"12512" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2376</SUB>> ]
-"12529" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2382</SUB>> ]
-"12539" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2384</SUB>> ]
-"12550" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2389</SUB>> ]
-"12552" [label = <(&lt;operator&gt;.conditional,return_errors\012 ? ::android::base::ERROR\012 : ::android::base::FATAL_WITHOUT_ABORT)<SUB>2390</SUB>> ]
-"12565" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2393</SUB>> ]
-"12568" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2393</SUB>> ]
-"12571" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2394</SUB>> ]
-"12599" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2397</SUB>> ]
-"12611" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2398</SUB>> ]
-"12622" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2400</SUB>> ]
-"12676" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2409</SUB>> ]
-"12684" [label = <(LOG,LOG(WARNING))<SUB>2418</SUB>> ]
-"12688" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2418</SUB>> ]
-"12389" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2317</SUB>> ]
-"12399" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2319</SUB>> ]
-"12403" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i, return_errors))<SUB>2320</SUB>> ]
-"12412" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2321</SUB>> ]
-"12468" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2366</SUB>> ]
-"12475" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2366</SUB>> ]
-"12493" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2370</SUB>> ]
-"12513" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2376</SUB>> ]
-"12530" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2382</SUB>> ]
-"12554" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2391</SUB>> ]
-"12559" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL_WITHOUT_ABORT)<SUB>2392</SUB>> ]
-"12572" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2394</SUB>> ]
-"12600" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2397</SUB>> ]
-"12607" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2397</SUB>> ]
-"12613" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2398</SUB>> ]
-"12623" [label = <(IsNative,m-&gt;IsNative())<SUB>2400</SUB>> ]
-"12628" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2401</SUB>> ]
-"12656" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2405</SUB>> ]
-"12665" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2406</SUB>> ]
-"12690" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2418</SUB>> ]
-"12405" [label = <(Get,c.Get())<SUB>2320</SUB>> ]
-"12470" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2366</SUB>> ]
-"12494" [label = <(Ptr,current_class.Ptr())<SUB>2370</SUB>> ]
-"12514" [label = <(Ptr,current_class.Ptr())<SUB>2376</SUB>> ]
-"12531" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2382</SUB>> ]
-"12555" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2391</SUB>> ]
-"12558" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2391</SUB>> ]
-"12560" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2392</SUB>> ]
-"12563" [label = <(FIELD_IDENTIFIER,FATAL_WITHOUT_ABORT,FATAL_WITHOUT_ABORT)<SUB>2392</SUB>> ]
-"12573" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2394</SUB>> ]
-"12601" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2397</SUB>> ]
-"12624" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2400</SUB>> ]
-"12629" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2401</SUB>> ]
-"12658" [label = <(Get,c.Get())<SUB>2405</SUB>> ]
-"12406" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2320</SUB>> ]
-"12417" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2322</SUB>> ]
-"12495" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2370</SUB>> ]
-"12515" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2376</SUB>> ]
-"12532" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2382</SUB>> ]
-"12574" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2394</SUB>> ]
-"12602" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2397</SUB>> ]
-"12606" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2397</SUB>> ]
-"12626" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2400</SUB>> ]
-"12630" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2401</SUB>> ]
-"12659" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2405</SUB>> ]
-"12408" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2320</SUB>> ]
-"12418" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2322</SUB>> ]
-"12422" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i, return_errors))<SUB>2323</SUB>> ]
-"12431" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2324</SUB>> ]
-"12497" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2370</SUB>> ]
-"12517" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2376</SUB>> ]
-"12533" [label = <(LOG,LOG(WARNING))<SUB>2382</SUB>> ]
-"12575" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2394</SUB>> ]
-"12590" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2396</SUB>> ]
-"12603" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2397</SUB>> ]
-"12631" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2401</SUB>> ]
-"12661" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2405</SUB>> ]
-"12424" [label = <(Get,c.Get())<SUB>2323</SUB>> ]
-"12576" [label = <(LOG,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL))<SUB>2394</SUB>> ]
-"12591" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2396</SUB>> ]
-"12605" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2397</SUB>> ]
-"12632" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2401</SUB>> ]
-"12425" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2323</SUB>> ]
-"12577" [label = <(&lt;operator&gt;.conditional,return_errors ? ::android::base::ERROR : ::android::base::FATAL)<SUB>2394</SUB>> ]
-"12593" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2396</SUB>> ]
-"12633" [label = <(&lt;operator&gt;.shiftLeft,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2401</SUB>> ]
-"12648" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2403</SUB>> ]
-"12427" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2323</SUB>> ]
-"12579" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2394</SUB>> ]
-"12584" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL)<SUB>2394</SUB>> ]
-"12634" [label = <(LOG,LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL))<SUB>2401</SUB>> ]
-"12649" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2403</SUB>> ]
-"12580" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2394</SUB>> ]
-"12583" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2394</SUB>> ]
-"12585" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2394</SUB>> ]
-"12588" [label = <(FIELD_IDENTIFIER,FATAL,FATAL)<SUB>2394</SUB>> ]
-"12635" [label = <(&lt;operator&gt;.conditional,return_errors ? ::android::base::ERROR : ::android::base::FATAL)<SUB>2401</SUB>> ]
-"12651" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2403</SUB>> ]
-"12637" [label = <(&lt;operator&gt;.fieldAccess,::android::base::ERROR)<SUB>2401</SUB>> ]
-"12642" [label = <(&lt;operator&gt;.fieldAccess,::android::base::FATAL)<SUB>2401</SUB>> ]
-"12638" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2401</SUB>> ]
-"12641" [label = <(FIELD_IDENTIFIER,ERROR,ERROR)<SUB>2401</SUB>> ]
-"12643" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2401</SUB>> ]
-"12646" [label = <(FIELD_IDENTIFIER,FATAL,FATAL)<SUB>2401</SUB>> ]
-"12229" [label = <(METHOD,RegisterNativeMethods)<SUB>2295</SUB>> ]
-"12707" [label = <(METHOD_RETURN,jint)<SUB>2295</SUB>> ]
-  "12252" -> "12259" 
-  "12252" -> "12273" 
-  "12273" -> "12276" 
-  "12275" -> "12290" 
-  "12284" -> "12307" 
-  "12322" -> "12329" 
-  "12322" -> "12345" 
-  "12705" -> "12707" 
-  "12237" -> "12244" 
-  "12237" -> "12252" 
-  "12276" -> "12283" 
-  "12279" -> "12275" 
-  "12285" -> "12295" 
-  "12292" -> "12284" 
-  "12306" -> "12313" 
-  "12306" -> "12322" 
-  "12348" -> "12358" 
-  "12348" -> "12705" 
-  "12351" -> "12348" 
-  "12238" -> "12237" 
-  "12242" -> "12250" 
-  "12250" -> "12707" 
-  "12280" -> "12279" 
-  "12286" -> "12285" 
-  "12293" -> "12300" 
-  "12296" -> "12292" 
-  "12307" -> "12306" 
-  "12311" -> "12320" 
-  "12320" -> "12707" 
-  "12345" -> "12348" 
-  "12355" -> "12366" 
-  "12363" -> "12374" 
-  "12371" -> "12380" 
-  "12434" -> "12439" 
-  "12449" -> "12458" 
-  "12453" -> "12470" 
-  "12667" -> "12679" 
-  "12695" -> "12703" 
-  "12703" -> "12351" 
-  "12243" -> "12242" 
-  "12258" -> "12265" 
-  "12258" -> "12273" 
-  "12281" -> "12280" 
-  "12288" -> "12286" 
-  "12295" -> "12293" 
-  "12297" -> "12296" 
-  "12312" -> "12319" 
-  "12316" -> "12311" 
-  "12328" -> "12335" 
-  "12328" -> "12345" 
-  "12357" -> "12355" 
-  "12365" -> "12363" 
-  "12373" -> "12371" 
-  "12379" -> "12389" 
-  "12379" -> "12399" 
-  "12438" -> "12443" 
-  "12438" -> "12449" 
-  "12455" -> "12453" 
-  "12476" -> "12489" 
-  "12476" -> "12543" 
-  "12479" -> "12476" 
-  "12543" -> "12550" 
-  "12543" -> "12626" 
-  "12668" -> "12667" 
-  "12679" -> "12684" 
-  "12679" -> "12700" 
-  "12697" -> "12695" 
-  "12244" -> "12246" 
-  "12246" -> "12243" 
-  "12259" -> "12258" 
-  "12263" -> "12270" 
-  "12270" -> "12707" 
-  "12283" -> "12281" 
-  "12290" -> "12288" 
-  "12298" -> "12303" 
-  "12301" -> "12297" 
-  "12313" -> "12312" 
-  "12317" -> "12316" 
-  "12329" -> "12328" 
-  "12333" -> "12340" 
-  "12340" -> "12707" 
-  "12358" -> "12361" 
-  "12361" -> "12357" 
-  "12366" -> "12369" 
-  "12369" -> "12365" 
-  "12374" -> "12377" 
-  "12377" -> "12373" 
-  "12380" -> "12379" 
-  "12384" -> "12393" 
-  "12393" -> "12707" 
-  "12439" -> "12438" 
-  "12443" -> "12446" 
-  "12446" -> "12449" 
-  "12456" -> "12455" 
-  "12464" -> "12476" 
-  "12481" -> "12479" 
-  "12486" -> "12501" 
-  "12506" -> "12521" 
-  "12547" -> "12580" 
-  "12547" -> "12585" 
-  "12569" -> "12613" 
-  "12608" -> "12617" 
-  "12617" -> "12707" 
-  "12669" -> "12676" 
-  "12673" -> "12668" 
-  "12682" -> "12691" 
-  "12691" -> "12700" 
-  "12698" -> "12697" 
-  "12264" -> "12263" 
-  "12300" -> "12298" 
-  "12303" -> "12301" 
-  "12319" -> "12317" 
-  "12334" -> "12333" 
-  "12386" -> "12384" 
-  "12457" -> "12461" 
-  "12461" -> "12456" 
-  "12465" -> "12475" 
-  "12472" -> "12464" 
-  "12482" -> "12481" 
-  "12488" -> "12486" 
-  "12501" -> "12543" 
-  "12501" -> "12509" 
+digraph "GetJavaVM" {  
+"12486" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2335</SUB>> ]
+"12506" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2336</SUB>> ]
+"12530" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2342</SUB>> ]
+"12508" [label = <(Runtime::Current,Runtime::Current())<SUB>2336</SUB>> ]
+"12513" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2337</SUB>> ]
+"12531" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2342</SUB>> ]
+"12509" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2336</SUB>> ]
+"12517" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2338</SUB>> ]
+"12532" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2342</SUB>> ]
+"12491" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2335</SUB>> ]
+"12511" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2336</SUB>> ]
+"12518" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2338</SUB>> ]
+"12520" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2338</SUB>> ]
+"12526" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2340</SUB>> ]
+"12533" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2342</SUB>> ]
+"12492" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2335</SUB>> ]
+"12496" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;vm == null&quot;))<SUB>2335</SUB>> ]
+"12503" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2335</SUB>> ]
+"12521" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2338</SUB>> ]
+"12527" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2340</SUB>> ]
+"12497" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2335</SUB>> ]
+"12523" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2338</SUB>> ]
+"12498" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2335</SUB>> ]
+"12500" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2335</SUB>> ]
+"12482" [label = <(METHOD,GetJavaVM)<SUB>2334</SUB>> ]
+"12538" [label = <(METHOD_RETURN,jint)<SUB>2334</SUB>> ]
+  "12486" -> "12492" 
+  "12486" -> "12511" 
+  "12506" -> "12513" 
+  "12530" -> "12538" 
   "12508" -> "12506" 
-  "12521" -> "12543" 
-  "12521" -> "12533" 
-  "12521" -> "12484" 
-  "12548" -> "12555" 
-  "12548" -> "12560" 
-  "12551" -> "12565" 
-  "12564" -> "12547" 
-  "12570" -> "12605" 
-  "12598" -> "12569" 
-  "12610" -> "12608" 
-  "12670" -> "12669" 
-  "12674" -> "12673" 
-  "12683" -> "12690" 
-  "12687" -> "12682" 
-  "12700" -> "12698" 
-  "12265" -> "12267" 
-  "12267" -> "12264" 
-  "12335" -> "12337" 
-  "12337" -> "12334" 
-  "12387" -> "12386" 
-  "12398" -> "12408" 
-  "12398" -> "12418" 
-  "12458" -> "12460" 
-  "12460" -> "12457" 
-  "12466" -> "12465" 
-  "12473" -> "12472" 
-  "12484" -> "12482" 
-  "12489" -> "12497" 
-  "12492" -> "12488" 
-  "12509" -> "12517" 
-  "12512" -> "12508" 
-  "12529" -> "12539" 
-  "12539" -> "12484" 
-  "12550" -> "12548" 
-  "12552" -> "12551" 
-  "12565" -> "12568" 
-  "12568" -> "12564" 
-  "12571" -> "12570" 
-  "12599" -> "12598" 
-  "12611" -> "12610" 
-  "12622" -> "12638" 
-  "12622" -> "12643" 
-  "12622" -> "12670" 
-  "12676" -> "12674" 
-  "12684" -> "12683" 
-  "12688" -> "12687" 
-  "12389" -> "12387" 
-  "12399" -> "12398" 
-  "12403" -> "12412" 
-  "12412" -> "12707" 
-  "12468" -> "12466" 
-  "12475" -> "12473" 
-  "12493" -> "12492" 
-  "12513" -> "12512" 
-  "12530" -> "12529" 
-  "12554" -> "12552" 
-  "12559" -> "12552" 
-  "12572" -> "12571" 
-  "12600" -> "12607" 
-  "12607" -> "12599" 
-  "12613" -> "12611" 
-  "12623" -> "12622" 
-  "12628" -> "12661" 
-  "12656" -> "12665" 
-  "12665" -> "12707" 
-  "12690" -> "12688" 
-  "12405" -> "12403" 
-  "12470" -> "12468" 
-  "12494" -> "12493" 
-  "12514" -> "12513" 
+  "12513" -> "12518" 
+  "12513" -> "12527" 
   "12531" -> "12530" 
-  "12555" -> "12558" 
-  "12558" -> "12554" 
-  "12560" -> "12563" 
-  "12563" -> "12559" 
-  "12573" -> "12572" 
-  "12601" -> "12600" 
-  "12624" -> "12623" 
-  "12629" -> "12628" 
-  "12658" -> "12656" 
-  "12406" -> "12405" 
-  "12417" -> "12427" 
-  "12417" -> "12434" 
-  "12495" -> "12494" 
-  "12515" -> "12514" 
+  "12509" -> "12508" 
+  "12517" -> "12533" 
   "12532" -> "12531" 
-  "12574" -> "12573" 
-  "12602" -> "12606" 
-  "12606" -> "12601" 
-  "12626" -> "12624" 
-  "12630" -> "12629" 
-  "12659" -> "12658" 
-  "12408" -> "12406" 
-  "12418" -> "12417" 
-  "12422" -> "12431" 
-  "12431" -> "12707" 
-  "12497" -> "12495" 
-  "12517" -> "12515" 
+  "12491" -> "12498" 
+  "12491" -> "12511" 
+  "12511" -> "12509" 
+  "12518" -> "12523" 
+  "12520" -> "12517" 
+  "12526" -> "12533" 
   "12533" -> "12532" 
-  "12575" -> "12593" 
-  "12590" -> "12574" 
-  "12603" -> "12602" 
-  "12631" -> "12630" 
-  "12661" -> "12659" 
-  "12424" -> "12422" 
-  "12576" -> "12575" 
-  "12591" -> "12590" 
-  "12605" -> "12603" 
-  "12632" -> "12631" 
-  "12425" -> "12424" 
-  "12577" -> "12576" 
-  "12593" -> "12591" 
-  "12633" -> "12651" 
-  "12648" -> "12632" 
-  "12427" -> "12425" 
-  "12579" -> "12577" 
-  "12584" -> "12577" 
-  "12634" -> "12633" 
-  "12649" -> "12648" 
-  "12580" -> "12583" 
-  "12583" -> "12579" 
-  "12585" -> "12588" 
-  "12588" -> "12584" 
-  "12635" -> "12634" 
-  "12651" -> "12649" 
-  "12637" -> "12635" 
-  "12642" -> "12635" 
-  "12638" -> "12641" 
-  "12641" -> "12637" 
-  "12643" -> "12646" 
-  "12646" -> "12642" 
-  "12229" -> "12238" 
+  "12492" -> "12491" 
+  "12496" -> "12503" 
+  "12503" -> "12538" 
+  "12521" -> "12520" 
+  "12527" -> "12526" 
+  "12497" -> "12496" 
+  "12523" -> "12521" 
+  "12498" -> "12500" 
+  "12500" -> "12497" 
+  "12482" -> "12486" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/24-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/24-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/24-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/24-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,63 +1,84 @@
-digraph "ToReflectedField" {  
-"875" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>483</SUB>> ]
-"894" [label = <(soa,soa(env))<SUB>484</SUB>> ]
-"897" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>485</SUB>> ]
-"904" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>486</SUB>> ]
-"899" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>485</SUB>> ]
-"905" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>486</SUB>> ]
-"900" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>485</SUB>> ]
-"906" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>486</SUB>> ]
-"911" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>487</SUB>> ]
-"879" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>483</SUB>> ]
-"902" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>485</SUB>> ]
-"907" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>486</SUB>> ]
-"912" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>487</SUB>> ]
-"919" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>487</SUB>> ]
-"880" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>483</SUB>> ]
-"884" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;fid == null&quot;))<SUB>483</SUB>> ]
-"891" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>483</SUB>> ]
-"909" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>486</SUB>> ]
-"913" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>487</SUB>> ]
-"920" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>487</SUB>> ]
-"885" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>483</SUB>> ]
-"914" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>487</SUB>> ]
-"917" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>487</SUB>> ]
-"921" [label = <(Self,soa.Self())<SUB>487</SUB>> ]
-"886" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>483</SUB>> ]
-"888" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>483</SUB>> ]
-"922" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>487</SUB>> ]
-"924" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>487</SUB>> ]
-"869" [label = <(METHOD,ToReflectedField)<SUB>482</SUB>> ]
-"927" [label = <(METHOD_RETURN,jobject)<SUB>482</SUB>> ]
-  "875" -> "880" 
-  "875" -> "894" 
-  "894" -> "902" 
-  "897" -> "909" 
-  "904" -> "927" 
-  "899" -> "897" 
-  "905" -> "904" 
-  "900" -> "899" 
-  "906" -> "914" 
-  "911" -> "905" 
-  "879" -> "886" 
-  "879" -> "894" 
-  "902" -> "900" 
-  "907" -> "906" 
-  "912" -> "924" 
-  "919" -> "911" 
-  "880" -> "879" 
-  "884" -> "891" 
-  "891" -> "927" 
-  "909" -> "907" 
-  "913" -> "912" 
-  "920" -> "919" 
-  "885" -> "884" 
-  "914" -> "917" 
-  "917" -> "913" 
-  "921" -> "920" 
-  "886" -> "888" 
-  "888" -> "885" 
-  "922" -> "921" 
-  "924" -> "922" 
-  "869" -> "875" 
+digraph "IsInstanceOf" {  
+"947" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>435</SUB>> ]
+"967" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>436</SUB>> ]
+"971" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>438</SUB>> ]
+"952" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>435</SUB>> ]
+"976" [label = <(soa,soa(env))<SUB>440</SUB>> ]
+"978" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>441</SUB>> ]
+"995" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>442</SUB>> ]
+"1012" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>443</SUB>> ]
+"953" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>435</SUB>> ]
+"957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>435</SUB>> ]
+"964" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>435</SUB>> ]
+"979" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>441</SUB>> ]
+"986" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>441</SUB>> ]
+"996" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>442</SUB>> ]
+"1003" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>442</SUB>> ]
+"1013" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>443</SUB>> ]
+"958" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>435</SUB>> ]
+"980" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>441</SUB>> ]
+"987" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>441</SUB>> ]
+"997" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>442</SUB>> ]
+"1004" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>442</SUB>> ]
+"1014" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>443</SUB>> ]
+"959" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>435</SUB>> ]
+"961" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>435</SUB>> ]
+"982" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>441</SUB>> ]
+"988" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>441</SUB>> ]
+"991" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>441</SUB>> ]
+"999" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>442</SUB>> ]
+"1005" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>442</SUB>> ]
+"1008" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>442</SUB>> ]
+"1015" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>443</SUB>> ]
+"984" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>441</SUB>> ]
+"990" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>441</SUB>> ]
+"993" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>441</SUB>> ]
+"1001" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>442</SUB>> ]
+"1007" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>442</SUB>> ]
+"1010" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>442</SUB>> ]
+"1017" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>443</SUB>> ]
+"942" [label = <(METHOD,IsInstanceOf)<SUB>434</SUB>> ]
+"1021" [label = <(METHOD_RETURN,jboolean)<SUB>434</SUB>> ]
+  "947" -> "953" 
+  "947" -> "967" 
+  "967" -> "971" 
+  "967" -> "976" 
+  "971" -> "1021" 
+  "952" -> "959" 
+  "952" -> "967" 
+  "976" -> "984" 
+  "978" -> "1001" 
+  "995" -> "1017" 
+  "1012" -> "1021" 
+  "953" -> "952" 
+  "957" -> "964" 
+  "964" -> "1021" 
+  "979" -> "990" 
+  "986" -> "978" 
+  "996" -> "1007" 
+  "1003" -> "995" 
+  "1013" -> "1012" 
+  "958" -> "957" 
+  "980" -> "979" 
+  "987" -> "986" 
+  "997" -> "996" 
+  "1004" -> "1003" 
+  "1014" -> "1013" 
+  "959" -> "961" 
+  "961" -> "958" 
+  "982" -> "980" 
+  "988" -> "993" 
+  "991" -> "987" 
+  "999" -> "997" 
+  "1005" -> "1010" 
+  "1008" -> "1004" 
+  "1015" -> "1014" 
+  "984" -> "982" 
+  "990" -> "988" 
+  "993" -> "991" 
+  "1001" -> "999" 
+  "1007" -> "1005" 
+  "1010" -> "1008" 
+  "1017" -> "1015" 
+  "942" -> "947" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/240-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/240-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/240-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/240-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,123 +1,83 @@
-digraph "UnregisterNatives" {  
-"12713" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2430</SUB>> ]
-"12733" [label = <(soa,soa(env))<SUB>2431</SUB>> ]
-"12735" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2432</SUB>> ]
-"12752" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2434</SUB>> ]
-"12767" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2436</SUB>> ]
-"12771" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2437</SUB>> ]
-"12822" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2449</SUB>> ]
-"12736" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2432</SUB>> ]
-"12743" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2432</SUB>> ]
-"12753" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2434</SUB>> ]
-"12773" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2437</SUB>> ]
-"12804" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2445</SUB>> ]
-"12737" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2432</SUB>> ]
-"12744" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2432</SUB>> ]
-"12754" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2434</SUB>> ]
-"12758" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2434</SUB>> ]
-"12774" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2437</SUB>> ]
-"12808" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2446</SUB>> ]
-"12718" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2430</SUB>> ]
-"12739" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2432</SUB>> ]
-"12745" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2432</SUB>> ]
-"12748" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2432</SUB>> ]
-"12755" [label = <(VLOG,VLOG(jni))<SUB>2434</SUB>> ]
-"12759" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2434</SUB>> ]
-"12775" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2437</SUB>> ]
-"12782" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2437</SUB>> ]
-"12792" [label = <(IsNative,m.IsNative())<SUB>2439</SUB>> ]
-"12809" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2446</SUB>> ]
-"12719" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2430</SUB>> ]
-"12723" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2430</SUB>> ]
-"12730" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2430</SUB>> ]
-"12741" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2432</SUB>> ]
-"12747" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2432</SUB>> ]
-"12750" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2432</SUB>> ]
-"12760" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2434</SUB>> ]
-"12763" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2434</SUB>> ]
-"12776" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2437</SUB>> ]
-"12793" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2439</SUB>> ]
-"12797" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2440</SUB>> ]
-"12801" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2441</SUB>> ]
-"12810" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2446</SUB>> ]
-"12814" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2447</SUB>> ]
-"12724" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2430</SUB>> ]
-"12777" [label = <(Runtime::Current,Runtime::Current())<SUB>2437</SUB>> ]
-"12781" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2437</SUB>> ]
-"12795" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2439</SUB>> ]
-"12798" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2440</SUB>> ]
-"12811" [label = <(LOG,LOG(WARNING))<SUB>2446</SUB>> ]
-"12815" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2447</SUB>> ]
-"12725" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2430</SUB>> ]
-"12727" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2430</SUB>> ]
-"12778" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2437</SUB>> ]
-"12800" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2440</SUB>> ]
-"12816" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2447</SUB>> ]
-"12819" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2447</SUB>> ]
-"12780" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2437</SUB>> ]
-"12709" [label = <(METHOD,UnregisterNatives)<SUB>2429</SUB>> ]
-"12824" [label = <(METHOD_RETURN,jint)<SUB>2429</SUB>> ]
-  "12713" -> "12719" 
-  "12713" -> "12733" 
-  "12733" -> "12741" 
-  "12735" -> "12755" 
-  "12752" -> "12767" 
-  "12767" -> "12780" 
-  "12771" -> "12795" 
-  "12822" -> "12824" 
-  "12736" -> "12747" 
-  "12743" -> "12735" 
-  "12753" -> "12752" 
-  "12773" -> "12771" 
-  "12804" -> "12811" 
-  "12804" -> "12822" 
-  "12737" -> "12736" 
-  "12744" -> "12743" 
-  "12754" -> "12760" 
-  "12758" -> "12753" 
-  "12774" -> "12773" 
-  "12808" -> "12822" 
-  "12718" -> "12725" 
-  "12718" -> "12733" 
-  "12739" -> "12737" 
-  "12745" -> "12750" 
-  "12748" -> "12744" 
-  "12755" -> "12754" 
-  "12759" -> "12758" 
-  "12775" -> "12782" 
-  "12782" -> "12774" 
-  "12792" -> "12795" 
-  "12792" -> "12800" 
-  "12792" -> "12804" 
-  "12809" -> "12808" 
-  "12719" -> "12718" 
-  "12723" -> "12730" 
-  "12730" -> "12824" 
-  "12741" -> "12739" 
-  "12747" -> "12745" 
-  "12750" -> "12748" 
-  "12760" -> "12763" 
-  "12763" -> "12759" 
-  "12776" -> "12775" 
-  "12793" -> "12792" 
-  "12797" -> "12801" 
-  "12801" -> "12795" 
-  "12801" -> "12804" 
-  "12810" -> "12816" 
-  "12814" -> "12809" 
-  "12724" -> "12723" 
-  "12777" -> "12781" 
-  "12781" -> "12776" 
-  "12795" -> "12793" 
-  "12798" -> "12797" 
-  "12811" -> "12810" 
-  "12815" -> "12814" 
-  "12725" -> "12727" 
-  "12727" -> "12724" 
-  "12778" -> "12777" 
-  "12800" -> "12798" 
-  "12816" -> "12819" 
-  "12819" -> "12815" 
-  "12780" -> "12778" 
-  "12709" -> "12713" 
+digraph "NewDirectByteBuffer" {  
+"12580" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2364</SUB>> ]
+"12586" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2365</SUB>> ]
+"12592" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2367</SUB>> ]
+"12606" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2370</SUB>> ]
+"12546" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2346</SUB>> ]
+"12556" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2351</SUB>> ]
+"12570" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2358</SUB>> ]
+"12582" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2364</SUB>> ]
+"12588" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2365</SUB>> ]
+"12594" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2367</SUB>> ]
+"12607" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result)<SUB>2370</SUB>> ]
+"12551" [label = <(UNKNOWN,),))<SUB>2347</SUB>> ]
+"12552" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2347</SUB>> ]
+"12553" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2349</SUB>> ]
+"12557" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2351</SUB>> ]
+"12560" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2351</SUB>> ]
+"12565" [label = <(UNKNOWN,),))<SUB>2352</SUB>> ]
+"12566" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2352</SUB>> ]
+"12567" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2354</SUB>> ]
+"12575" [label = <(UNKNOWN,),))<SUB>2359</SUB>> ]
+"12576" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2359</SUB>> ]
+"12577" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2362</SUB>> ]
+"12583" [label = <(UNKNOWN,jlong,jlong)<SUB>2364</SUB>> ]
+"12589" [label = <(UNKNOWN,jint,jint)<SUB>2365</SUB>> ]
+"12595" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2367</SUB>> ]
+"12598" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2367</SUB>> ]
+"12601" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2368</SUB>> ]
+"12608" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending())<SUB>2370</SUB>> ]
+"12597" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2367</SUB>> ]
+"12600" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2367</SUB>> ]
+"12603" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2368</SUB>> ]
+"12609" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending)<SUB>2370</SUB>> ]
+"12610" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>2370</SUB>> ]
+"12615" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2370</SUB>> ]
+"12611" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2370</SUB>> ]
+"12614" [label = <(FIELD_IDENTIFIER,self,self)<SUB>2370</SUB>> ]
+"12612" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2370</SUB>> ]
+"12540" [label = <(METHOD,NewDirectByteBuffer)<SUB>2345</SUB>> ]
+"12618" [label = <(METHOD_RETURN,jobject)<SUB>2345</SUB>> ]
+  "12580" -> "12589" 
+  "12586" -> "12597" 
+  "12592" -> "12612" 
+  "12606" -> "12618" 
+  "12546" -> "12551" 
+  "12546" -> "12557" 
+  "12556" -> "12565" 
+  "12556" -> "12570" 
+  "12570" -> "12575" 
+  "12570" -> "12583" 
+  "12582" -> "12580" 
+  "12588" -> "12586" 
+  "12594" -> "12592" 
+  "12607" -> "12606" 
+  "12551" -> "12552" 
+  "12552" -> "12553" 
+  "12553" -> "12618" 
+  "12557" -> "12556" 
+  "12557" -> "12560" 
+  "12560" -> "12556" 
+  "12565" -> "12566" 
+  "12566" -> "12567" 
+  "12567" -> "12618" 
+  "12575" -> "12576" 
+  "12576" -> "12577" 
+  "12577" -> "12618" 
+  "12583" -> "12582" 
+  "12589" -> "12588" 
+  "12595" -> "12600" 
+  "12598" -> "12603" 
+  "12601" -> "12594" 
+  "12608" -> "12607" 
+  "12597" -> "12595" 
+  "12600" -> "12598" 
+  "12603" -> "12601" 
+  "12609" -> "12608" 
+  "12610" -> "12615" 
+  "12615" -> "12609" 
+  "12611" -> "12614" 
+  "12614" -> "12610" 
+  "12612" -> "12611" 
+  "12540" -> "12546" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/241-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/241-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/241-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/241-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorEnter" {  
-"12826" [label = <(METHOD,MonitorEnter)<SUB>2452</SUB>> ]
-"12830" [label = <(METHOD_RETURN,jint)<SUB>2452</SUB>> ]
-  "12826" -> "12830" 
+digraph "GetDirectBufferAddress" {  
+"12624" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2374</SUB>> ]
+"12625" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2374</SUB>> ]
+"12626" [label = <(UNKNOWN,void*,void*)<SUB>2374</SUB>> ]
+"12627" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2374</SUB>> ]
+"12628" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2374</SUB>> ]
+"12632" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2375</SUB>> ]
+"12630" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2374</SUB>> ]
+"12634" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2375</SUB>> ]
+"12620" [label = <(METHOD,GetDirectBufferAddress)<SUB>2373</SUB>> ]
+"12635" [label = <(METHOD_RETURN,void*)<SUB>2373</SUB>> ]
+  "12624" -> "12635" 
+  "12625" -> "12624" 
+  "12626" -> "12630" 
+  "12627" -> "12625" 
+  "12628" -> "12634" 
+  "12632" -> "12627" 
+  "12630" -> "12628" 
+  "12634" -> "12632" 
+  "12620" -> "12626" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/242-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/242-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/242-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/242-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorExit" {  
-"12834" [label = <(METHOD,MonitorExit)<SUB>2464</SUB>> ]
-"12838" [label = <(METHOD_RETURN,jint)<SUB>2464</SUB>> ]
-  "12834" -> "12838" 
+digraph "GetDirectBufferCapacity" {  
+"12641" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2379</SUB>> ]
+"12642" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2379</SUB>> ]
+"12643" [label = <(UNKNOWN,jlong,jlong)<SUB>2379</SUB>> ]
+"12644" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2379</SUB>> ]
+"12645" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2379</SUB>> ]
+"12649" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2380</SUB>> ]
+"12647" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2379</SUB>> ]
+"12651" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2380</SUB>> ]
+"12637" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2378</SUB>> ]
+"12652" [label = <(METHOD_RETURN,jlong)<SUB>2378</SUB>> ]
+  "12641" -> "12652" 
+  "12642" -> "12641" 
+  "12643" -> "12647" 
+  "12644" -> "12642" 
+  "12645" -> "12651" 
+  "12649" -> "12644" 
+  "12647" -> "12645" 
+  "12651" -> "12649" 
+  "12637" -> "12643" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/243-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/243-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/243-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/243-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,56 +1,5 @@
-digraph "GetJavaVM" {  
-"12846" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2477</SUB>> ]
-"12866" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2478</SUB>> ]
-"12890" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2484</SUB>> ]
-"12868" [label = <(Runtime::Current,Runtime::Current())<SUB>2478</SUB>> ]
-"12873" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2479</SUB>> ]
-"12891" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2484</SUB>> ]
-"12869" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2478</SUB>> ]
-"12877" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2480</SUB>> ]
-"12892" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2484</SUB>> ]
-"12851" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2477</SUB>> ]
-"12871" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2478</SUB>> ]
-"12878" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2480</SUB>> ]
-"12880" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2480</SUB>> ]
-"12886" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2482</SUB>> ]
-"12893" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2484</SUB>> ]
-"12852" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2477</SUB>> ]
-"12856" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;vm == null&quot;))<SUB>2477</SUB>> ]
-"12863" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2477</SUB>> ]
-"12881" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2480</SUB>> ]
-"12887" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2482</SUB>> ]
-"12857" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2477</SUB>> ]
-"12883" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2480</SUB>> ]
-"12858" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2477</SUB>> ]
-"12860" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2477</SUB>> ]
-"12842" [label = <(METHOD,GetJavaVM)<SUB>2476</SUB>> ]
-"12898" [label = <(METHOD_RETURN,jint)<SUB>2476</SUB>> ]
-  "12846" -> "12852" 
-  "12846" -> "12871" 
-  "12866" -> "12873" 
-  "12890" -> "12898" 
-  "12868" -> "12866" 
-  "12873" -> "12878" 
-  "12873" -> "12887" 
-  "12891" -> "12890" 
-  "12869" -> "12868" 
-  "12877" -> "12893" 
-  "12892" -> "12891" 
-  "12851" -> "12858" 
-  "12851" -> "12871" 
-  "12871" -> "12869" 
-  "12878" -> "12883" 
-  "12880" -> "12877" 
-  "12886" -> "12893" 
-  "12893" -> "12892" 
-  "12852" -> "12851" 
-  "12856" -> "12863" 
-  "12863" -> "12898" 
-  "12881" -> "12880" 
-  "12887" -> "12886" 
-  "12857" -> "12856" 
-  "12883" -> "12881" 
-  "12858" -> "12860" 
-  "12860" -> "12857" 
-  "12842" -> "12846" 
+digraph "EnsureLocalCapacityInternal" {  
+"12655" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2407</SUB>> ]
+"12660" [label = <(METHOD_RETURN,jint)<SUB>2407</SUB>> ]
+  "12655" -> "12660" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/244-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/244-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/244-cfg.dot	2023-06-07 19:35:14.817385841 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/244-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,83 +1,33 @@
-digraph "NewDirectByteBuffer" {  
-"12940" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2506</SUB>> ]
-"12946" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2507</SUB>> ]
-"12952" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2509</SUB>> ]
-"12966" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2512</SUB>> ]
-"12906" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2488</SUB>> ]
-"12916" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2493</SUB>> ]
-"12930" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2500</SUB>> ]
-"12942" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2506</SUB>> ]
-"12948" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2507</SUB>> ]
-"12954" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2509</SUB>> ]
-"12967" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? nullptr : result)<SUB>2512</SUB>> ]
-"12911" [label = <(UNKNOWN,),))<SUB>2489</SUB>> ]
-"12912" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2489</SUB>> ]
-"12913" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2491</SUB>> ]
-"12917" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2493</SUB>> ]
-"12920" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2493</SUB>> ]
-"12925" [label = <(UNKNOWN,),))<SUB>2494</SUB>> ]
-"12926" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2494</SUB>> ]
-"12927" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2496</SUB>> ]
-"12935" [label = <(UNKNOWN,),))<SUB>2501</SUB>> ]
-"12936" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2501</SUB>> ]
-"12937" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2504</SUB>> ]
-"12943" [label = <(UNKNOWN,jlong,jlong)<SUB>2506</SUB>> ]
-"12949" [label = <(UNKNOWN,jint,jint)<SUB>2507</SUB>> ]
-"12955" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2509</SUB>> ]
-"12958" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2509</SUB>> ]
-"12961" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2510</SUB>> ]
-"12968" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending())<SUB>2512</SUB>> ]
-"12957" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2509</SUB>> ]
-"12960" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2509</SUB>> ]
-"12963" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2510</SUB>> ]
-"12969" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending)<SUB>2512</SUB>> ]
-"12970" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>2512</SUB>> ]
-"12975" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2512</SUB>> ]
-"12971" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2512</SUB>> ]
-"12974" [label = <(FIELD_IDENTIFIER,self,self)<SUB>2512</SUB>> ]
-"12972" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2512</SUB>> ]
-"12900" [label = <(METHOD,NewDirectByteBuffer)<SUB>2487</SUB>> ]
-"12978" [label = <(METHOD_RETURN,jobject)<SUB>2487</SUB>> ]
-  "12940" -> "12949" 
-  "12946" -> "12957" 
-  "12952" -> "12972" 
-  "12966" -> "12978" 
-  "12906" -> "12911" 
-  "12906" -> "12917" 
-  "12916" -> "12925" 
-  "12916" -> "12930" 
-  "12930" -> "12935" 
-  "12930" -> "12943" 
-  "12942" -> "12940" 
-  "12948" -> "12946" 
-  "12954" -> "12952" 
-  "12967" -> "12966" 
-  "12911" -> "12912" 
-  "12912" -> "12913" 
-  "12913" -> "12978" 
-  "12917" -> "12916" 
-  "12917" -> "12920" 
-  "12920" -> "12916" 
-  "12925" -> "12926" 
-  "12926" -> "12927" 
-  "12927" -> "12978" 
-  "12935" -> "12936" 
-  "12936" -> "12937" 
-  "12937" -> "12978" 
-  "12943" -> "12942" 
-  "12949" -> "12948" 
-  "12955" -> "12960" 
-  "12958" -> "12963" 
-  "12961" -> "12954" 
-  "12968" -> "12967" 
-  "12957" -> "12955" 
-  "12960" -> "12958" 
-  "12963" -> "12961" 
-  "12969" -> "12968" 
-  "12970" -> "12975" 
-  "12975" -> "12969" 
-  "12971" -> "12974" 
-  "12974" -> "12970" 
-  "12972" -> "12971" 
-  "12900" -> "12906" 
+digraph "&lt;clinit&gt;" {  
+"12670" [label = <(&lt;operator&gt;.assignment,capacity = soa.Env()-&gt;locals.Capacity())<SUB>2416</SUB>> ]
+"12681" [label = <(&lt;operator&gt;.assignment,okay = (static_cast&lt;jint&gt;(kLocalsInitial - capacity) &gt;= desired_capacity))<SUB>2417</SUB>> ]
+"12672" [label = <(Capacity,soa.Env()-&gt;locals.Capacity())<SUB>2416</SUB>> ]
+"12683" [label = <(&lt;operator&gt;.greaterEqualsThan,static_cast&lt;jint&gt;(kLocalsInitial - capacity) &gt;= desired_capacity)<SUB>2417</SUB>> ]
+"12673" [label = <(&lt;operator&gt;.fieldAccess,soa.Env()-&gt;locals.Capacity)<SUB>2416</SUB>> ]
+"12684" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(kLocalsInitial - capacity))<SUB>2417</SUB>> ]
+"12674" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;locals)<SUB>2416</SUB>> ]
+"12680" [label = <(FIELD_IDENTIFIER,Capacity,Capacity)<SUB>2416</SUB>> ]
+"12685" [label = <(UNKNOWN,jint,jint)<SUB>2417</SUB>> ]
+"12686" [label = <(&lt;operator&gt;.subtraction,kLocalsInitial - capacity)<SUB>2417</SUB>> ]
+"12675" [label = <(Env,soa.Env())<SUB>2416</SUB>> ]
+"12679" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>2416</SUB>> ]
+"12676" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>2416</SUB>> ]
+"12678" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>2416</SUB>> ]
+"12668" [label = <(METHOD,&lt;clinit&gt;)> ]
+"12691" [label = <(METHOD_RETURN,ANY)> ]
+  "12670" -> "12685" 
+  "12681" -> "12691" 
+  "12672" -> "12670" 
+  "12683" -> "12681" 
+  "12673" -> "12672" 
+  "12684" -> "12683" 
+  "12674" -> "12680" 
+  "12680" -> "12673" 
+  "12685" -> "12686" 
+  "12686" -> "12684" 
+  "12675" -> "12679" 
+  "12679" -> "12674" 
+  "12676" -> "12675" 
+  "12678" -> "12676" 
+  "12668" -> "12678" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/245-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/245-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/245-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/245-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,21 +1,50 @@
-digraph "GetDirectBufferAddress" {  
-"12984" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2516</SUB>> ]
-"12985" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2516</SUB>> ]
-"12986" [label = <(UNKNOWN,void*,void*)<SUB>2516</SUB>> ]
-"12987" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2516</SUB>> ]
-"12988" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2516</SUB>> ]
-"12992" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2517</SUB>> ]
-"12990" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2516</SUB>> ]
-"12994" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2517</SUB>> ]
-"12980" [label = <(METHOD,GetDirectBufferAddress)<SUB>2515</SUB>> ]
-"12995" [label = <(METHOD_RETURN,void*)<SUB>2515</SUB>> ]
-  "12984" -> "12995" 
-  "12985" -> "12984" 
-  "12986" -> "12990" 
-  "12987" -> "12985" 
-  "12988" -> "12994" 
-  "12992" -> "12987" 
-  "12990" -> "12988" 
-  "12994" -> "12992" 
-  "12980" -> "12986" 
+digraph "NewPrimitiveArray" {  
+"12698" [label = <(soa,soa(env))<SUB>2426</SUB>> ]
+"12719" [label = <(&lt;operator&gt;.assignment,* result = ArtT::Alloc(soa.Self(), length))<SUB>2431</SUB>> ]
+"12730" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2432</SUB>> ]
+"12701" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2427</SUB>> ]
+"12721" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2431</SUB>> ]
+"12731" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2432</SUB>> ]
+"12702" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2427</SUB>> ]
+"12706" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2428</SUB>> ]
+"12716" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2429</SUB>> ]
+"12722" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2431</SUB>> ]
+"12725" [label = <(Self,soa.Self())<SUB>2431</SUB>> ]
+"12732" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2432</SUB>> ]
+"12707" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2428</SUB>> ]
+"12724" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2431</SUB>> ]
+"12726" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2431</SUB>> ]
+"12733" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2432</SUB>> ]
+"12708" [label = <(Vm,soa.Vm())<SUB>2428</SUB>> ]
+"12712" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2428</SUB>> ]
+"12728" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2431</SUB>> ]
+"12735" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2432</SUB>> ]
+"12709" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2428</SUB>> ]
+"12711" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2428</SUB>> ]
+"12693" [label = <(METHOD,NewPrimitiveArray)<SUB>2425</SUB>> ]
+"12738" [label = <(METHOD_RETURN,JniT)<SUB>2425</SUB>> ]
+  "12698" -> "12702" 
+  "12719" -> "12735" 
+  "12730" -> "12738" 
+  "12701" -> "12711" 
+  "12701" -> "12724" 
+  "12721" -> "12719" 
+  "12731" -> "12730" 
+  "12702" -> "12701" 
+  "12706" -> "12716" 
+  "12716" -> "12738" 
+  "12722" -> "12728" 
+  "12725" -> "12721" 
+  "12732" -> "12731" 
+  "12707" -> "12706" 
+  "12724" -> "12722" 
+  "12726" -> "12725" 
+  "12733" -> "12732" 
+  "12708" -> "12712" 
+  "12712" -> "12707" 
+  "12728" -> "12726" 
+  "12735" -> "12733" 
+  "12709" -> "12708" 
+  "12711" -> "12709" 
+  "12693" -> "12698" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/246-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/246-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/246-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/246-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,21 +1,5 @@
-digraph "GetDirectBufferCapacity" {  
-"13001" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2521</SUB>> ]
-"13002" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2521</SUB>> ]
-"13003" [label = <(UNKNOWN,jlong,jlong)<SUB>2521</SUB>> ]
-"13004" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2521</SUB>> ]
-"13005" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2521</SUB>> ]
-"13009" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2522</SUB>> ]
-"13007" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2521</SUB>> ]
-"13011" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2522</SUB>> ]
-"12997" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2520</SUB>> ]
-"13012" [label = <(METHOD_RETURN,jlong)<SUB>2520</SUB>> ]
-  "13001" -> "13012" 
-  "13002" -> "13001" 
-  "13003" -> "13007" 
-  "13004" -> "13002" 
-  "13005" -> "13011" 
-  "13009" -> "13004" 
-  "13007" -> "13005" 
-  "13011" -> "13009" 
-  "12997" -> "13003" 
+digraph "DecodeAndCheckArrayType" {  
+"12740" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2436</SUB>> ]
+"12746" [label = <(METHOD_RETURN,ArtArrayT*)<SUB>2436</SUB>> ]
+  "12740" -> "12746" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/247-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/247-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/247-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/247-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,5 +1,113 @@
-digraph "EnsureLocalCapacityInternal" {  
-"13015" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2549</SUB>> ]
-"13020" [label = <(METHOD_RETURN,jint)<SUB>2549</SUB>> ]
-  "13015" -> "13020" 
+digraph "GetPrimitiveArray" {  
+"12759" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2455</SUB>> ]
+"12778" [label = <(soa,soa(env))<SUB>2456</SUB>> ]
+"12781" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2457</SUB>> ]
+"12783" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2457</SUB>> ]
+"12789" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2460</SUB>> ]
+"12797" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2464</SUB>> ]
+"12790" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2460</SUB>> ]
+"12794" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2461</SUB>> ]
+"12798" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2464</SUB>> ]
+"12819" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2468</SUB>> ]
+"12824" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2469</SUB>> ]
+"12833" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2470</SUB>> ]
+"12837" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2471</SUB>> ]
+"12844" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2472</SUB>> ]
+"12763" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2455</SUB>> ]
+"12799" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2464</SUB>> ]
+"12806" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2464</SUB>> ]
+"12810" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2465</SUB>> ]
+"12821" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2468</SUB>> ]
+"12826" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2469</SUB>> ]
+"12835" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2470</SUB>> ]
+"12839" [label = <(GetData,array-&gt;GetData())<SUB>2471</SUB>> ]
+"12845" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2472</SUB>> ]
+"12859" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2477</SUB>> ]
+"12764" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2455</SUB>> ]
+"12768" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2455</SUB>> ]
+"12775" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2455</SUB>> ]
+"12800" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2464</SUB>> ]
+"12814" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2466</SUB>> ]
+"12827" [label = <(GetLength,array-&gt;GetLength())<SUB>2469</SUB>> ]
+"12840" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2471</SUB>> ]
+"12846" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2472</SUB>> ]
+"12851" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2474</SUB>> ]
+"12860" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2477</SUB>> ]
+"12769" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2455</SUB>> ]
+"12801" [label = <(Runtime::Current,Runtime::Current())<SUB>2464</SUB>> ]
+"12805" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2464</SUB>> ]
+"12815" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2466</SUB>> ]
+"12828" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2469</SUB>> ]
+"12842" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2471</SUB>> ]
+"12855" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2475</SUB>> ]
+"12861" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2477</SUB>> ]
+"12862" [label = <(GetData,array-&gt;GetData())<SUB>2477</SUB>> ]
+"12770" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2455</SUB>> ]
+"12772" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2455</SUB>> ]
+"12802" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2464</SUB>> ]
+"12830" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2469</SUB>> ]
+"12856" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2475</SUB>> ]
+"12863" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2477</SUB>> ]
+"12804" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2464</SUB>> ]
+"12865" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2477</SUB>> ]
+"12754" [label = <(METHOD,GetPrimitiveArray)<SUB>2454</SUB>> ]
+"12866" [label = <(METHOD_RETURN,ElementT)<SUB>2454</SUB>> ]
+  "12759" -> "12764" 
+  "12759" -> "12778" 
+  "12778" -> "12783" 
+  "12781" -> "12790" 
+  "12783" -> "12781" 
+  "12789" -> "12794" 
+  "12789" -> "12804" 
+  "12797" -> "12810" 
+  "12797" -> "12851" 
+  "12790" -> "12789" 
+  "12794" -> "12866" 
+  "12798" -> "12797" 
+  "12819" -> "12830" 
+  "12824" -> "12835" 
+  "12833" -> "12842" 
+  "12837" -> "12846" 
+  "12844" -> "12866" 
+  "12763" -> "12770" 
+  "12763" -> "12778" 
+  "12799" -> "12806" 
+  "12806" -> "12798" 
+  "12810" -> "12815" 
+  "12810" -> "12821" 
+  "12821" -> "12819" 
+  "12826" -> "12824" 
+  "12835" -> "12833" 
+  "12839" -> "12837" 
+  "12845" -> "12844" 
+  "12859" -> "12866" 
+  "12764" -> "12763" 
+  "12768" -> "12775" 
+  "12775" -> "12866" 
+  "12800" -> "12799" 
+  "12814" -> "12821" 
+  "12827" -> "12826" 
+  "12840" -> "12839" 
+  "12846" -> "12845" 
+  "12851" -> "12861" 
+  "12851" -> "12856" 
+  "12860" -> "12859" 
+  "12769" -> "12768" 
+  "12801" -> "12805" 
+  "12805" -> "12800" 
+  "12815" -> "12814" 
+  "12828" -> "12827" 
+  "12842" -> "12840" 
+  "12855" -> "12861" 
+  "12861" -> "12865" 
+  "12862" -> "12860" 
+  "12770" -> "12772" 
+  "12772" -> "12769" 
+  "12802" -> "12801" 
+  "12830" -> "12828" 
+  "12856" -> "12855" 
+  "12863" -> "12862" 
+  "12804" -> "12802" 
+  "12865" -> "12863" 
+  "12754" -> "12759" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/248-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/248-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/248-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/248-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,33 +1,38 @@
-digraph "&lt;clinit&gt;" {  
-"13030" [label = <(&lt;operator&gt;.assignment,capacity = soa.Env()-&gt;locals.Capacity())<SUB>2558</SUB>> ]
-"13041" [label = <(&lt;operator&gt;.assignment,okay = (static_cast&lt;jint&gt;(kLocalsInitial - capacity) &gt;= desired_capacity))<SUB>2559</SUB>> ]
-"13032" [label = <(Capacity,soa.Env()-&gt;locals.Capacity())<SUB>2558</SUB>> ]
-"13043" [label = <(&lt;operator&gt;.greaterEqualsThan,static_cast&lt;jint&gt;(kLocalsInitial - capacity) &gt;= desired_capacity)<SUB>2559</SUB>> ]
-"13033" [label = <(&lt;operator&gt;.fieldAccess,soa.Env()-&gt;locals.Capacity)<SUB>2558</SUB>> ]
-"13044" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(kLocalsInitial - capacity))<SUB>2559</SUB>> ]
-"13034" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;locals)<SUB>2558</SUB>> ]
-"13040" [label = <(FIELD_IDENTIFIER,Capacity,Capacity)<SUB>2558</SUB>> ]
-"13045" [label = <(UNKNOWN,jint,jint)<SUB>2559</SUB>> ]
-"13046" [label = <(&lt;operator&gt;.subtraction,kLocalsInitial - capacity)<SUB>2559</SUB>> ]
-"13035" [label = <(Env,soa.Env())<SUB>2558</SUB>> ]
-"13039" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>2558</SUB>> ]
-"13036" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>2558</SUB>> ]
-"13038" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>2558</SUB>> ]
-"13028" [label = <(METHOD,&lt;clinit&gt;)> ]
-"13051" [label = <(METHOD_RETURN,ANY)> ]
-  "13030" -> "13045" 
-  "13041" -> "13051" 
-  "13032" -> "13030" 
-  "13043" -> "13041" 
-  "13033" -> "13032" 
-  "13044" -> "13043" 
-  "13034" -> "13040" 
-  "13040" -> "13033" 
-  "13045" -> "13046" 
-  "13046" -> "13044" 
-  "13035" -> "13039" 
-  "13039" -> "13034" 
-  "13036" -> "13035" 
-  "13038" -> "13036" 
-  "13028" -> "13038" 
+digraph "ReleasePrimitiveArray" {  
+"12874" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2483</SUB>> ]
+"12892" [label = <(soa,soa(env))<SUB>2484</SUB>> ]
+"12895" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2485</SUB>> ]
+"12908" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2491</SUB>> ]
+"12897" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2485</SUB>> ]
+"12903" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2488</SUB>> ]
+"12911" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2491</SUB>> ]
+"12907" [label = <(RETURN,return;,return;)<SUB>2489</SUB>> ]
+"12878" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2483</SUB>> ]
+"12879" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2483</SUB>> ]
+"12883" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2483</SUB>> ]
+"12890" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2483</SUB>> ]
+"12884" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2483</SUB>> ]
+"12885" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2483</SUB>> ]
+"12887" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2483</SUB>> ]
+"12868" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2482</SUB>> ]
+"12915" [label = <(METHOD_RETURN,void)<SUB>2482</SUB>> ]
+  "12874" -> "12879" 
+  "12874" -> "12892" 
+  "12892" -> "12897" 
+  "12895" -> "12903" 
+  "12908" -> "12915" 
+  "12897" -> "12895" 
+  "12903" -> "12907" 
+  "12903" -> "12911" 
+  "12911" -> "12908" 
+  "12907" -> "12915" 
+  "12878" -> "12885" 
+  "12878" -> "12892" 
+  "12879" -> "12878" 
+  "12883" -> "12890" 
+  "12890" -> "12915" 
+  "12884" -> "12883" 
+  "12885" -> "12887" 
+  "12887" -> "12884" 
+  "12868" -> "12874" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/249-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/249-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/249-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/249-cfg.dot	2023-06-07 19:35:21.357385036 +0330
@@ -1,50 +1,5 @@
-digraph "NewPrimitiveArray" {  
-"13058" [label = <(soa,soa(env))<SUB>2568</SUB>> ]
-"13079" [label = <(&lt;operator&gt;.assignment,* result = ArtT::Alloc(soa.Self(), length))<SUB>2573</SUB>> ]
-"13090" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2574</SUB>> ]
-"13061" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2569</SUB>> ]
-"13081" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2573</SUB>> ]
-"13091" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2574</SUB>> ]
-"13062" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2569</SUB>> ]
-"13066" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2570</SUB>> ]
-"13076" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2571</SUB>> ]
-"13082" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2573</SUB>> ]
-"13085" [label = <(Self,soa.Self())<SUB>2573</SUB>> ]
-"13092" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2574</SUB>> ]
-"13067" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2570</SUB>> ]
-"13084" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2573</SUB>> ]
-"13086" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2573</SUB>> ]
-"13093" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2574</SUB>> ]
-"13068" [label = <(Vm,soa.Vm())<SUB>2570</SUB>> ]
-"13072" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2570</SUB>> ]
-"13088" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2573</SUB>> ]
-"13095" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2574</SUB>> ]
-"13069" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2570</SUB>> ]
-"13071" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2570</SUB>> ]
-"13053" [label = <(METHOD,NewPrimitiveArray)<SUB>2567</SUB>> ]
-"13098" [label = <(METHOD_RETURN,JniT)<SUB>2567</SUB>> ]
-  "13058" -> "13062" 
-  "13079" -> "13095" 
-  "13090" -> "13098" 
-  "13061" -> "13071" 
-  "13061" -> "13084" 
-  "13081" -> "13079" 
-  "13091" -> "13090" 
-  "13062" -> "13061" 
-  "13066" -> "13076" 
-  "13076" -> "13098" 
-  "13082" -> "13088" 
-  "13085" -> "13081" 
-  "13092" -> "13091" 
-  "13067" -> "13066" 
-  "13084" -> "13082" 
-  "13086" -> "13085" 
-  "13093" -> "13092" 
-  "13068" -> "13072" 
-  "13072" -> "13067" 
-  "13088" -> "13086" 
-  "13095" -> "13093" 
-  "13069" -> "13068" 
-  "13071" -> "13069" 
-  "13053" -> "13058" 
+digraph "ReleasePrimitiveArray" {  
+"12917" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2494</SUB>> ]
+"12924" [label = <(METHOD_RETURN,void)<SUB>2494</SUB>> ]
+  "12917" -> "12924" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/25-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/25-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/25-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/25-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,63 +1,48 @@
-digraph "GetObjectClass" {  
-"933" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>491</SUB>> ]
-"952" [label = <(soa,soa(env))<SUB>492</SUB>> ]
-"954" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>493</SUB>> ]
-"971" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>494</SUB>> ]
-"955" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>493</SUB>> ]
-"962" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>493</SUB>> ]
-"972" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>494</SUB>> ]
-"956" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>493</SUB>> ]
-"963" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>493</SUB>> ]
-"973" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>494</SUB>> ]
-"978" [label = <(GetClass,o-&gt;GetClass())<SUB>494</SUB>> ]
-"937" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>491</SUB>> ]
-"958" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>493</SUB>> ]
-"964" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>493</SUB>> ]
-"967" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>493</SUB>> ]
-"974" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>494</SUB>> ]
-"979" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>494</SUB>> ]
-"938" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>491</SUB>> ]
-"942" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_object == null&quot;))<SUB>491</SUB>> ]
-"949" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>491</SUB>> ]
-"960" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>493</SUB>> ]
-"966" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>493</SUB>> ]
-"969" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>493</SUB>> ]
-"976" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>494</SUB>> ]
-"981" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>494</SUB>> ]
-"943" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>491</SUB>> ]
-"944" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>491</SUB>> ]
-"946" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>491</SUB>> ]
-"929" [label = <(METHOD,GetObjectClass)<SUB>490</SUB>> ]
-"982" [label = <(METHOD_RETURN,jclass)<SUB>490</SUB>> ]
-  "933" -> "938" 
-  "933" -> "952" 
-  "952" -> "960" 
-  "954" -> "976" 
-  "971" -> "982" 
-  "955" -> "966" 
-  "962" -> "954" 
-  "972" -> "971" 
-  "956" -> "955" 
-  "963" -> "962" 
-  "973" -> "981" 
-  "978" -> "972" 
-  "937" -> "944" 
-  "937" -> "952" 
-  "958" -> "956" 
-  "964" -> "969" 
-  "967" -> "963" 
-  "974" -> "973" 
-  "979" -> "978" 
-  "938" -> "937" 
-  "942" -> "949" 
-  "949" -> "982" 
-  "960" -> "958" 
-  "966" -> "964" 
-  "969" -> "967" 
-  "976" -> "974" 
-  "981" -> "979" 
-  "943" -> "942" 
-  "944" -> "946" 
-  "946" -> "943" 
-  "929" -> "933" 
+digraph "Throw" {  
+"1028" [label = <(soa,soa(env))<SUB>448</SUB>> ]
+"1030" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>449</SUB>> ]
+"1054" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>453</SUB>> ]
+"1062" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>454</SUB>> ]
+"1031" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>449</SUB>> ]
+"1038" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>449</SUB>> ]
+"1048" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>450</SUB>> ]
+"1055" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>453</SUB>> ]
+"1032" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>449</SUB>> ]
+"1039" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>449</SUB>> ]
+"1052" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>451</SUB>> ]
+"1056" [label = <(Self,soa.Self())<SUB>453</SUB>> ]
+"1060" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>453</SUB>> ]
+"1034" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>449</SUB>> ]
+"1040" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>449</SUB>> ]
+"1043" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>449</SUB>> ]
+"1057" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>453</SUB>> ]
+"1036" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>449</SUB>> ]
+"1042" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>449</SUB>> ]
+"1045" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>449</SUB>> ]
+"1059" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>453</SUB>> ]
+"1023" [label = <(METHOD,Throw)<SUB>447</SUB>> ]
+"1064" [label = <(METHOD_RETURN,jint)<SUB>447</SUB>> ]
+  "1028" -> "1036" 
+  "1030" -> "1048" 
+  "1054" -> "1062" 
+  "1062" -> "1064" 
+  "1031" -> "1042" 
+  "1038" -> "1030" 
+  "1048" -> "1052" 
+  "1048" -> "1059" 
+  "1055" -> "1054" 
+  "1032" -> "1031" 
+  "1039" -> "1038" 
+  "1052" -> "1064" 
+  "1056" -> "1060" 
+  "1060" -> "1055" 
+  "1034" -> "1032" 
+  "1040" -> "1045" 
+  "1043" -> "1039" 
+  "1057" -> "1056" 
+  "1036" -> "1034" 
+  "1042" -> "1040" 
+  "1045" -> "1043" 
+  "1059" -> "1057" 
+  "1023" -> "1028" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/250-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/250-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/250-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/250-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,5 +1,94 @@
-digraph "DecodeAndCheckArrayType" {  
-"13100" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2578</SUB>> ]
-"13106" [label = <(METHOD_RETURN,ArtArrayT*)<SUB>2578</SUB>> ]
-  "13100" -> "13106" 
+digraph "GetPrimitiveArrayRegion" {  
+"12963" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2536</SUB>> ]
+"12981" [label = <(soa,soa(env))<SUB>2537</SUB>> ]
+"12984" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2538</SUB>> ]
+"12986" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2539</SUB>> ]
+"12992" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2542</SUB>> ]
+"12967" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2536</SUB>> ]
+"12997" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2543</SUB>> ]
+"12968" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2536</SUB>> ]
+"12972" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2536</SUB>> ]
+"12979" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2536</SUB>> ]
+"12998" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2543</SUB>> ]
+"13005" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2543</SUB>> ]
+"13014" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2544</SUB>> ]
+"12973" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2536</SUB>> ]
+"12999" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2543</SUB>> ]
+"13002" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2543</SUB>> ]
+"13007" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2543</SUB>> ]
+"13022" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2546</SUB>> ]
+"13045" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2547</SUB>> ]
+"13051" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2548</SUB>> ]
+"12974" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2536</SUB>> ]
+"12976" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2536</SUB>> ]
+"13008" [label = <(GetLength,array-&gt;GetLength())<SUB>2543</SUB>> ]
+"13047" [label = <(GetData,array-&gt;GetData())<SUB>2547</SUB>> ]
+"13053" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2548</SUB>> ]
+"13056" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2548</SUB>> ]
+"13009" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2543</SUB>> ]
+"13048" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2547</SUB>> ]
+"13058" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2548</SUB>> ]
+"13011" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2543</SUB>> ]
+"13027" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2546</SUB>> ]
+"13050" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2547</SUB>> ]
+"13028" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2546</SUB>> ]
+"13036" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>2546</SUB>> ]
+"13043" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2546</SUB>> ]
+"13029" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2546</SUB>> ]
+"13032" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2546</SUB>> ]
+"13037" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2546</SUB>> ]
+"13038" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2546</SUB>> ]
+"13040" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2546</SUB>> ]
+"12956" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2534</SUB>> ]
+"13060" [label = <(METHOD_RETURN,void)<SUB>2534</SUB>> ]
+  "12963" -> "12968" 
+  "12963" -> "12981" 
+  "12981" -> "12986" 
+  "12984" -> "12992" 
+  "12986" -> "12984" 
+  "12992" -> "13060" 
+  "12992" -> "12999" 
+  "12967" -> "12974" 
+  "12967" -> "12981" 
+  "12997" -> "13014" 
+  "12997" -> "13022" 
+  "12968" -> "12967" 
+  "12972" -> "12979" 
+  "12979" -> "13060" 
+  "12998" -> "12997" 
+  "12998" -> "13011" 
+  "13005" -> "12997" 
+  "13014" -> "13060" 
+  "12973" -> "12972" 
+  "12999" -> "12998" 
+  "12999" -> "13002" 
+  "13002" -> "12998" 
+  "13007" -> "13005" 
+  "13022" -> "13029" 
+  "13022" -> "13050" 
+  "13045" -> "13053" 
+  "13051" -> "13060" 
+  "12974" -> "12976" 
+  "12976" -> "12973" 
+  "13008" -> "13007" 
+  "13047" -> "13045" 
+  "13053" -> "13058" 
+  "13056" -> "13051" 
+  "13009" -> "13008" 
+  "13048" -> "13047" 
+  "13058" -> "13056" 
+  "13011" -> "13009" 
+  "13027" -> "13038" 
+  "13027" -> "13050" 
+  "13050" -> "13048" 
+  "13028" -> "13027" 
+  "13036" -> "13043" 
+  "13043" -> "13060" 
+  "13029" -> "13028" 
+  "13029" -> "13032" 
+  "13032" -> "13028" 
+  "13037" -> "13036" 
+  "13038" -> "13040" 
+  "13040" -> "13037" 
+  "12956" -> "12963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/251-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/251-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/251-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/251-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,113 +1,94 @@
-digraph "GetPrimitiveArray" {  
-"13119" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2597</SUB>> ]
-"13138" [label = <(soa,soa(env))<SUB>2598</SUB>> ]
-"13141" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2599</SUB>> ]
-"13143" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2599</SUB>> ]
-"13149" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2602</SUB>> ]
-"13157" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2606</SUB>> ]
-"13150" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2602</SUB>> ]
-"13154" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2603</SUB>> ]
-"13158" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2606</SUB>> ]
-"13179" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2610</SUB>> ]
-"13184" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2611</SUB>> ]
-"13193" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2612</SUB>> ]
-"13197" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2613</SUB>> ]
-"13204" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2614</SUB>> ]
-"13123" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2597</SUB>> ]
-"13159" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2606</SUB>> ]
-"13166" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2606</SUB>> ]
-"13170" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2607</SUB>> ]
-"13181" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2610</SUB>> ]
-"13186" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2611</SUB>> ]
-"13195" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2612</SUB>> ]
-"13199" [label = <(GetData,array-&gt;GetData())<SUB>2613</SUB>> ]
-"13205" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2614</SUB>> ]
-"13219" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2619</SUB>> ]
-"13124" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2597</SUB>> ]
-"13128" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2597</SUB>> ]
-"13135" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2597</SUB>> ]
-"13160" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2606</SUB>> ]
-"13174" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2608</SUB>> ]
-"13187" [label = <(GetLength,array-&gt;GetLength())<SUB>2611</SUB>> ]
-"13200" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2613</SUB>> ]
-"13206" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2614</SUB>> ]
-"13211" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2616</SUB>> ]
-"13220" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2619</SUB>> ]
-"13129" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2597</SUB>> ]
-"13161" [label = <(Runtime::Current,Runtime::Current())<SUB>2606</SUB>> ]
-"13165" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2606</SUB>> ]
-"13175" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2608</SUB>> ]
-"13188" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2611</SUB>> ]
-"13202" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2613</SUB>> ]
-"13215" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2617</SUB>> ]
-"13221" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2619</SUB>> ]
-"13222" [label = <(GetData,array-&gt;GetData())<SUB>2619</SUB>> ]
-"13130" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2597</SUB>> ]
-"13132" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2597</SUB>> ]
-"13162" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2606</SUB>> ]
-"13190" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2611</SUB>> ]
-"13216" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2617</SUB>> ]
-"13223" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2619</SUB>> ]
-"13164" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2606</SUB>> ]
-"13225" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2619</SUB>> ]
-"13114" [label = <(METHOD,GetPrimitiveArray)<SUB>2596</SUB>> ]
-"13226" [label = <(METHOD_RETURN,ElementT)<SUB>2596</SUB>> ]
-  "13119" -> "13124" 
-  "13119" -> "13138" 
-  "13138" -> "13143" 
-  "13141" -> "13150" 
-  "13143" -> "13141" 
-  "13149" -> "13154" 
-  "13149" -> "13164" 
-  "13157" -> "13170" 
-  "13157" -> "13211" 
-  "13150" -> "13149" 
-  "13154" -> "13226" 
-  "13158" -> "13157" 
-  "13179" -> "13190" 
-  "13184" -> "13195" 
-  "13193" -> "13202" 
-  "13197" -> "13206" 
-  "13204" -> "13226" 
-  "13123" -> "13130" 
-  "13123" -> "13138" 
-  "13159" -> "13166" 
-  "13166" -> "13158" 
-  "13170" -> "13175" 
-  "13170" -> "13181" 
-  "13181" -> "13179" 
-  "13186" -> "13184" 
-  "13195" -> "13193" 
-  "13199" -> "13197" 
-  "13205" -> "13204" 
-  "13219" -> "13226" 
-  "13124" -> "13123" 
+digraph "SetPrimitiveArrayRegion" {  
+"13069" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2556</SUB>> ]
+"13087" [label = <(soa,soa(env))<SUB>2557</SUB>> ]
+"13090" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2558</SUB>> ]
+"13092" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2559</SUB>> ]
+"13098" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2562</SUB>> ]
+"13073" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2556</SUB>> ]
+"13103" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2563</SUB>> ]
+"13074" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2556</SUB>> ]
+"13078" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2556</SUB>> ]
+"13085" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2556</SUB>> ]
+"13104" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2563</SUB>> ]
+"13111" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2563</SUB>> ]
+"13120" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2564</SUB>> ]
+"13079" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2556</SUB>> ]
+"13105" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2563</SUB>> ]
+"13108" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2563</SUB>> ]
+"13113" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2563</SUB>> ]
+"13128" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2566</SUB>> ]
+"13151" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2567</SUB>> ]
+"13157" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2568</SUB>> ]
+"13080" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2556</SUB>> ]
+"13082" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2556</SUB>> ]
+"13114" [label = <(GetLength,array-&gt;GetLength())<SUB>2563</SUB>> ]
+"13153" [label = <(GetData,array-&gt;GetData())<SUB>2567</SUB>> ]
+"13158" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2568</SUB>> ]
+"13162" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2568</SUB>> ]
+"13115" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2563</SUB>> ]
+"13154" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2567</SUB>> ]
+"13164" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2568</SUB>> ]
+"13117" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2563</SUB>> ]
+"13133" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2566</SUB>> ]
+"13156" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2567</SUB>> ]
+"13134" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2566</SUB>> ]
+"13142" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>2566</SUB>> ]
+"13149" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2566</SUB>> ]
+"13135" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2566</SUB>> ]
+"13138" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2566</SUB>> ]
+"13143" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2566</SUB>> ]
+"13144" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2566</SUB>> ]
+"13146" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2566</SUB>> ]
+"13062" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2554</SUB>> ]
+"13166" [label = <(METHOD_RETURN,void)<SUB>2554</SUB>> ]
+  "13069" -> "13074" 
+  "13069" -> "13087" 
+  "13087" -> "13092" 
+  "13090" -> "13098" 
+  "13092" -> "13090" 
+  "13098" -> "13166" 
+  "13098" -> "13105" 
+  "13073" -> "13080" 
+  "13073" -> "13087" 
+  "13103" -> "13120" 
+  "13103" -> "13128" 
+  "13074" -> "13073" 
+  "13078" -> "13085" 
+  "13085" -> "13166" 
+  "13104" -> "13103" 
+  "13104" -> "13117" 
+  "13111" -> "13103" 
+  "13120" -> "13166" 
+  "13079" -> "13078" 
+  "13105" -> "13104" 
+  "13105" -> "13108" 
+  "13108" -> "13104" 
+  "13113" -> "13111" 
   "13128" -> "13135" 
-  "13135" -> "13226" 
-  "13160" -> "13159" 
-  "13174" -> "13181" 
-  "13187" -> "13186" 
-  "13200" -> "13199" 
-  "13206" -> "13205" 
-  "13211" -> "13221" 
-  "13211" -> "13216" 
-  "13220" -> "13219" 
-  "13129" -> "13128" 
-  "13161" -> "13165" 
-  "13165" -> "13160" 
-  "13175" -> "13174" 
-  "13188" -> "13187" 
-  "13202" -> "13200" 
-  "13215" -> "13221" 
-  "13221" -> "13225" 
-  "13222" -> "13220" 
-  "13130" -> "13132" 
-  "13132" -> "13129" 
-  "13162" -> "13161" 
-  "13190" -> "13188" 
-  "13216" -> "13215" 
-  "13223" -> "13222" 
+  "13128" -> "13156" 
+  "13151" -> "13158" 
+  "13157" -> "13166" 
+  "13080" -> "13082" 
+  "13082" -> "13079" 
+  "13114" -> "13113" 
+  "13153" -> "13151" 
+  "13158" -> "13164" 
+  "13162" -> "13157" 
+  "13115" -> "13114" 
+  "13154" -> "13153" 
   "13164" -> "13162" 
-  "13225" -> "13223" 
-  "13114" -> "13119" 
+  "13117" -> "13115" 
+  "13133" -> "13144" 
+  "13133" -> "13156" 
+  "13156" -> "13154" 
+  "13134" -> "13133" 
+  "13142" -> "13149" 
+  "13149" -> "13166" 
+  "13135" -> "13134" 
+  "13135" -> "13138" 
+  "13138" -> "13134" 
+  "13143" -> "13142" 
+  "13144" -> "13146" 
+  "13146" -> "13143" 
+  "13062" -> "13069" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/252-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/252-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/252-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/252-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,38 +1,9 @@
-digraph "ReleasePrimitiveArray" {  
-"13234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2625</SUB>> ]
-"13252" [label = <(soa,soa(env))<SUB>2626</SUB>> ]
-"13255" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2627</SUB>> ]
-"13268" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2633</SUB>> ]
-"13257" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2627</SUB>> ]
-"13263" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2630</SUB>> ]
-"13271" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2633</SUB>> ]
-"13267" [label = <(RETURN,return;,return;)<SUB>2631</SUB>> ]
-"13238" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2625</SUB>> ]
-"13239" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2625</SUB>> ]
-"13243" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2625</SUB>> ]
-"13250" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2625</SUB>> ]
-"13244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2625</SUB>> ]
-"13245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2625</SUB>> ]
-"13247" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2625</SUB>> ]
-"13228" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2624</SUB>> ]
-"13275" [label = <(METHOD_RETURN,void)<SUB>2624</SUB>> ]
-  "13234" -> "13239" 
-  "13234" -> "13252" 
-  "13252" -> "13257" 
-  "13255" -> "13263" 
-  "13268" -> "13275" 
-  "13257" -> "13255" 
-  "13263" -> "13267" 
-  "13263" -> "13271" 
-  "13271" -> "13268" 
-  "13267" -> "13275" 
-  "13238" -> "13245" 
-  "13238" -> "13252" 
-  "13239" -> "13238" 
-  "13243" -> "13250" 
-  "13250" -> "13275" 
-  "13244" -> "13243" 
-  "13245" -> "13247" 
-  "13247" -> "13244" 
-  "13228" -> "13234" 
+digraph "GetJniNativeInterface" {  
+"13866" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>2811</SUB>> ]
+"13867" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>2811</SUB>> ]
+"13864" [label = <(METHOD,GetJniNativeInterface)<SUB>2810</SUB>> ]
+"13869" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>2810</SUB>> ]
+  "13866" -> "13869" 
+  "13867" -> "13866" 
+  "13864" -> "13867" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/253-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/253-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/253-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/253-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray" {  
-"13277" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2636</SUB>> ]
-"13284" [label = <(METHOD_RETURN,void)<SUB>2636</SUB>> ]
-  "13277" -> "13284" 
+digraph "gJniSleepForeverStub" {  
+"13871" [label = <(METHOD,gJniSleepForeverStub)<SUB>2814</SUB>> ]
+"13873" [label = <(METHOD_RETURN,void)<SUB>2814</SUB>> ]
+  "13871" -> "13873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/254-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/254-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/254-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/254-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,94 +1,13 @@
-digraph "GetPrimitiveArrayRegion" {  
-"13323" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2678</SUB>> ]
-"13341" [label = <(soa,soa(env))<SUB>2679</SUB>> ]
-"13344" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2680</SUB>> ]
-"13346" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2681</SUB>> ]
-"13352" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2684</SUB>> ]
-"13327" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2678</SUB>> ]
-"13357" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2685</SUB>> ]
-"13328" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2678</SUB>> ]
-"13332" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2678</SUB>> ]
-"13339" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2678</SUB>> ]
-"13358" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2685</SUB>> ]
-"13365" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2685</SUB>> ]
-"13374" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2686</SUB>> ]
-"13333" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2678</SUB>> ]
-"13359" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2685</SUB>> ]
-"13362" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2685</SUB>> ]
-"13367" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2685</SUB>> ]
-"13382" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2688</SUB>> ]
-"13405" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2689</SUB>> ]
-"13411" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2690</SUB>> ]
-"13334" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2678</SUB>> ]
-"13336" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2678</SUB>> ]
-"13368" [label = <(GetLength,array-&gt;GetLength())<SUB>2685</SUB>> ]
-"13407" [label = <(GetData,array-&gt;GetData())<SUB>2689</SUB>> ]
-"13413" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2690</SUB>> ]
-"13416" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2690</SUB>> ]
-"13369" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2685</SUB>> ]
-"13408" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2689</SUB>> ]
-"13418" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2690</SUB>> ]
-"13371" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2685</SUB>> ]
-"13387" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2688</SUB>> ]
-"13410" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2689</SUB>> ]
-"13388" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2688</SUB>> ]
-"13396" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>2688</SUB>> ]
-"13403" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2688</SUB>> ]
-"13389" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2688</SUB>> ]
-"13392" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2688</SUB>> ]
-"13397" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2688</SUB>> ]
-"13398" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2688</SUB>> ]
-"13400" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2688</SUB>> ]
-"13316" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2676</SUB>> ]
-"13420" [label = <(METHOD_RETURN,void)<SUB>2676</SUB>> ]
-  "13323" -> "13328" 
-  "13323" -> "13341" 
-  "13341" -> "13346" 
-  "13344" -> "13352" 
-  "13346" -> "13344" 
-  "13352" -> "13420" 
-  "13352" -> "13359" 
-  "13327" -> "13334" 
-  "13327" -> "13341" 
-  "13357" -> "13374" 
-  "13357" -> "13382" 
-  "13328" -> "13327" 
-  "13332" -> "13339" 
-  "13339" -> "13420" 
-  "13358" -> "13357" 
-  "13358" -> "13371" 
-  "13365" -> "13357" 
-  "13374" -> "13420" 
-  "13333" -> "13332" 
-  "13359" -> "13358" 
-  "13359" -> "13362" 
-  "13362" -> "13358" 
-  "13367" -> "13365" 
-  "13382" -> "13389" 
-  "13382" -> "13410" 
-  "13405" -> "13413" 
-  "13411" -> "13420" 
-  "13334" -> "13336" 
-  "13336" -> "13333" 
-  "13368" -> "13367" 
-  "13407" -> "13405" 
-  "13413" -> "13418" 
-  "13416" -> "13411" 
-  "13369" -> "13368" 
-  "13408" -> "13407" 
-  "13418" -> "13416" 
-  "13371" -> "13369" 
-  "13387" -> "13398" 
-  "13387" -> "13410" 
-  "13410" -> "13408" 
-  "13388" -> "13387" 
-  "13396" -> "13403" 
-  "13403" -> "13420" 
-  "13389" -> "13388" 
-  "13389" -> "13392" 
-  "13392" -> "13388" 
-  "13397" -> "13396" 
-  "13398" -> "13400" 
-  "13400" -> "13397" 
-  "13316" -> "13323" 
+digraph "GetRuntimeShutdownNativeInterface" {  
+"14113" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3051</SUB>> ]
+"14114" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3051</SUB>> ]
+"14115" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3051</SUB>> ]
+"14116" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3051</SUB>> ]
+"14111" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3050</SUB>> ]
+"14118" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3050</SUB>> ]
+  "14113" -> "14118" 
+  "14114" -> "14113" 
+  "14115" -> "14116" 
+  "14116" -> "14114" 
+  "14111" -> "14115" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/255-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/255-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/255-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/255-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,94 +1,44 @@
-digraph "SetPrimitiveArrayRegion" {  
-"13429" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2698</SUB>> ]
-"13447" [label = <(soa,soa(env))<SUB>2699</SUB>> ]
-"13450" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2700</SUB>> ]
-"13452" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2701</SUB>> ]
-"13458" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2704</SUB>> ]
-"13433" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2698</SUB>> ]
-"13463" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2705</SUB>> ]
-"13434" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2698</SUB>> ]
-"13438" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2698</SUB>> ]
-"13445" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2698</SUB>> ]
-"13464" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2705</SUB>> ]
-"13471" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2705</SUB>> ]
-"13480" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2706</SUB>> ]
-"13439" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2698</SUB>> ]
-"13465" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2705</SUB>> ]
-"13468" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2705</SUB>> ]
-"13473" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2705</SUB>> ]
-"13488" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2708</SUB>> ]
-"13511" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2709</SUB>> ]
-"13517" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2710</SUB>> ]
-"13440" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2698</SUB>> ]
-"13442" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2698</SUB>> ]
-"13474" [label = <(GetLength,array-&gt;GetLength())<SUB>2705</SUB>> ]
-"13513" [label = <(GetData,array-&gt;GetData())<SUB>2709</SUB>> ]
-"13518" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2710</SUB>> ]
-"13522" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2710</SUB>> ]
-"13475" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2705</SUB>> ]
-"13514" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2709</SUB>> ]
-"13524" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2710</SUB>> ]
-"13477" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2705</SUB>> ]
-"13493" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2708</SUB>> ]
-"13516" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2709</SUB>> ]
-"13494" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2708</SUB>> ]
-"13502" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;buf == null&quot;))<SUB>2708</SUB>> ]
-"13509" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2708</SUB>> ]
-"13495" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2708</SUB>> ]
-"13498" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2708</SUB>> ]
-"13503" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2708</SUB>> ]
-"13504" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2708</SUB>> ]
-"13506" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2708</SUB>> ]
-"13422" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2696</SUB>> ]
-"13526" [label = <(METHOD_RETURN,void)<SUB>2696</SUB>> ]
-  "13429" -> "13434" 
-  "13429" -> "13447" 
-  "13447" -> "13452" 
-  "13450" -> "13458" 
-  "13452" -> "13450" 
-  "13458" -> "13526" 
-  "13458" -> "13465" 
-  "13433" -> "13440" 
-  "13433" -> "13447" 
-  "13463" -> "13480" 
-  "13463" -> "13488" 
-  "13434" -> "13433" 
-  "13438" -> "13445" 
-  "13445" -> "13526" 
-  "13464" -> "13463" 
-  "13464" -> "13477" 
-  "13471" -> "13463" 
-  "13480" -> "13526" 
-  "13439" -> "13438" 
-  "13465" -> "13464" 
-  "13465" -> "13468" 
-  "13468" -> "13464" 
-  "13473" -> "13471" 
-  "13488" -> "13495" 
-  "13488" -> "13516" 
-  "13511" -> "13518" 
-  "13517" -> "13526" 
-  "13440" -> "13442" 
-  "13442" -> "13439" 
-  "13474" -> "13473" 
-  "13513" -> "13511" 
-  "13518" -> "13524" 
-  "13522" -> "13517" 
-  "13475" -> "13474" 
-  "13514" -> "13513" 
-  "13524" -> "13522" 
-  "13477" -> "13475" 
-  "13493" -> "13504" 
-  "13493" -> "13516" 
-  "13516" -> "13514" 
-  "13494" -> "13493" 
-  "13502" -> "13509" 
-  "13509" -> "13526" 
-  "13495" -> "13494" 
-  "13495" -> "13498" 
-  "13498" -> "13494" 
-  "13503" -> "13502" 
-  "13504" -> "13506" 
-  "13506" -> "13503" 
-  "13422" -> "13429" 
+digraph "RegisterNativeMethods" {  
+"14126" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; c(env, env-&gt;FindClass(jni_class_name)))<SUB>3056</SUB>> ]
+"14151" [label = <(JNI::RegisterNativeMethods,JNI::RegisterNativeMethods(env, c.get(), methods, method_count, false))<SUB>3060</SUB>> ]
+"14127" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>3056</SUB>> ]
+"14130" [label = <(c,c(env, env-&gt;FindClass(jni_class_name)))<SUB>3056</SUB>> ]
+"14138" [label = <(&lt;operator&gt;.equals,c.get() == nullptr)<SUB>3057</SUB>> ]
+"14152" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNativeMethods)<SUB>3060</SUB>> ]
+"14156" [label = <(get,c.get())<SUB>3060</SUB>> ]
+"14132" [label = <(FindClass,env-&gt;FindClass(jni_class_name))<SUB>3056</SUB>> ]
+"14139" [label = <(get,c.get())<SUB>3057</SUB>> ]
+"14145" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Couldn't find class: &quot; &lt;&lt; jni_class_name)<SUB>3058</SUB>> ]
+"14154" [label = <(FIELD_IDENTIFIER,RegisterNativeMethods,RegisterNativeMethods)<SUB>3060</SUB>> ]
+"14157" [label = <(&lt;operator&gt;.fieldAccess,c.get)<SUB>3060</SUB>> ]
+"14133" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;FindClass)<SUB>3056</SUB>> ]
+"14140" [label = <(&lt;operator&gt;.fieldAccess,c.get)<SUB>3057</SUB>> ]
+"14146" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Couldn't find class: &quot;)<SUB>3058</SUB>> ]
+"14159" [label = <(FIELD_IDENTIFIER,get,get)<SUB>3060</SUB>> ]
+"14135" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>3056</SUB>> ]
+"14142" [label = <(FIELD_IDENTIFIER,get,get)<SUB>3057</SUB>> ]
+"14147" [label = <(LOG,LOG(FATAL))<SUB>3058</SUB>> ]
+"14120" [label = <(METHOD,RegisterNativeMethods)<SUB>3054</SUB>> ]
+"14163" [label = <(METHOD_RETURN,void)<SUB>3054</SUB>> ]
+  "14126" -> "14142" 
+  "14151" -> "14163" 
+  "14127" -> "14135" 
+  "14130" -> "14126" 
+  "14138" -> "14147" 
+  "14138" -> "14154" 
+  "14152" -> "14159" 
+  "14156" -> "14151" 
+  "14132" -> "14130" 
+  "14139" -> "14138" 
+  "14145" -> "14154" 
+  "14154" -> "14152" 
+  "14157" -> "14156" 
+  "14133" -> "14132" 
+  "14140" -> "14139" 
+  "14146" -> "14145" 
+  "14159" -> "14157" 
+  "14135" -> "14133" 
+  "14142" -> "14140" 
+  "14147" -> "14146" 
+  "14120" -> "14127" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/256-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/256-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/256-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/256-cfg.dot	2023-06-07 19:35:21.367385035 +0330
@@ -1,9 +1,39 @@
-digraph "GetJniNativeInterface" {  
-"14226" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>2953</SUB>> ]
-"14227" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>2953</SUB>> ]
-"14224" [label = <(METHOD,GetJniNativeInterface)<SUB>2952</SUB>> ]
-"14229" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>2952</SUB>> ]
-  "14226" -> "14229" 
-  "14227" -> "14226" 
-  "14224" -> "14227" 
+digraph "operator &lt;&lt;" {  
+"14175" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3068</SUB>> ]
+"14178" [label = <(RETURN,return os;,return os;)<SUB>3069</SUB>> ]
+"14182" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3071</SUB>> ]
+"14185" [label = <(RETURN,return os;,return os;)<SUB>3072</SUB>> ]
+"14189" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3074</SUB>> ]
+"14192" [label = <(RETURN,return os;,return os;)<SUB>3075</SUB>> ]
+"14196" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3077</SUB>> ]
+"14199" [label = <(RETURN,return os;,return os;)<SUB>3078</SUB>> ]
+"14202" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3080</SUB>> ]
+"14212" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3081</SUB>> ]
+"14203" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3080</SUB>> ]
+"14204" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3080</SUB>> ]
+"14208" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3080</SUB>> ]
+"14205" [label = <(LOG,LOG(FATAL))<SUB>3080</SUB>> ]
+"14209" [label = <(UNKNOWN,int,int)<SUB>3080</SUB>> ]
+"14166" [label = <(METHOD,operator &lt;&lt;)<SUB>3065</SUB>> ]
+"14213" [label = <(METHOD_RETURN,ostream)<SUB>3065</SUB>> ]
+  "14175" -> "14178" 
+  "14178" -> "14213" 
+  "14182" -> "14185" 
+  "14185" -> "14213" 
+  "14189" -> "14192" 
+  "14192" -> "14213" 
+  "14196" -> "14199" 
+  "14199" -> "14213" 
+  "14202" -> "14212" 
+  "14212" -> "14213" 
+  "14203" -> "14202" 
+  "14204" -> "14209" 
+  "14208" -> "14203" 
+  "14205" -> "14204" 
+  "14209" -> "14208" 
+  "14166" -> "14175" 
+  "14166" -> "14182" 
+  "14166" -> "14189" 
+  "14166" -> "14196" 
+  "14166" -> "14205" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/257-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/257-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/257-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/257-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,5 +1,151 @@
-digraph "gJniSleepForeverStub" {  
-"14231" [label = <(METHOD,gJniSleepForeverStub)<SUB>2956</SUB>> ]
-"14233" [label = <(METHOD_RETURN,void)<SUB>2956</SUB>> ]
-  "14231" -> "14233" 
+digraph "&lt;global&gt;" {  
+"16677" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>676</SUB>> ]
+"16678" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>690</SUB>> ]
+"16679" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>694</SUB>> ]
+"16680" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>702</SUB>> ]
+"16681" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>745</SUB>> ]
+"16682" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>782</SUB>> ]
+"16683" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>823</SUB>> ]
+"16684" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>838</SUB>> ]
+"16705" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>873</SUB>> ]
+"16706" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>912</SUB>> ]
+"16711" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>967</SUB>> ]
+"16712" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1158</SUB>> ]
+"16713" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1162</SUB>> ]
+"16714" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1166</SUB>> ]
+"16715" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1170</SUB>> ]
+"16716" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1174</SUB>> ]
+"16717" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1178</SUB>> ]
+"16718" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1182</SUB>> ]
+"16719" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1186</SUB>> ]
+"16720" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1191</SUB>> ]
+"16721" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1196</SUB>> ]
+"16722" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1201</SUB>> ]
+"16723" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1206</SUB>> ]
+"16724" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1211</SUB>> ]
+"16725" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1216</SUB>> ]
+"16726" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1238</SUB>> ]
+"16727" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1267</SUB>> ]
+"16728" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1288</SUB>> ]
+"16729" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1300</SUB>> ]
+"16730" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1319</SUB>> ]
+"16731" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1341</SUB>> ]
+"16732" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1385</SUB>> ]
+"16733" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(false); // GC should clear the weak global.\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(false); // GC should clear the weak global.\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1412</SUB>> ]
+"16734" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1427</SUB>> ]
+"16735" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1486</SUB>> ]
+"16736" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1501</SUB>> ]
+"16737" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1507</SUB>> ]
+"16738" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1513</SUB>> ]
+"16739" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1528</SUB>> ]
+"16740" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1532</SUB>> ]
+"16741" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1587</SUB>> ]
+"16742" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1616</SUB>> ]
+"16743" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1646</SUB>> ]
+"16744" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1685</SUB>> ]
+"16745" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Byte, &quot;sB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Char, &quot;sC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, Double, &quot;sD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, Float, &quot;sF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Int, &quot;sI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Long, &quot;sJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Short, &quot;sS&quot;, &quot;S&quot;, 1, 2);\012\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Boolean, &quot;iZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Byte, &quot;iB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Char, &quot;iC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, o, Double, &quot;iD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, o, Float, &quot;iF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Int, &quot;iI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Long, &quot;iJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Short, &quot;iS&quot;, &quot;S&quot;, 1, 2);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Byte, &quot;sB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Char, &quot;sC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, Double, &quot;sD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, Float, &quot;sF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Int, &quot;sI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Long, &quot;sJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Short, &quot;sS&quot;, &quot;S&quot;, 1, 2);\012\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Boolean, &quot;iZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Byte, &quot;iB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Char, &quot;iC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, o, Double, &quot;iD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, o, Float, &quot;iF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Int, &quot;iI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Long, &quot;iJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Short, &quot;iS&quot;, &quot;S&quot;, 1, 2);\012})<SUB>1787</SUB>> ]
+"16746" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012  runtime_-&gt;Start();\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  jstring s1 = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_NE(s1, nullptr);\012  jstring s2 = env_-&gt;NewStringUTF(&quot;world&quot;);\012  ASSERT_NE(s2, nullptr);\012\012  jfieldID s_fid = env_-&gt;GetStaticFieldID(c, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(s_fid, nullptr);\012  jfieldID i_fid = env_-&gt;GetFieldID(c, &quot;iObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(i_fid, nullptr);\012\012  env_-&gt;SetStaticObjectField(c, s_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetStaticObjectField(c, s_fid)));\012  env_-&gt;SetStaticObjectField(c, s_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetStaticObjectField(c, s_fid)));\012\012  env_-&gt;SetObjectField(o, i_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetObjectField(o, i_fid)));\012  env_-&gt;SetObjectField(o, i_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetObjectField(o, i_fid)));\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012  runtime_-&gt;Start();\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  jstring s1 = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_NE(s1, nullptr);\012  jstring s2 = env_-&gt;NewStringUTF(&quot;world&quot;);\012  ASSERT_NE(s2, nullptr);\012\012  jfieldID s_fid = env_-&gt;GetStaticFieldID(c, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(s_fid, nullptr);\012  jfieldID i_fid = env_-&gt;GetFieldID(c, &quot;iObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(i_fid, nullptr);\012\012  env_-&gt;SetStaticObjectField(c, s_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetStaticObjectField(c, s_fid)));\012  env_-&gt;SetStaticObjectField(c, s_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetStaticObjectField(c, s_fid)));\012\012  env_-&gt;SetObjectField(o, i_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetObjectField(o, i_fid)));\012  env_-&gt;SetObjectField(o, i_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetObjectField(o, i_fid)));\012})<SUB>1817</SUB>> ]
+"16747" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>1848</SUB>> ]
+"16748" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>1852</SUB>> ]
+"16749" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>1862</SUB>> ]
+"16750" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>1866</SUB>> ]
+"16751" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012\012 // And it's okay to have an upper limit. Ours is currently 512.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(8192));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012\012 // And it's okay to have an upper limit. Ours is currently 512.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(8192));\012})<SUB>1898</SUB>> ]
+"16752" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>1916</SUB>> ]
+"16753" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>1965</SUB>> ]
+"16754" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>1969</SUB>> ]
+"16755" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>1979</SUB>> ]
+"16756" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>1983</SUB>> ]
+"16757" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2018</SUB>> ]
+"16758" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2022</SUB>> ]
+"16759" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2032</SUB>> ]
+"16760" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2036</SUB>> ]
+"16761" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2071</SUB>> ]
+"16762" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2077</SUB>> ]
+"16763" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2099</SUB>> ]
+"16764" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2128</SUB>> ]
+"16765" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2162</SUB>> ]
+"16777" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2226</SUB>> ]
+"16789" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2243</SUB>> ]
+"16861" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2273</SUB>> ]
+"16862" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2307</SUB>> ]
+"16863" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2334</SUB>> ]
+"16865" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2349</SUB>> ]
+"16869" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2350</SUB>> ]
+"16887" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2358</SUB>> ]
+"14218" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"16888" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "16677" -> "16678" 
+  "16678" -> "16679" 
+  "16679" -> "16680" 
+  "16680" -> "16681" 
+  "16681" -> "16682" 
+  "16682" -> "16683" 
+  "16683" -> "16684" 
+  "16684" -> "16705" 
+  "16705" -> "16706" 
+  "16706" -> "16711" 
+  "16711" -> "16712" 
+  "16712" -> "16713" 
+  "16713" -> "16714" 
+  "16714" -> "16715" 
+  "16715" -> "16716" 
+  "16716" -> "16717" 
+  "16717" -> "16718" 
+  "16718" -> "16719" 
+  "16719" -> "16720" 
+  "16720" -> "16721" 
+  "16721" -> "16722" 
+  "16722" -> "16723" 
+  "16723" -> "16724" 
+  "16724" -> "16725" 
+  "16725" -> "16726" 
+  "16726" -> "16727" 
+  "16727" -> "16728" 
+  "16728" -> "16729" 
+  "16729" -> "16730" 
+  "16730" -> "16731" 
+  "16731" -> "16732" 
+  "16732" -> "16733" 
+  "16733" -> "16734" 
+  "16734" -> "16735" 
+  "16735" -> "16736" 
+  "16736" -> "16737" 
+  "16737" -> "16738" 
+  "16738" -> "16739" 
+  "16739" -> "16740" 
+  "16740" -> "16741" 
+  "16741" -> "16742" 
+  "16742" -> "16743" 
+  "16743" -> "16744" 
+  "16744" -> "16745" 
+  "16745" -> "16746" 
+  "16746" -> "16747" 
+  "16747" -> "16748" 
+  "16748" -> "16749" 
+  "16749" -> "16750" 
+  "16750" -> "16751" 
+  "16751" -> "16752" 
+  "16752" -> "16753" 
+  "16753" -> "16754" 
+  "16754" -> "16755" 
+  "16755" -> "16756" 
+  "16756" -> "16757" 
+  "16757" -> "16758" 
+  "16758" -> "16759" 
+  "16759" -> "16760" 
+  "16760" -> "16761" 
+  "16761" -> "16762" 
+  "16762" -> "16763" 
+  "16763" -> "16764" 
+  "16764" -> "16765" 
+  "16765" -> "16777" 
+  "16777" -> "16789" 
+  "16789" -> "16861" 
+  "16861" -> "16862" 
+  "16862" -> "16863" 
+  "16863" -> "16865" 
+  "16865" -> "16869" 
+  "16869" -> "16887" 
+  "16887" -> "16888" 
+  "14218" -> "16677" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/258-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/258-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/258-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/258-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,13 +1,153 @@
-digraph "GetRuntimeShutdownNativeInterface" {  
-"14473" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3193</SUB>> ]
-"14474" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3193</SUB>> ]
-"14475" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3193</SUB>> ]
-"14476" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3193</SUB>> ]
-"14471" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3192</SUB>> ]
-"14478" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3192</SUB>> ]
-  "14473" -> "14478" 
-  "14474" -> "14473" 
-  "14475" -> "14476" 
-  "14476" -> "14474" 
-  "14471" -> "14475" 
+digraph "SetUp" {  
+"14224" [label = <(CommonCompilerTest::SetUp,CommonCompilerTest::SetUp())<SUB>38</SUB>> ]
+"14228" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
+"14237" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>45</SUB>> ]
+"14244" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
+"14255" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>49</SUB>> ]
+"14262" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
+"14274" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
+"14285" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>53</SUB>> ]
+"14292" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
+"14304" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
+"14315" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>58</SUB>> ]
+"14322" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
+"14225" [label = <(&lt;operator&gt;.fieldAccess,CommonCompilerTest::SetUp)<SUB>38</SUB>> ]
+"14230" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
+"14238" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>45</SUB>> ]
+"14241" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>45</SUB>> ]
+"14245" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>47</SUB>> ]
+"14248" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
+"14256" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>49</SUB>> ]
+"14264" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
+"14275" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>52</SUB>> ]
+"14278" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
+"14286" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>53</SUB>> ]
+"14294" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
+"14305" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>56</SUB>> ]
+"14308" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
+"14316" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>58</SUB>> ]
+"14324" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
+"14227" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>38</SUB>> ]
+"14231" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>40</SUB>> ]
+"14240" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>45</SUB>> ]
+"14250" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>48</SUB>> ]
+"14257" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
+"14265" [label = <(UNKNOWN,jclass,jclass)<SUB>50</SUB>> ]
+"14266" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>50</SUB>> ]
+"14280" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>52</SUB>> ]
+"14287" [label = <(get,ase.get())<SUB>53</SUB>> ]
+"14295" [label = <(UNKNOWN,jclass,jclass)<SUB>54</SUB>> ]
+"14296" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>54</SUB>> ]
+"14310" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>57</SUB>> ]
+"14317" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
+"14325" [label = <(UNKNOWN,jclass,jclass)<SUB>59</SUB>> ]
+"14326" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>59</SUB>> ]
+"14232" [label = <(Runtime::Current,Runtime::Current())<SUB>40</SUB>> ]
+"14236" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>40</SUB>> ]
+"14251" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>48</SUB>> ]
+"14258" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
+"14267" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>50</SUB>> ]
+"14270" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
+"14281" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>52</SUB>> ]
+"14288" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
+"14297" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>54</SUB>> ]
+"14300" [label = <(get,ase.get())<SUB>54</SUB>> ]
+"14311" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>57</SUB>> ]
+"14318" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
+"14327" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>59</SUB>> ]
+"14330" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
+"14233" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>40</SUB>> ]
+"14253" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>48</SUB>> ]
+"14260" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
+"14269" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>50</SUB>> ]
+"14271" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
+"14283" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>52</SUB>> ]
+"14290" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
+"14299" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>54</SUB>> ]
+"14301" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
+"14313" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>57</SUB>> ]
+"14320" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
+"14329" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>59</SUB>> ]
+"14331" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
+"14235" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>40</SUB>> ]
+"14273" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
+"14303" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
+"14333" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
+"14222" [label = <(METHOD,SetUp)<SUB>37</SUB>> ]
+"14334" [label = <(METHOD_RETURN,void)<SUB>37</SUB>> ]
+  "14224" -> "14235" 
+  "14228" -> "14240" 
+  "14237" -> "14245" 
+  "14244" -> "14260" 
+  "14255" -> "14265" 
+  "14262" -> "14275" 
+  "14274" -> "14290" 
+  "14285" -> "14295" 
+  "14292" -> "14305" 
+  "14304" -> "14320" 
+  "14315" -> "14325" 
+  "14322" -> "14334" 
+  "14225" -> "14224" 
+  "14230" -> "14228" 
+  "14238" -> "14241" 
+  "14241" -> "14237" 
+  "14245" -> "14253" 
+  "14248" -> "14244" 
+  "14256" -> "14255" 
+  "14264" -> "14262" 
+  "14275" -> "14283" 
+  "14278" -> "14274" 
+  "14286" -> "14285" 
+  "14294" -> "14292" 
+  "14305" -> "14313" 
+  "14308" -> "14304" 
+  "14316" -> "14315" 
+  "14324" -> "14322" 
+  "14227" -> "14225" 
+  "14231" -> "14230" 
+  "14240" -> "14238" 
+  "14250" -> "14248" 
+  "14257" -> "14256" 
+  "14265" -> "14269" 
+  "14266" -> "14264" 
+  "14280" -> "14278" 
+  "14287" -> "14286" 
+  "14295" -> "14299" 
+  "14296" -> "14294" 
+  "14310" -> "14308" 
+  "14317" -> "14316" 
+  "14325" -> "14329" 
+  "14326" -> "14324" 
+  "14232" -> "14236" 
+  "14236" -> "14231" 
+  "14251" -> "14250" 
+  "14258" -> "14257" 
+  "14267" -> "14273" 
+  "14270" -> "14266" 
+  "14281" -> "14280" 
+  "14288" -> "14287" 
+  "14297" -> "14303" 
+  "14300" -> "14296" 
+  "14311" -> "14310" 
+  "14318" -> "14317" 
+  "14327" -> "14333" 
+  "14330" -> "14326" 
+  "14233" -> "14232" 
+  "14253" -> "14251" 
+  "14260" -> "14258" 
+  "14269" -> "14267" 
+  "14271" -> "14270" 
+  "14283" -> "14281" 
+  "14290" -> "14288" 
+  "14299" -> "14297" 
+  "14301" -> "14300" 
+  "14313" -> "14311" 
+  "14320" -> "14318" 
+  "14329" -> "14327" 
+  "14331" -> "14330" 
+  "14235" -> "14233" 
+  "14273" -> "14271" 
+  "14303" -> "14301" 
+  "14333" -> "14331" 
+  "14222" -> "14227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/259-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/259-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/259-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/259-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,44 +1,61 @@
-digraph "RegisterNativeMethods" {  
-"14486" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; c(env, env-&gt;FindClass(jni_class_name)))<SUB>3198</SUB>> ]
-"14511" [label = <(JNI::RegisterNativeMethods,JNI::RegisterNativeMethods(env, c.get(), methods, method_count, false))<SUB>3202</SUB>> ]
-"14487" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>3198</SUB>> ]
-"14490" [label = <(c,c(env, env-&gt;FindClass(jni_class_name)))<SUB>3198</SUB>> ]
-"14498" [label = <(&lt;operator&gt;.equals,c.get() == nullptr)<SUB>3199</SUB>> ]
-"14512" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNativeMethods)<SUB>3202</SUB>> ]
-"14516" [label = <(get,c.get())<SUB>3202</SUB>> ]
-"14492" [label = <(FindClass,env-&gt;FindClass(jni_class_name))<SUB>3198</SUB>> ]
-"14499" [label = <(get,c.get())<SUB>3199</SUB>> ]
-"14505" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Couldn't find class: &quot; &lt;&lt; jni_class_name)<SUB>3200</SUB>> ]
-"14514" [label = <(FIELD_IDENTIFIER,RegisterNativeMethods,RegisterNativeMethods)<SUB>3202</SUB>> ]
-"14517" [label = <(&lt;operator&gt;.fieldAccess,c.get)<SUB>3202</SUB>> ]
-"14493" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;FindClass)<SUB>3198</SUB>> ]
-"14500" [label = <(&lt;operator&gt;.fieldAccess,c.get)<SUB>3199</SUB>> ]
-"14506" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Couldn't find class: &quot;)<SUB>3200</SUB>> ]
-"14519" [label = <(FIELD_IDENTIFIER,get,get)<SUB>3202</SUB>> ]
-"14495" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>3198</SUB>> ]
-"14502" [label = <(FIELD_IDENTIFIER,get,get)<SUB>3199</SUB>> ]
-"14507" [label = <(LOG,LOG(FATAL))<SUB>3200</SUB>> ]
-"14480" [label = <(METHOD,RegisterNativeMethods)<SUB>3196</SUB>> ]
-"14523" [label = <(METHOD_RETURN,void)<SUB>3196</SUB>> ]
-  "14486" -> "14502" 
-  "14511" -> "14523" 
-  "14487" -> "14495" 
-  "14490" -> "14486" 
-  "14498" -> "14507" 
-  "14498" -> "14514" 
-  "14512" -> "14519" 
-  "14516" -> "14511" 
-  "14492" -> "14490" 
-  "14499" -> "14498" 
-  "14505" -> "14514" 
-  "14514" -> "14512" 
-  "14517" -> "14516" 
-  "14493" -> "14492" 
-  "14500" -> "14499" 
-  "14506" -> "14505" 
-  "14519" -> "14517" 
-  "14495" -> "14493" 
-  "14502" -> "14500" 
-  "14507" -> "14506" 
-  "14480" -> "14487" 
+digraph "ExpectException" {  
+"14340" [label = <(soa,soa(env_))<SUB>63</SUB>> ]
+"14342" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
+"14364" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
+"14370" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>67</SUB>> ]
+"14373" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>68</SUB>> ]
+"14377" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>69</SUB>> ]
+"14343" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>64</SUB>> ]
+"14348" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
+"14366" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
+"14374" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>68</SUB>> ]
+"14378" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>69</SUB>> ]
+"14344" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>64</SUB>> ]
+"14349" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>65</SUB>> ]
+"14354" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>65</SUB>> ]
+"14367" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>66</SUB>> ]
+"14376" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>68</SUB>> ]
+"14379" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>69</SUB>> ]
+"14345" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>64</SUB>> ]
+"14350" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
+"14353" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>65</SUB>> ]
+"14355" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>65</SUB>> ]
+"14369" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>66</SUB>> ]
+"14381" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>69</SUB>> ]
+"14347" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>64</SUB>> ]
+"14356" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>65</SUB>> ]
+"14359" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
+"14358" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>65</SUB>> ]
+"14361" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>65</SUB>> ]
+"14336" [label = <(METHOD,ExpectException)<SUB>62</SUB>> ]
+"14384" [label = <(METHOD_RETURN,void)<SUB>62</SUB>> ]
+  "14340" -> "14347" 
+  "14342" -> "14369" 
+  "14364" -> "14370" 
+  "14370" -> "14376" 
+  "14373" -> "14381" 
+  "14377" -> "14384" 
+  "14343" -> "14350" 
+  "14348" -> "14342" 
+  "14366" -> "14364" 
+  "14374" -> "14373" 
+  "14378" -> "14377" 
+  "14344" -> "14343" 
+  "14349" -> "14358" 
+  "14354" -> "14348" 
+  "14367" -> "14366" 
+  "14376" -> "14374" 
+  "14379" -> "14378" 
+  "14345" -> "14344" 
+  "14350" -> "14353" 
+  "14353" -> "14349" 
+  "14355" -> "14354" 
+  "14369" -> "14367" 
+  "14381" -> "14379" 
+  "14347" -> "14345" 
+  "14356" -> "14361" 
+  "14359" -> "14355" 
+  "14358" -> "14356" 
+  "14361" -> "14359" 
+  "14336" -> "14340" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/26-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/26-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/26-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/26-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,72 +1,27 @@
-digraph "GetSuperclass" {  
-"988" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>498</SUB>> ]
-"1007" [label = <(soa,soa(env))<SUB>499</SUB>> ]
-"1009" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>500</SUB>> ]
-"1026" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>501</SUB>> ]
-"1010" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>500</SUB>> ]
-"1017" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>500</SUB>> ]
-"1027" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>501</SUB>> ]
-"1011" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>500</SUB>> ]
-"1018" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>500</SUB>> ]
-"1028" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>501</SUB>> ]
-"1033" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>501</SUB>> ]
-"992" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>498</SUB>> ]
-"1013" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>500</SUB>> ]
-"1019" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>500</SUB>> ]
-"1022" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>500</SUB>> ]
-"1029" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>501</SUB>> ]
-"1034" [label = <(IsInterface,c-&gt;IsInterface())<SUB>501</SUB>> ]
-"1039" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>501</SUB>> ]
-"993" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>498</SUB>> ]
-"997" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>498</SUB>> ]
-"1004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>498</SUB>> ]
-"1015" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>500</SUB>> ]
-"1021" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>500</SUB>> ]
-"1024" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>500</SUB>> ]
-"1031" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>501</SUB>> ]
-"1035" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>501</SUB>> ]
-"1040" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>501</SUB>> ]
-"998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>498</SUB>> ]
-"1037" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>501</SUB>> ]
-"1042" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>501</SUB>> ]
-"999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>498</SUB>> ]
-"1001" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>498</SUB>> ]
-"984" [label = <(METHOD,GetSuperclass)<SUB>497</SUB>> ]
-"1043" [label = <(METHOD_RETURN,jclass)<SUB>497</SUB>> ]
-  "988" -> "993" 
-  "988" -> "1007" 
-  "1007" -> "1015" 
-  "1009" -> "1031" 
-  "1026" -> "1043" 
-  "1010" -> "1021" 
-  "1017" -> "1009" 
-  "1027" -> "1026" 
-  "1011" -> "1010" 
-  "1018" -> "1017" 
-  "1028" -> "1037" 
-  "1033" -> "1027" 
-  "992" -> "999" 
-  "992" -> "1007" 
-  "1013" -> "1011" 
-  "1019" -> "1024" 
-  "1022" -> "1018" 
-  "1029" -> "1028" 
-  "1034" -> "1033" 
-  "1034" -> "1042" 
-  "1039" -> "1033" 
-  "993" -> "992" 
-  "997" -> "1004" 
-  "1004" -> "1043" 
-  "1015" -> "1013" 
-  "1021" -> "1019" 
-  "1024" -> "1022" 
-  "1031" -> "1029" 
-  "1035" -> "1034" 
-  "1040" -> "1039" 
-  "998" -> "997" 
-  "1037" -> "1035" 
-  "1042" -> "1040" 
-  "999" -> "1001" 
-  "1001" -> "998" 
-  "984" -> "988" 
+digraph "ThrowNew" {  
+"1071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>458</SUB>> ]
+"1090" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>459</SUB>> ]
+"1091" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>459</SUB>> ]
+"1076" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>458</SUB>> ]
+"1077" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>458</SUB>> ]
+"1081" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;c == null&quot;))<SUB>458</SUB>> ]
+"1088" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>458</SUB>> ]
+"1082" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>458</SUB>> ]
+"1083" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>458</SUB>> ]
+"1085" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>458</SUB>> ]
+"1066" [label = <(METHOD,ThrowNew)<SUB>457</SUB>> ]
+"1096" [label = <(METHOD_RETURN,jint)<SUB>457</SUB>> ]
+  "1071" -> "1077" 
+  "1071" -> "1091" 
+  "1090" -> "1096" 
+  "1091" -> "1090" 
+  "1076" -> "1083" 
+  "1076" -> "1091" 
+  "1077" -> "1076" 
+  "1081" -> "1088" 
+  "1088" -> "1096" 
+  "1082" -> "1081" 
+  "1083" -> "1085" 
+  "1085" -> "1082" 
+  "1066" -> "1071" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/260-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/260-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/260-cfg.dot	2023-06-07 19:35:14.827385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/260-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,39 +1,38 @@
-digraph "operator &lt;&lt;" {  
-"14535" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3210</SUB>> ]
-"14538" [label = <(RETURN,return os;,return os;)<SUB>3211</SUB>> ]
-"14542" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3213</SUB>> ]
-"14545" [label = <(RETURN,return os;,return os;)<SUB>3214</SUB>> ]
-"14549" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3216</SUB>> ]
-"14552" [label = <(RETURN,return os;,return os;)<SUB>3217</SUB>> ]
-"14556" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3219</SUB>> ]
-"14559" [label = <(RETURN,return os;,return os;)<SUB>3220</SUB>> ]
-"14562" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3222</SUB>> ]
-"14572" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3223</SUB>> ]
-"14563" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3222</SUB>> ]
-"14564" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3222</SUB>> ]
-"14568" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3222</SUB>> ]
-"14565" [label = <(LOG,LOG(FATAL))<SUB>3222</SUB>> ]
-"14569" [label = <(UNKNOWN,int,int)<SUB>3222</SUB>> ]
-"14526" [label = <(METHOD,operator &lt;&lt;)<SUB>3207</SUB>> ]
-"14573" [label = <(METHOD_RETURN,ostream)<SUB>3207</SUB>> ]
-  "14535" -> "14538" 
-  "14538" -> "14573" 
-  "14542" -> "14545" 
-  "14545" -> "14573" 
-  "14549" -> "14552" 
-  "14552" -> "14573" 
-  "14556" -> "14559" 
-  "14559" -> "14573" 
-  "14562" -> "14572" 
-  "14572" -> "14573" 
-  "14563" -> "14562" 
-  "14564" -> "14569" 
-  "14568" -> "14563" 
-  "14565" -> "14564" 
-  "14569" -> "14568" 
-  "14526" -> "14535" 
-  "14526" -> "14542" 
-  "14526" -> "14549" 
-  "14526" -> "14556" 
-  "14526" -> "14565" 
+digraph "CleanUpJniEnv" {  
+"14389" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>73</SUB>> ]
+"14402" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>77</SUB>> ]
+"14415" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>81</SUB>> ]
+"14393" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>74</SUB>> ]
+"14398" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>75</SUB>> ]
+"14406" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>78</SUB>> ]
+"14411" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>79</SUB>> ]
+"14419" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>82</SUB>> ]
+"14424" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>83</SUB>> ]
+"14394" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>74</SUB>> ]
+"14407" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>78</SUB>> ]
+"14420" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>82</SUB>> ]
+"14396" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>74</SUB>> ]
+"14409" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>78</SUB>> ]
+"14422" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>82</SUB>> ]
+"14386" [label = <(METHOD,CleanUpJniEnv)<SUB>72</SUB>> ]
+"14427" [label = <(METHOD_RETURN,void)<SUB>72</SUB>> ]
+  "14389" -> "14396" 
+  "14389" -> "14402" 
+  "14402" -> "14409" 
+  "14402" -> "14415" 
+  "14415" -> "14427" 
+  "14415" -> "14422" 
+  "14393" -> "14398" 
+  "14398" -> "14402" 
+  "14406" -> "14411" 
+  "14411" -> "14415" 
+  "14419" -> "14424" 
+  "14424" -> "14427" 
+  "14394" -> "14393" 
+  "14407" -> "14406" 
+  "14420" -> "14419" 
+  "14396" -> "14394" 
+  "14409" -> "14407" 
+  "14422" -> "14420" 
+  "14386" -> "14389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/261-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/261-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/261-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/261-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,153 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17037" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>677</SUB>> ]
-"17038" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>691</SUB>> ]
-"17039" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>695</SUB>> ]
-"17040" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>703</SUB>> ]
-"17041" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>746</SUB>> ]
-"17042" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>783</SUB>> ]
-"17043" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>824</SUB>> ]
-"17044" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>839</SUB>> ]
-"17065" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>874</SUB>> ]
-"17066" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>913</SUB>> ]
-"17071" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>968</SUB>> ]
-"17072" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1159</SUB>> ]
-"17073" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1163</SUB>> ]
-"17074" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1167</SUB>> ]
-"17075" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1171</SUB>> ]
-"17076" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1175</SUB>> ]
-"17077" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1179</SUB>> ]
-"17078" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1183</SUB>> ]
-"17079" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1187</SUB>> ]
-"17080" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1192</SUB>> ]
-"17081" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1197</SUB>> ]
-"17082" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1202</SUB>> ]
-"17083" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1207</SUB>> ]
-"17084" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1212</SUB>> ]
-"17085" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1217</SUB>> ]
-"17086" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1239</SUB>> ]
-"17087" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1268</SUB>> ]
-"17088" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1289</SUB>> ]
-"17089" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1301</SUB>> ]
-"17090" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1320</SUB>> ]
-"17091" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1342</SUB>> ]
-"17092" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1386</SUB>> ]
-"17093" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(false); // GC should clear the weak global.\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(false); // GC should clear the weak global.\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1413</SUB>> ]
-"17094" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1428</SUB>> ]
-"17095" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012  std::unique_ptr&lt;MemMap&gt; head_map(MemMap::MapAnonymous(&quot;head&quot;,\012 /*addr=*/ nullptr,\012 2 * kPageSize,\012                                                        PROT_READ | PROT_WRITE,\012 /*low_4gb=*/ false,\012 /*reuse=*/ false,\012 &amp;error_msg));\012  ASSERT_TRUE(head_map != nullptr) &lt;&lt; error_msg;\012  std::unique_ptr&lt;MemMap&gt; tail_map(\012      head_map-&gt;RemapAtEnd(head_map-&gt;Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg));\012  ASSERT_TRUE(tail_map != nullptr) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map-&gt;Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;unchecked_functions;\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012},TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012  std::unique_ptr&lt;MemMap&gt; head_map(MemMap::MapAnonymous(&quot;head&quot;,\012 /*addr=*/ nullptr,\012 2 * kPageSize,\012                                                        PROT_READ | PROT_WRITE,\012 /*low_4gb=*/ false,\012 /*reuse=*/ false,\012 &amp;error_msg));\012  ASSERT_TRUE(head_map != nullptr) &lt;&lt; error_msg;\012  std::unique_ptr&lt;MemMap&gt; tail_map(\012      head_map-&gt;RemapAtEnd(head_map-&gt;Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg));\012  ASSERT_TRUE(tail_map != nullptr) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map-&gt;Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;unchecked_functions;\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012})<SUB>1487</SUB>> ]
-"17096" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1600</SUB>> ]
-"17097" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1615</SUB>> ]
-"17098" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1621</SUB>> ]
-"17099" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1627</SUB>> ]
-"17100" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1642</SUB>> ]
-"17101" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1646</SUB>> ]
-"17102" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1701</SUB>> ]
-"17103" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1730</SUB>> ]
-"17104" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1760</SUB>> ]
-"17105" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1799</SUB>> ]
-"17106" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Byte, &quot;sB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Char, &quot;sC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, Double, &quot;sD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, Float, &quot;sF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Int, &quot;sI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Long, &quot;sJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Short, &quot;sS&quot;, &quot;S&quot;, 1, 2);\012\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Boolean, &quot;iZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Byte, &quot;iB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Char, &quot;iC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, o, Double, &quot;iD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, o, Float, &quot;iF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Int, &quot;iI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Long, &quot;iJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Short, &quot;iS&quot;, &quot;S&quot;, 1, 2);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Byte, &quot;sB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Char, &quot;sC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, Double, &quot;sD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, Float, &quot;sF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Int, &quot;sI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Long, &quot;sJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_STATIC_PRIMITIVE_FIELD(EXPECT_EQ, Short, &quot;sS&quot;, &quot;S&quot;, 1, 2);\012\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Boolean, &quot;iZ&quot;, &quot;Z&quot;, JNI_TRUE, JNI_FALSE);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Byte, &quot;iB&quot;, &quot;B&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Char, &quot;iC&quot;, &quot;C&quot;, 'a', 'b');\012  EXPECT_PRIMITIVE_FIELD(EXPECT_DOUBLE_EQ, o, Double, &quot;iD&quot;, &quot;D&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_FLOAT_EQ, o, Float, &quot;iF&quot;, &quot;F&quot;, 1.0, 2.0);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Int, &quot;iI&quot;, &quot;I&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Long, &quot;iJ&quot;, &quot;J&quot;, 1, 2);\012  EXPECT_PRIMITIVE_FIELD(EXPECT_EQ, o, Short, &quot;iS&quot;, &quot;S&quot;, 1, 2);\012})<SUB>1901</SUB>> ]
-"17107" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012  runtime_-&gt;Start();\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  jstring s1 = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_NE(s1, nullptr);\012  jstring s2 = env_-&gt;NewStringUTF(&quot;world&quot;);\012  ASSERT_NE(s2, nullptr);\012\012  jfieldID s_fid = env_-&gt;GetStaticFieldID(c, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(s_fid, nullptr);\012  jfieldID i_fid = env_-&gt;GetFieldID(c, &quot;iObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(i_fid, nullptr);\012\012  env_-&gt;SetStaticObjectField(c, s_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetStaticObjectField(c, s_fid)));\012  env_-&gt;SetStaticObjectField(c, s_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetStaticObjectField(c, s_fid)));\012\012  env_-&gt;SetObjectField(o, i_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetObjectField(o, i_fid)));\012  env_-&gt;SetObjectField(o, i_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetObjectField(o, i_fid)));\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012  runtime_-&gt;Start();\012\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012  jstring s1 = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_NE(s1, nullptr);\012  jstring s2 = env_-&gt;NewStringUTF(&quot;world&quot;);\012  ASSERT_NE(s2, nullptr);\012\012  jfieldID s_fid = env_-&gt;GetStaticFieldID(c, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(s_fid, nullptr);\012  jfieldID i_fid = env_-&gt;GetFieldID(c, &quot;iObject&quot;, &quot;Ljava/lang/Object;&quot;);\012  ASSERT_NE(i_fid, nullptr);\012\012  env_-&gt;SetStaticObjectField(c, s_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetStaticObjectField(c, s_fid)));\012  env_-&gt;SetStaticObjectField(c, s_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetStaticObjectField(c, s_fid)));\012\012  env_-&gt;SetObjectField(o, i_fid, s1);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s1, env_-&gt;GetObjectField(o, i_fid)));\012  env_-&gt;SetObjectField(o, i_fid, s2);\012  ASSERT_TRUE(env_-&gt;IsSameObject(s2, env_-&gt;GetObjectField(o, i_fid)));\012})<SUB>1931</SUB>> ]
-"17108" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>1962</SUB>> ]
-"17109" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>1966</SUB>> ]
-"17110" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>1976</SUB>> ]
-"17111" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>1980</SUB>> ]
-"17112" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012\012 // And it's okay to have an upper limit. Ours is currently 512.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(8192));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012\012 // And it's okay to have an upper limit. Ours is currently 512.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(8192));\012})<SUB>2012</SUB>> ]
-"17113" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2030</SUB>> ]
-"17114" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2079</SUB>> ]
-"17115" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2083</SUB>> ]
-"17116" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2093</SUB>> ]
-"17117" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2097</SUB>> ]
-"17118" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2132</SUB>> ]
-"17119" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2136</SUB>> ]
-"17120" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2146</SUB>> ]
-"17121" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2150</SUB>> ]
-"17122" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2185</SUB>> ]
-"17123" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2191</SUB>> ]
-"17124" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2213</SUB>> ]
-"17125" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2242</SUB>> ]
-"17126" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2276</SUB>> ]
-"17138" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2340</SUB>> ]
-"17150" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2357</SUB>> ]
-"17222" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2387</SUB>> ]
-"17223" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2421</SUB>> ]
-"17224" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2448</SUB>> ]
-"17226" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2463</SUB>> ]
-"17230" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2464</SUB>> ]
-"17248" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2472</SUB>> ]
-"14578" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17249" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17037" -> "17038" 
-  "17038" -> "17039" 
-  "17039" -> "17040" 
-  "17040" -> "17041" 
-  "17041" -> "17042" 
-  "17042" -> "17043" 
-  "17043" -> "17044" 
-  "17044" -> "17065" 
-  "17065" -> "17066" 
-  "17066" -> "17071" 
-  "17071" -> "17072" 
-  "17072" -> "17073" 
-  "17073" -> "17074" 
-  "17074" -> "17075" 
-  "17075" -> "17076" 
-  "17076" -> "17077" 
-  "17077" -> "17078" 
-  "17078" -> "17079" 
-  "17079" -> "17080" 
-  "17080" -> "17081" 
-  "17081" -> "17082" 
-  "17082" -> "17083" 
-  "17083" -> "17084" 
-  "17084" -> "17085" 
-  "17085" -> "17086" 
-  "17086" -> "17087" 
-  "17087" -> "17088" 
-  "17088" -> "17089" 
-  "17089" -> "17090" 
-  "17090" -> "17091" 
-  "17091" -> "17092" 
-  "17092" -> "17093" 
-  "17093" -> "17094" 
-  "17094" -> "17095" 
-  "17095" -> "17096" 
-  "17096" -> "17097" 
-  "17097" -> "17098" 
-  "17098" -> "17099" 
-  "17099" -> "17100" 
-  "17100" -> "17101" 
-  "17101" -> "17102" 
-  "17102" -> "17103" 
-  "17103" -> "17104" 
-  "17104" -> "17105" 
-  "17105" -> "17106" 
-  "17106" -> "17107" 
-  "17107" -> "17108" 
-  "17108" -> "17109" 
-  "17109" -> "17110" 
-  "17110" -> "17111" 
-  "17111" -> "17112" 
-  "17112" -> "17113" 
-  "17113" -> "17114" 
-  "17114" -> "17115" 
-  "17115" -> "17116" 
-  "17116" -> "17117" 
-  "17117" -> "17118" 
-  "17118" -> "17119" 
-  "17119" -> "17120" 
-  "17120" -> "17121" 
-  "17121" -> "17122" 
-  "17122" -> "17123" 
-  "17123" -> "17124" 
-  "17124" -> "17125" 
-  "17125" -> "17126" 
-  "17126" -> "17138" 
-  "17138" -> "17150" 
-  "17150" -> "17222" 
-  "17222" -> "17223" 
-  "17223" -> "17224" 
-  "17224" -> "17226" 
-  "17226" -> "17230" 
-  "17230" -> "17248" 
-  "17248" -> "17249" 
-  "14578" -> "17037" 
+digraph "TearDown" {  
+"14429" [label = <(METHOD,TearDown)<SUB>87</SUB>> ]
+"14431" [label = <(METHOD_RETURN,void)<SUB>87</SUB>> ]
+  "14429" -> "14431" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/262-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/262-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/262-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/262-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,153 +1,29 @@
-digraph "SetUp" {  
-"14584" [label = <(CommonCompilerTest::SetUp,CommonCompilerTest::SetUp())<SUB>39</SUB>> ]
-"14588" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>41</SUB>> ]
-"14597" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>46</SUB>> ]
-"14604" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>48</SUB>> ]
-"14615" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>50</SUB>> ]
-"14622" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>51</SUB>> ]
-"14634" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>53</SUB>> ]
-"14645" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>54</SUB>> ]
-"14652" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>55</SUB>> ]
-"14664" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>57</SUB>> ]
-"14675" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>59</SUB>> ]
-"14682" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>60</SUB>> ]
-"14585" [label = <(&lt;operator&gt;.fieldAccess,CommonCompilerTest::SetUp)<SUB>39</SUB>> ]
-"14590" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>41</SUB>> ]
-"14598" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>46</SUB>> ]
-"14601" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>46</SUB>> ]
-"14605" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>48</SUB>> ]
-"14608" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>48</SUB>> ]
-"14616" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>50</SUB>> ]
-"14624" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>51</SUB>> ]
-"14635" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>53</SUB>> ]
-"14638" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>53</SUB>> ]
-"14646" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>54</SUB>> ]
-"14654" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>55</SUB>> ]
-"14665" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>57</SUB>> ]
-"14668" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>57</SUB>> ]
-"14676" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>59</SUB>> ]
-"14684" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>60</SUB>> ]
-"14587" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>39</SUB>> ]
-"14591" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>41</SUB>> ]
-"14600" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>46</SUB>> ]
-"14610" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>49</SUB>> ]
-"14617" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
-"14625" [label = <(UNKNOWN,jclass,jclass)<SUB>51</SUB>> ]
-"14626" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>51</SUB>> ]
-"14640" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>53</SUB>> ]
-"14647" [label = <(get,ase.get())<SUB>54</SUB>> ]
-"14655" [label = <(UNKNOWN,jclass,jclass)<SUB>55</SUB>> ]
-"14656" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>55</SUB>> ]
-"14670" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>58</SUB>> ]
-"14677" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
-"14685" [label = <(UNKNOWN,jclass,jclass)<SUB>60</SUB>> ]
-"14686" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>60</SUB>> ]
-"14592" [label = <(Runtime::Current,Runtime::Current())<SUB>41</SUB>> ]
-"14596" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>41</SUB>> ]
-"14611" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>49</SUB>> ]
-"14618" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
-"14627" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>51</SUB>> ]
-"14630" [label = <(get,aioobe.get())<SUB>51</SUB>> ]
-"14641" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>53</SUB>> ]
-"14648" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
-"14657" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>55</SUB>> ]
-"14660" [label = <(get,ase.get())<SUB>55</SUB>> ]
-"14671" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>58</SUB>> ]
-"14678" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
-"14687" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>60</SUB>> ]
-"14690" [label = <(get,sioobe.get())<SUB>60</SUB>> ]
-"14593" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>41</SUB>> ]
-"14613" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>49</SUB>> ]
-"14620" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
-"14629" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>51</SUB>> ]
-"14631" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>51</SUB>> ]
-"14643" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>53</SUB>> ]
-"14650" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
-"14659" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>55</SUB>> ]
-"14661" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>55</SUB>> ]
-"14673" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>58</SUB>> ]
-"14680" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
-"14689" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>60</SUB>> ]
-"14691" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>60</SUB>> ]
-"14595" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>41</SUB>> ]
-"14633" [label = <(FIELD_IDENTIFIER,get,get)<SUB>51</SUB>> ]
-"14663" [label = <(FIELD_IDENTIFIER,get,get)<SUB>55</SUB>> ]
-"14693" [label = <(FIELD_IDENTIFIER,get,get)<SUB>60</SUB>> ]
-"14582" [label = <(METHOD,SetUp)<SUB>38</SUB>> ]
-"14694" [label = <(METHOD_RETURN,void)<SUB>38</SUB>> ]
-  "14584" -> "14595" 
-  "14588" -> "14600" 
-  "14597" -> "14605" 
-  "14604" -> "14620" 
-  "14615" -> "14625" 
-  "14622" -> "14635" 
-  "14634" -> "14650" 
-  "14645" -> "14655" 
-  "14652" -> "14665" 
-  "14664" -> "14680" 
-  "14675" -> "14685" 
-  "14682" -> "14694" 
-  "14585" -> "14584" 
-  "14590" -> "14588" 
-  "14598" -> "14601" 
-  "14601" -> "14597" 
-  "14605" -> "14613" 
-  "14608" -> "14604" 
-  "14616" -> "14615" 
-  "14624" -> "14622" 
-  "14635" -> "14643" 
-  "14638" -> "14634" 
-  "14646" -> "14645" 
-  "14654" -> "14652" 
-  "14665" -> "14673" 
-  "14668" -> "14664" 
-  "14676" -> "14675" 
-  "14684" -> "14682" 
-  "14587" -> "14585" 
-  "14591" -> "14590" 
-  "14600" -> "14598" 
-  "14610" -> "14608" 
-  "14617" -> "14616" 
-  "14625" -> "14629" 
-  "14626" -> "14624" 
-  "14640" -> "14638" 
-  "14647" -> "14646" 
-  "14655" -> "14659" 
-  "14656" -> "14654" 
-  "14670" -> "14668" 
-  "14677" -> "14676" 
-  "14685" -> "14689" 
-  "14686" -> "14684" 
-  "14592" -> "14596" 
-  "14596" -> "14591" 
-  "14611" -> "14610" 
-  "14618" -> "14617" 
-  "14627" -> "14633" 
-  "14630" -> "14626" 
-  "14641" -> "14640" 
-  "14648" -> "14647" 
-  "14657" -> "14663" 
-  "14660" -> "14656" 
-  "14671" -> "14670" 
-  "14678" -> "14677" 
-  "14687" -> "14693" 
-  "14690" -> "14686" 
-  "14593" -> "14592" 
-  "14613" -> "14611" 
-  "14620" -> "14618" 
-  "14629" -> "14627" 
-  "14631" -> "14630" 
-  "14643" -> "14641" 
-  "14650" -> "14648" 
-  "14659" -> "14657" 
-  "14661" -> "14660" 
-  "14673" -> "14671" 
-  "14680" -> "14678" 
-  "14689" -> "14687" 
-  "14691" -> "14690" 
-  "14595" -> "14593" 
-  "14633" -> "14631" 
-  "14663" -> "14661" 
-  "14693" -> "14691" 
-  "14582" -> "14587" 
+digraph "GetPrimitiveClass" {  
+"14439" [label = <(soa,soa(env_))<SUB>93</SUB>> ]
+"14442" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
+"14449" [label = <(CHECK,CHECK(c != nullptr))<SUB>95</SUB>> ]
+"14453" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>96</SUB>> ]
+"14444" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
+"14450" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>95</SUB>> ]
+"14454" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>96</SUB>> ]
+"14445" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>94</SUB>> ]
+"14455" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>96</SUB>> ]
+"14447" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>94</SUB>> ]
+"14456" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>96</SUB>> ]
+"14458" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>96</SUB>> ]
+"14435" [label = <(METHOD,GetPrimitiveClass)<SUB>92</SUB>> ]
+"14461" [label = <(METHOD_RETURN,jclass)<SUB>92</SUB>> ]
+  "14439" -> "14447" 
+  "14442" -> "14450" 
+  "14449" -> "14458" 
+  "14453" -> "14461" 
+  "14444" -> "14442" 
+  "14450" -> "14449" 
+  "14454" -> "14453" 
+  "14445" -> "14444" 
+  "14455" -> "14454" 
+  "14447" -> "14445" 
+  "14456" -> "14455" 
+  "14458" -> "14456" 
+  "14435" -> "14439" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/263-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/263-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/263-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/263-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,61 +1,25 @@
-digraph "ExpectException" {  
-"14700" [label = <(soa,soa(env_))<SUB>64</SUB>> ]
-"14702" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
-"14724" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>67</SUB>> ]
-"14730" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>68</SUB>> ]
-"14733" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>69</SUB>> ]
-"14737" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>70</SUB>> ]
-"14703" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>65</SUB>> ]
-"14708" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>66</SUB>> ]
-"14726" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>67</SUB>> ]
-"14734" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>69</SUB>> ]
-"14738" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>70</SUB>> ]
-"14704" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>65</SUB>> ]
-"14709" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>66</SUB>> ]
-"14714" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>66</SUB>> ]
-"14727" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>67</SUB>> ]
-"14736" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>69</SUB>> ]
-"14739" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>70</SUB>> ]
-"14705" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>65</SUB>> ]
-"14710" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>66</SUB>> ]
-"14713" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>66</SUB>> ]
-"14715" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>66</SUB>> ]
-"14729" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>67</SUB>> ]
-"14741" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>70</SUB>> ]
-"14707" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>65</SUB>> ]
-"14716" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>66</SUB>> ]
-"14719" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>66</SUB>> ]
-"14718" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>66</SUB>> ]
-"14721" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>66</SUB>> ]
-"14696" [label = <(METHOD,ExpectException)<SUB>63</SUB>> ]
-"14744" [label = <(METHOD_RETURN,void)<SUB>63</SUB>> ]
-  "14700" -> "14707" 
-  "14702" -> "14729" 
-  "14724" -> "14730" 
-  "14730" -> "14736" 
-  "14733" -> "14741" 
-  "14737" -> "14744" 
-  "14703" -> "14710" 
-  "14708" -> "14702" 
-  "14726" -> "14724" 
-  "14734" -> "14733" 
-  "14738" -> "14737" 
-  "14704" -> "14703" 
-  "14709" -> "14718" 
-  "14714" -> "14708" 
-  "14727" -> "14726" 
-  "14736" -> "14734" 
-  "14739" -> "14738" 
-  "14705" -> "14704" 
-  "14710" -> "14713" 
-  "14713" -> "14709" 
-  "14715" -> "14714" 
-  "14729" -> "14727" 
-  "14741" -> "14739" 
-  "14707" -> "14705" 
-  "14716" -> "14721" 
-  "14719" -> "14715" 
-  "14718" -> "14716" 
-  "14721" -> "14719" 
-  "14696" -> "14700" 
+digraph "ExpectClassFound" {  
+"14466" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>100</SUB>> ]
+"14475" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>101</SUB>> ]
+"14467" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>100</SUB>> ]
+"14476" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>101</SUB>> ]
+"14468" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>100</SUB>> ]
+"14477" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>101</SUB>> ]
+"14469" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>100</SUB>> ]
+"14478" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>101</SUB>> ]
+"14471" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>100</SUB>> ]
+"14480" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>101</SUB>> ]
+"14463" [label = <(METHOD,ExpectClassFound)<SUB>99</SUB>> ]
+"14482" [label = <(METHOD_RETURN,void)<SUB>99</SUB>> ]
+  "14466" -> "14480" 
+  "14475" -> "14482" 
+  "14467" -> "14466" 
+  "14476" -> "14475" 
+  "14468" -> "14467" 
+  "14477" -> "14476" 
+  "14469" -> "14468" 
+  "14478" -> "14477" 
+  "14471" -> "14469" 
+  "14480" -> "14478" 
+  "14463" -> "14471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/264-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/264-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/264-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/264-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,38 +1,45 @@
-digraph "CleanUpJniEnv" {  
-"14749" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>74</SUB>> ]
-"14762" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>78</SUB>> ]
-"14775" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>82</SUB>> ]
-"14753" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>75</SUB>> ]
-"14758" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>76</SUB>> ]
-"14766" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>79</SUB>> ]
-"14771" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>80</SUB>> ]
-"14779" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>83</SUB>> ]
-"14784" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>84</SUB>> ]
-"14754" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>75</SUB>> ]
-"14767" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>79</SUB>> ]
-"14780" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>83</SUB>> ]
-"14756" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>75</SUB>> ]
-"14769" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>79</SUB>> ]
-"14782" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>83</SUB>> ]
-"14746" [label = <(METHOD,CleanUpJniEnv)<SUB>73</SUB>> ]
-"14787" [label = <(METHOD_RETURN,void)<SUB>73</SUB>> ]
-  "14749" -> "14756" 
-  "14749" -> "14762" 
-  "14762" -> "14769" 
-  "14762" -> "14775" 
-  "14775" -> "14787" 
-  "14775" -> "14782" 
-  "14753" -> "14758" 
-  "14758" -> "14762" 
-  "14766" -> "14771" 
-  "14771" -> "14775" 
-  "14779" -> "14784" 
-  "14784" -> "14787" 
-  "14754" -> "14753" 
-  "14767" -> "14766" 
-  "14780" -> "14779" 
-  "14756" -> "14754" 
-  "14769" -> "14767" 
-  "14782" -> "14780" 
-  "14746" -> "14749" 
+digraph "ExpectClassNotFound" {  
+"14490" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>106</SUB>> ]
+"14491" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>106</SUB>> ]
+"14500" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>107</SUB>> ]
+"14492" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>106</SUB>> ]
+"14501" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>107</SUB>> ]
+"14503" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>107</SUB>> ]
+"14507" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>108</SUB>> ]
+"14514" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>109</SUB>> ]
+"14493" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>106</SUB>> ]
+"14508" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>108</SUB>> ]
+"14515" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>109</SUB>> ]
+"14520" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>111</SUB>> ]
+"14495" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>106</SUB>> ]
+"14509" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>108</SUB>> ]
+"14517" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>109</SUB>> ]
+"14521" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>111</SUB>> ]
+"14510" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>108</SUB>> ]
+"14523" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>111</SUB>> ]
+"14512" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>108</SUB>> ]
+"14484" [label = <(METHOD,ExpectClassNotFound)<SUB>104</SUB>> ]
+"14525" [label = <(METHOD_RETURN,void)<SUB>104</SUB>> ]
+  "14490" -> "14501" 
+  "14491" -> "14490" 
+  "14500" -> "14512" 
+  "14500" -> "14523" 
+  "14492" -> "14491" 
+  "14501" -> "14500" 
+  "14501" -> "14503" 
+  "14503" -> "14500" 
+  "14507" -> "14517" 
+  "14514" -> "14525" 
+  "14493" -> "14492" 
+  "14508" -> "14507" 
+  "14515" -> "14514" 
+  "14520" -> "14525" 
+  "14495" -> "14493" 
+  "14509" -> "14508" 
+  "14517" -> "14515" 
+  "14521" -> "14520" 
+  "14510" -> "14509" 
+  "14523" -> "14521" 
+  "14512" -> "14510" 
+  "14484" -> "14495" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/265-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/265-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/265-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/265-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,5 +1,126 @@
-digraph "TearDown" {  
-"14789" [label = <(METHOD,TearDown)<SUB>88</SUB>> ]
-"14791" [label = <(METHOD_RETURN,void)<SUB>88</SUB>> ]
-  "14789" -> "14791" 
+digraph "FindClassTest" {  
+"14531" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
+"14539" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>120</SUB>> ]
+"14544" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>121</SUB>> ]
+"14552" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>125</SUB>> ]
+"14554" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>127</SUB>> ]
+"14556" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>129</SUB>> ]
+"14558" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
+"14564" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
+"14570" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
+"14619" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>151</SUB>> ]
+"14625" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>153</SUB>> ]
+"14631" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>157</SUB>> ]
+"14637" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>161</SUB>> ]
+"14643" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>164</SUB>> ]
+"14649" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>167</SUB>> ]
+"14655" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>169</SUB>> ]
+"14533" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
+"14540" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>120</SUB>> ]
+"14545" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>121</SUB>> ]
+"14548" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>121</SUB>> ]
+"14562" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
+"14568" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
+"14574" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
+"14623" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>152</SUB>> ]
+"14629" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>154</SUB>> ]
+"14635" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>158</SUB>> ]
+"14641" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>162</SUB>> ]
+"14647" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>164</SUB>> ]
+"14653" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>167</SUB>> ]
+"14657" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>169</SUB>> ]
+"14534" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>116</SUB>> ]
+"14542" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>120</SUB>> ]
+"14547" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>121</SUB>> ]
+"14579" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>138</SUB>> ]
+"14586" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>139</SUB>> ]
+"14591" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>140</SUB>> ]
+"14596" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>142</SUB>> ]
+"14603" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>143</SUB>> ]
+"14608" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>144</SUB>> ]
+"14658" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>169</SUB>> ]
+"14536" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>116</SUB>> ]
+"14580" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>138</SUB>> ]
+"14587" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>139</SUB>> ]
+"14592" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>140</SUB>> ]
+"14597" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>142</SUB>> ]
+"14604" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>143</SUB>> ]
+"14609" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>144</SUB>> ]
+"14615" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>147</SUB>> ]
+"14617" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>148</SUB>> ]
+"14660" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>169</SUB>> ]
+"14581" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>138</SUB>> ]
+"14588" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>139</SUB>> ]
+"14594" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>140</SUB>> ]
+"14598" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>142</SUB>> ]
+"14605" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>143</SUB>> ]
+"14611" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>144</SUB>> ]
+"14583" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>138</SUB>> ]
+"14590" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>139</SUB>> ]
+"14600" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>142</SUB>> ]
+"14607" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>143</SUB>> ]
+"14527" [label = <(METHOD,FindClassTest)<SUB>115</SUB>> ]
+"14662" [label = <(METHOD_RETURN,void)<SUB>115</SUB>> ]
+  "14531" -> "14542" 
+  "14539" -> "14547" 
+  "14544" -> "14552" 
+  "14552" -> "14554" 
+  "14554" -> "14556" 
+  "14556" -> "14562" 
+  "14558" -> "14568" 
+  "14564" -> "14574" 
+  "14570" -> "14583" 
+  "14570" -> "14615" 
+  "14619" -> "14629" 
+  "14625" -> "14635" 
+  "14631" -> "14641" 
+  "14637" -> "14647" 
+  "14643" -> "14653" 
+  "14649" -> "14660" 
+  "14655" -> "14662" 
+  "14533" -> "14531" 
+  "14540" -> "14539" 
+  "14545" -> "14548" 
+  "14548" -> "14544" 
+  "14562" -> "14558" 
+  "14568" -> "14564" 
+  "14574" -> "14570" 
+  "14623" -> "14619" 
+  "14629" -> "14625" 
+  "14635" -> "14631" 
+  "14641" -> "14637" 
+  "14647" -> "14643" 
+  "14653" -> "14649" 
+  "14657" -> "14655" 
+  "14534" -> "14533" 
+  "14542" -> "14540" 
+  "14547" -> "14545" 
+  "14579" -> "14590" 
+  "14586" -> "14594" 
+  "14591" -> "14600" 
+  "14596" -> "14607" 
+  "14603" -> "14611" 
+  "14608" -> "14623" 
+  "14658" -> "14657" 
+  "14536" -> "14534" 
+  "14580" -> "14579" 
+  "14587" -> "14586" 
+  "14592" -> "14591" 
+  "14597" -> "14596" 
+  "14604" -> "14603" 
+  "14609" -> "14608" 
+  "14615" -> "14617" 
+  "14617" -> "14623" 
+  "14660" -> "14658" 
+  "14581" -> "14580" 
+  "14588" -> "14587" 
+  "14594" -> "14592" 
+  "14598" -> "14597" 
+  "14605" -> "14604" 
+  "14611" -> "14609" 
+  "14583" -> "14581" 
+  "14590" -> "14588" 
+  "14600" -> "14598" 
+  "14607" -> "14605" 
+  "14527" -> "14536" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/266-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/266-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/266-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/266-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,29 +1,85 @@
-digraph "GetPrimitiveClass" {  
-"14799" [label = <(soa,soa(env_))<SUB>94</SUB>> ]
-"14802" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>95</SUB>> ]
-"14809" [label = <(CHECK,CHECK(c != nullptr))<SUB>96</SUB>> ]
-"14813" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>97</SUB>> ]
-"14804" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>95</SUB>> ]
-"14810" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>96</SUB>> ]
-"14814" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>97</SUB>> ]
-"14805" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>95</SUB>> ]
-"14815" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>97</SUB>> ]
-"14807" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>95</SUB>> ]
-"14816" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>97</SUB>> ]
-"14818" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>97</SUB>> ]
-"14795" [label = <(METHOD,GetPrimitiveClass)<SUB>93</SUB>> ]
-"14821" [label = <(METHOD_RETURN,jclass)<SUB>93</SUB>> ]
-  "14799" -> "14807" 
-  "14802" -> "14810" 
-  "14809" -> "14818" 
-  "14813" -> "14821" 
-  "14804" -> "14802" 
-  "14810" -> "14809" 
-  "14814" -> "14813" 
-  "14805" -> "14804" 
-  "14815" -> "14814" 
-  "14807" -> "14805" 
-  "14816" -> "14815" 
-  "14818" -> "14816" 
-  "14795" -> "14799" 
+digraph "GetFieldIdBadArgumentTest" {  
+"14668" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
+"14677" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
+"14684" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>177</SUB>> ]
+"14688" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
+"14697" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>180</SUB>> ]
+"14700" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>181</SUB>> ]
+"14708" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
+"14717" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>184</SUB>> ]
+"14720" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>185</SUB>> ]
+"14728" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
+"14737" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>188</SUB>> ]
+"14740" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>189</SUB>> ]
+"14748" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>192</SUB>> ]
+"14670" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
+"14679" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
+"14690" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
+"14701" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>181</SUB>> ]
+"14704" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>181</SUB>> ]
+"14710" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
+"14721" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>185</SUB>> ]
+"14724" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>185</SUB>> ]
+"14730" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
+"14741" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>189</SUB>> ]
+"14744" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>189</SUB>> ]
+"14750" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>192</SUB>> ]
+"14671" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>173</SUB>> ]
+"14680" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>176</SUB>> ]
+"14691" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>179</SUB>> ]
+"14703" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>181</SUB>> ]
+"14711" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>183</SUB>> ]
+"14723" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>185</SUB>> ]
+"14731" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>187</SUB>> ]
+"14743" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>189</SUB>> ]
+"14751" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>192</SUB>> ]
+"14673" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>173</SUB>> ]
+"14682" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>176</SUB>> ]
+"14693" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>179</SUB>> ]
+"14713" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>183</SUB>> ]
+"14733" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>187</SUB>> ]
+"14753" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>192</SUB>> ]
+"14664" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>172</SUB>> ]
+"14755" [label = <(METHOD_RETURN,void)<SUB>172</SUB>> ]
+  "14668" -> "14682" 
+  "14677" -> "14684" 
+  "14684" -> "14693" 
+  "14688" -> "14697" 
+  "14697" -> "14703" 
+  "14700" -> "14713" 
+  "14708" -> "14717" 
+  "14717" -> "14723" 
+  "14720" -> "14733" 
+  "14728" -> "14737" 
+  "14737" -> "14743" 
+  "14740" -> "14753" 
+  "14748" -> "14755" 
+  "14670" -> "14668" 
+  "14679" -> "14677" 
+  "14690" -> "14688" 
+  "14701" -> "14704" 
+  "14704" -> "14700" 
+  "14710" -> "14708" 
+  "14721" -> "14724" 
+  "14724" -> "14720" 
+  "14730" -> "14728" 
+  "14741" -> "14744" 
+  "14744" -> "14740" 
+  "14750" -> "14748" 
+  "14671" -> "14670" 
+  "14680" -> "14679" 
+  "14691" -> "14690" 
+  "14703" -> "14701" 
+  "14711" -> "14710" 
+  "14723" -> "14721" 
+  "14731" -> "14730" 
+  "14743" -> "14741" 
+  "14751" -> "14750" 
+  "14673" -> "14671" 
+  "14682" -> "14680" 
+  "14693" -> "14691" 
+  "14713" -> "14711" 
+  "14733" -> "14731" 
+  "14753" -> "14751" 
+  "14664" -> "14673" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/267-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/267-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/267-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/267-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,25 +1,85 @@
-digraph "ExpectClassFound" {  
-"14826" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>101</SUB>> ]
-"14835" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>102</SUB>> ]
-"14827" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>101</SUB>> ]
-"14836" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>102</SUB>> ]
-"14828" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>101</SUB>> ]
-"14837" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>102</SUB>> ]
-"14829" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>101</SUB>> ]
-"14838" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>102</SUB>> ]
-"14831" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>101</SUB>> ]
-"14840" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>102</SUB>> ]
-"14823" [label = <(METHOD,ExpectClassFound)<SUB>100</SUB>> ]
-"14842" [label = <(METHOD_RETURN,void)<SUB>100</SUB>> ]
-  "14826" -> "14840" 
-  "14835" -> "14842" 
-  "14827" -> "14826" 
-  "14836" -> "14835" 
-  "14828" -> "14827" 
-  "14837" -> "14836" 
-  "14829" -> "14828" 
-  "14838" -> "14837" 
-  "14831" -> "14829" 
-  "14840" -> "14838" 
-  "14823" -> "14831" 
+digraph "GetStaticFieldIdBadArgumentTest" {  
+"14761" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
+"14770" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
+"14777" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>200</SUB>> ]
+"14781" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
+"14790" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>203</SUB>> ]
+"14793" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>204</SUB>> ]
+"14801" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
+"14810" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>207</SUB>> ]
+"14813" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>208</SUB>> ]
+"14821" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
+"14830" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>211</SUB>> ]
+"14833" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>212</SUB>> ]
+"14841" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>215</SUB>> ]
+"14763" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
+"14772" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
+"14783" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
+"14794" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>204</SUB>> ]
+"14797" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>204</SUB>> ]
+"14803" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
+"14814" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>208</SUB>> ]
+"14817" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>208</SUB>> ]
+"14823" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
+"14834" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>212</SUB>> ]
+"14837" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>212</SUB>> ]
+"14843" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>215</SUB>> ]
+"14764" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>196</SUB>> ]
+"14773" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>199</SUB>> ]
+"14784" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>202</SUB>> ]
+"14796" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>204</SUB>> ]
+"14804" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>206</SUB>> ]
+"14816" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>208</SUB>> ]
+"14824" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>210</SUB>> ]
+"14836" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>212</SUB>> ]
+"14844" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>215</SUB>> ]
+"14766" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>196</SUB>> ]
+"14775" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>199</SUB>> ]
+"14786" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>202</SUB>> ]
+"14806" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>206</SUB>> ]
+"14826" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>210</SUB>> ]
+"14846" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>215</SUB>> ]
+"14757" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>195</SUB>> ]
+"14848" [label = <(METHOD_RETURN,void)<SUB>195</SUB>> ]
+  "14761" -> "14775" 
+  "14770" -> "14777" 
+  "14777" -> "14786" 
+  "14781" -> "14790" 
+  "14790" -> "14796" 
+  "14793" -> "14806" 
+  "14801" -> "14810" 
+  "14810" -> "14816" 
+  "14813" -> "14826" 
+  "14821" -> "14830" 
+  "14830" -> "14836" 
+  "14833" -> "14846" 
+  "14841" -> "14848" 
+  "14763" -> "14761" 
+  "14772" -> "14770" 
+  "14783" -> "14781" 
+  "14794" -> "14797" 
+  "14797" -> "14793" 
+  "14803" -> "14801" 
+  "14814" -> "14817" 
+  "14817" -> "14813" 
+  "14823" -> "14821" 
+  "14834" -> "14837" 
+  "14837" -> "14833" 
+  "14843" -> "14841" 
+  "14764" -> "14763" 
+  "14773" -> "14772" 
+  "14784" -> "14783" 
+  "14796" -> "14794" 
+  "14804" -> "14803" 
+  "14816" -> "14814" 
+  "14824" -> "14823" 
+  "14836" -> "14834" 
+  "14844" -> "14843" 
+  "14766" -> "14764" 
+  "14775" -> "14773" 
+  "14786" -> "14784" 
+  "14806" -> "14804" 
+  "14826" -> "14824" 
+  "14846" -> "14844" 
+  "14757" -> "14766" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/268-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/268-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/268-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/268-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,45 +1,87 @@
-digraph "ExpectClassNotFound" {  
-"14850" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>107</SUB>> ]
-"14851" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>107</SUB>> ]
-"14860" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>108</SUB>> ]
-"14852" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>107</SUB>> ]
-"14861" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>108</SUB>> ]
-"14863" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>108</SUB>> ]
-"14867" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>109</SUB>> ]
-"14874" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>110</SUB>> ]
-"14853" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>107</SUB>> ]
-"14868" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>109</SUB>> ]
-"14875" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>110</SUB>> ]
-"14880" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>112</SUB>> ]
-"14855" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>107</SUB>> ]
-"14869" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>109</SUB>> ]
-"14877" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>110</SUB>> ]
-"14881" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>112</SUB>> ]
-"14870" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>109</SUB>> ]
-"14883" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>112</SUB>> ]
-"14872" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>109</SUB>> ]
-"14844" [label = <(METHOD,ExpectClassNotFound)<SUB>105</SUB>> ]
-"14885" [label = <(METHOD_RETURN,void)<SUB>105</SUB>> ]
-  "14850" -> "14861" 
-  "14851" -> "14850" 
-  "14860" -> "14872" 
-  "14860" -> "14883" 
-  "14852" -> "14851" 
-  "14861" -> "14860" 
-  "14861" -> "14863" 
-  "14863" -> "14860" 
-  "14867" -> "14877" 
-  "14874" -> "14885" 
-  "14853" -> "14852" 
-  "14868" -> "14867" 
-  "14875" -> "14874" 
-  "14880" -> "14885" 
-  "14855" -> "14853" 
-  "14869" -> "14868" 
-  "14877" -> "14875" 
-  "14881" -> "14880" 
-  "14870" -> "14869" 
-  "14883" -> "14881" 
-  "14872" -> "14870" 
-  "14844" -> "14855" 
+digraph "GetMethodIdBadArgumentTest" {  
+"14854" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
+"14863" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
+"14872" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>223</SUB>> ]
+"14875" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>224</SUB>> ]
+"14884" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
+"14891" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>227</SUB>> ]
+"14895" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
+"14904" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>229</SUB>> ]
+"14907" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>230</SUB>> ]
+"14915" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
+"14924" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>233</SUB>> ]
+"14927" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>234</SUB>> ]
+"14935" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>237</SUB>> ]
+"14856" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
+"14865" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
+"14876" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>224</SUB>> ]
+"14879" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>224</SUB>> ]
+"14886" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
+"14892" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>227</SUB>> ]
+"14897" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
+"14908" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>230</SUB>> ]
+"14911" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>230</SUB>> ]
+"14917" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
+"14928" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>234</SUB>> ]
+"14931" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>234</SUB>> ]
+"14937" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>237</SUB>> ]
+"14857" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>219</SUB>> ]
+"14866" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>222</SUB>> ]
+"14878" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>224</SUB>> ]
+"14887" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>226</SUB>> ]
+"14898" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>228</SUB>> ]
+"14910" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>230</SUB>> ]
+"14918" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>232</SUB>> ]
+"14930" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>234</SUB>> ]
+"14938" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>237</SUB>> ]
+"14859" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>219</SUB>> ]
+"14868" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>222</SUB>> ]
+"14889" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>226</SUB>> ]
+"14900" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>228</SUB>> ]
+"14920" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>232</SUB>> ]
+"14940" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>237</SUB>> ]
+"14850" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>218</SUB>> ]
+"14942" [label = <(METHOD_RETURN,void)<SUB>218</SUB>> ]
+  "14854" -> "14868" 
+  "14863" -> "14872" 
+  "14872" -> "14878" 
+  "14875" -> "14889" 
+  "14884" -> "14892" 
+  "14891" -> "14900" 
+  "14895" -> "14904" 
+  "14904" -> "14910" 
+  "14907" -> "14920" 
+  "14915" -> "14924" 
+  "14924" -> "14930" 
+  "14927" -> "14940" 
+  "14935" -> "14942" 
+  "14856" -> "14854" 
+  "14865" -> "14863" 
+  "14876" -> "14879" 
+  "14879" -> "14875" 
+  "14886" -> "14884" 
+  "14892" -> "14891" 
+  "14897" -> "14895" 
+  "14908" -> "14911" 
+  "14911" -> "14907" 
+  "14917" -> "14915" 
+  "14928" -> "14931" 
+  "14931" -> "14927" 
+  "14937" -> "14935" 
+  "14857" -> "14856" 
+  "14866" -> "14865" 
+  "14878" -> "14876" 
+  "14887" -> "14886" 
+  "14898" -> "14897" 
+  "14910" -> "14908" 
+  "14918" -> "14917" 
+  "14930" -> "14928" 
+  "14938" -> "14937" 
+  "14859" -> "14857" 
+  "14868" -> "14866" 
+  "14889" -> "14887" 
+  "14900" -> "14898" 
+  "14920" -> "14918" 
+  "14940" -> "14938" 
+  "14850" -> "14859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/269-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/269-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/269-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/269-cfg.dot	2023-06-07 19:35:21.377385033 +0330
@@ -1,126 +1,83 @@
-digraph "FindClassTest" {  
-"14891" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>117</SUB>> ]
-"14899" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>121</SUB>> ]
-"14904" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>122</SUB>> ]
-"14912" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>126</SUB>> ]
-"14914" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>128</SUB>> ]
-"14916" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>130</SUB>> ]
-"14918" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
-"14924" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
-"14930" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>135</SUB>> ]
-"14979" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>152</SUB>> ]
-"14985" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>154</SUB>> ]
-"14991" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>158</SUB>> ]
-"14997" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>162</SUB>> ]
-"15003" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>165</SUB>> ]
-"15009" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>168</SUB>> ]
-"15015" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>170</SUB>> ]
-"14893" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>117</SUB>> ]
-"14900" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>121</SUB>> ]
-"14905" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>122</SUB>> ]
-"14908" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>122</SUB>> ]
-"14922" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
-"14928" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
-"14934" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>135</SUB>> ]
-"14983" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>153</SUB>> ]
-"14989" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>155</SUB>> ]
-"14995" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>159</SUB>> ]
-"15001" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>163</SUB>> ]
-"15007" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>165</SUB>> ]
-"15013" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>168</SUB>> ]
-"15017" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>170</SUB>> ]
-"14894" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>117</SUB>> ]
-"14902" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>121</SUB>> ]
-"14907" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>122</SUB>> ]
-"14939" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>139</SUB>> ]
-"14946" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>140</SUB>> ]
-"14951" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>141</SUB>> ]
-"14956" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>143</SUB>> ]
-"14963" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>144</SUB>> ]
-"14968" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>145</SUB>> ]
-"15018" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>170</SUB>> ]
-"14896" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>117</SUB>> ]
-"14940" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>139</SUB>> ]
-"14947" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>140</SUB>> ]
-"14952" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>141</SUB>> ]
-"14957" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>143</SUB>> ]
-"14964" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>144</SUB>> ]
-"14969" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>145</SUB>> ]
-"14975" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>148</SUB>> ]
-"14977" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>149</SUB>> ]
-"15020" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>170</SUB>> ]
-"14941" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>139</SUB>> ]
-"14948" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>140</SUB>> ]
-"14954" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>141</SUB>> ]
-"14958" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>143</SUB>> ]
-"14965" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>144</SUB>> ]
-"14971" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>145</SUB>> ]
-"14943" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>139</SUB>> ]
-"14950" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>140</SUB>> ]
-"14960" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>143</SUB>> ]
-"14967" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>144</SUB>> ]
-"14887" [label = <(METHOD,FindClassTest)<SUB>116</SUB>> ]
-"15022" [label = <(METHOD_RETURN,void)<SUB>116</SUB>> ]
-  "14891" -> "14902" 
-  "14899" -> "14907" 
-  "14904" -> "14912" 
-  "14912" -> "14914" 
-  "14914" -> "14916" 
-  "14916" -> "14922" 
-  "14918" -> "14928" 
-  "14924" -> "14934" 
-  "14930" -> "14943" 
-  "14930" -> "14975" 
-  "14979" -> "14989" 
-  "14985" -> "14995" 
-  "14991" -> "15001" 
-  "14997" -> "15007" 
-  "15003" -> "15013" 
-  "15009" -> "15020" 
-  "15015" -> "15022" 
-  "14893" -> "14891" 
-  "14900" -> "14899" 
-  "14905" -> "14908" 
-  "14908" -> "14904" 
-  "14922" -> "14918" 
-  "14928" -> "14924" 
-  "14934" -> "14930" 
-  "14983" -> "14979" 
-  "14989" -> "14985" 
-  "14995" -> "14991" 
+digraph "GetStaticMethodIdBadArgumentTest" {  
+"14948" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
+"14957" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
+"14966" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>245</SUB>> ]
+"14969" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>246</SUB>> ]
+"14978" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
+"14985" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
+"14994" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>250</SUB>> ]
+"14997" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>251</SUB>> ]
+"15005" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
+"15014" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>254</SUB>> ]
+"15017" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>255</SUB>> ]
+"15025" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>258</SUB>> ]
+"14950" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
+"14959" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
+"14970" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>246</SUB>> ]
+"14973" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>246</SUB>> ]
+"14980" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
+"14987" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
+"14998" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>251</SUB>> ]
+"15001" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>251</SUB>> ]
+"15007" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
+"15018" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>255</SUB>> ]
+"15021" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>255</SUB>> ]
+"15027" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>258</SUB>> ]
+"14951" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>241</SUB>> ]
+"14960" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>244</SUB>> ]
+"14972" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>246</SUB>> ]
+"14981" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>248</SUB>> ]
+"14988" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>249</SUB>> ]
+"15000" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>251</SUB>> ]
+"15008" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>253</SUB>> ]
+"15020" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>255</SUB>> ]
+"15028" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>258</SUB>> ]
+"14953" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>241</SUB>> ]
+"14962" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>244</SUB>> ]
+"14983" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>248</SUB>> ]
+"14990" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>249</SUB>> ]
+"15010" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>253</SUB>> ]
+"15030" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>258</SUB>> ]
+"14944" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>240</SUB>> ]
+"15032" [label = <(METHOD_RETURN,void)<SUB>240</SUB>> ]
+  "14948" -> "14962" 
+  "14957" -> "14966" 
+  "14966" -> "14972" 
+  "14969" -> "14983" 
+  "14978" -> "14990" 
+  "14985" -> "14994" 
+  "14994" -> "15000" 
+  "14997" -> "15010" 
+  "15005" -> "15014" 
+  "15014" -> "15020" 
+  "15017" -> "15030" 
+  "15025" -> "15032" 
+  "14950" -> "14948" 
+  "14959" -> "14957" 
+  "14970" -> "14973" 
+  "14973" -> "14969" 
+  "14980" -> "14978" 
+  "14987" -> "14985" 
+  "14998" -> "15001" 
   "15001" -> "14997" 
-  "15007" -> "15003" 
-  "15013" -> "15009" 
-  "15017" -> "15015" 
-  "14894" -> "14893" 
-  "14902" -> "14900" 
-  "14907" -> "14905" 
-  "14939" -> "14950" 
-  "14946" -> "14954" 
-  "14951" -> "14960" 
-  "14956" -> "14967" 
-  "14963" -> "14971" 
-  "14968" -> "14983" 
-  "15018" -> "15017" 
-  "14896" -> "14894" 
-  "14940" -> "14939" 
-  "14947" -> "14946" 
-  "14952" -> "14951" 
-  "14957" -> "14956" 
-  "14964" -> "14963" 
-  "14969" -> "14968" 
-  "14975" -> "14977" 
-  "14977" -> "14983" 
+  "15007" -> "15005" 
+  "15018" -> "15021" 
+  "15021" -> "15017" 
+  "15027" -> "15025" 
+  "14951" -> "14950" 
+  "14960" -> "14959" 
+  "14972" -> "14970" 
+  "14981" -> "14980" 
+  "14988" -> "14987" 
+  "15000" -> "14998" 
+  "15008" -> "15007" 
   "15020" -> "15018" 
-  "14941" -> "14940" 
-  "14948" -> "14947" 
-  "14954" -> "14952" 
-  "14958" -> "14957" 
-  "14965" -> "14964" 
-  "14971" -> "14969" 
-  "14943" -> "14941" 
-  "14950" -> "14948" 
-  "14960" -> "14958" 
-  "14967" -> "14965" 
-  "14887" -> "14896" 
+  "15028" -> "15027" 
+  "14953" -> "14951" 
+  "14962" -> "14960" 
+  "14983" -> "14981" 
+  "14990" -> "14988" 
+  "15010" -> "15008" 
+  "15030" -> "15028" 
+  "14944" -> "14953" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/27-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/27-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/27-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/27-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,97 +1,23 @@
-digraph "IsAssignableFrom" {  
-"1050" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>507</SUB>> ]
-"1069" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>508</SUB>> ]
-"1089" [label = <(soa,soa(env))<SUB>509</SUB>> ]
-"1091" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>510</SUB>> ]
-"1108" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>511</SUB>> ]
-"1125" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>512</SUB>> ]
-"1092" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>510</SUB>> ]
-"1099" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>510</SUB>> ]
-"1109" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>511</SUB>> ]
-"1116" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>511</SUB>> ]
-"1126" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>512</SUB>> ]
-"1093" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>510</SUB>> ]
-"1100" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>510</SUB>> ]
-"1110" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>511</SUB>> ]
-"1117" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>511</SUB>> ]
-"1127" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>512</SUB>> ]
-"1055" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>507</SUB>> ]
-"1074" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>508</SUB>> ]
-"1095" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>510</SUB>> ]
-"1101" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>510</SUB>> ]
-"1104" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>510</SUB>> ]
-"1112" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>511</SUB>> ]
-"1118" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>511</SUB>> ]
-"1121" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>511</SUB>> ]
-"1128" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>512</SUB>> ]
-"1056" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>507</SUB>> ]
-"1060" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>507</SUB>> ]
-"1067" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>507</SUB>> ]
-"1075" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>508</SUB>> ]
-"1079" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>508</SUB>> ]
-"1086" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>508</SUB>> ]
-"1097" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>510</SUB>> ]
-"1103" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>510</SUB>> ]
-"1106" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>510</SUB>> ]
-"1114" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>511</SUB>> ]
-"1120" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>511</SUB>> ]
-"1123" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>511</SUB>> ]
-"1130" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>512</SUB>> ]
-"1061" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>507</SUB>> ]
-"1080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>508</SUB>> ]
-"1062" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>507</SUB>> ]
-"1064" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>507</SUB>> ]
-"1081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>508</SUB>> ]
-"1083" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>508</SUB>> ]
-"1045" [label = <(METHOD,IsAssignableFrom)<SUB>506</SUB>> ]
-"1134" [label = <(METHOD_RETURN,jboolean)<SUB>506</SUB>> ]
-  "1050" -> "1056" 
-  "1050" -> "1069" 
-  "1069" -> "1075" 
-  "1069" -> "1089" 
-  "1089" -> "1097" 
-  "1091" -> "1114" 
-  "1108" -> "1130" 
-  "1125" -> "1134" 
-  "1092" -> "1103" 
-  "1099" -> "1091" 
-  "1109" -> "1120" 
-  "1116" -> "1108" 
-  "1126" -> "1125" 
-  "1093" -> "1092" 
-  "1100" -> "1099" 
-  "1110" -> "1109" 
-  "1117" -> "1116" 
-  "1127" -> "1126" 
-  "1055" -> "1062" 
-  "1055" -> "1069" 
-  "1074" -> "1081" 
-  "1074" -> "1089" 
-  "1095" -> "1093" 
-  "1101" -> "1106" 
-  "1104" -> "1100" 
-  "1112" -> "1110" 
-  "1118" -> "1123" 
-  "1121" -> "1117" 
-  "1128" -> "1127" 
-  "1056" -> "1055" 
-  "1060" -> "1067" 
-  "1067" -> "1134" 
-  "1075" -> "1074" 
-  "1079" -> "1086" 
-  "1086" -> "1134" 
-  "1097" -> "1095" 
-  "1103" -> "1101" 
-  "1106" -> "1104" 
-  "1114" -> "1112" 
-  "1120" -> "1118" 
-  "1123" -> "1121" 
-  "1130" -> "1128" 
-  "1061" -> "1060" 
-  "1080" -> "1079" 
-  "1062" -> "1064" 
-  "1064" -> "1061" 
-  "1081" -> "1083" 
-  "1083" -> "1080" 
-  "1045" -> "1050" 
+digraph "ExceptionCheck" {  
+"1101" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>463</SUB>> ]
+"1102" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>463</SUB>> ]
+"1103" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending())<SUB>463</SUB>> ]
+"1104" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending)<SUB>463</SUB>> ]
+"1105" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>463</SUB>> ]
+"1110" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>463</SUB>> ]
+"1106" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>463</SUB>> ]
+"1109" [label = <(FIELD_IDENTIFIER,self,self)<SUB>463</SUB>> ]
+"1107" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>463</SUB>> ]
+"1098" [label = <(METHOD,ExceptionCheck)<SUB>462</SUB>> ]
+"1113" [label = <(METHOD_RETURN,jboolean)<SUB>462</SUB>> ]
+  "1101" -> "1113" 
+  "1102" -> "1101" 
+  "1103" -> "1102" 
+  "1104" -> "1103" 
+  "1105" -> "1110" 
+  "1110" -> "1104" 
+  "1106" -> "1109" 
+  "1109" -> "1105" 
+  "1107" -> "1106" 
+  "1098" -> "1107" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/270-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/270-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/270-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/270-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,85 +1,96 @@
-digraph "GetFieldIdBadArgumentTest" {  
-"15028" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>174</SUB>> ]
-"15037" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>177</SUB>> ]
-"15044" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>178</SUB>> ]
-"15048" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>180</SUB>> ]
-"15057" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>181</SUB>> ]
-"15060" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>182</SUB>> ]
-"15068" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>184</SUB>> ]
-"15077" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>185</SUB>> ]
-"15080" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>186</SUB>> ]
-"15088" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>188</SUB>> ]
-"15097" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>189</SUB>> ]
-"15100" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>190</SUB>> ]
-"15108" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>193</SUB>> ]
-"15030" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>174</SUB>> ]
-"15039" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>177</SUB>> ]
-"15050" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>180</SUB>> ]
-"15061" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>182</SUB>> ]
-"15064" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>182</SUB>> ]
-"15070" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>184</SUB>> ]
-"15081" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>186</SUB>> ]
-"15084" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>186</SUB>> ]
-"15090" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>188</SUB>> ]
-"15101" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>190</SUB>> ]
-"15104" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>190</SUB>> ]
-"15110" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>193</SUB>> ]
-"15031" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>174</SUB>> ]
-"15040" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>177</SUB>> ]
-"15051" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>180</SUB>> ]
-"15063" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>182</SUB>> ]
-"15071" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>184</SUB>> ]
-"15083" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>186</SUB>> ]
-"15091" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>188</SUB>> ]
-"15103" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>190</SUB>> ]
-"15111" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>193</SUB>> ]
-"15033" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>174</SUB>> ]
-"15042" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>177</SUB>> ]
-"15053" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>180</SUB>> ]
-"15073" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>184</SUB>> ]
-"15093" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>188</SUB>> ]
-"15113" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>193</SUB>> ]
-"15024" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>173</SUB>> ]
-"15115" [label = <(METHOD_RETURN,void)<SUB>173</SUB>> ]
-  "15028" -> "15042" 
-  "15037" -> "15044" 
-  "15044" -> "15053" 
-  "15048" -> "15057" 
-  "15057" -> "15063" 
-  "15060" -> "15073" 
-  "15068" -> "15077" 
-  "15077" -> "15083" 
-  "15080" -> "15093" 
-  "15088" -> "15097" 
-  "15097" -> "15103" 
-  "15100" -> "15113" 
-  "15108" -> "15115" 
-  "15030" -> "15028" 
-  "15039" -> "15037" 
-  "15050" -> "15048" 
-  "15061" -> "15064" 
-  "15064" -> "15060" 
-  "15070" -> "15068" 
-  "15081" -> "15084" 
-  "15084" -> "15080" 
-  "15090" -> "15088" 
-  "15101" -> "15104" 
-  "15104" -> "15100" 
-  "15110" -> "15108" 
-  "15031" -> "15030" 
-  "15040" -> "15039" 
-  "15051" -> "15050" 
-  "15063" -> "15061" 
-  "15071" -> "15070" 
-  "15083" -> "15081" 
-  "15091" -> "15090" 
-  "15103" -> "15101" 
-  "15111" -> "15110" 
-  "15033" -> "15031" 
-  "15042" -> "15040" 
-  "15053" -> "15051" 
+digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
+"15038" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
+"15047" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
+"15054" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>266</SUB>> ]
+"15058" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
+"15067" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>268</SUB>> ]
+"15071" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
+"15096" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
+"15105" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>280</SUB>> ]
+"15108" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>281</SUB>> ]
+"15116" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
+"15123" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>285</SUB>> ]
+"15126" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>286</SUB>> ]
+"15134" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>289</SUB>> ]
+"15040" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
+"15049" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
+"15060" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
+"15073" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
+"15098" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
+"15109" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>281</SUB>> ]
+"15112" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>281</SUB>> ]
+"15118" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
+"15127" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>286</SUB>> ]
+"15130" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>286</SUB>> ]
+"15136" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>289</SUB>> ]
+"15041" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>262</SUB>> ]
+"15050" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>265</SUB>> ]
+"15061" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>267</SUB>> ]
+"15074" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>271</SUB>> ]
+"15083" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>273</SUB>> ]
+"15086" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>274</SUB>> ]
+"15099" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>279</SUB>> ]
+"15111" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>281</SUB>> ]
+"15119" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>284</SUB>> ]
+"15129" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>286</SUB>> ]
+"15137" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>289</SUB>> ]
+"15043" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>262</SUB>> ]
+"15052" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>265</SUB>> ]
+"15063" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>267</SUB>> ]
+"15076" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>271</SUB>> ]
+"15087" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>274</SUB>> ]
+"15093" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>276</SUB>> ]
+"15101" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>279</SUB>> ]
+"15121" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>284</SUB>> ]
+"15139" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>289</SUB>> ]
+"15089" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>274</SUB>> ]
+"15034" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>261</SUB>> ]
+"15141" [label = <(METHOD_RETURN,void)<SUB>261</SUB>> ]
+  "15038" -> "15052" 
+  "15047" -> "15054" 
+  "15054" -> "15063" 
+  "15058" -> "15067" 
+  "15067" -> "15076" 
+  "15071" -> "15083" 
+  "15071" -> "15093" 
+  "15096" -> "15105" 
+  "15105" -> "15111" 
+  "15108" -> "15121" 
+  "15116" -> "15123" 
+  "15123" -> "15129" 
+  "15126" -> "15139" 
+  "15134" -> "15141" 
+  "15040" -> "15038" 
+  "15049" -> "15047" 
+  "15060" -> "15058" 
   "15073" -> "15071" 
-  "15093" -> "15091" 
-  "15113" -> "15111" 
-  "15024" -> "15033" 
+  "15098" -> "15096" 
+  "15109" -> "15112" 
+  "15112" -> "15108" 
+  "15118" -> "15116" 
+  "15127" -> "15130" 
+  "15130" -> "15126" 
+  "15136" -> "15134" 
+  "15041" -> "15040" 
+  "15050" -> "15049" 
+  "15061" -> "15060" 
+  "15074" -> "15073" 
+  "15083" -> "15089" 
+  "15086" -> "15101" 
+  "15099" -> "15098" 
+  "15111" -> "15109" 
+  "15119" -> "15118" 
+  "15129" -> "15127" 
+  "15137" -> "15136" 
+  "15043" -> "15041" 
+  "15052" -> "15050" 
+  "15063" -> "15061" 
+  "15076" -> "15074" 
+  "15087" -> "15086" 
+  "15093" -> "15101" 
+  "15101" -> "15099" 
+  "15121" -> "15119" 
+  "15139" -> "15137" 
+  "15089" -> "15087" 
+  "15034" -> "15043" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/271-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/271-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/271-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/271-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,85 +1,96 @@
-digraph "GetStaticFieldIdBadArgumentTest" {  
-"15121" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>197</SUB>> ]
-"15130" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>200</SUB>> ]
-"15137" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>201</SUB>> ]
-"15141" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>203</SUB>> ]
-"15150" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>204</SUB>> ]
-"15153" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>205</SUB>> ]
-"15161" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>207</SUB>> ]
-"15170" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>208</SUB>> ]
-"15173" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>209</SUB>> ]
-"15181" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>211</SUB>> ]
-"15190" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>212</SUB>> ]
-"15193" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>213</SUB>> ]
-"15201" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>216</SUB>> ]
-"15123" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>197</SUB>> ]
-"15132" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>200</SUB>> ]
-"15143" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>203</SUB>> ]
-"15154" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>205</SUB>> ]
-"15157" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>205</SUB>> ]
-"15163" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>207</SUB>> ]
-"15174" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>209</SUB>> ]
-"15177" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>209</SUB>> ]
-"15183" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>211</SUB>> ]
-"15194" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>213</SUB>> ]
-"15197" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>213</SUB>> ]
-"15203" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>216</SUB>> ]
-"15124" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>197</SUB>> ]
-"15133" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>200</SUB>> ]
-"15144" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>203</SUB>> ]
-"15156" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>205</SUB>> ]
-"15164" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>207</SUB>> ]
-"15176" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>209</SUB>> ]
-"15184" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>211</SUB>> ]
-"15196" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>213</SUB>> ]
-"15204" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>216</SUB>> ]
-"15126" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>197</SUB>> ]
-"15135" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>200</SUB>> ]
-"15146" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>203</SUB>> ]
-"15166" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>207</SUB>> ]
-"15186" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>211</SUB>> ]
-"15206" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>216</SUB>> ]
-"15117" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>196</SUB>> ]
-"15208" [label = <(METHOD_RETURN,void)<SUB>196</SUB>> ]
-  "15121" -> "15135" 
-  "15130" -> "15137" 
-  "15137" -> "15146" 
-  "15141" -> "15150" 
-  "15150" -> "15156" 
-  "15153" -> "15166" 
-  "15161" -> "15170" 
-  "15170" -> "15176" 
-  "15173" -> "15186" 
-  "15181" -> "15190" 
-  "15190" -> "15196" 
-  "15193" -> "15206" 
-  "15201" -> "15208" 
-  "15123" -> "15121" 
-  "15132" -> "15130" 
-  "15143" -> "15141" 
-  "15154" -> "15157" 
-  "15157" -> "15153" 
-  "15163" -> "15161" 
-  "15174" -> "15177" 
-  "15177" -> "15173" 
-  "15183" -> "15181" 
-  "15194" -> "15197" 
-  "15197" -> "15193" 
-  "15203" -> "15201" 
-  "15124" -> "15123" 
-  "15133" -> "15132" 
-  "15144" -> "15143" 
-  "15156" -> "15154" 
-  "15164" -> "15163" 
-  "15176" -> "15174" 
-  "15184" -> "15183" 
-  "15196" -> "15194" 
-  "15204" -> "15203" 
-  "15126" -> "15124" 
-  "15135" -> "15133" 
-  "15146" -> "15144" 
-  "15166" -> "15164" 
-  "15186" -> "15184" 
-  "15206" -> "15204" 
-  "15117" -> "15126" 
+digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
+"15147" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
+"15156" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
+"15163" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>297</SUB>> ]
+"15167" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
+"15176" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>299</SUB>> ]
+"15180" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
+"15205" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
+"15214" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>311</SUB>> ]
+"15217" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>312</SUB>> ]
+"15225" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
+"15232" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>315</SUB>> ]
+"15235" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>316</SUB>> ]
+"15243" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>318</SUB>> ]
+"15149" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
+"15158" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
+"15169" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
+"15182" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
+"15207" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
+"15218" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>312</SUB>> ]
+"15221" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>312</SUB>> ]
+"15227" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
+"15236" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>316</SUB>> ]
+"15239" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>316</SUB>> ]
+"15245" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>318</SUB>> ]
+"15150" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>293</SUB>> ]
+"15159" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>296</SUB>> ]
+"15170" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>298</SUB>> ]
+"15183" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>302</SUB>> ]
+"15192" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>304</SUB>> ]
+"15195" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>305</SUB>> ]
+"15208" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>310</SUB>> ]
+"15220" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>312</SUB>> ]
+"15228" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>314</SUB>> ]
+"15238" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>316</SUB>> ]
+"15246" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>318</SUB>> ]
+"15152" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>293</SUB>> ]
+"15161" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>296</SUB>> ]
+"15172" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>298</SUB>> ]
+"15185" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>302</SUB>> ]
+"15196" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>305</SUB>> ]
+"15202" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>307</SUB>> ]
+"15210" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>310</SUB>> ]
+"15230" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>314</SUB>> ]
+"15248" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>318</SUB>> ]
+"15198" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>305</SUB>> ]
+"15143" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>292</SUB>> ]
+"15250" [label = <(METHOD_RETURN,void)<SUB>292</SUB>> ]
+  "15147" -> "15161" 
+  "15156" -> "15163" 
+  "15163" -> "15172" 
+  "15167" -> "15176" 
+  "15176" -> "15185" 
+  "15180" -> "15192" 
+  "15180" -> "15202" 
+  "15205" -> "15214" 
+  "15214" -> "15220" 
+  "15217" -> "15230" 
+  "15225" -> "15232" 
+  "15232" -> "15238" 
+  "15235" -> "15248" 
+  "15243" -> "15250" 
+  "15149" -> "15147" 
+  "15158" -> "15156" 
+  "15169" -> "15167" 
+  "15182" -> "15180" 
+  "15207" -> "15205" 
+  "15218" -> "15221" 
+  "15221" -> "15217" 
+  "15227" -> "15225" 
+  "15236" -> "15239" 
+  "15239" -> "15235" 
+  "15245" -> "15243" 
+  "15150" -> "15149" 
+  "15159" -> "15158" 
+  "15170" -> "15169" 
+  "15183" -> "15182" 
+  "15192" -> "15198" 
+  "15195" -> "15210" 
+  "15208" -> "15207" 
+  "15220" -> "15218" 
+  "15228" -> "15227" 
+  "15238" -> "15236" 
+  "15246" -> "15245" 
+  "15152" -> "15150" 
+  "15161" -> "15159" 
+  "15172" -> "15170" 
+  "15185" -> "15183" 
+  "15196" -> "15195" 
+  "15202" -> "15210" 
+  "15210" -> "15208" 
+  "15230" -> "15228" 
+  "15248" -> "15246" 
+  "15198" -> "15196" 
+  "15143" -> "15152" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/272-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/272-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/272-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/272-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,87 +1,79 @@
-digraph "GetMethodIdBadArgumentTest" {  
-"15214" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>220</SUB>> ]
-"15223" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>223</SUB>> ]
-"15232" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>224</SUB>> ]
-"15235" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>225</SUB>> ]
-"15244" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>227</SUB>> ]
-"15251" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>228</SUB>> ]
-"15255" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>229</SUB>> ]
-"15264" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>230</SUB>> ]
-"15267" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>231</SUB>> ]
-"15275" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>233</SUB>> ]
-"15284" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>234</SUB>> ]
-"15287" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>235</SUB>> ]
-"15295" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>238</SUB>> ]
-"15216" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>220</SUB>> ]
-"15225" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>223</SUB>> ]
-"15236" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>225</SUB>> ]
-"15239" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>225</SUB>> ]
-"15246" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>227</SUB>> ]
-"15252" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>228</SUB>> ]
-"15257" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>229</SUB>> ]
-"15268" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>231</SUB>> ]
-"15271" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>231</SUB>> ]
-"15277" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>233</SUB>> ]
-"15288" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>235</SUB>> ]
-"15291" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>235</SUB>> ]
-"15297" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>238</SUB>> ]
-"15217" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>220</SUB>> ]
-"15226" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>223</SUB>> ]
-"15238" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>225</SUB>> ]
-"15247" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>227</SUB>> ]
-"15258" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>229</SUB>> ]
-"15270" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>231</SUB>> ]
-"15278" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>233</SUB>> ]
-"15290" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>235</SUB>> ]
-"15298" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>238</SUB>> ]
-"15219" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>220</SUB>> ]
-"15228" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>223</SUB>> ]
-"15249" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>227</SUB>> ]
-"15260" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>229</SUB>> ]
-"15280" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>233</SUB>> ]
-"15300" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>238</SUB>> ]
-"15210" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>219</SUB>> ]
-"15302" [label = <(METHOD_RETURN,void)<SUB>219</SUB>> ]
-  "15214" -> "15228" 
-  "15223" -> "15232" 
-  "15232" -> "15238" 
-  "15235" -> "15249" 
-  "15244" -> "15252" 
-  "15251" -> "15260" 
-  "15255" -> "15264" 
-  "15264" -> "15270" 
-  "15267" -> "15280" 
-  "15275" -> "15284" 
-  "15284" -> "15290" 
-  "15287" -> "15300" 
-  "15295" -> "15302" 
-  "15216" -> "15214" 
-  "15225" -> "15223" 
-  "15236" -> "15239" 
-  "15239" -> "15235" 
-  "15246" -> "15244" 
-  "15252" -> "15251" 
-  "15257" -> "15255" 
-  "15268" -> "15271" 
-  "15271" -> "15267" 
-  "15277" -> "15275" 
-  "15288" -> "15291" 
-  "15291" -> "15287" 
-  "15297" -> "15295" 
-  "15217" -> "15216" 
-  "15226" -> "15225" 
-  "15238" -> "15236" 
-  "15247" -> "15246" 
-  "15258" -> "15257" 
-  "15270" -> "15268" 
-  "15278" -> "15277" 
-  "15290" -> "15288" 
-  "15298" -> "15297" 
-  "15219" -> "15217" 
-  "15228" -> "15226" 
-  "15249" -> "15247" 
-  "15260" -> "15258" 
-  "15280" -> "15278" 
-  "15300" -> "15298" 
-  "15210" -> "15219" 
+digraph "RegisterAndUnregisterNativesBadArguments" {  
+"15257" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
+"15287" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
+"15294" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>334</SUB>> ]
+"15303" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>335</SUB>> ]
+"15308" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>338</SUB>> ]
+"15315" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>339</SUB>> ]
+"15323" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>342</SUB>> ]
+"15259" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
+"15266" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>326</SUB>> ]
+"15269" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>327</SUB>> ]
+"15278" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>328</SUB>> ]
+"15289" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
+"15295" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>334</SUB>> ]
+"15304" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>335</SUB>> ]
+"15309" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>338</SUB>> ]
+"15316" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>339</SUB>> ]
+"15319" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>339</SUB>> ]
+"15325" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>342</SUB>> ]
+"15260" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>323</SUB>> ]
+"15268" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>326</SUB>> ]
+"15270" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>327</SUB>> ]
+"15279" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>328</SUB>> ]
+"15282" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>328</SUB>> ]
+"15290" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>333</SUB>> ]
+"15296" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>334</SUB>> ]
+"15306" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>335</SUB>> ]
+"15310" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>338</SUB>> ]
+"15318" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>339</SUB>> ]
+"15326" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>342</SUB>> ]
+"15262" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>323</SUB>> ]
+"15271" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>327</SUB>> ]
+"15281" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>328</SUB>> ]
+"15292" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>333</SUB>> ]
+"15298" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>334</SUB>> ]
+"15312" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>338</SUB>> ]
+"15328" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>342</SUB>> ]
+"15273" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>327</SUB>> ]
+"15252" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>321</SUB>> ]
+"15330" [label = <(METHOD_RETURN,void)<SUB>321</SUB>> ]
+  "15257" -> "15268" 
+  "15287" -> "15298" 
+  "15294" -> "15306" 
+  "15303" -> "15312" 
+  "15308" -> "15318" 
+  "15315" -> "15328" 
+  "15323" -> "15330" 
+  "15259" -> "15257" 
+  "15266" -> "15273" 
+  "15269" -> "15281" 
+  "15278" -> "15292" 
+  "15289" -> "15287" 
+  "15295" -> "15294" 
+  "15304" -> "15303" 
+  "15309" -> "15308" 
+  "15316" -> "15319" 
+  "15319" -> "15315" 
+  "15325" -> "15323" 
+  "15260" -> "15259" 
+  "15268" -> "15266" 
+  "15270" -> "15269" 
+  "15279" -> "15282" 
+  "15282" -> "15278" 
+  "15290" -> "15289" 
+  "15296" -> "15295" 
+  "15306" -> "15304" 
+  "15310" -> "15309" 
+  "15318" -> "15316" 
+  "15326" -> "15325" 
+  "15262" -> "15260" 
+  "15271" -> "15270" 
+  "15281" -> "15279" 
+  "15292" -> "15290" 
+  "15298" -> "15296" 
+  "15312" -> "15310" 
+  "15328" -> "15326" 
+  "15273" -> "15271" 
+  "15252" -> "15262" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/273-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/273-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/273-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/273-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,83 +1,243 @@
-digraph "GetStaticMethodIdBadArgumentTest" {  
-"15308" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>242</SUB>> ]
-"15317" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>245</SUB>> ]
-"15326" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>246</SUB>> ]
-"15329" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>247</SUB>> ]
-"15338" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>249</SUB>> ]
-"15345" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>250</SUB>> ]
-"15354" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>251</SUB>> ]
-"15357" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>252</SUB>> ]
-"15365" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>254</SUB>> ]
-"15374" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>255</SUB>> ]
-"15377" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>256</SUB>> ]
-"15385" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>259</SUB>> ]
-"15310" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>242</SUB>> ]
-"15319" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>245</SUB>> ]
-"15330" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>247</SUB>> ]
-"15333" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>247</SUB>> ]
-"15340" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>249</SUB>> ]
-"15347" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>250</SUB>> ]
-"15358" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>252</SUB>> ]
-"15361" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>252</SUB>> ]
-"15367" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>254</SUB>> ]
-"15378" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>256</SUB>> ]
-"15381" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>256</SUB>> ]
-"15387" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>259</SUB>> ]
-"15311" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>242</SUB>> ]
-"15320" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>245</SUB>> ]
-"15332" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>247</SUB>> ]
-"15341" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>249</SUB>> ]
-"15348" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>250</SUB>> ]
-"15360" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>252</SUB>> ]
-"15368" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>254</SUB>> ]
-"15380" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>256</SUB>> ]
-"15388" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>259</SUB>> ]
-"15313" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>242</SUB>> ]
-"15322" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>245</SUB>> ]
-"15343" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>249</SUB>> ]
-"15350" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>250</SUB>> ]
-"15370" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>254</SUB>> ]
-"15390" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>259</SUB>> ]
-"15304" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>241</SUB>> ]
-"15392" [label = <(METHOD_RETURN,void)<SUB>241</SUB>> ]
-  "15308" -> "15322" 
-  "15317" -> "15326" 
-  "15326" -> "15332" 
-  "15329" -> "15343" 
-  "15338" -> "15350" 
-  "15345" -> "15354" 
-  "15354" -> "15360" 
-  "15357" -> "15370" 
-  "15365" -> "15374" 
-  "15374" -> "15380" 
-  "15377" -> "15390" 
-  "15385" -> "15392" 
-  "15310" -> "15308" 
-  "15319" -> "15317" 
-  "15330" -> "15333" 
-  "15333" -> "15329" 
-  "15340" -> "15338" 
+digraph "GetPrimitiveArrayElementsOfWrongType" {  
+"15336" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
+"15345" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
+"15353" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>352</SUB>> ]
+"15364" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>353</SUB>> ]
+"15372" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>356</SUB>> ]
+"15383" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>357</SUB>> ]
+"15391" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>360</SUB>> ]
+"15402" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>361</SUB>> ]
+"15410" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>364</SUB>> ]
+"15421" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>365</SUB>> ]
+"15429" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>368</SUB>> ]
+"15440" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>369</SUB>> ]
+"15448" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>372</SUB>> ]
+"15459" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>373</SUB>> ]
+"15467" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>376</SUB>> ]
+"15478" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>377</SUB>> ]
+"15487" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
+"15494" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>381</SUB>> ]
+"15505" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>383</SUB>> ]
+"15514" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
+"15521" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>387</SUB>> ]
+"15532" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>389</SUB>> ]
+"15540" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>393</SUB>> ]
+"15338" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
+"15347" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
+"15354" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>352</SUB>> ]
+"15365" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>353</SUB>> ]
+"15368" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>354</SUB>> ]
+"15373" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>356</SUB>> ]
+"15384" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>357</SUB>> ]
+"15387" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>358</SUB>> ]
+"15392" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>360</SUB>> ]
+"15403" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>361</SUB>> ]
+"15406" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>362</SUB>> ]
+"15411" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>364</SUB>> ]
+"15422" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>365</SUB>> ]
+"15425" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>366</SUB>> ]
+"15430" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>368</SUB>> ]
+"15441" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>369</SUB>> ]
+"15444" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>370</SUB>> ]
+"15449" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>372</SUB>> ]
+"15460" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>373</SUB>> ]
+"15463" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>374</SUB>> ]
+"15468" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>376</SUB>> ]
+"15479" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>377</SUB>> ]
+"15482" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>378</SUB>> ]
+"15489" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
+"15495" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>381</SUB>> ]
+"15506" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>383</SUB>> ]
+"15509" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>384</SUB>> ]
+"15516" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
+"15522" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>387</SUB>> ]
+"15533" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>389</SUB>> ]
+"15536" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>390</SUB>> ]
+"15542" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>393</SUB>> ]
+"15339" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>347</SUB>> ]
+"15348" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>350</SUB>> ]
+"15355" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>352</SUB>> ]
+"15358" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>352</SUB>> ]
+"15361" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>352</SUB>> ]
+"15367" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>353</SUB>> ]
+"15374" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>356</SUB>> ]
+"15377" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>356</SUB>> ]
+"15380" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>356</SUB>> ]
+"15386" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>357</SUB>> ]
+"15393" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>360</SUB>> ]
+"15396" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>360</SUB>> ]
+"15399" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>360</SUB>> ]
+"15405" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>361</SUB>> ]
+"15412" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>364</SUB>> ]
+"15415" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>364</SUB>> ]
+"15418" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>364</SUB>> ]
+"15424" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>365</SUB>> ]
+"15431" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>368</SUB>> ]
+"15434" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>368</SUB>> ]
+"15437" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>368</SUB>> ]
+"15443" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>369</SUB>> ]
+"15450" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>372</SUB>> ]
+"15453" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>372</SUB>> ]
+"15456" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>372</SUB>> ]
+"15462" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>373</SUB>> ]
+"15469" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>376</SUB>> ]
+"15472" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>376</SUB>> ]
+"15475" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>376</SUB>> ]
+"15481" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>377</SUB>> ]
+"15490" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>380</SUB>> ]
+"15496" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>381</SUB>> ]
+"15499" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>381</SUB>> ]
+"15502" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>381</SUB>> ]
+"15508" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>383</SUB>> ]
+"15517" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>386</SUB>> ]
+"15523" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>387</SUB>> ]
+"15526" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>387</SUB>> ]
+"15529" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>387</SUB>> ]
+"15535" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>389</SUB>> ]
+"15543" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>393</SUB>> ]
+"15341" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>347</SUB>> ]
+"15350" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>350</SUB>> ]
+"15357" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>352</SUB>> ]
+"15359" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>352</SUB>> ]
+"15376" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>356</SUB>> ]
+"15378" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>356</SUB>> ]
+"15395" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>360</SUB>> ]
+"15397" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>360</SUB>> ]
+"15414" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>364</SUB>> ]
+"15416" [label = <(UNKNOWN,jintArray,jintArray)<SUB>364</SUB>> ]
+"15433" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>368</SUB>> ]
+"15435" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>368</SUB>> ]
+"15452" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>372</SUB>> ]
+"15454" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>372</SUB>> ]
+"15471" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>376</SUB>> ]
+"15473" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>376</SUB>> ]
+"15492" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>380</SUB>> ]
+"15498" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>381</SUB>> ]
+"15500" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>381</SUB>> ]
+"15519" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>386</SUB>> ]
+"15525" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>387</SUB>> ]
+"15527" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>387</SUB>> ]
+"15545" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>393</SUB>> ]
+"15332" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>346</SUB>> ]
+"15547" [label = <(METHOD_RETURN,void)<SUB>346</SUB>> ]
+  "15336" -> "15350" 
+  "15345" -> "15357" 
+  "15353" -> "15367" 
+  "15364" -> "15376" 
+  "15372" -> "15386" 
+  "15383" -> "15395" 
+  "15391" -> "15405" 
+  "15402" -> "15414" 
+  "15410" -> "15424" 
+  "15421" -> "15433" 
+  "15429" -> "15443" 
+  "15440" -> "15452" 
+  "15448" -> "15462" 
+  "15459" -> "15471" 
+  "15467" -> "15481" 
+  "15478" -> "15492" 
+  "15487" -> "15498" 
+  "15494" -> "15508" 
+  "15505" -> "15519" 
+  "15514" -> "15525" 
+  "15521" -> "15535" 
+  "15532" -> "15545" 
+  "15540" -> "15547" 
+  "15338" -> "15336" 
   "15347" -> "15345" 
+  "15354" -> "15353" 
+  "15365" -> "15368" 
+  "15368" -> "15364" 
+  "15373" -> "15372" 
+  "15384" -> "15387" 
+  "15387" -> "15383" 
+  "15392" -> "15391" 
+  "15403" -> "15406" 
+  "15406" -> "15402" 
+  "15411" -> "15410" 
+  "15422" -> "15425" 
+  "15425" -> "15421" 
+  "15430" -> "15429" 
+  "15441" -> "15444" 
+  "15444" -> "15440" 
+  "15449" -> "15448" 
+  "15460" -> "15463" 
+  "15463" -> "15459" 
+  "15468" -> "15467" 
+  "15479" -> "15482" 
+  "15482" -> "15478" 
+  "15489" -> "15487" 
+  "15495" -> "15494" 
+  "15506" -> "15509" 
+  "15509" -> "15505" 
+  "15516" -> "15514" 
+  "15522" -> "15521" 
+  "15533" -> "15536" 
+  "15536" -> "15532" 
+  "15542" -> "15540" 
+  "15339" -> "15338" 
+  "15348" -> "15347" 
+  "15355" -> "15359" 
   "15358" -> "15361" 
-  "15361" -> "15357" 
+  "15361" -> "15354" 
   "15367" -> "15365" 
-  "15378" -> "15381" 
-  "15381" -> "15377" 
-  "15387" -> "15385" 
-  "15311" -> "15310" 
-  "15320" -> "15319" 
-  "15332" -> "15330" 
-  "15341" -> "15340" 
-  "15348" -> "15347" 
-  "15360" -> "15358" 
-  "15368" -> "15367" 
-  "15380" -> "15378" 
-  "15388" -> "15387" 
-  "15313" -> "15311" 
-  "15322" -> "15320" 
-  "15343" -> "15341" 
+  "15374" -> "15378" 
+  "15377" -> "15380" 
+  "15380" -> "15373" 
+  "15386" -> "15384" 
+  "15393" -> "15397" 
+  "15396" -> "15399" 
+  "15399" -> "15392" 
+  "15405" -> "15403" 
+  "15412" -> "15416" 
+  "15415" -> "15418" 
+  "15418" -> "15411" 
+  "15424" -> "15422" 
+  "15431" -> "15435" 
+  "15434" -> "15437" 
+  "15437" -> "15430" 
+  "15443" -> "15441" 
+  "15450" -> "15454" 
+  "15453" -> "15456" 
+  "15456" -> "15449" 
+  "15462" -> "15460" 
+  "15469" -> "15473" 
+  "15472" -> "15475" 
+  "15475" -> "15468" 
+  "15481" -> "15479" 
+  "15490" -> "15489" 
+  "15496" -> "15500" 
+  "15499" -> "15502" 
+  "15502" -> "15495" 
+  "15508" -> "15506" 
+  "15517" -> "15516" 
+  "15523" -> "15527" 
+  "15526" -> "15529" 
+  "15529" -> "15522" 
+  "15535" -> "15533" 
+  "15543" -> "15542" 
+  "15341" -> "15339" 
   "15350" -> "15348" 
-  "15370" -> "15368" 
-  "15390" -> "15388" 
-  "15304" -> "15313" 
+  "15357" -> "15355" 
+  "15359" -> "15358" 
+  "15376" -> "15374" 
+  "15378" -> "15377" 
+  "15395" -> "15393" 
+  "15397" -> "15396" 
+  "15414" -> "15412" 
+  "15416" -> "15415" 
+  "15433" -> "15431" 
+  "15435" -> "15434" 
+  "15452" -> "15450" 
+  "15454" -> "15453" 
+  "15471" -> "15469" 
+  "15473" -> "15472" 
+  "15492" -> "15490" 
+  "15498" -> "15496" 
+  "15500" -> "15499" 
+  "15519" -> "15517" 
+  "15525" -> "15523" 
+  "15527" -> "15526" 
+  "15545" -> "15543" 
+  "15332" -> "15341" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/274-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/274-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/274-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/274-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,96 +1,283 @@
-digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
-"15398" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>263</SUB>> ]
-"15407" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>266</SUB>> ]
-"15414" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>267</SUB>> ]
-"15418" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>268</SUB>> ]
-"15427" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>269</SUB>> ]
-"15431" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>272</SUB>> ]
-"15456" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>280</SUB>> ]
-"15465" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>281</SUB>> ]
-"15468" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>282</SUB>> ]
-"15476" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>285</SUB>> ]
-"15483" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>286</SUB>> ]
-"15486" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>287</SUB>> ]
-"15494" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>290</SUB>> ]
-"15400" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>263</SUB>> ]
-"15409" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>266</SUB>> ]
-"15420" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>268</SUB>> ]
-"15433" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>272</SUB>> ]
-"15458" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>280</SUB>> ]
-"15469" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>282</SUB>> ]
-"15472" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>282</SUB>> ]
-"15478" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>285</SUB>> ]
-"15487" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>287</SUB>> ]
-"15490" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>287</SUB>> ]
-"15496" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>290</SUB>> ]
-"15401" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>263</SUB>> ]
-"15410" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>266</SUB>> ]
-"15421" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>268</SUB>> ]
-"15434" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>272</SUB>> ]
-"15443" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>274</SUB>> ]
-"15446" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>275</SUB>> ]
-"15459" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>280</SUB>> ]
-"15471" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>282</SUB>> ]
-"15479" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>285</SUB>> ]
-"15489" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>287</SUB>> ]
-"15497" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>290</SUB>> ]
-"15403" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>263</SUB>> ]
-"15412" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>266</SUB>> ]
-"15423" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>268</SUB>> ]
-"15436" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>272</SUB>> ]
-"15447" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>275</SUB>> ]
-"15453" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>277</SUB>> ]
-"15461" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>280</SUB>> ]
-"15481" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>285</SUB>> ]
-"15499" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>290</SUB>> ]
-"15449" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>275</SUB>> ]
-"15394" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>262</SUB>> ]
-"15501" [label = <(METHOD_RETURN,void)<SUB>262</SUB>> ]
-  "15398" -> "15412" 
-  "15407" -> "15414" 
-  "15414" -> "15423" 
-  "15418" -> "15427" 
-  "15427" -> "15436" 
-  "15431" -> "15443" 
-  "15431" -> "15453" 
-  "15456" -> "15465" 
-  "15465" -> "15471" 
-  "15468" -> "15481" 
-  "15476" -> "15483" 
-  "15483" -> "15489" 
-  "15486" -> "15499" 
-  "15494" -> "15501" 
-  "15400" -> "15398" 
-  "15409" -> "15407" 
-  "15420" -> "15418" 
-  "15433" -> "15431" 
-  "15458" -> "15456" 
-  "15469" -> "15472" 
-  "15472" -> "15468" 
-  "15478" -> "15476" 
-  "15487" -> "15490" 
-  "15490" -> "15486" 
-  "15496" -> "15494" 
-  "15401" -> "15400" 
-  "15410" -> "15409" 
-  "15421" -> "15420" 
-  "15434" -> "15433" 
-  "15443" -> "15449" 
-  "15446" -> "15461" 
-  "15459" -> "15458" 
-  "15471" -> "15469" 
-  "15479" -> "15478" 
-  "15489" -> "15487" 
-  "15497" -> "15496" 
-  "15403" -> "15401" 
-  "15412" -> "15410" 
-  "15423" -> "15421" 
-  "15436" -> "15434" 
-  "15447" -> "15446" 
-  "15453" -> "15461" 
-  "15461" -> "15459" 
-  "15481" -> "15479" 
-  "15499" -> "15497" 
-  "15449" -> "15447" 
-  "15394" -> "15403" 
+digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
+"15553" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
+"15802" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>465</SUB>> ]
+"15555" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
+"15563" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
+"15570" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>401</SUB>> ]
+"15576" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
+"15585" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>404</SUB>> ]
+"15589" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>405</SUB>> ]
+"15600" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>407</SUB>> ]
+"15608" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>410</SUB>> ]
+"15619" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>412</SUB>> ]
+"15627" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>415</SUB>> ]
+"15638" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>417</SUB>> ]
+"15646" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>420</SUB>> ]
+"15657" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>422</SUB>> ]
+"15665" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>425</SUB>> ]
+"15676" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>427</SUB>> ]
+"15684" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>430</SUB>> ]
+"15695" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>432</SUB>> ]
+"15703" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>435</SUB>> ]
+"15714" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>437</SUB>> ]
+"15722" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>442</SUB>> ]
+"15731" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
+"15740" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
+"15749" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>449</SUB>> ]
+"15760" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>451</SUB>> ]
+"15769" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
+"15776" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>455</SUB>> ]
+"15787" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>457</SUB>> ]
+"15795" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>463</SUB>> ]
+"15804" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>465</SUB>> ]
+"15556" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>397</SUB>> ]
+"15565" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
+"15571" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>401</SUB>> ]
+"15578" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
+"15586" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>404</SUB>> ]
+"15590" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>405</SUB>> ]
+"15593" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>405</SUB>> ]
+"15596" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>406</SUB>> ]
+"15601" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>407</SUB>> ]
+"15604" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>408</SUB>> ]
+"15609" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>410</SUB>> ]
+"15612" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>410</SUB>> ]
+"15615" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>411</SUB>> ]
+"15620" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>412</SUB>> ]
+"15623" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>413</SUB>> ]
+"15628" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>415</SUB>> ]
+"15631" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>415</SUB>> ]
+"15634" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>416</SUB>> ]
+"15639" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>417</SUB>> ]
+"15642" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>418</SUB>> ]
+"15647" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>420</SUB>> ]
+"15650" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>420</SUB>> ]
+"15653" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>421</SUB>> ]
+"15658" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>422</SUB>> ]
+"15661" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>423</SUB>> ]
+"15666" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>425</SUB>> ]
+"15669" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>425</SUB>> ]
+"15672" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>426</SUB>> ]
+"15677" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>427</SUB>> ]
+"15680" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>428</SUB>> ]
+"15685" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>430</SUB>> ]
+"15688" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>430</SUB>> ]
+"15691" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>431</SUB>> ]
+"15696" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>432</SUB>> ]
+"15699" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>433</SUB>> ]
+"15704" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
+"15707" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>435</SUB>> ]
+"15710" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>436</SUB>> ]
+"15715" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>437</SUB>> ]
+"15718" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>438</SUB>> ]
+"15723" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
+"15733" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
+"15742" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
+"15750" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
+"15753" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>449</SUB>> ]
+"15756" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>450</SUB>> ]
+"15761" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>451</SUB>> ]
+"15764" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>452</SUB>> ]
+"15771" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
+"15777" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
+"15780" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>455</SUB>> ]
+"15783" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>456</SUB>> ]
+"15788" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>457</SUB>> ]
+"15791" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>458</SUB>> ]
+"15796" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>463</SUB>> ]
+"15805" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>465</SUB>> ]
+"15558" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>397</SUB>> ]
+"15566" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>400</SUB>> ]
+"15579" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>403</SUB>> ]
+"15583" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>403</SUB>> ]
+"15592" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>405</SUB>> ]
+"15594" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>405</SUB>> ]
+"15597" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>406</SUB>> ]
+"15603" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>407</SUB>> ]
+"15611" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>410</SUB>> ]
+"15613" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>410</SUB>> ]
+"15616" [label = <(UNKNOWN,jshort*,jshort*)<SUB>411</SUB>> ]
+"15622" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>412</SUB>> ]
+"15630" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>415</SUB>> ]
+"15632" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>415</SUB>> ]
+"15635" [label = <(UNKNOWN,jchar*,jchar*)<SUB>416</SUB>> ]
+"15641" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>417</SUB>> ]
+"15649" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>420</SUB>> ]
+"15651" [label = <(UNKNOWN,jintArray,jintArray)<SUB>420</SUB>> ]
+"15654" [label = <(UNKNOWN,jint*,jint*)<SUB>421</SUB>> ]
+"15660" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>422</SUB>> ]
+"15668" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>425</SUB>> ]
+"15670" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>425</SUB>> ]
+"15673" [label = <(UNKNOWN,jlong*,jlong*)<SUB>426</SUB>> ]
+"15679" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>427</SUB>> ]
+"15687" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>430</SUB>> ]
+"15689" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>430</SUB>> ]
+"15692" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>431</SUB>> ]
+"15698" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>432</SUB>> ]
+"15706" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
+"15708" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>435</SUB>> ]
+"15711" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>436</SUB>> ]
+"15717" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>437</SUB>> ]
+"15725" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
+"15734" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>445</SUB>> ]
+"15743" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>447</SUB>> ]
+"15747" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>447</SUB>> ]
+"15752" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
+"15754" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>449</SUB>> ]
+"15757" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>450</SUB>> ]
+"15763" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>451</SUB>> ]
+"15772" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>454</SUB>> ]
+"15779" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
+"15781" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>455</SUB>> ]
+"15784" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>456</SUB>> ]
+"15790" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>457</SUB>> ]
+"15798" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>463</SUB>> ]
+"15807" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>465</SUB>> ]
+"15568" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>400</SUB>> ]
+"15581" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>403</SUB>> ]
+"15736" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>445</SUB>> ]
+"15745" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>447</SUB>> ]
+"15774" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>454</SUB>> ]
+"15549" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>396</SUB>> ]
+"15809" [label = <(METHOD_RETURN,void)<SUB>396</SUB>> ]
+  "15553" -> "15568" 
+  "15802" -> "15809" 
+  "15555" -> "15553" 
+  "15563" -> "15571" 
+  "15570" -> "15581" 
+  "15576" -> "15586" 
+  "15585" -> "15592" 
+  "15589" -> "15603" 
+  "15600" -> "15611" 
+  "15608" -> "15622" 
+  "15619" -> "15630" 
+  "15627" -> "15641" 
+  "15638" -> "15649" 
+  "15646" -> "15660" 
+  "15657" -> "15668" 
+  "15665" -> "15679" 
+  "15676" -> "15687" 
+  "15684" -> "15698" 
+  "15695" -> "15706" 
+  "15703" -> "15717" 
+  "15714" -> "15725" 
+  "15722" -> "15736" 
+  "15731" -> "15745" 
+  "15740" -> "15752" 
+  "15749" -> "15763" 
+  "15760" -> "15774" 
+  "15769" -> "15779" 
+  "15776" -> "15790" 
+  "15787" -> "15798" 
+  "15795" -> "15807" 
+  "15804" -> "15802" 
+  "15556" -> "15555" 
+  "15565" -> "15563" 
+  "15571" -> "15570" 
+  "15578" -> "15576" 
+  "15586" -> "15585" 
+  "15590" -> "15594" 
+  "15593" -> "15597" 
+  "15596" -> "15589" 
+  "15601" -> "15604" 
+  "15604" -> "15600" 
+  "15609" -> "15613" 
+  "15612" -> "15616" 
+  "15615" -> "15608" 
+  "15620" -> "15623" 
+  "15623" -> "15619" 
+  "15628" -> "15632" 
+  "15631" -> "15635" 
+  "15634" -> "15627" 
+  "15639" -> "15642" 
+  "15642" -> "15638" 
+  "15647" -> "15651" 
+  "15650" -> "15654" 
+  "15653" -> "15646" 
+  "15658" -> "15661" 
+  "15661" -> "15657" 
+  "15666" -> "15670" 
+  "15669" -> "15673" 
+  "15672" -> "15665" 
+  "15677" -> "15680" 
+  "15680" -> "15676" 
+  "15685" -> "15689" 
+  "15688" -> "15692" 
+  "15691" -> "15684" 
+  "15696" -> "15699" 
+  "15699" -> "15695" 
+  "15704" -> "15708" 
+  "15707" -> "15711" 
+  "15710" -> "15703" 
+  "15715" -> "15718" 
+  "15718" -> "15714" 
+  "15723" -> "15722" 
+  "15733" -> "15731" 
+  "15742" -> "15740" 
+  "15750" -> "15754" 
+  "15753" -> "15757" 
+  "15756" -> "15749" 
+  "15761" -> "15764" 
+  "15764" -> "15760" 
+  "15771" -> "15769" 
+  "15777" -> "15781" 
+  "15780" -> "15784" 
+  "15783" -> "15776" 
+  "15788" -> "15791" 
+  "15791" -> "15787" 
+  "15796" -> "15795" 
+  "15805" -> "15804" 
+  "15558" -> "15556" 
+  "15566" -> "15565" 
+  "15579" -> "15583" 
+  "15583" -> "15578" 
+  "15592" -> "15590" 
+  "15594" -> "15593" 
+  "15597" -> "15596" 
+  "15603" -> "15601" 
+  "15611" -> "15609" 
+  "15613" -> "15612" 
+  "15616" -> "15615" 
+  "15622" -> "15620" 
+  "15630" -> "15628" 
+  "15632" -> "15631" 
+  "15635" -> "15634" 
+  "15641" -> "15639" 
+  "15649" -> "15647" 
+  "15651" -> "15650" 
+  "15654" -> "15653" 
+  "15660" -> "15658" 
+  "15668" -> "15666" 
+  "15670" -> "15669" 
+  "15673" -> "15672" 
+  "15679" -> "15677" 
+  "15687" -> "15685" 
+  "15689" -> "15688" 
+  "15692" -> "15691" 
+  "15698" -> "15696" 
+  "15706" -> "15704" 
+  "15708" -> "15707" 
+  "15711" -> "15710" 
+  "15717" -> "15715" 
+  "15725" -> "15723" 
+  "15734" -> "15733" 
+  "15743" -> "15747" 
+  "15747" -> "15742" 
+  "15752" -> "15750" 
+  "15754" -> "15753" 
+  "15757" -> "15756" 
+  "15763" -> "15761" 
+  "15772" -> "15771" 
+  "15779" -> "15777" 
+  "15781" -> "15780" 
+  "15784" -> "15783" 
+  "15790" -> "15788" 
+  "15798" -> "15796" 
+  "15807" -> "15805" 
+  "15568" -> "15566" 
+  "15581" -> "15579" 
+  "15736" -> "15734" 
+  "15745" -> "15743" 
+  "15774" -> "15772" 
+  "15549" -> "15558" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/275-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/275-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/275-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/275-cfg.dot	2023-06-07 19:35:21.387385032 +0330
@@ -1,96 +1,69 @@
-digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
-"15507" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>294</SUB>> ]
-"15516" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>297</SUB>> ]
-"15523" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>298</SUB>> ]
-"15527" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>299</SUB>> ]
-"15536" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>300</SUB>> ]
-"15540" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>303</SUB>> ]
-"15565" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>311</SUB>> ]
-"15574" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>312</SUB>> ]
-"15577" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>313</SUB>> ]
-"15585" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>315</SUB>> ]
-"15592" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>316</SUB>> ]
-"15595" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>317</SUB>> ]
-"15603" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>319</SUB>> ]
-"15509" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>294</SUB>> ]
-"15518" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>297</SUB>> ]
-"15529" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>299</SUB>> ]
-"15542" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>303</SUB>> ]
-"15567" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>311</SUB>> ]
-"15578" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>313</SUB>> ]
-"15581" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>313</SUB>> ]
-"15587" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>315</SUB>> ]
-"15596" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>317</SUB>> ]
-"15599" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>317</SUB>> ]
-"15605" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>319</SUB>> ]
-"15510" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>294</SUB>> ]
-"15519" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>297</SUB>> ]
-"15530" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>299</SUB>> ]
-"15543" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>303</SUB>> ]
-"15552" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>305</SUB>> ]
-"15555" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>306</SUB>> ]
-"15568" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>311</SUB>> ]
-"15580" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>313</SUB>> ]
-"15588" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>315</SUB>> ]
-"15598" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>317</SUB>> ]
-"15606" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>319</SUB>> ]
-"15512" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>294</SUB>> ]
-"15521" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>297</SUB>> ]
-"15532" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>299</SUB>> ]
-"15545" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>303</SUB>> ]
-"15556" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>306</SUB>> ]
-"15562" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>308</SUB>> ]
-"15570" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>311</SUB>> ]
-"15590" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>315</SUB>> ]
-"15608" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>319</SUB>> ]
-"15558" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>306</SUB>> ]
-"15503" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>293</SUB>> ]
-"15610" [label = <(METHOD_RETURN,void)<SUB>293</SUB>> ]
-  "15507" -> "15521" 
-  "15516" -> "15523" 
-  "15523" -> "15532" 
-  "15527" -> "15536" 
-  "15536" -> "15545" 
-  "15540" -> "15552" 
-  "15540" -> "15562" 
-  "15565" -> "15574" 
-  "15574" -> "15580" 
-  "15577" -> "15590" 
-  "15585" -> "15592" 
-  "15592" -> "15598" 
-  "15595" -> "15608" 
-  "15603" -> "15610" 
-  "15509" -> "15507" 
-  "15518" -> "15516" 
-  "15529" -> "15527" 
-  "15542" -> "15540" 
-  "15567" -> "15565" 
-  "15578" -> "15581" 
-  "15581" -> "15577" 
-  "15587" -> "15585" 
-  "15596" -> "15599" 
-  "15599" -> "15595" 
-  "15605" -> "15603" 
-  "15510" -> "15509" 
-  "15519" -> "15518" 
-  "15530" -> "15529" 
-  "15543" -> "15542" 
-  "15552" -> "15558" 
-  "15555" -> "15570" 
-  "15568" -> "15567" 
-  "15580" -> "15578" 
-  "15588" -> "15587" 
-  "15598" -> "15596" 
-  "15606" -> "15605" 
-  "15512" -> "15510" 
-  "15521" -> "15519" 
-  "15532" -> "15530" 
-  "15545" -> "15543" 
-  "15556" -> "15555" 
-  "15562" -> "15570" 
-  "15570" -> "15568" 
-  "15590" -> "15588" 
-  "15608" -> "15606" 
-  "15558" -> "15556" 
-  "15503" -> "15512" 
+digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
+"15815" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
+"15824" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
+"15833" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
+"15844" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>475</SUB>> ]
+"15852" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>477</SUB>> ]
+"15861" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>478</SUB>> ]
+"15869" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>481</SUB>> ]
+"15817" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
+"15826" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
+"15835" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
+"15845" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>475</SUB>> ]
+"15848" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>475</SUB>> ]
+"15853" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
+"15856" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>477</SUB>> ]
+"15862" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>478</SUB>> ]
+"15865" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>478</SUB>> ]
+"15871" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>481</SUB>> ]
+"15818" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>469</SUB>> ]
+"15827" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>472</SUB>> ]
+"15836" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
+"15839" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>474</SUB>> ]
+"15842" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>474</SUB>> ]
+"15847" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>475</SUB>> ]
+"15855" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
+"15857" [label = <(UNKNOWN,jarray,jarray)<SUB>477</SUB>> ]
+"15864" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>478</SUB>> ]
+"15872" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>481</SUB>> ]
+"15820" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>469</SUB>> ]
+"15829" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>472</SUB>> ]
+"15838" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
+"15840" [label = <(UNKNOWN,jarray,jarray)<SUB>474</SUB>> ]
+"15874" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>481</SUB>> ]
+"15811" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>468</SUB>> ]
+"15876" [label = <(METHOD_RETURN,void)<SUB>468</SUB>> ]
+  "15815" -> "15829" 
+  "15824" -> "15838" 
+  "15833" -> "15847" 
+  "15844" -> "15855" 
+  "15852" -> "15864" 
+  "15861" -> "15874" 
+  "15869" -> "15876" 
+  "15817" -> "15815" 
+  "15826" -> "15824" 
+  "15835" -> "15833" 
+  "15845" -> "15848" 
+  "15848" -> "15844" 
+  "15853" -> "15857" 
+  "15856" -> "15852" 
+  "15862" -> "15865" 
+  "15865" -> "15861" 
+  "15871" -> "15869" 
+  "15818" -> "15817" 
+  "15827" -> "15826" 
+  "15836" -> "15840" 
+  "15839" -> "15842" 
+  "15842" -> "15835" 
+  "15847" -> "15845" 
+  "15855" -> "15853" 
+  "15857" -> "15856" 
+  "15864" -> "15862" 
+  "15872" -> "15871" 
+  "15820" -> "15818" 
+  "15829" -> "15827" 
+  "15838" -> "15836" 
+  "15840" -> "15839" 
+  "15874" -> "15872" 
+  "15811" -> "15820" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/276-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/276-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/276-cfg.dot	2023-06-07 19:35:14.837385840 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/276-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,79 +1,249 @@
-digraph "RegisterAndUnregisterNativesBadArguments" {  
-"15617" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>324</SUB>> ]
-"15647" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>334</SUB>> ]
-"15654" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>335</SUB>> ]
-"15663" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>336</SUB>> ]
-"15668" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>339</SUB>> ]
-"15675" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>340</SUB>> ]
-"15683" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>343</SUB>> ]
-"15619" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>324</SUB>> ]
-"15626" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>327</SUB>> ]
-"15629" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>328</SUB>> ]
-"15638" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>329</SUB>> ]
-"15649" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>334</SUB>> ]
-"15655" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>335</SUB>> ]
-"15664" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>336</SUB>> ]
-"15669" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>339</SUB>> ]
-"15676" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>340</SUB>> ]
-"15679" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>340</SUB>> ]
-"15685" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>343</SUB>> ]
-"15620" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>324</SUB>> ]
-"15628" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>327</SUB>> ]
-"15630" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>328</SUB>> ]
-"15639" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>329</SUB>> ]
-"15642" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>329</SUB>> ]
-"15650" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>334</SUB>> ]
-"15656" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>335</SUB>> ]
-"15666" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>336</SUB>> ]
-"15670" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>339</SUB>> ]
-"15678" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>340</SUB>> ]
-"15686" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>343</SUB>> ]
-"15622" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>324</SUB>> ]
-"15631" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>328</SUB>> ]
-"15641" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>329</SUB>> ]
-"15652" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>334</SUB>> ]
-"15658" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>335</SUB>> ]
-"15672" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>339</SUB>> ]
-"15688" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>343</SUB>> ]
-"15633" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>328</SUB>> ]
-"15612" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>322</SUB>> ]
-"15690" [label = <(METHOD_RETURN,void)<SUB>322</SUB>> ]
-  "15617" -> "15628" 
-  "15647" -> "15658" 
-  "15654" -> "15666" 
-  "15663" -> "15672" 
-  "15668" -> "15678" 
-  "15675" -> "15688" 
-  "15683" -> "15690" 
-  "15619" -> "15617" 
-  "15626" -> "15633" 
-  "15629" -> "15641" 
-  "15638" -> "15652" 
-  "15649" -> "15647" 
-  "15655" -> "15654" 
-  "15664" -> "15663" 
-  "15669" -> "15668" 
-  "15676" -> "15679" 
-  "15679" -> "15675" 
-  "15685" -> "15683" 
-  "15620" -> "15619" 
-  "15628" -> "15626" 
-  "15630" -> "15629" 
-  "15639" -> "15642" 
-  "15642" -> "15638" 
-  "15650" -> "15649" 
-  "15656" -> "15655" 
-  "15666" -> "15664" 
-  "15670" -> "15669" 
-  "15678" -> "15676" 
-  "15686" -> "15685" 
-  "15622" -> "15620" 
-  "15631" -> "15630" 
-  "15641" -> "15639" 
-  "15652" -> "15650" 
-  "15658" -> "15656" 
-  "15672" -> "15670" 
-  "15688" -> "15686" 
-  "15633" -> "15631" 
-  "15612" -> "15622" 
+digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
+"15882" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
+"15891" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>487</SUB>> ]
+"15895" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
+"15902" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>489</SUB>> ]
+"15907" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>491</SUB>> ]
+"15919" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>493</SUB>> ]
+"15927" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>496</SUB>> ]
+"15939" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>498</SUB>> ]
+"15947" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>501</SUB>> ]
+"15959" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>503</SUB>> ]
+"15967" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>506</SUB>> ]
+"15979" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>508</SUB>> ]
+"15987" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>511</SUB>> ]
+"15999" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>513</SUB>> ]
+"16007" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>516</SUB>> ]
+"16019" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>518</SUB>> ]
+"16027" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>521</SUB>> ]
+"16039" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>523</SUB>> ]
+"16048" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
+"16055" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>527</SUB>> ]
+"16067" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>529</SUB>> ]
+"16076" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
+"16083" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>533</SUB>> ]
+"16095" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>535</SUB>> ]
+"16103" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>539</SUB>> ]
+"15884" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
+"15897" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
+"15903" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>489</SUB>> ]
+"15908" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>491</SUB>> ]
+"15911" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>491</SUB>> ]
+"15916" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>492</SUB>> ]
+"15920" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>493</SUB>> ]
+"15923" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>494</SUB>> ]
+"15928" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>496</SUB>> ]
+"15931" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>496</SUB>> ]
+"15936" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>497</SUB>> ]
+"15940" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>498</SUB>> ]
+"15943" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>499</SUB>> ]
+"15948" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>501</SUB>> ]
+"15951" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>501</SUB>> ]
+"15956" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>502</SUB>> ]
+"15960" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>503</SUB>> ]
+"15963" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>504</SUB>> ]
+"15968" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>506</SUB>> ]
+"15971" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>506</SUB>> ]
+"15976" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>507</SUB>> ]
+"15980" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>508</SUB>> ]
+"15983" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>509</SUB>> ]
+"15988" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>511</SUB>> ]
+"15991" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>511</SUB>> ]
+"15996" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>512</SUB>> ]
+"16000" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>513</SUB>> ]
+"16003" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>514</SUB>> ]
+"16008" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>516</SUB>> ]
+"16011" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>516</SUB>> ]
+"16016" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>517</SUB>> ]
+"16020" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>518</SUB>> ]
+"16023" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>519</SUB>> ]
+"16028" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>521</SUB>> ]
+"16031" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>521</SUB>> ]
+"16036" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>522</SUB>> ]
+"16040" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>523</SUB>> ]
+"16043" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>524</SUB>> ]
+"16050" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
+"16056" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>527</SUB>> ]
+"16059" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>527</SUB>> ]
+"16064" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>528</SUB>> ]
+"16068" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>529</SUB>> ]
+"16071" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>530</SUB>> ]
+"16078" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
+"16084" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>533</SUB>> ]
+"16087" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>533</SUB>> ]
+"16092" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>534</SUB>> ]
+"16096" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>535</SUB>> ]
+"16099" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>535</SUB>> ]
+"16105" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>539</SUB>> ]
+"15885" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>485</SUB>> ]
+"15898" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>488</SUB>> ]
+"15910" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>491</SUB>> ]
+"15912" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>491</SUB>> ]
+"15917" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>492</SUB>> ]
+"15922" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>493</SUB>> ]
+"15930" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>496</SUB>> ]
+"15932" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>496</SUB>> ]
+"15937" [label = <(UNKNOWN,jshort*,jshort*)<SUB>497</SUB>> ]
+"15942" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>498</SUB>> ]
+"15950" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>501</SUB>> ]
+"15952" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>501</SUB>> ]
+"15957" [label = <(UNKNOWN,jchar*,jchar*)<SUB>502</SUB>> ]
+"15962" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>503</SUB>> ]
+"15970" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>506</SUB>> ]
+"15972" [label = <(UNKNOWN,jintArray,jintArray)<SUB>506</SUB>> ]
+"15977" [label = <(UNKNOWN,jint*,jint*)<SUB>507</SUB>> ]
+"15982" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>508</SUB>> ]
+"15990" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>511</SUB>> ]
+"15992" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>511</SUB>> ]
+"15997" [label = <(UNKNOWN,jlong*,jlong*)<SUB>512</SUB>> ]
+"16002" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>513</SUB>> ]
+"16010" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>516</SUB>> ]
+"16012" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>516</SUB>> ]
+"16017" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>517</SUB>> ]
+"16022" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>518</SUB>> ]
+"16030" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>521</SUB>> ]
+"16032" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>521</SUB>> ]
+"16037" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>522</SUB>> ]
+"16042" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>523</SUB>> ]
+"16051" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>526</SUB>> ]
+"16058" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>527</SUB>> ]
+"16060" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>527</SUB>> ]
+"16065" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>528</SUB>> ]
+"16070" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>529</SUB>> ]
+"16079" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>532</SUB>> ]
+"16086" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>533</SUB>> ]
+"16088" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>533</SUB>> ]
+"16093" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>534</SUB>> ]
+"16098" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>535</SUB>> ]
+"16106" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>539</SUB>> ]
+"15887" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>485</SUB>> ]
+"15900" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>488</SUB>> ]
+"16053" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>526</SUB>> ]
+"16081" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>532</SUB>> ]
+"16108" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>539</SUB>> ]
+"15878" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>484</SUB>> ]
+"16110" [label = <(METHOD_RETURN,void)<SUB>484</SUB>> ]
+  "15882" -> "15891" 
+  "15891" -> "15900" 
+  "15895" -> "15903" 
+  "15902" -> "15910" 
+  "15907" -> "15922" 
+  "15919" -> "15930" 
+  "15927" -> "15942" 
+  "15939" -> "15950" 
+  "15947" -> "15962" 
+  "15959" -> "15970" 
+  "15967" -> "15982" 
+  "15979" -> "15990" 
+  "15987" -> "16002" 
+  "15999" -> "16010" 
+  "16007" -> "16022" 
+  "16019" -> "16030" 
+  "16027" -> "16042" 
+  "16039" -> "16053" 
+  "16048" -> "16058" 
+  "16055" -> "16070" 
+  "16067" -> "16081" 
+  "16076" -> "16086" 
+  "16083" -> "16098" 
+  "16095" -> "16108" 
+  "16103" -> "16110" 
+  "15884" -> "15882" 
+  "15897" -> "15895" 
+  "15903" -> "15902" 
+  "15908" -> "15912" 
+  "15911" -> "15917" 
+  "15916" -> "15907" 
+  "15920" -> "15923" 
+  "15923" -> "15919" 
+  "15928" -> "15932" 
+  "15931" -> "15937" 
+  "15936" -> "15927" 
+  "15940" -> "15943" 
+  "15943" -> "15939" 
+  "15948" -> "15952" 
+  "15951" -> "15957" 
+  "15956" -> "15947" 
+  "15960" -> "15963" 
+  "15963" -> "15959" 
+  "15968" -> "15972" 
+  "15971" -> "15977" 
+  "15976" -> "15967" 
+  "15980" -> "15983" 
+  "15983" -> "15979" 
+  "15988" -> "15992" 
+  "15991" -> "15997" 
+  "15996" -> "15987" 
+  "16000" -> "16003" 
+  "16003" -> "15999" 
+  "16008" -> "16012" 
+  "16011" -> "16017" 
+  "16016" -> "16007" 
+  "16020" -> "16023" 
+  "16023" -> "16019" 
+  "16028" -> "16032" 
+  "16031" -> "16037" 
+  "16036" -> "16027" 
+  "16040" -> "16043" 
+  "16043" -> "16039" 
+  "16050" -> "16048" 
+  "16056" -> "16060" 
+  "16059" -> "16065" 
+  "16064" -> "16055" 
+  "16068" -> "16071" 
+  "16071" -> "16067" 
+  "16078" -> "16076" 
+  "16084" -> "16088" 
+  "16087" -> "16093" 
+  "16092" -> "16083" 
+  "16096" -> "16099" 
+  "16099" -> "16095" 
+  "16105" -> "16103" 
+  "15885" -> "15884" 
+  "15898" -> "15897" 
+  "15910" -> "15908" 
+  "15912" -> "15911" 
+  "15917" -> "15916" 
+  "15922" -> "15920" 
+  "15930" -> "15928" 
+  "15932" -> "15931" 
+  "15937" -> "15936" 
+  "15942" -> "15940" 
+  "15950" -> "15948" 
+  "15952" -> "15951" 
+  "15957" -> "15956" 
+  "15962" -> "15960" 
+  "15970" -> "15968" 
+  "15972" -> "15971" 
+  "15977" -> "15976" 
+  "15982" -> "15980" 
+  "15990" -> "15988" 
+  "15992" -> "15991" 
+  "15997" -> "15996" 
+  "16002" -> "16000" 
+  "16010" -> "16008" 
+  "16012" -> "16011" 
+  "16017" -> "16016" 
+  "16022" -> "16020" 
+  "16030" -> "16028" 
+  "16032" -> "16031" 
+  "16037" -> "16036" 
+  "16042" -> "16040" 
+  "16051" -> "16050" 
+  "16058" -> "16056" 
+  "16060" -> "16059" 
+  "16065" -> "16064" 
+  "16070" -> "16068" 
+  "16079" -> "16078" 
+  "16086" -> "16084" 
+  "16088" -> "16087" 
+  "16093" -> "16092" 
+  "16098" -> "16096" 
+  "16106" -> "16105" 
+  "15887" -> "15885" 
+  "15900" -> "15898" 
+  "16053" -> "16051" 
+  "16081" -> "16079" 
+  "16108" -> "16106" 
+  "15878" -> "15887" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/277-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/277-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/277-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/277-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,243 +1,249 @@
-digraph "GetPrimitiveArrayElementsOfWrongType" {  
-"15696" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>348</SUB>> ]
-"15705" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>351</SUB>> ]
-"15713" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>353</SUB>> ]
-"15724" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>354</SUB>> ]
-"15732" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>357</SUB>> ]
-"15743" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>358</SUB>> ]
-"15751" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>361</SUB>> ]
-"15762" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>362</SUB>> ]
-"15770" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>365</SUB>> ]
-"15781" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>366</SUB>> ]
-"15789" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>369</SUB>> ]
-"15800" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>370</SUB>> ]
-"15808" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>373</SUB>> ]
-"15819" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>374</SUB>> ]
-"15827" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>377</SUB>> ]
-"15838" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>378</SUB>> ]
-"15847" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>381</SUB>> ]
-"15854" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>382</SUB>> ]
-"15865" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>384</SUB>> ]
-"15874" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>387</SUB>> ]
-"15881" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>388</SUB>> ]
-"15892" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>390</SUB>> ]
-"15900" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>394</SUB>> ]
-"15698" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>348</SUB>> ]
-"15707" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>351</SUB>> ]
-"15714" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>353</SUB>> ]
-"15725" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>354</SUB>> ]
-"15728" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>355</SUB>> ]
-"15733" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>357</SUB>> ]
-"15744" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>358</SUB>> ]
-"15747" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>359</SUB>> ]
-"15752" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>361</SUB>> ]
-"15763" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>362</SUB>> ]
-"15766" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>363</SUB>> ]
-"15771" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>365</SUB>> ]
-"15782" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>366</SUB>> ]
-"15785" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>367</SUB>> ]
-"15790" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>369</SUB>> ]
-"15801" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>370</SUB>> ]
-"15804" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>371</SUB>> ]
-"15809" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>373</SUB>> ]
-"15820" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>374</SUB>> ]
-"15823" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>375</SUB>> ]
-"15828" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>377</SUB>> ]
-"15839" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>378</SUB>> ]
-"15842" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>379</SUB>> ]
-"15849" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>381</SUB>> ]
-"15855" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>382</SUB>> ]
-"15866" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>384</SUB>> ]
-"15869" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>385</SUB>> ]
-"15876" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>387</SUB>> ]
-"15882" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>388</SUB>> ]
-"15893" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>390</SUB>> ]
-"15896" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>391</SUB>> ]
-"15902" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>394</SUB>> ]
-"15699" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>348</SUB>> ]
-"15708" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>351</SUB>> ]
-"15715" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>353</SUB>> ]
-"15718" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>353</SUB>> ]
-"15721" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>353</SUB>> ]
-"15727" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>354</SUB>> ]
-"15734" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>357</SUB>> ]
-"15737" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>357</SUB>> ]
-"15740" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>357</SUB>> ]
-"15746" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>358</SUB>> ]
-"15753" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>361</SUB>> ]
-"15756" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>361</SUB>> ]
-"15759" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>361</SUB>> ]
-"15765" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>362</SUB>> ]
-"15772" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>365</SUB>> ]
-"15775" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>365</SUB>> ]
-"15778" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>365</SUB>> ]
-"15784" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>366</SUB>> ]
-"15791" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>369</SUB>> ]
-"15794" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>369</SUB>> ]
-"15797" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>369</SUB>> ]
-"15803" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>370</SUB>> ]
-"15810" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>373</SUB>> ]
-"15813" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>373</SUB>> ]
-"15816" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>373</SUB>> ]
-"15822" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>374</SUB>> ]
-"15829" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>377</SUB>> ]
-"15832" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>377</SUB>> ]
-"15835" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>377</SUB>> ]
-"15841" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>378</SUB>> ]
-"15850" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>381</SUB>> ]
-"15856" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>382</SUB>> ]
-"15859" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>382</SUB>> ]
-"15862" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>382</SUB>> ]
-"15868" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>384</SUB>> ]
-"15877" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>387</SUB>> ]
-"15883" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>388</SUB>> ]
-"15886" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>388</SUB>> ]
-"15889" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>388</SUB>> ]
-"15895" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>390</SUB>> ]
-"15903" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>394</SUB>> ]
-"15701" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>348</SUB>> ]
-"15710" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>351</SUB>> ]
-"15717" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>353</SUB>> ]
-"15719" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>353</SUB>> ]
-"15736" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>357</SUB>> ]
-"15738" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>357</SUB>> ]
-"15755" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>361</SUB>> ]
-"15757" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>361</SUB>> ]
-"15774" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>365</SUB>> ]
-"15776" [label = <(UNKNOWN,jintArray,jintArray)<SUB>365</SUB>> ]
-"15793" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>369</SUB>> ]
-"15795" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>369</SUB>> ]
-"15812" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>373</SUB>> ]
-"15814" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>373</SUB>> ]
-"15831" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>377</SUB>> ]
-"15833" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>377</SUB>> ]
-"15852" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>381</SUB>> ]
-"15858" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>382</SUB>> ]
-"15860" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>382</SUB>> ]
-"15879" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>387</SUB>> ]
-"15885" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>388</SUB>> ]
-"15887" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>388</SUB>> ]
-"15905" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>394</SUB>> ]
-"15692" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>347</SUB>> ]
-"15907" [label = <(METHOD_RETURN,void)<SUB>347</SUB>> ]
-  "15696" -> "15710" 
-  "15705" -> "15717" 
-  "15713" -> "15727" 
-  "15724" -> "15736" 
-  "15732" -> "15746" 
-  "15743" -> "15755" 
-  "15751" -> "15765" 
-  "15762" -> "15774" 
-  "15770" -> "15784" 
-  "15781" -> "15793" 
-  "15789" -> "15803" 
-  "15800" -> "15812" 
-  "15808" -> "15822" 
-  "15819" -> "15831" 
-  "15827" -> "15841" 
-  "15838" -> "15852" 
-  "15847" -> "15858" 
-  "15854" -> "15868" 
-  "15865" -> "15879" 
-  "15874" -> "15885" 
-  "15881" -> "15895" 
-  "15892" -> "15905" 
-  "15900" -> "15907" 
-  "15698" -> "15696" 
-  "15707" -> "15705" 
-  "15714" -> "15713" 
-  "15725" -> "15728" 
-  "15728" -> "15724" 
-  "15733" -> "15732" 
-  "15744" -> "15747" 
-  "15747" -> "15743" 
-  "15752" -> "15751" 
-  "15763" -> "15766" 
-  "15766" -> "15762" 
-  "15771" -> "15770" 
-  "15782" -> "15785" 
-  "15785" -> "15781" 
-  "15790" -> "15789" 
-  "15801" -> "15804" 
-  "15804" -> "15800" 
-  "15809" -> "15808" 
-  "15820" -> "15823" 
-  "15823" -> "15819" 
-  "15828" -> "15827" 
-  "15839" -> "15842" 
-  "15842" -> "15838" 
-  "15849" -> "15847" 
-  "15855" -> "15854" 
-  "15866" -> "15869" 
-  "15869" -> "15865" 
-  "15876" -> "15874" 
-  "15882" -> "15881" 
-  "15893" -> "15896" 
-  "15896" -> "15892" 
-  "15902" -> "15900" 
-  "15699" -> "15698" 
-  "15708" -> "15707" 
-  "15715" -> "15719" 
-  "15718" -> "15721" 
-  "15721" -> "15714" 
-  "15727" -> "15725" 
-  "15734" -> "15738" 
-  "15737" -> "15740" 
-  "15740" -> "15733" 
-  "15746" -> "15744" 
-  "15753" -> "15757" 
-  "15756" -> "15759" 
-  "15759" -> "15752" 
-  "15765" -> "15763" 
-  "15772" -> "15776" 
-  "15775" -> "15778" 
-  "15778" -> "15771" 
-  "15784" -> "15782" 
-  "15791" -> "15795" 
-  "15794" -> "15797" 
-  "15797" -> "15790" 
-  "15803" -> "15801" 
-  "15810" -> "15814" 
-  "15813" -> "15816" 
-  "15816" -> "15809" 
-  "15822" -> "15820" 
-  "15829" -> "15833" 
-  "15832" -> "15835" 
-  "15835" -> "15828" 
-  "15841" -> "15839" 
-  "15850" -> "15849" 
-  "15856" -> "15860" 
-  "15859" -> "15862" 
-  "15862" -> "15855" 
-  "15868" -> "15866" 
-  "15877" -> "15876" 
-  "15883" -> "15887" 
-  "15886" -> "15889" 
-  "15889" -> "15882" 
-  "15895" -> "15893" 
-  "15903" -> "15902" 
-  "15701" -> "15699" 
-  "15710" -> "15708" 
-  "15717" -> "15715" 
-  "15719" -> "15718" 
-  "15736" -> "15734" 
-  "15738" -> "15737" 
-  "15755" -> "15753" 
-  "15757" -> "15756" 
-  "15774" -> "15772" 
-  "15776" -> "15775" 
-  "15793" -> "15791" 
-  "15795" -> "15794" 
-  "15812" -> "15810" 
-  "15814" -> "15813" 
-  "15831" -> "15829" 
-  "15833" -> "15832" 
-  "15852" -> "15850" 
-  "15858" -> "15856" 
-  "15860" -> "15859" 
-  "15879" -> "15877" 
-  "15885" -> "15883" 
-  "15887" -> "15886" 
-  "15905" -> "15903" 
-  "15692" -> "15701" 
+digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
+"16116" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
+"16125" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>545</SUB>> ]
+"16129" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
+"16136" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>547</SUB>> ]
+"16141" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>549</SUB>> ]
+"16153" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>551</SUB>> ]
+"16161" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>554</SUB>> ]
+"16173" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>556</SUB>> ]
+"16181" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>559</SUB>> ]
+"16193" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>561</SUB>> ]
+"16201" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>564</SUB>> ]
+"16213" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>566</SUB>> ]
+"16221" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>569</SUB>> ]
+"16233" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>571</SUB>> ]
+"16241" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>574</SUB>> ]
+"16253" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>576</SUB>> ]
+"16261" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>579</SUB>> ]
+"16273" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>581</SUB>> ]
+"16282" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
+"16289" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>585</SUB>> ]
+"16301" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>587</SUB>> ]
+"16310" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
+"16317" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>591</SUB>> ]
+"16329" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>593</SUB>> ]
+"16337" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>596</SUB>> ]
+"16118" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
+"16131" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
+"16137" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>547</SUB>> ]
+"16142" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>549</SUB>> ]
+"16145" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>549</SUB>> ]
+"16150" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>550</SUB>> ]
+"16154" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>551</SUB>> ]
+"16157" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>552</SUB>> ]
+"16162" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>554</SUB>> ]
+"16165" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>554</SUB>> ]
+"16170" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>555</SUB>> ]
+"16174" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>556</SUB>> ]
+"16177" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>557</SUB>> ]
+"16182" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>559</SUB>> ]
+"16185" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>559</SUB>> ]
+"16190" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>560</SUB>> ]
+"16194" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>561</SUB>> ]
+"16197" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>562</SUB>> ]
+"16202" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>564</SUB>> ]
+"16205" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>564</SUB>> ]
+"16210" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>565</SUB>> ]
+"16214" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>566</SUB>> ]
+"16217" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>567</SUB>> ]
+"16222" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>569</SUB>> ]
+"16225" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>569</SUB>> ]
+"16230" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>570</SUB>> ]
+"16234" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>571</SUB>> ]
+"16237" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>572</SUB>> ]
+"16242" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>574</SUB>> ]
+"16245" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>574</SUB>> ]
+"16250" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>575</SUB>> ]
+"16254" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>576</SUB>> ]
+"16257" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>577</SUB>> ]
+"16262" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>579</SUB>> ]
+"16265" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>579</SUB>> ]
+"16270" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>580</SUB>> ]
+"16274" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>581</SUB>> ]
+"16277" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>582</SUB>> ]
+"16284" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
+"16290" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>585</SUB>> ]
+"16293" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>585</SUB>> ]
+"16298" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>586</SUB>> ]
+"16302" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>587</SUB>> ]
+"16305" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>588</SUB>> ]
+"16312" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
+"16318" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>591</SUB>> ]
+"16321" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>591</SUB>> ]
+"16326" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>592</SUB>> ]
+"16330" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>593</SUB>> ]
+"16333" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>593</SUB>> ]
+"16339" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>596</SUB>> ]
+"16119" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>543</SUB>> ]
+"16132" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>546</SUB>> ]
+"16144" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>549</SUB>> ]
+"16146" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>549</SUB>> ]
+"16151" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>550</SUB>> ]
+"16156" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>551</SUB>> ]
+"16164" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>554</SUB>> ]
+"16166" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>554</SUB>> ]
+"16171" [label = <(UNKNOWN,jshort*,jshort*)<SUB>555</SUB>> ]
+"16176" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>556</SUB>> ]
+"16184" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>559</SUB>> ]
+"16186" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>559</SUB>> ]
+"16191" [label = <(UNKNOWN,jchar*,jchar*)<SUB>560</SUB>> ]
+"16196" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>561</SUB>> ]
+"16204" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>564</SUB>> ]
+"16206" [label = <(UNKNOWN,jintArray,jintArray)<SUB>564</SUB>> ]
+"16211" [label = <(UNKNOWN,jint*,jint*)<SUB>565</SUB>> ]
+"16216" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>566</SUB>> ]
+"16224" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>569</SUB>> ]
+"16226" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>569</SUB>> ]
+"16231" [label = <(UNKNOWN,jlong*,jlong*)<SUB>570</SUB>> ]
+"16236" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>571</SUB>> ]
+"16244" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>574</SUB>> ]
+"16246" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>574</SUB>> ]
+"16251" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>575</SUB>> ]
+"16256" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>576</SUB>> ]
+"16264" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>579</SUB>> ]
+"16266" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>579</SUB>> ]
+"16271" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>580</SUB>> ]
+"16276" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>581</SUB>> ]
+"16285" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>584</SUB>> ]
+"16292" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>585</SUB>> ]
+"16294" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>585</SUB>> ]
+"16299" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>586</SUB>> ]
+"16304" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>587</SUB>> ]
+"16313" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>590</SUB>> ]
+"16320" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>591</SUB>> ]
+"16322" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>591</SUB>> ]
+"16327" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>592</SUB>> ]
+"16332" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>593</SUB>> ]
+"16340" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>596</SUB>> ]
+"16121" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>543</SUB>> ]
+"16134" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>546</SUB>> ]
+"16287" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>584</SUB>> ]
+"16315" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>590</SUB>> ]
+"16342" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>596</SUB>> ]
+"16112" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>542</SUB>> ]
+"16344" [label = <(METHOD_RETURN,void)<SUB>542</SUB>> ]
+  "16116" -> "16125" 
+  "16125" -> "16134" 
+  "16129" -> "16137" 
+  "16136" -> "16144" 
+  "16141" -> "16156" 
+  "16153" -> "16164" 
+  "16161" -> "16176" 
+  "16173" -> "16184" 
+  "16181" -> "16196" 
+  "16193" -> "16204" 
+  "16201" -> "16216" 
+  "16213" -> "16224" 
+  "16221" -> "16236" 
+  "16233" -> "16244" 
+  "16241" -> "16256" 
+  "16253" -> "16264" 
+  "16261" -> "16276" 
+  "16273" -> "16287" 
+  "16282" -> "16292" 
+  "16289" -> "16304" 
+  "16301" -> "16315" 
+  "16310" -> "16320" 
+  "16317" -> "16332" 
+  "16329" -> "16342" 
+  "16337" -> "16344" 
+  "16118" -> "16116" 
+  "16131" -> "16129" 
+  "16137" -> "16136" 
+  "16142" -> "16146" 
+  "16145" -> "16151" 
+  "16150" -> "16141" 
+  "16154" -> "16157" 
+  "16157" -> "16153" 
+  "16162" -> "16166" 
+  "16165" -> "16171" 
+  "16170" -> "16161" 
+  "16174" -> "16177" 
+  "16177" -> "16173" 
+  "16182" -> "16186" 
+  "16185" -> "16191" 
+  "16190" -> "16181" 
+  "16194" -> "16197" 
+  "16197" -> "16193" 
+  "16202" -> "16206" 
+  "16205" -> "16211" 
+  "16210" -> "16201" 
+  "16214" -> "16217" 
+  "16217" -> "16213" 
+  "16222" -> "16226" 
+  "16225" -> "16231" 
+  "16230" -> "16221" 
+  "16234" -> "16237" 
+  "16237" -> "16233" 
+  "16242" -> "16246" 
+  "16245" -> "16251" 
+  "16250" -> "16241" 
+  "16254" -> "16257" 
+  "16257" -> "16253" 
+  "16262" -> "16266" 
+  "16265" -> "16271" 
+  "16270" -> "16261" 
+  "16274" -> "16277" 
+  "16277" -> "16273" 
+  "16284" -> "16282" 
+  "16290" -> "16294" 
+  "16293" -> "16299" 
+  "16298" -> "16289" 
+  "16302" -> "16305" 
+  "16305" -> "16301" 
+  "16312" -> "16310" 
+  "16318" -> "16322" 
+  "16321" -> "16327" 
+  "16326" -> "16317" 
+  "16330" -> "16333" 
+  "16333" -> "16329" 
+  "16339" -> "16337" 
+  "16119" -> "16118" 
+  "16132" -> "16131" 
+  "16144" -> "16142" 
+  "16146" -> "16145" 
+  "16151" -> "16150" 
+  "16156" -> "16154" 
+  "16164" -> "16162" 
+  "16166" -> "16165" 
+  "16171" -> "16170" 
+  "16176" -> "16174" 
+  "16184" -> "16182" 
+  "16186" -> "16185" 
+  "16191" -> "16190" 
+  "16196" -> "16194" 
+  "16204" -> "16202" 
+  "16206" -> "16205" 
+  "16211" -> "16210" 
+  "16216" -> "16214" 
+  "16224" -> "16222" 
+  "16226" -> "16225" 
+  "16231" -> "16230" 
+  "16236" -> "16234" 
+  "16244" -> "16242" 
+  "16246" -> "16245" 
+  "16251" -> "16250" 
+  "16256" -> "16254" 
+  "16264" -> "16262" 
+  "16266" -> "16265" 
+  "16271" -> "16270" 
+  "16276" -> "16274" 
+  "16285" -> "16284" 
+  "16292" -> "16290" 
+  "16294" -> "16293" 
+  "16299" -> "16298" 
+  "16304" -> "16302" 
+  "16313" -> "16312" 
+  "16320" -> "16318" 
+  "16322" -> "16321" 
+  "16327" -> "16326" 
+  "16332" -> "16330" 
+  "16340" -> "16339" 
+  "16121" -> "16119" 
+  "16134" -> "16132" 
+  "16287" -> "16285" 
+  "16315" -> "16313" 
+  "16342" -> "16340" 
+  "16112" -> "16121" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/278-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/278-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/278-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/278-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,283 +1,75 @@
-digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
-"15913" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>398</SUB>> ]
-"16162" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>466</SUB>> ]
-"15915" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>398</SUB>> ]
-"15923" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>401</SUB>> ]
-"15930" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>402</SUB>> ]
-"15936" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>404</SUB>> ]
-"15945" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>405</SUB>> ]
-"15949" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>406</SUB>> ]
-"15960" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>408</SUB>> ]
-"15968" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>411</SUB>> ]
-"15979" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>413</SUB>> ]
-"15987" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>416</SUB>> ]
-"15998" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>418</SUB>> ]
-"16006" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>421</SUB>> ]
-"16017" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>423</SUB>> ]
-"16025" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>426</SUB>> ]
-"16036" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>428</SUB>> ]
-"16044" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>431</SUB>> ]
-"16055" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>433</SUB>> ]
-"16063" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>436</SUB>> ]
-"16074" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>438</SUB>> ]
-"16082" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>443</SUB>> ]
-"16091" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>446</SUB>> ]
-"16100" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>448</SUB>> ]
-"16109" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>450</SUB>> ]
-"16120" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>452</SUB>> ]
-"16129" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>455</SUB>> ]
-"16136" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>456</SUB>> ]
-"16147" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>458</SUB>> ]
-"16155" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>464</SUB>> ]
-"16164" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>466</SUB>> ]
-"15916" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>398</SUB>> ]
-"15925" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>401</SUB>> ]
-"15931" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>402</SUB>> ]
-"15938" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>404</SUB>> ]
-"15946" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>405</SUB>> ]
-"15950" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>406</SUB>> ]
-"15953" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>406</SUB>> ]
-"15956" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>407</SUB>> ]
-"15961" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>408</SUB>> ]
-"15964" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>409</SUB>> ]
-"15969" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>411</SUB>> ]
-"15972" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>411</SUB>> ]
-"15975" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>412</SUB>> ]
-"15980" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>413</SUB>> ]
-"15983" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>414</SUB>> ]
-"15988" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>416</SUB>> ]
-"15991" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>416</SUB>> ]
-"15994" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>417</SUB>> ]
-"15999" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>418</SUB>> ]
-"16002" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>419</SUB>> ]
-"16007" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>421</SUB>> ]
-"16010" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>421</SUB>> ]
-"16013" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>422</SUB>> ]
-"16018" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>423</SUB>> ]
-"16021" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>424</SUB>> ]
-"16026" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>426</SUB>> ]
-"16029" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>426</SUB>> ]
-"16032" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>427</SUB>> ]
-"16037" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>428</SUB>> ]
-"16040" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>429</SUB>> ]
-"16045" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>431</SUB>> ]
-"16048" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>431</SUB>> ]
-"16051" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>432</SUB>> ]
-"16056" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>433</SUB>> ]
-"16059" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>434</SUB>> ]
-"16064" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>436</SUB>> ]
-"16067" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>436</SUB>> ]
-"16070" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>437</SUB>> ]
-"16075" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>438</SUB>> ]
-"16078" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>439</SUB>> ]
-"16083" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>443</SUB>> ]
-"16093" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>446</SUB>> ]
-"16102" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>448</SUB>> ]
-"16110" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>450</SUB>> ]
-"16113" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>450</SUB>> ]
-"16116" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>451</SUB>> ]
-"16121" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>452</SUB>> ]
-"16124" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>453</SUB>> ]
-"16131" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>455</SUB>> ]
-"16137" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>456</SUB>> ]
-"16140" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>456</SUB>> ]
-"16143" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>457</SUB>> ]
-"16148" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>458</SUB>> ]
-"16151" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>459</SUB>> ]
-"16156" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>464</SUB>> ]
-"16165" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>466</SUB>> ]
-"15918" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>398</SUB>> ]
-"15926" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>401</SUB>> ]
-"15939" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>404</SUB>> ]
-"15943" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>404</SUB>> ]
-"15952" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>406</SUB>> ]
-"15954" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>406</SUB>> ]
-"15957" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>407</SUB>> ]
-"15963" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>408</SUB>> ]
-"15971" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>411</SUB>> ]
-"15973" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>411</SUB>> ]
-"15976" [label = <(UNKNOWN,jshort*,jshort*)<SUB>412</SUB>> ]
-"15982" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>413</SUB>> ]
-"15990" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>416</SUB>> ]
-"15992" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>416</SUB>> ]
-"15995" [label = <(UNKNOWN,jchar*,jchar*)<SUB>417</SUB>> ]
-"16001" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>418</SUB>> ]
-"16009" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>421</SUB>> ]
-"16011" [label = <(UNKNOWN,jintArray,jintArray)<SUB>421</SUB>> ]
-"16014" [label = <(UNKNOWN,jint*,jint*)<SUB>422</SUB>> ]
-"16020" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>423</SUB>> ]
-"16028" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>426</SUB>> ]
-"16030" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>426</SUB>> ]
-"16033" [label = <(UNKNOWN,jlong*,jlong*)<SUB>427</SUB>> ]
-"16039" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>428</SUB>> ]
-"16047" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>431</SUB>> ]
-"16049" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>431</SUB>> ]
-"16052" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>432</SUB>> ]
-"16058" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>433</SUB>> ]
-"16066" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>436</SUB>> ]
-"16068" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>436</SUB>> ]
-"16071" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>437</SUB>> ]
-"16077" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>438</SUB>> ]
-"16085" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>443</SUB>> ]
-"16094" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>446</SUB>> ]
-"16103" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>448</SUB>> ]
-"16107" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>448</SUB>> ]
-"16112" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>450</SUB>> ]
-"16114" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>450</SUB>> ]
-"16117" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>451</SUB>> ]
-"16123" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>452</SUB>> ]
-"16132" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>455</SUB>> ]
-"16139" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>456</SUB>> ]
-"16141" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>456</SUB>> ]
-"16144" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>457</SUB>> ]
-"16150" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>458</SUB>> ]
-"16158" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>464</SUB>> ]
-"16167" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>466</SUB>> ]
-"15928" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>401</SUB>> ]
-"15941" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>404</SUB>> ]
-"16096" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>446</SUB>> ]
-"16105" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>448</SUB>> ]
-"16134" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>455</SUB>> ]
-"15909" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>397</SUB>> ]
-"16169" [label = <(METHOD_RETURN,void)<SUB>397</SUB>> ]
-  "15913" -> "15928" 
-  "16162" -> "16169" 
-  "15915" -> "15913" 
-  "15923" -> "15931" 
-  "15930" -> "15941" 
-  "15936" -> "15946" 
-  "15945" -> "15952" 
-  "15949" -> "15963" 
-  "15960" -> "15971" 
-  "15968" -> "15982" 
-  "15979" -> "15990" 
-  "15987" -> "16001" 
-  "15998" -> "16009" 
-  "16006" -> "16020" 
-  "16017" -> "16028" 
-  "16025" -> "16039" 
-  "16036" -> "16047" 
-  "16044" -> "16058" 
-  "16055" -> "16066" 
-  "16063" -> "16077" 
-  "16074" -> "16085" 
-  "16082" -> "16096" 
-  "16091" -> "16105" 
-  "16100" -> "16112" 
-  "16109" -> "16123" 
-  "16120" -> "16134" 
-  "16129" -> "16139" 
-  "16136" -> "16150" 
-  "16147" -> "16158" 
-  "16155" -> "16167" 
-  "16164" -> "16162" 
-  "15916" -> "15915" 
-  "15925" -> "15923" 
-  "15931" -> "15930" 
-  "15938" -> "15936" 
-  "15946" -> "15945" 
-  "15950" -> "15954" 
-  "15953" -> "15957" 
-  "15956" -> "15949" 
-  "15961" -> "15964" 
-  "15964" -> "15960" 
-  "15969" -> "15973" 
-  "15972" -> "15976" 
-  "15975" -> "15968" 
-  "15980" -> "15983" 
-  "15983" -> "15979" 
-  "15988" -> "15992" 
-  "15991" -> "15995" 
-  "15994" -> "15987" 
-  "15999" -> "16002" 
-  "16002" -> "15998" 
-  "16007" -> "16011" 
-  "16010" -> "16014" 
-  "16013" -> "16006" 
-  "16018" -> "16021" 
-  "16021" -> "16017" 
-  "16026" -> "16030" 
-  "16029" -> "16033" 
-  "16032" -> "16025" 
-  "16037" -> "16040" 
-  "16040" -> "16036" 
-  "16045" -> "16049" 
-  "16048" -> "16052" 
-  "16051" -> "16044" 
-  "16056" -> "16059" 
-  "16059" -> "16055" 
-  "16064" -> "16068" 
-  "16067" -> "16071" 
-  "16070" -> "16063" 
-  "16075" -> "16078" 
-  "16078" -> "16074" 
-  "16083" -> "16082" 
-  "16093" -> "16091" 
-  "16102" -> "16100" 
-  "16110" -> "16114" 
-  "16113" -> "16117" 
-  "16116" -> "16109" 
-  "16121" -> "16124" 
-  "16124" -> "16120" 
-  "16131" -> "16129" 
-  "16137" -> "16141" 
-  "16140" -> "16144" 
-  "16143" -> "16136" 
-  "16148" -> "16151" 
-  "16151" -> "16147" 
-  "16156" -> "16155" 
-  "16165" -> "16164" 
-  "15918" -> "15916" 
-  "15926" -> "15925" 
-  "15939" -> "15943" 
-  "15943" -> "15938" 
-  "15952" -> "15950" 
-  "15954" -> "15953" 
-  "15957" -> "15956" 
-  "15963" -> "15961" 
-  "15971" -> "15969" 
-  "15973" -> "15972" 
-  "15976" -> "15975" 
-  "15982" -> "15980" 
-  "15990" -> "15988" 
-  "15992" -> "15991" 
-  "15995" -> "15994" 
-  "16001" -> "15999" 
-  "16009" -> "16007" 
-  "16011" -> "16010" 
-  "16014" -> "16013" 
-  "16020" -> "16018" 
-  "16028" -> "16026" 
-  "16030" -> "16029" 
-  "16033" -> "16032" 
-  "16039" -> "16037" 
-  "16047" -> "16045" 
-  "16049" -> "16048" 
-  "16052" -> "16051" 
-  "16058" -> "16056" 
-  "16066" -> "16064" 
-  "16068" -> "16067" 
-  "16071" -> "16070" 
-  "16077" -> "16075" 
-  "16085" -> "16083" 
-  "16094" -> "16093" 
-  "16103" -> "16107" 
-  "16107" -> "16102" 
-  "16112" -> "16110" 
-  "16114" -> "16113" 
-  "16117" -> "16116" 
-  "16123" -> "16121" 
-  "16132" -> "16131" 
-  "16139" -> "16137" 
-  "16141" -> "16140" 
-  "16144" -> "16143" 
-  "16150" -> "16148" 
-  "16158" -> "16156" 
-  "16167" -> "16165" 
-  "15928" -> "15926" 
-  "15941" -> "15939" 
-  "16096" -> "16094" 
-  "16105" -> "16103" 
-  "16134" -> "16132" 
-  "15909" -> "15918" 
+digraph "NewObjectArrayBadArguments" {  
+"16350" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
+"16359" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
+"16366" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>604</SUB>> ]
+"16369" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>606</SUB>> ]
+"16377" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>607</SUB>> ]
+"16385" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>609</SUB>> ]
+"16401" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>610</SUB>> ]
+"16409" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>613</SUB>> ]
+"16352" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
+"16361" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
+"16370" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>606</SUB>> ]
+"16373" [label = <(&lt;operator&gt;.minus,-1)<SUB>606</SUB>> ]
+"16378" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>607</SUB>> ]
+"16381" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>607</SUB>> ]
+"16386" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>609</SUB>> ]
+"16389" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>609</SUB>> ]
+"16402" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>610</SUB>> ]
+"16405" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>610</SUB>> ]
+"16411" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>613</SUB>> ]
+"16353" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>600</SUB>> ]
+"16362" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>603</SUB>> ]
+"16372" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>606</SUB>> ]
+"16380" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>607</SUB>> ]
+"16388" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>609</SUB>> ]
+"16390" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>609</SUB>> ]
+"16395" [label = <(::min,::min())<SUB>609</SUB>> ]
+"16404" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>610</SUB>> ]
+"16412" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>613</SUB>> ]
+"16355" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>600</SUB>> ]
+"16364" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>603</SUB>> ]
+"16391" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>609</SUB>> ]
+"16396" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>609</SUB>> ]
+"16414" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>613</SUB>> ]
+"16393" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>609</SUB>> ]
+"16398" [label = <(FIELD_IDENTIFIER,min,min)<SUB>609</SUB>> ]
+"16346" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>599</SUB>> ]
+"16416" [label = <(METHOD_RETURN,void)<SUB>599</SUB>> ]
+  "16350" -> "16364" 
+  "16359" -> "16366" 
+  "16366" -> "16372" 
+  "16369" -> "16380" 
+  "16377" -> "16388" 
+  "16385" -> "16404" 
+  "16401" -> "16414" 
+  "16409" -> "16416" 
+  "16352" -> "16350" 
+  "16361" -> "16359" 
+  "16370" -> "16373" 
+  "16373" -> "16369" 
+  "16378" -> "16381" 
+  "16381" -> "16377" 
+  "16386" -> "16393" 
+  "16389" -> "16385" 
+  "16402" -> "16405" 
+  "16405" -> "16401" 
+  "16411" -> "16409" 
+  "16353" -> "16352" 
+  "16362" -> "16361" 
+  "16372" -> "16370" 
+  "16380" -> "16378" 
+  "16388" -> "16386" 
+  "16390" -> "16398" 
+  "16395" -> "16389" 
+  "16404" -> "16402" 
+  "16412" -> "16411" 
+  "16355" -> "16353" 
+  "16364" -> "16362" 
+  "16391" -> "16390" 
+  "16396" -> "16395" 
+  "16414" -> "16412" 
+  "16393" -> "16391" 
+  "16398" -> "16396" 
+  "16346" -> "16355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/279-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/279-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/279-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/279-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,69 +1,263 @@
-digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
-"16175" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>470</SUB>> ]
-"16184" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>473</SUB>> ]
-"16193" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>475</SUB>> ]
-"16204" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>476</SUB>> ]
-"16212" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>478</SUB>> ]
-"16221" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>479</SUB>> ]
-"16229" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>482</SUB>> ]
-"16177" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>470</SUB>> ]
-"16186" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>473</SUB>> ]
-"16195" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>475</SUB>> ]
-"16205" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>476</SUB>> ]
-"16208" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>476</SUB>> ]
-"16213" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>478</SUB>> ]
-"16216" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>478</SUB>> ]
-"16222" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>479</SUB>> ]
-"16225" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>479</SUB>> ]
-"16231" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>482</SUB>> ]
-"16178" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>470</SUB>> ]
-"16187" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>473</SUB>> ]
-"16196" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>475</SUB>> ]
-"16199" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>475</SUB>> ]
-"16202" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>475</SUB>> ]
-"16207" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>476</SUB>> ]
-"16215" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>478</SUB>> ]
-"16217" [label = <(UNKNOWN,jarray,jarray)<SUB>478</SUB>> ]
-"16224" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>479</SUB>> ]
-"16232" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>482</SUB>> ]
-"16180" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>470</SUB>> ]
-"16189" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>473</SUB>> ]
-"16198" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>475</SUB>> ]
-"16200" [label = <(UNKNOWN,jarray,jarray)<SUB>475</SUB>> ]
-"16234" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>482</SUB>> ]
-"16171" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>469</SUB>> ]
-"16236" [label = <(METHOD_RETURN,void)<SUB>469</SUB>> ]
-  "16175" -> "16189" 
-  "16184" -> "16198" 
-  "16193" -> "16207" 
-  "16204" -> "16215" 
-  "16212" -> "16224" 
-  "16221" -> "16234" 
-  "16229" -> "16236" 
-  "16177" -> "16175" 
-  "16186" -> "16184" 
-  "16195" -> "16193" 
-  "16205" -> "16208" 
-  "16208" -> "16204" 
-  "16213" -> "16217" 
-  "16216" -> "16212" 
-  "16222" -> "16225" 
-  "16225" -> "16221" 
-  "16231" -> "16229" 
-  "16178" -> "16177" 
-  "16187" -> "16186" 
-  "16196" -> "16200" 
-  "16199" -> "16202" 
-  "16202" -> "16195" 
-  "16207" -> "16205" 
-  "16215" -> "16213" 
-  "16217" -> "16216" 
-  "16224" -> "16222" 
-  "16232" -> "16231" 
-  "16180" -> "16178" 
-  "16189" -> "16187" 
-  "16198" -> "16196" 
-  "16200" -> "16199" 
-  "16234" -> "16232" 
-  "16171" -> "16180" 
+digraph "SetUpForTest" {  
+"16544" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
+"16553" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
+"16560" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>642</SUB>> ]
+"16593" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>649</SUB>> ]
+"16639" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
+"16648" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
+"16656" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>661</SUB>> ]
+"16425" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
+"16546" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
+"16555" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
+"16561" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>642</SUB>> ]
+"16594" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>649</SUB>> ]
+"16604" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>651</SUB>> ]
+"16641" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
+"16650" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
+"16657" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>661</SUB>> ]
+"16426" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
+"16528" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>635</SUB>> ]
+"16536" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>636</SUB>> ]
+"16542" [label = <(CHECK,CHECK(started))<SUB>637</SUB>> ]
+"16547" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>640</SUB>> ]
+"16556" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>641</SUB>> ]
+"16562" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>642</SUB>> ]
+"16573" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
+"16595" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>649</SUB>> ]
+"16609" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
+"16616" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>653</SUB>> ]
+"16642" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>659</SUB>> ]
+"16651" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>660</SUB>> ]
+"16658" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>661</SUB>> ]
+"16427" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>620</SUB>> ]
+"16433" [label = <(soa,soa(Thread::Current()))<SUB>622</SUB>> ]
+"16438" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
+"16442" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>624</SUB>> ]
+"16451" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
+"16472" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
+"16485" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
+"16492" [label = <(&lt;operator&gt;.assignment,* method = direct ? c-&gt;FindDirectMethod(method_name, method_sig, pointer_size) :\012            c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
+"16510" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>631</SUB>> ]
+"16520" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>632</SUB>> ]
+"16529" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
+"16538" [label = <(Start,runtime_-&gt;Start())<SUB>636</SUB>> ]
+"16548" [label = <(Thread::Current,Thread::Current())<SUB>640</SUB>> ]
+"16552" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>640</SUB>> ]
+"16558" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>641</SUB>> ]
+"16563" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>642</SUB>> ]
+"16575" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
+"16584" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
+"16596" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>649</SUB>> ]
+"16611" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
+"16617" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>653</SUB>> ]
+"16633" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>656</SUB>> ]
+"16644" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>659</SUB>> ]
+"16653" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>660</SUB>> ]
+"16659" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>661</SUB>> ]
+"16429" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>620</SUB>> ]
+"16434" [label = <(Thread::Current,Thread::Current())<SUB>622</SUB>> ]
+"16440" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
+"16443" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>624</SUB>> ]
+"16446" [label = <(hs,hs(soa.Self()))<SUB>624</SUB>> ]
+"16452" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
+"16457" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
+"16474" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
+"16487" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
+"16494" [label = <(&lt;operator&gt;.conditional,direct ? c-&gt;FindDirectMethod(method_name, method_sig, pointer_size) :\012            c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
+"16511" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>631</SUB>> ]
+"16521" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
+"16524" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>632</SUB>> ]
+"16530" [label = <(Thread::Current,Thread::Current())<SUB>635</SUB>> ]
+"16534" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
+"16539" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>636</SUB>> ]
+"16549" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>640</SUB>> ]
+"16564" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>642</SUB>> ]
+"16576" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>645</SUB>> ]
+"16586" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
+"16597" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>649</SUB>> ]
+"16612" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>652</SUB>> ]
+"16618" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>653</SUB>> ]
+"16634" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>656</SUB>> ]
+"16660" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>661</SUB>> ]
+"16435" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>622</SUB>> ]
+"16447" [label = <(Self,soa.Self())<SUB>624</SUB>> ]
+"16454" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
+"16458" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>626</SUB>> ]
+"16475" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>627</SUB>> ]
+"16478" [label = <(Self,soa.Self())<SUB>627</SUB>> ]
+"16488" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>628</SUB>> ]
+"16496" [label = <(FindDirectMethod,c-&gt;FindDirectMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
+"16503" [label = <(FindVirtualMethod,c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
+"16512" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>631</SUB>> ]
+"16523" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
+"16525" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
+"16531" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>635</SUB>> ]
+"16541" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>636</SUB>> ]
+"16551" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>640</SUB>> ]
+"16578" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>645</SUB>> ]
+"16587" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>647</SUB>> ]
+"16619" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>653</SUB>> ]
+"16636" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>656</SUB>> ]
+"16437" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>622</SUB>> ]
+"16448" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>624</SUB>> ]
+"16456" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
+"16459" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>626</SUB>> ]
+"16462" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>626</SUB>> ]
+"16477" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>627</SUB>> ]
+"16479" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>627</SUB>> ]
+"16490" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>628</SUB>> ]
+"16497" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindDirectMethod)<SUB>629</SUB>> ]
+"16504" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindVirtualMethod)<SUB>630</SUB>> ]
+"16513" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>631</SUB>> ]
+"16527" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
+"16533" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>635</SUB>> ]
+"16589" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>647</SUB>> ]
+"16621" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>653</SUB>> ]
+"16450" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>624</SUB>> ]
+"16461" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>626</SUB>> ]
+"16463" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
+"16481" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>627</SUB>> ]
+"16499" [label = <(FIELD_IDENTIFIER,FindDirectMethod,FindDirectMethod)<SUB>629</SUB>> ]
+"16506" [label = <(FIELD_IDENTIFIER,FindVirtualMethod,FindVirtualMethod)<SUB>630</SUB>> ]
+"16514" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>631</SUB>> ]
+"16622" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>653</SUB>> ]
+"16464" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>626</SUB>> ]
+"16467" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
+"16624" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>653</SUB>> ]
+"16466" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>626</SUB>> ]
+"16469" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
+"16418" [label = <(METHOD,SetUpForTest)<SUB>616</SUB>> ]
+"16666" [label = <(METHOD_RETURN,void)<SUB>616</SUB>> ]
+  "16544" -> "16558" 
+  "16553" -> "16564" 
+  "16560" -> "16578" 
+  "16560" -> "16589" 
+  "16593" -> "16604" 
+  "16639" -> "16653" 
+  "16648" -> "16660" 
+  "16656" -> "16666" 
+  "16425" -> "16437" 
+  "16425" -> "16551" 
+  "16546" -> "16544" 
+  "16555" -> "16553" 
+  "16561" -> "16560" 
+  "16594" -> "16593" 
+  "16604" -> "16612" 
+  "16604" -> "16636" 
+  "16641" -> "16639" 
+  "16650" -> "16648" 
+  "16657" -> "16656" 
+  "16426" -> "16425" 
+  "16528" -> "16541" 
+  "16536" -> "16542" 
+  "16542" -> "16551" 
+  "16547" -> "16546" 
+  "16556" -> "16555" 
+  "16562" -> "16561" 
+  "16573" -> "16597" 
+  "16595" -> "16594" 
+  "16609" -> "16624" 
+  "16616" -> "16644" 
+  "16642" -> "16641" 
+  "16651" -> "16650" 
+  "16658" -> "16657" 
+  "16427" -> "16426" 
+  "16433" -> "16440" 
+  "16438" -> "16443" 
+  "16442" -> "16456" 
+  "16451" -> "16477" 
+  "16472" -> "16490" 
+  "16485" -> "16499" 
+  "16485" -> "16506" 
+  "16492" -> "16514" 
+  "16510" -> "16523" 
+  "16520" -> "16533" 
+  "16529" -> "16528" 
+  "16538" -> "16536" 
+  "16548" -> "16552" 
+  "16552" -> "16547" 
+  "16558" -> "16556" 
+  "16563" -> "16562" 
+  "16575" -> "16573" 
+  "16584" -> "16597" 
+  "16596" -> "16595" 
+  "16611" -> "16609" 
+  "16617" -> "16616" 
+  "16633" -> "16644" 
+  "16644" -> "16642" 
+  "16653" -> "16651" 
+  "16659" -> "16658" 
+  "16429" -> "16427" 
+  "16434" -> "16433" 
+  "16440" -> "16438" 
+  "16443" -> "16450" 
+  "16446" -> "16442" 
+  "16452" -> "16461" 
+  "16457" -> "16451" 
+  "16474" -> "16472" 
+  "16487" -> "16485" 
+  "16494" -> "16492" 
+  "16511" -> "16510" 
+  "16521" -> "16527" 
+  "16524" -> "16520" 
+  "16530" -> "16534" 
+  "16534" -> "16529" 
+  "16539" -> "16538" 
+  "16549" -> "16548" 
+  "16564" -> "16563" 
+  "16576" -> "16575" 
+  "16586" -> "16584" 
+  "16597" -> "16596" 
+  "16612" -> "16611" 
+  "16618" -> "16617" 
+  "16634" -> "16633" 
+  "16660" -> "16659" 
+  "16435" -> "16434" 
+  "16447" -> "16446" 
+  "16454" -> "16452" 
+  "16458" -> "16457" 
+  "16475" -> "16481" 
+  "16478" -> "16474" 
+  "16488" -> "16487" 
+  "16496" -> "16494" 
+  "16503" -> "16494" 
+  "16512" -> "16511" 
+  "16523" -> "16521" 
+  "16525" -> "16524" 
+  "16531" -> "16530" 
+  "16541" -> "16539" 
+  "16551" -> "16549" 
+  "16578" -> "16576" 
+  "16587" -> "16586" 
+  "16619" -> "16618" 
+  "16636" -> "16634" 
+  "16437" -> "16435" 
+  "16448" -> "16447" 
+  "16456" -> "16454" 
+  "16459" -> "16466" 
+  "16462" -> "16458" 
+  "16477" -> "16475" 
+  "16479" -> "16478" 
+  "16490" -> "16488" 
+  "16497" -> "16496" 
+  "16504" -> "16503" 
+  "16513" -> "16512" 
+  "16527" -> "16525" 
+  "16533" -> "16531" 
+  "16589" -> "16587" 
+  "16621" -> "16619" 
+  "16450" -> "16448" 
+  "16461" -> "16459" 
+  "16463" -> "16462" 
+  "16481" -> "16479" 
+  "16499" -> "16497" 
+  "16506" -> "16504" 
+  "16514" -> "16513" 
+  "16622" -> "16621" 
+  "16464" -> "16469" 
+  "16467" -> "16463" 
+  "16624" -> "16622" 
+  "16466" -> "16464" 
+  "16469" -> "16467" 
+  "16418" -> "16429" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/28-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/28-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/28-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/28-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,84 +1,19 @@
-digraph "IsInstanceOf" {  
-"1141" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>516</SUB>> ]
-"1161" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>517</SUB>> ]
-"1165" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>519</SUB>> ]
-"1146" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>516</SUB>> ]
-"1170" [label = <(soa,soa(env))<SUB>521</SUB>> ]
-"1172" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>522</SUB>> ]
-"1189" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>523</SUB>> ]
-"1206" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>524</SUB>> ]
-"1147" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>516</SUB>> ]
-"1151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>516</SUB>> ]
-"1158" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>516</SUB>> ]
-"1173" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>522</SUB>> ]
-"1180" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>522</SUB>> ]
-"1190" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>523</SUB>> ]
-"1197" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>523</SUB>> ]
-"1207" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>524</SUB>> ]
-"1152" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>516</SUB>> ]
-"1174" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>522</SUB>> ]
-"1181" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>522</SUB>> ]
-"1191" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>523</SUB>> ]
-"1198" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>523</SUB>> ]
-"1208" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>524</SUB>> ]
-"1153" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>516</SUB>> ]
-"1155" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>516</SUB>> ]
-"1176" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>522</SUB>> ]
-"1182" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>522</SUB>> ]
-"1185" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>522</SUB>> ]
-"1193" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>523</SUB>> ]
-"1199" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>523</SUB>> ]
-"1202" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>523</SUB>> ]
-"1209" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>524</SUB>> ]
-"1178" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>522</SUB>> ]
-"1184" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>522</SUB>> ]
-"1187" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>522</SUB>> ]
-"1195" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>523</SUB>> ]
-"1201" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>523</SUB>> ]
-"1204" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>523</SUB>> ]
-"1211" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>524</SUB>> ]
-"1136" [label = <(METHOD,IsInstanceOf)<SUB>515</SUB>> ]
-"1215" [label = <(METHOD_RETURN,jboolean)<SUB>515</SUB>> ]
-  "1141" -> "1147" 
-  "1141" -> "1161" 
-  "1161" -> "1165" 
-  "1161" -> "1170" 
-  "1165" -> "1215" 
-  "1146" -> "1153" 
-  "1146" -> "1161" 
-  "1170" -> "1178" 
-  "1172" -> "1195" 
-  "1189" -> "1211" 
-  "1206" -> "1215" 
-  "1147" -> "1146" 
-  "1151" -> "1158" 
-  "1158" -> "1215" 
-  "1173" -> "1184" 
-  "1180" -> "1172" 
-  "1190" -> "1201" 
-  "1197" -> "1189" 
-  "1207" -> "1206" 
-  "1152" -> "1151" 
-  "1174" -> "1173" 
-  "1181" -> "1180" 
-  "1191" -> "1190" 
-  "1198" -> "1197" 
-  "1208" -> "1207" 
-  "1153" -> "1155" 
-  "1155" -> "1152" 
-  "1176" -> "1174" 
-  "1182" -> "1187" 
-  "1185" -> "1181" 
-  "1193" -> "1191" 
-  "1199" -> "1204" 
-  "1202" -> "1198" 
-  "1209" -> "1208" 
-  "1178" -> "1176" 
-  "1184" -> "1182" 
-  "1187" -> "1185" 
-  "1195" -> "1193" 
-  "1201" -> "1199" 
-  "1204" -> "1202" 
-  "1211" -> "1209" 
-  "1136" -> "1141" 
+digraph "ExceptionClear" {  
+"1119" [label = <(soa,soa(env))<SUB>467</SUB>> ]
+"1121" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>468</SUB>> ]
+"1122" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>468</SUB>> ]
+"1123" [label = <(Self,soa.Self())<SUB>468</SUB>> ]
+"1127" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>468</SUB>> ]
+"1124" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>468</SUB>> ]
+"1126" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>468</SUB>> ]
+"1115" [label = <(METHOD,ExceptionClear)<SUB>466</SUB>> ]
+"1128" [label = <(METHOD_RETURN,void)<SUB>466</SUB>> ]
+  "1119" -> "1126" 
+  "1121" -> "1128" 
+  "1122" -> "1121" 
+  "1123" -> "1127" 
+  "1127" -> "1122" 
+  "1124" -> "1123" 
+  "1126" -> "1124" 
+  "1115" -> "1119" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/280-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/280-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/280-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/280-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,249 +1,29 @@
-digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
-"16242" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>486</SUB>> ]
-"16251" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>488</SUB>> ]
-"16255" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>489</SUB>> ]
-"16262" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>490</SUB>> ]
-"16267" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>492</SUB>> ]
-"16279" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>494</SUB>> ]
-"16287" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>497</SUB>> ]
-"16299" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>499</SUB>> ]
-"16307" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>502</SUB>> ]
-"16319" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>504</SUB>> ]
-"16327" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>507</SUB>> ]
-"16339" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>509</SUB>> ]
-"16347" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>512</SUB>> ]
-"16359" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>514</SUB>> ]
-"16367" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>517</SUB>> ]
-"16379" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>519</SUB>> ]
-"16387" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>522</SUB>> ]
-"16399" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>524</SUB>> ]
-"16408" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>527</SUB>> ]
-"16415" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>528</SUB>> ]
-"16427" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>530</SUB>> ]
-"16436" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>533</SUB>> ]
-"16443" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>534</SUB>> ]
-"16455" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>536</SUB>> ]
-"16463" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>540</SUB>> ]
-"16244" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>486</SUB>> ]
-"16257" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>489</SUB>> ]
-"16263" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>490</SUB>> ]
-"16268" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>492</SUB>> ]
-"16271" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>492</SUB>> ]
-"16276" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>493</SUB>> ]
-"16280" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>494</SUB>> ]
-"16283" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>495</SUB>> ]
-"16288" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>497</SUB>> ]
-"16291" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>497</SUB>> ]
-"16296" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>498</SUB>> ]
-"16300" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>499</SUB>> ]
-"16303" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>500</SUB>> ]
-"16308" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>502</SUB>> ]
-"16311" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>502</SUB>> ]
-"16316" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>503</SUB>> ]
-"16320" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>504</SUB>> ]
-"16323" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>505</SUB>> ]
-"16328" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>507</SUB>> ]
-"16331" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>507</SUB>> ]
-"16336" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>508</SUB>> ]
-"16340" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>509</SUB>> ]
-"16343" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>510</SUB>> ]
-"16348" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>512</SUB>> ]
-"16351" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>512</SUB>> ]
-"16356" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>513</SUB>> ]
-"16360" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>514</SUB>> ]
-"16363" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>515</SUB>> ]
-"16368" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>517</SUB>> ]
-"16371" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>517</SUB>> ]
-"16376" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>518</SUB>> ]
-"16380" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>519</SUB>> ]
-"16383" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>520</SUB>> ]
-"16388" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>522</SUB>> ]
-"16391" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>522</SUB>> ]
-"16396" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>523</SUB>> ]
-"16400" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>524</SUB>> ]
-"16403" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>525</SUB>> ]
-"16410" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>527</SUB>> ]
-"16416" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>528</SUB>> ]
-"16419" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>528</SUB>> ]
-"16424" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>529</SUB>> ]
-"16428" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>530</SUB>> ]
-"16431" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>531</SUB>> ]
-"16438" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>533</SUB>> ]
-"16444" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>534</SUB>> ]
-"16447" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>534</SUB>> ]
-"16452" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>535</SUB>> ]
-"16456" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>536</SUB>> ]
-"16459" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>536</SUB>> ]
-"16465" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>540</SUB>> ]
-"16245" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>486</SUB>> ]
-"16258" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>489</SUB>> ]
-"16270" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>492</SUB>> ]
-"16272" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>492</SUB>> ]
-"16277" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>493</SUB>> ]
-"16282" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>494</SUB>> ]
-"16290" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>497</SUB>> ]
-"16292" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>497</SUB>> ]
-"16297" [label = <(UNKNOWN,jshort*,jshort*)<SUB>498</SUB>> ]
-"16302" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>499</SUB>> ]
-"16310" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>502</SUB>> ]
-"16312" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>502</SUB>> ]
-"16317" [label = <(UNKNOWN,jchar*,jchar*)<SUB>503</SUB>> ]
-"16322" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>504</SUB>> ]
-"16330" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>507</SUB>> ]
-"16332" [label = <(UNKNOWN,jintArray,jintArray)<SUB>507</SUB>> ]
-"16337" [label = <(UNKNOWN,jint*,jint*)<SUB>508</SUB>> ]
-"16342" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>509</SUB>> ]
-"16350" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>512</SUB>> ]
-"16352" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>512</SUB>> ]
-"16357" [label = <(UNKNOWN,jlong*,jlong*)<SUB>513</SUB>> ]
-"16362" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>514</SUB>> ]
-"16370" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>517</SUB>> ]
-"16372" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>517</SUB>> ]
-"16377" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>518</SUB>> ]
-"16382" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>519</SUB>> ]
-"16390" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>522</SUB>> ]
-"16392" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>522</SUB>> ]
-"16397" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>523</SUB>> ]
-"16402" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>524</SUB>> ]
-"16411" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>527</SUB>> ]
-"16418" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>528</SUB>> ]
-"16420" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>528</SUB>> ]
-"16425" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>529</SUB>> ]
-"16430" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>530</SUB>> ]
-"16439" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>533</SUB>> ]
-"16446" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>534</SUB>> ]
-"16448" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>534</SUB>> ]
-"16453" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>535</SUB>> ]
-"16458" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>536</SUB>> ]
-"16466" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>540</SUB>> ]
-"16247" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>486</SUB>> ]
-"16260" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>489</SUB>> ]
-"16413" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>527</SUB>> ]
-"16441" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>533</SUB>> ]
-"16468" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>540</SUB>> ]
-"16238" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>485</SUB>> ]
-"16470" [label = <(METHOD_RETURN,void)<SUB>485</SUB>> ]
-  "16242" -> "16251" 
-  "16251" -> "16260" 
-  "16255" -> "16263" 
-  "16262" -> "16270" 
-  "16267" -> "16282" 
-  "16279" -> "16290" 
-  "16287" -> "16302" 
-  "16299" -> "16310" 
-  "16307" -> "16322" 
-  "16319" -> "16330" 
-  "16327" -> "16342" 
-  "16339" -> "16350" 
-  "16347" -> "16362" 
-  "16359" -> "16370" 
-  "16367" -> "16382" 
-  "16379" -> "16390" 
-  "16387" -> "16402" 
-  "16399" -> "16413" 
-  "16408" -> "16418" 
-  "16415" -> "16430" 
-  "16427" -> "16441" 
-  "16436" -> "16446" 
-  "16443" -> "16458" 
-  "16455" -> "16468" 
-  "16463" -> "16470" 
-  "16244" -> "16242" 
-  "16257" -> "16255" 
-  "16263" -> "16262" 
-  "16268" -> "16272" 
-  "16271" -> "16277" 
-  "16276" -> "16267" 
-  "16280" -> "16283" 
-  "16283" -> "16279" 
-  "16288" -> "16292" 
-  "16291" -> "16297" 
-  "16296" -> "16287" 
-  "16300" -> "16303" 
-  "16303" -> "16299" 
-  "16308" -> "16312" 
-  "16311" -> "16317" 
-  "16316" -> "16307" 
-  "16320" -> "16323" 
-  "16323" -> "16319" 
-  "16328" -> "16332" 
-  "16331" -> "16337" 
-  "16336" -> "16327" 
-  "16340" -> "16343" 
-  "16343" -> "16339" 
-  "16348" -> "16352" 
-  "16351" -> "16357" 
-  "16356" -> "16347" 
-  "16360" -> "16363" 
-  "16363" -> "16359" 
-  "16368" -> "16372" 
-  "16371" -> "16377" 
-  "16376" -> "16367" 
-  "16380" -> "16383" 
-  "16383" -> "16379" 
-  "16388" -> "16392" 
-  "16391" -> "16397" 
-  "16396" -> "16387" 
-  "16400" -> "16403" 
-  "16403" -> "16399" 
-  "16410" -> "16408" 
-  "16416" -> "16420" 
-  "16419" -> "16425" 
-  "16424" -> "16415" 
-  "16428" -> "16431" 
-  "16431" -> "16427" 
-  "16438" -> "16436" 
-  "16444" -> "16448" 
-  "16447" -> "16453" 
-  "16452" -> "16443" 
-  "16456" -> "16459" 
-  "16459" -> "16455" 
-  "16465" -> "16463" 
-  "16245" -> "16244" 
-  "16258" -> "16257" 
-  "16270" -> "16268" 
-  "16272" -> "16271" 
-  "16277" -> "16276" 
-  "16282" -> "16280" 
-  "16290" -> "16288" 
-  "16292" -> "16291" 
-  "16297" -> "16296" 
-  "16302" -> "16300" 
-  "16310" -> "16308" 
-  "16312" -> "16311" 
-  "16317" -> "16316" 
-  "16322" -> "16320" 
-  "16330" -> "16328" 
-  "16332" -> "16331" 
-  "16337" -> "16336" 
-  "16342" -> "16340" 
-  "16350" -> "16348" 
-  "16352" -> "16351" 
-  "16357" -> "16356" 
-  "16362" -> "16360" 
-  "16370" -> "16368" 
-  "16372" -> "16371" 
-  "16377" -> "16376" 
-  "16382" -> "16380" 
-  "16390" -> "16388" 
-  "16392" -> "16391" 
-  "16397" -> "16396" 
-  "16402" -> "16400" 
-  "16411" -> "16410" 
-  "16418" -> "16416" 
-  "16420" -> "16419" 
-  "16425" -> "16424" 
-  "16430" -> "16428" 
-  "16439" -> "16438" 
-  "16446" -> "16444" 
-  "16448" -> "16447" 
-  "16453" -> "16452" 
-  "16458" -> "16456" 
-  "16466" -> "16465" 
-  "16247" -> "16245" 
-  "16260" -> "16258" 
-  "16413" -> "16411" 
-  "16441" -> "16439" 
-  "16468" -> "16466" 
-  "16238" -> "16247" 
+digraph "GetLocalsCapacity" {  
+"16689" [label = <(soa,soa(Thread::Current()))<SUB>869</SUB>> ]
+"16694" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity();)<SUB>870</SUB>> ]
+"16690" [label = <(Thread::Current,Thread::Current())<SUB>869</SUB>> ]
+"16695" [label = <(Capacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity())<SUB>870</SUB>> ]
+"16691" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>869</SUB>> ]
+"16696" [label = <(&lt;operator&gt;.fieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity)<SUB>870</SUB>> ]
+"16693" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>869</SUB>> ]
+"16697" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals)<SUB>870</SUB>> ]
+"16702" [label = <(FIELD_IDENTIFIER,Capacity,Capacity)<SUB>870</SUB>> ]
+"16698" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>870</SUB>> ]
+"16701" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>870</SUB>> ]
+"16699" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>870</SUB>> ]
+"16685" [label = <(METHOD,GetLocalsCapacity)<SUB>868</SUB>> ]
+"16703" [label = <(METHOD_RETURN,size_t)<SUB>868</SUB>> ]
+  "16689" -> "16699" 
+  "16694" -> "16703" 
+  "16690" -> "16689" 
+  "16695" -> "16694" 
+  "16691" -> "16690" 
+  "16696" -> "16695" 
+  "16693" -> "16691" 
+  "16697" -> "16702" 
+  "16702" -> "16696" 
+  "16698" -> "16701" 
+  "16701" -> "16697" 
+  "16699" -> "16698" 
+  "16685" -> "16693" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/281-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/281-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/281-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/281-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,249 +1,5 @@
-digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
-"16476" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>544</SUB>> ]
-"16485" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>546</SUB>> ]
-"16489" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>547</SUB>> ]
-"16496" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>548</SUB>> ]
-"16501" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>550</SUB>> ]
-"16513" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>552</SUB>> ]
-"16521" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>555</SUB>> ]
-"16533" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>557</SUB>> ]
-"16541" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>560</SUB>> ]
-"16553" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>562</SUB>> ]
-"16561" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>565</SUB>> ]
-"16573" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>567</SUB>> ]
-"16581" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>570</SUB>> ]
-"16593" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>572</SUB>> ]
-"16601" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>575</SUB>> ]
-"16613" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>577</SUB>> ]
-"16621" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>580</SUB>> ]
-"16633" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>582</SUB>> ]
-"16642" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>585</SUB>> ]
-"16649" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>586</SUB>> ]
-"16661" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>588</SUB>> ]
-"16670" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>591</SUB>> ]
-"16677" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>592</SUB>> ]
-"16689" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>594</SUB>> ]
-"16697" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>597</SUB>> ]
-"16478" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>544</SUB>> ]
-"16491" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>547</SUB>> ]
-"16497" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>548</SUB>> ]
-"16502" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>550</SUB>> ]
-"16505" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>550</SUB>> ]
-"16510" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>551</SUB>> ]
-"16514" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>552</SUB>> ]
-"16517" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>553</SUB>> ]
-"16522" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>555</SUB>> ]
-"16525" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>555</SUB>> ]
-"16530" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>556</SUB>> ]
-"16534" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>557</SUB>> ]
-"16537" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>558</SUB>> ]
-"16542" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>560</SUB>> ]
-"16545" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>560</SUB>> ]
-"16550" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>561</SUB>> ]
-"16554" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>562</SUB>> ]
-"16557" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>563</SUB>> ]
-"16562" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>565</SUB>> ]
-"16565" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>565</SUB>> ]
-"16570" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>566</SUB>> ]
-"16574" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>567</SUB>> ]
-"16577" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>568</SUB>> ]
-"16582" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>570</SUB>> ]
-"16585" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>570</SUB>> ]
-"16590" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>571</SUB>> ]
-"16594" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>572</SUB>> ]
-"16597" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>573</SUB>> ]
-"16602" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>575</SUB>> ]
-"16605" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>575</SUB>> ]
-"16610" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>576</SUB>> ]
-"16614" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>577</SUB>> ]
-"16617" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>578</SUB>> ]
-"16622" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>580</SUB>> ]
-"16625" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>580</SUB>> ]
-"16630" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>581</SUB>> ]
-"16634" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>582</SUB>> ]
-"16637" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>583</SUB>> ]
-"16644" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>585</SUB>> ]
-"16650" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>586</SUB>> ]
-"16653" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>586</SUB>> ]
-"16658" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>587</SUB>> ]
-"16662" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>588</SUB>> ]
-"16665" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>589</SUB>> ]
-"16672" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>591</SUB>> ]
-"16678" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>592</SUB>> ]
-"16681" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>592</SUB>> ]
-"16686" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>593</SUB>> ]
-"16690" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>594</SUB>> ]
-"16693" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>594</SUB>> ]
-"16699" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>597</SUB>> ]
-"16479" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>544</SUB>> ]
-"16492" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>547</SUB>> ]
-"16504" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>550</SUB>> ]
-"16506" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>550</SUB>> ]
-"16511" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>551</SUB>> ]
-"16516" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>552</SUB>> ]
-"16524" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>555</SUB>> ]
-"16526" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>555</SUB>> ]
-"16531" [label = <(UNKNOWN,jshort*,jshort*)<SUB>556</SUB>> ]
-"16536" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>557</SUB>> ]
-"16544" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>560</SUB>> ]
-"16546" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>560</SUB>> ]
-"16551" [label = <(UNKNOWN,jchar*,jchar*)<SUB>561</SUB>> ]
-"16556" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>562</SUB>> ]
-"16564" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>565</SUB>> ]
-"16566" [label = <(UNKNOWN,jintArray,jintArray)<SUB>565</SUB>> ]
-"16571" [label = <(UNKNOWN,jint*,jint*)<SUB>566</SUB>> ]
-"16576" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>567</SUB>> ]
-"16584" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>570</SUB>> ]
-"16586" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>570</SUB>> ]
-"16591" [label = <(UNKNOWN,jlong*,jlong*)<SUB>571</SUB>> ]
-"16596" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>572</SUB>> ]
-"16604" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>575</SUB>> ]
-"16606" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>575</SUB>> ]
-"16611" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>576</SUB>> ]
-"16616" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>577</SUB>> ]
-"16624" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>580</SUB>> ]
-"16626" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>580</SUB>> ]
-"16631" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>581</SUB>> ]
-"16636" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>582</SUB>> ]
-"16645" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>585</SUB>> ]
-"16652" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>586</SUB>> ]
-"16654" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>586</SUB>> ]
-"16659" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>587</SUB>> ]
-"16664" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>588</SUB>> ]
-"16673" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>591</SUB>> ]
-"16680" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>592</SUB>> ]
-"16682" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>592</SUB>> ]
-"16687" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>593</SUB>> ]
-"16692" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>594</SUB>> ]
-"16700" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>597</SUB>> ]
-"16481" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>544</SUB>> ]
-"16494" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>547</SUB>> ]
-"16647" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>585</SUB>> ]
-"16675" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>591</SUB>> ]
-"16702" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>597</SUB>> ]
-"16472" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>543</SUB>> ]
-"16704" [label = <(METHOD_RETURN,void)<SUB>543</SUB>> ]
-  "16476" -> "16485" 
-  "16485" -> "16494" 
-  "16489" -> "16497" 
-  "16496" -> "16504" 
-  "16501" -> "16516" 
-  "16513" -> "16524" 
-  "16521" -> "16536" 
-  "16533" -> "16544" 
-  "16541" -> "16556" 
-  "16553" -> "16564" 
-  "16561" -> "16576" 
-  "16573" -> "16584" 
-  "16581" -> "16596" 
-  "16593" -> "16604" 
-  "16601" -> "16616" 
-  "16613" -> "16624" 
-  "16621" -> "16636" 
-  "16633" -> "16647" 
-  "16642" -> "16652" 
-  "16649" -> "16664" 
-  "16661" -> "16675" 
-  "16670" -> "16680" 
-  "16677" -> "16692" 
-  "16689" -> "16702" 
-  "16697" -> "16704" 
-  "16478" -> "16476" 
-  "16491" -> "16489" 
-  "16497" -> "16496" 
-  "16502" -> "16506" 
-  "16505" -> "16511" 
-  "16510" -> "16501" 
-  "16514" -> "16517" 
-  "16517" -> "16513" 
-  "16522" -> "16526" 
-  "16525" -> "16531" 
-  "16530" -> "16521" 
-  "16534" -> "16537" 
-  "16537" -> "16533" 
-  "16542" -> "16546" 
-  "16545" -> "16551" 
-  "16550" -> "16541" 
-  "16554" -> "16557" 
-  "16557" -> "16553" 
-  "16562" -> "16566" 
-  "16565" -> "16571" 
-  "16570" -> "16561" 
-  "16574" -> "16577" 
-  "16577" -> "16573" 
-  "16582" -> "16586" 
-  "16585" -> "16591" 
-  "16590" -> "16581" 
-  "16594" -> "16597" 
-  "16597" -> "16593" 
-  "16602" -> "16606" 
-  "16605" -> "16611" 
-  "16610" -> "16601" 
-  "16614" -> "16617" 
-  "16617" -> "16613" 
-  "16622" -> "16626" 
-  "16625" -> "16631" 
-  "16630" -> "16621" 
-  "16634" -> "16637" 
-  "16637" -> "16633" 
-  "16644" -> "16642" 
-  "16650" -> "16654" 
-  "16653" -> "16659" 
-  "16658" -> "16649" 
-  "16662" -> "16665" 
-  "16665" -> "16661" 
-  "16672" -> "16670" 
-  "16678" -> "16682" 
-  "16681" -> "16687" 
-  "16686" -> "16677" 
-  "16690" -> "16693" 
-  "16693" -> "16689" 
-  "16699" -> "16697" 
-  "16479" -> "16478" 
-  "16492" -> "16491" 
-  "16504" -> "16502" 
-  "16506" -> "16505" 
-  "16511" -> "16510" 
-  "16516" -> "16514" 
-  "16524" -> "16522" 
-  "16526" -> "16525" 
-  "16531" -> "16530" 
-  "16536" -> "16534" 
-  "16544" -> "16542" 
-  "16546" -> "16545" 
-  "16551" -> "16550" 
-  "16556" -> "16554" 
-  "16564" -> "16562" 
-  "16566" -> "16565" 
-  "16571" -> "16570" 
-  "16576" -> "16574" 
-  "16584" -> "16582" 
-  "16586" -> "16585" 
-  "16591" -> "16590" 
-  "16596" -> "16594" 
-  "16604" -> "16602" 
-  "16606" -> "16605" 
-  "16611" -> "16610" 
-  "16616" -> "16614" 
-  "16624" -> "16622" 
-  "16626" -> "16625" 
-  "16631" -> "16630" 
-  "16636" -> "16634" 
-  "16645" -> "16644" 
-  "16652" -> "16650" 
-  "16654" -> "16653" 
-  "16659" -> "16658" 
-  "16664" -> "16662" 
-  "16673" -> "16672" 
-  "16680" -> "16678" 
-  "16682" -> "16681" 
-  "16687" -> "16686" 
-  "16692" -> "16690" 
-  "16700" -> "16699" 
-  "16481" -> "16479" 
-  "16494" -> "16492" 
-  "16647" -> "16645" 
-  "16675" -> "16673" 
-  "16702" -> "16700" 
-  "16472" -> "16481" 
+digraph "BogusMethod" {  
+"16707" [label = <(METHOD,BogusMethod)<SUB>963</SUB>> ]
+"16709" [label = <(METHOD_RETURN,void)<SUB>963</SUB>> ]
+  "16707" -> "16709" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/282-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/282-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/282-cfg.dot	2023-06-07 19:35:14.847385838 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/282-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,75 +1,11 @@
-digraph "NewObjectArrayBadArguments" {  
-"16710" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>601</SUB>> ]
-"16719" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>604</SUB>> ]
-"16726" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>605</SUB>> ]
-"16729" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>607</SUB>> ]
-"16737" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>608</SUB>> ]
-"16745" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>610</SUB>> ]
-"16761" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>611</SUB>> ]
-"16769" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>614</SUB>> ]
-"16712" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>601</SUB>> ]
-"16721" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>604</SUB>> ]
-"16730" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>607</SUB>> ]
-"16733" [label = <(&lt;operator&gt;.minus,-1)<SUB>607</SUB>> ]
-"16738" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>608</SUB>> ]
-"16741" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>608</SUB>> ]
-"16746" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>610</SUB>> ]
-"16749" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>610</SUB>> ]
-"16762" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>611</SUB>> ]
-"16765" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>611</SUB>> ]
-"16771" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>614</SUB>> ]
-"16713" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>601</SUB>> ]
-"16722" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>604</SUB>> ]
-"16732" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>607</SUB>> ]
-"16740" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>608</SUB>> ]
-"16748" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>610</SUB>> ]
-"16750" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>610</SUB>> ]
-"16755" [label = <(::min,::min())<SUB>610</SUB>> ]
-"16764" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>611</SUB>> ]
-"16772" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>614</SUB>> ]
-"16715" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>601</SUB>> ]
-"16724" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>604</SUB>> ]
-"16751" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>610</SUB>> ]
-"16756" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>610</SUB>> ]
-"16774" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>614</SUB>> ]
-"16753" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>610</SUB>> ]
-"16758" [label = <(FIELD_IDENTIFIER,min,min)<SUB>610</SUB>> ]
-"16706" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>600</SUB>> ]
-"16776" [label = <(METHOD_RETURN,void)<SUB>600</SUB>> ]
-  "16710" -> "16724" 
-  "16719" -> "16726" 
-  "16726" -> "16732" 
-  "16729" -> "16740" 
-  "16737" -> "16748" 
-  "16745" -> "16764" 
-  "16761" -> "16774" 
-  "16769" -> "16776" 
-  "16712" -> "16710" 
-  "16721" -> "16719" 
-  "16730" -> "16733" 
-  "16733" -> "16729" 
-  "16738" -> "16741" 
-  "16741" -> "16737" 
-  "16746" -> "16753" 
-  "16749" -> "16745" 
-  "16762" -> "16765" 
-  "16765" -> "16761" 
-  "16771" -> "16769" 
-  "16713" -> "16712" 
-  "16722" -> "16721" 
-  "16732" -> "16730" 
-  "16740" -> "16738" 
-  "16748" -> "16746" 
-  "16750" -> "16758" 
-  "16755" -> "16749" 
-  "16764" -> "16762" 
-  "16772" -> "16771" 
-  "16715" -> "16713" 
-  "16724" -> "16722" 
-  "16751" -> "16750" 
-  "16756" -> "16755" 
-  "16774" -> "16772" 
-  "16753" -> "16751" 
-  "16758" -> "16756" 
-  "16706" -> "16715" 
+digraph "Java_MyClassNatives_foo_exit" {  
+"16770" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2223</SUB>> ]
+"16771" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2223</SUB>> ]
+"16773" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2223</SUB>> ]
+"16766" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2221</SUB>> ]
+"16775" [label = <(METHOD_RETURN,void)<SUB>2221</SUB>> ]
+  "16770" -> "16775" 
+  "16771" -> "16770" 
+  "16773" -> "16771" 
+  "16766" -> "16773" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/283-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/283-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/283-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/283-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,263 +1,11 @@
-digraph "SetUpForTest" {  
-"16904" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>641</SUB>> ]
-"16913" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>642</SUB>> ]
-"16920" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>643</SUB>> ]
-"16953" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>650</SUB>> ]
-"16999" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>660</SUB>> ]
-"17008" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>661</SUB>> ]
-"17016" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>662</SUB>> ]
-"16785" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>621</SUB>> ]
-"16906" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>641</SUB>> ]
-"16915" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>642</SUB>> ]
-"16921" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>643</SUB>> ]
-"16954" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>650</SUB>> ]
-"16964" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>652</SUB>> ]
-"17001" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>660</SUB>> ]
-"17010" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>661</SUB>> ]
-"17017" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>662</SUB>> ]
-"16786" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>621</SUB>> ]
-"16888" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>636</SUB>> ]
-"16896" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>637</SUB>> ]
-"16902" [label = <(CHECK,CHECK(started))<SUB>638</SUB>> ]
-"16907" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>641</SUB>> ]
-"16916" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>642</SUB>> ]
-"16922" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>643</SUB>> ]
-"16933" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
-"16955" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>650</SUB>> ]
-"16969" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>653</SUB>> ]
-"16976" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>654</SUB>> ]
-"17002" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>660</SUB>> ]
-"17011" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>661</SUB>> ]
-"17018" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>662</SUB>> ]
-"16787" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>621</SUB>> ]
-"16793" [label = <(soa,soa(Thread::Current()))<SUB>623</SUB>> ]
-"16798" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>624</SUB>> ]
-"16802" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>625</SUB>> ]
-"16811" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>626</SUB>> ]
-"16832" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>628</SUB>> ]
-"16845" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>629</SUB>> ]
-"16852" [label = <(&lt;operator&gt;.assignment,* method = direct ? c-&gt;FindDirectMethod(method_name, method_sig, pointer_size) :\012            c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
-"16870" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>632</SUB>> ]
-"16880" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>633</SUB>> ]
-"16889" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>636</SUB>> ]
-"16898" [label = <(Start,runtime_-&gt;Start())<SUB>637</SUB>> ]
-"16908" [label = <(Thread::Current,Thread::Current())<SUB>641</SUB>> ]
-"16912" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>641</SUB>> ]
-"16918" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>642</SUB>> ]
-"16923" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>643</SUB>> ]
-"16935" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
-"16944" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>648</SUB>> ]
-"16956" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>650</SUB>> ]
-"16971" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>653</SUB>> ]
-"16977" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>654</SUB>> ]
-"16993" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>657</SUB>> ]
-"17004" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>660</SUB>> ]
-"17013" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>661</SUB>> ]
-"17019" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>662</SUB>> ]
-"16789" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>621</SUB>> ]
-"16794" [label = <(Thread::Current,Thread::Current())<SUB>623</SUB>> ]
-"16800" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>624</SUB>> ]
-"16803" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>625</SUB>> ]
-"16806" [label = <(hs,hs(soa.Self()))<SUB>625</SUB>> ]
-"16812" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
-"16817" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>626</SUB>> ]
-"16834" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>628</SUB>> ]
-"16847" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>629</SUB>> ]
-"16854" [label = <(&lt;operator&gt;.conditional,direct ? c-&gt;FindDirectMethod(method_name, method_sig, pointer_size) :\012            c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
-"16871" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>632</SUB>> ]
-"16881" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>633</SUB>> ]
-"16884" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>633</SUB>> ]
-"16890" [label = <(Thread::Current,Thread::Current())<SUB>636</SUB>> ]
-"16894" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>636</SUB>> ]
-"16899" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>637</SUB>> ]
-"16909" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>641</SUB>> ]
-"16924" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>643</SUB>> ]
-"16936" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>646</SUB>> ]
-"16946" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>648</SUB>> ]
-"16957" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>650</SUB>> ]
-"16972" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>653</SUB>> ]
-"16978" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>654</SUB>> ]
-"16994" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>657</SUB>> ]
-"17020" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>662</SUB>> ]
-"16795" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>623</SUB>> ]
-"16807" [label = <(Self,soa.Self())<SUB>625</SUB>> ]
-"16814" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
-"16818" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>627</SUB>> ]
-"16835" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>628</SUB>> ]
-"16838" [label = <(Self,soa.Self())<SUB>628</SUB>> ]
-"16848" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>629</SUB>> ]
-"16856" [label = <(FindDirectMethod,c-&gt;FindDirectMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
-"16863" [label = <(FindVirtualMethod,c-&gt;FindVirtualMethod(method_name, method_sig, pointer_size))<SUB>631</SUB>> ]
-"16872" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>632</SUB>> ]
-"16883" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>633</SUB>> ]
-"16885" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>633</SUB>> ]
-"16891" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>636</SUB>> ]
-"16901" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>637</SUB>> ]
-"16911" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>641</SUB>> ]
-"16938" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>646</SUB>> ]
-"16947" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>648</SUB>> ]
-"16979" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>654</SUB>> ]
-"16996" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>657</SUB>> ]
-"16797" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>623</SUB>> ]
-"16808" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>625</SUB>> ]
-"16816" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
-"16819" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>627</SUB>> ]
-"16822" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>627</SUB>> ]
-"16837" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>628</SUB>> ]
-"16839" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>628</SUB>> ]
-"16850" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>629</SUB>> ]
-"16857" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindDirectMethod)<SUB>630</SUB>> ]
-"16864" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindVirtualMethod)<SUB>631</SUB>> ]
-"16873" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>632</SUB>> ]
-"16887" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>633</SUB>> ]
-"16893" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>636</SUB>> ]
-"16949" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>648</SUB>> ]
-"16981" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>654</SUB>> ]
-"16810" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>625</SUB>> ]
-"16821" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>627</SUB>> ]
-"16823" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>627</SUB>> ]
-"16841" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>628</SUB>> ]
-"16859" [label = <(FIELD_IDENTIFIER,FindDirectMethod,FindDirectMethod)<SUB>630</SUB>> ]
-"16866" [label = <(FIELD_IDENTIFIER,FindVirtualMethod,FindVirtualMethod)<SUB>631</SUB>> ]
-"16874" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>632</SUB>> ]
-"16982" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>654</SUB>> ]
-"16824" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>627</SUB>> ]
-"16827" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>627</SUB>> ]
-"16984" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>654</SUB>> ]
-"16826" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>627</SUB>> ]
-"16829" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>627</SUB>> ]
-"16778" [label = <(METHOD,SetUpForTest)<SUB>617</SUB>> ]
-"17026" [label = <(METHOD_RETURN,void)<SUB>617</SUB>> ]
-  "16904" -> "16918" 
-  "16913" -> "16924" 
-  "16920" -> "16938" 
-  "16920" -> "16949" 
-  "16953" -> "16964" 
-  "16999" -> "17013" 
-  "17008" -> "17020" 
-  "17016" -> "17026" 
-  "16785" -> "16797" 
-  "16785" -> "16911" 
-  "16906" -> "16904" 
-  "16915" -> "16913" 
-  "16921" -> "16920" 
-  "16954" -> "16953" 
-  "16964" -> "16972" 
-  "16964" -> "16996" 
-  "17001" -> "16999" 
-  "17010" -> "17008" 
-  "17017" -> "17016" 
-  "16786" -> "16785" 
-  "16888" -> "16901" 
-  "16896" -> "16902" 
-  "16902" -> "16911" 
-  "16907" -> "16906" 
-  "16916" -> "16915" 
-  "16922" -> "16921" 
-  "16933" -> "16957" 
-  "16955" -> "16954" 
-  "16969" -> "16984" 
-  "16976" -> "17004" 
-  "17002" -> "17001" 
-  "17011" -> "17010" 
-  "17018" -> "17017" 
-  "16787" -> "16786" 
-  "16793" -> "16800" 
-  "16798" -> "16803" 
-  "16802" -> "16816" 
-  "16811" -> "16837" 
-  "16832" -> "16850" 
-  "16845" -> "16859" 
-  "16845" -> "16866" 
-  "16852" -> "16874" 
-  "16870" -> "16883" 
-  "16880" -> "16893" 
-  "16889" -> "16888" 
-  "16898" -> "16896" 
-  "16908" -> "16912" 
-  "16912" -> "16907" 
-  "16918" -> "16916" 
-  "16923" -> "16922" 
-  "16935" -> "16933" 
-  "16944" -> "16957" 
-  "16956" -> "16955" 
-  "16971" -> "16969" 
-  "16977" -> "16976" 
-  "16993" -> "17004" 
-  "17004" -> "17002" 
-  "17013" -> "17011" 
-  "17019" -> "17018" 
-  "16789" -> "16787" 
-  "16794" -> "16793" 
-  "16800" -> "16798" 
-  "16803" -> "16810" 
-  "16806" -> "16802" 
-  "16812" -> "16821" 
-  "16817" -> "16811" 
-  "16834" -> "16832" 
-  "16847" -> "16845" 
-  "16854" -> "16852" 
-  "16871" -> "16870" 
-  "16881" -> "16887" 
-  "16884" -> "16880" 
-  "16890" -> "16894" 
-  "16894" -> "16889" 
-  "16899" -> "16898" 
-  "16909" -> "16908" 
-  "16924" -> "16923" 
-  "16936" -> "16935" 
-  "16946" -> "16944" 
-  "16957" -> "16956" 
-  "16972" -> "16971" 
-  "16978" -> "16977" 
-  "16994" -> "16993" 
-  "17020" -> "17019" 
-  "16795" -> "16794" 
-  "16807" -> "16806" 
-  "16814" -> "16812" 
-  "16818" -> "16817" 
-  "16835" -> "16841" 
-  "16838" -> "16834" 
-  "16848" -> "16847" 
-  "16856" -> "16854" 
-  "16863" -> "16854" 
-  "16872" -> "16871" 
-  "16883" -> "16881" 
-  "16885" -> "16884" 
-  "16891" -> "16890" 
-  "16901" -> "16899" 
-  "16911" -> "16909" 
-  "16938" -> "16936" 
-  "16947" -> "16946" 
-  "16979" -> "16978" 
-  "16996" -> "16994" 
-  "16797" -> "16795" 
-  "16808" -> "16807" 
-  "16816" -> "16814" 
-  "16819" -> "16826" 
-  "16822" -> "16818" 
-  "16837" -> "16835" 
-  "16839" -> "16838" 
-  "16850" -> "16848" 
-  "16857" -> "16856" 
-  "16864" -> "16863" 
-  "16873" -> "16872" 
-  "16887" -> "16885" 
-  "16893" -> "16891" 
-  "16949" -> "16947" 
-  "16981" -> "16979" 
-  "16810" -> "16808" 
-  "16821" -> "16819" 
-  "16823" -> "16822" 
-  "16841" -> "16839" 
-  "16859" -> "16857" 
-  "16866" -> "16864" 
-  "16874" -> "16873" 
-  "16982" -> "16981" 
-  "16824" -> "16829" 
-  "16827" -> "16823" 
-  "16984" -> "16982" 
-  "16826" -> "16824" 
-  "16829" -> "16827" 
-  "16778" -> "16789" 
+digraph "Java_MyClassNatives_foo_enter_no_exit" {  
+"16782" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2240</SUB>> ]
+"16783" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2240</SUB>> ]
+"16785" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2240</SUB>> ]
+"16778" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2238</SUB>> ]
+"16787" [label = <(METHOD_RETURN,void)<SUB>2238</SUB>> ]
+  "16782" -> "16787" 
+  "16783" -> "16782" 
+  "16785" -> "16783" 
+  "16778" -> "16785" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/284-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/284-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/284-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/284-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,29 +1,85 @@
-digraph "GetLocalsCapacity" {  
-"17049" [label = <(soa,soa(Thread::Current()))<SUB>870</SUB>> ]
-"17054" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity();)<SUB>871</SUB>> ]
-"17050" [label = <(Thread::Current,Thread::Current())<SUB>870</SUB>> ]
-"17055" [label = <(Capacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity())<SUB>871</SUB>> ]
-"17051" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>870</SUB>> ]
-"17056" [label = <(&lt;operator&gt;.fieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals.Capacity)<SUB>871</SUB>> ]
-"17053" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>870</SUB>> ]
-"17057" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;locals)<SUB>871</SUB>> ]
-"17062" [label = <(FIELD_IDENTIFIER,Capacity,Capacity)<SUB>871</SUB>> ]
-"17058" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>871</SUB>> ]
-"17061" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>871</SUB>> ]
-"17059" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>871</SUB>> ]
-"17045" [label = <(METHOD,GetLocalsCapacity)<SUB>869</SUB>> ]
-"17063" [label = <(METHOD_RETURN,size_t)<SUB>869</SUB>> ]
-  "17049" -> "17059" 
-  "17054" -> "17063" 
-  "17050" -> "17049" 
-  "17055" -> "17054" 
-  "17051" -> "17050" 
-  "17056" -> "17055" 
-  "17053" -> "17051" 
-  "17057" -> "17062" 
-  "17062" -> "17056" 
-  "17058" -> "17061" 
-  "17061" -> "17057" 
-  "17059" -> "17058" 
-  "17045" -> "17053" 
+digraph "IsLocked" {  
+"16795" [label = <(soa,soa(env))<SUB>2256</SUB>> ]
+"16798" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2257</SUB>> ]
+"16800" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2257</SUB>> ]
+"16814" [label = <(GetState,lock_word.GetState())<SUB>2258</SUB>> ]
+"16801" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2257</SUB>> ]
+"16808" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2257</SUB>> ]
+"16815" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2258</SUB>> ]
+"16820" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2259</SUB>> ]
+"16824" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2260</SUB>> ]
+"16827" [label = <(RETURN,return false;,return false;)<SUB>2261</SUB>> ]
+"16830" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2262</SUB>> ]
+"16833" [label = <(RETURN,return true;,return true;)<SUB>2263</SUB>> ]
+"16836" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2264</SUB>> ]
+"16839" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2265</SUB>> ]
+"16802" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2257</SUB>> ]
+"16805" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2257</SUB>> ]
+"16809" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2257</SUB>> ]
+"16817" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2258</SUB>> ]
+"16822" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2259</SUB>> ]
+"16826" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2260</SUB>> ]
+"16832" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2262</SUB>> ]
+"16838" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2264</SUB>> ]
+"16840" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2265</SUB>> ]
+"16849" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2267</SUB>> ]
+"16858" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2268</SUB>> ]
+"16804" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2257</SUB>> ]
+"16807" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2257</SUB>> ]
+"16811" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2257</SUB>> ]
+"16841" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2265</SUB>> ]
+"16850" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2267</SUB>> ]
+"16854" [label = <(GetState,lock_word.GetState())<SUB>2267</SUB>> ]
+"16842" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2265</SUB>> ]
+"16846" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2265</SUB>> ]
+"16851" [label = <(LOG,LOG(FATAL))<SUB>2267</SUB>> ]
+"16855" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2267</SUB>> ]
+"16843" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2265</SUB>> ]
+"16857" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2267</SUB>> ]
+"16845" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2265</SUB>> ]
+"16790" [label = <(METHOD,IsLocked)<SUB>2255</SUB>> ]
+"16859" [label = <(METHOD_RETURN,bool)<SUB>2255</SUB>> ]
+  "16795" -> "16804" 
+  "16798" -> "16817" 
+  "16800" -> "16798" 
+  "16814" -> "16822" 
+  "16814" -> "16826" 
+  "16814" -> "16832" 
+  "16814" -> "16838" 
+  "16814" -> "16851" 
+  "16801" -> "16811" 
+  "16808" -> "16800" 
+  "16815" -> "16814" 
+  "16820" -> "16826" 
+  "16824" -> "16827" 
+  "16827" -> "16859" 
+  "16830" -> "16833" 
+  "16833" -> "16859" 
+  "16836" -> "16845" 
+  "16839" -> "16859" 
+  "16802" -> "16807" 
+  "16805" -> "16801" 
+  "16809" -> "16808" 
+  "16817" -> "16815" 
+  "16822" -> "16820" 
+  "16826" -> "16824" 
+  "16832" -> "16830" 
+  "16838" -> "16836" 
+  "16840" -> "16839" 
+  "16849" -> "16858" 
+  "16858" -> "16859" 
+  "16804" -> "16802" 
+  "16807" -> "16805" 
+  "16811" -> "16809" 
+  "16841" -> "16840" 
+  "16850" -> "16857" 
+  "16854" -> "16849" 
+  "16842" -> "16846" 
+  "16846" -> "16841" 
+  "16851" -> "16850" 
+  "16855" -> "16854" 
+  "16843" -> "16842" 
+  "16857" -> "16855" 
+  "16845" -> "16843" 
+  "16790" -> "16795" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/285-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/285-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/285-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/285-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,5 +1,15 @@
-digraph "BogusMethod" {  
-"17067" [label = <(METHOD,BogusMethod)<SUB>964</SUB>> ]
-"17069" [label = <(METHOD_RETURN,void)<SUB>964</SUB>> ]
-  "17067" -> "17069" 
+digraph "CountNewGlobalRef" {  
+"16876" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2353</SUB>> ]
+"16878" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2354</SUB>> ]
+"16879" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2354</SUB>> ]
+"16880" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2354</SUB>> ]
+"16882" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2354</SUB>> ]
+"16872" [label = <(METHOD,CountNewGlobalRef)<SUB>2352</SUB>> ]
+"16885" [label = <(METHOD_RETURN,jobject)<SUB>2352</SUB>> ]
+  "16876" -> "16882" 
+  "16878" -> "16885" 
+  "16879" -> "16878" 
+  "16880" -> "16879" 
+  "16882" -> "16880" 
+  "16872" -> "16876" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/286-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/286-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/286-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/286-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,11 +1,7 @@
-digraph "Java_MyClassNatives_foo_exit" {  
-"17131" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2337</SUB>> ]
-"17132" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2337</SUB>> ]
-"17134" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2337</SUB>> ]
-"17127" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2335</SUB>> ]
-"17136" [label = <(METHOD_RETURN,void)<SUB>2335</SUB>> ]
-  "17131" -> "17136" 
-  "17132" -> "17131" 
-  "17134" -> "17132" 
-  "17127" -> "17134" 
+digraph "&lt;global&gt;" {  
+"16893" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>25</SUB>> ]
+"16891" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"16894" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "16893" -> "16894" 
+  "16891" -> "16893" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/287-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/287-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/287-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/287-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,11 +1,5 @@
-digraph "Java_MyClassNatives_foo_enter_no_exit" {  
-"17143" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2354</SUB>> ]
-"17144" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2354</SUB>> ]
-"17146" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2354</SUB>> ]
-"17139" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2352</SUB>> ]
-"17148" [label = <(METHOD_RETURN,void)<SUB>2352</SUB>> ]
-  "17143" -> "17148" 
-  "17144" -> "17143" 
-  "17146" -> "17144" 
-  "17139" -> "17146" 
+digraph "&lt;operator&gt;.assignment" {  
+"17194" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
+"17198" [label = <(METHOD_RETURN,ANY)> ]
+  "17194" -> "17198" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/288-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/288-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/288-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/288-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,85 +1,5 @@
-digraph "IsLocked" {  
-"17156" [label = <(soa,soa(env))<SUB>2370</SUB>> ]
-"17159" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2371</SUB>> ]
-"17161" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2371</SUB>> ]
-"17175" [label = <(GetState,lock_word.GetState())<SUB>2372</SUB>> ]
-"17162" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2371</SUB>> ]
-"17169" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2371</SUB>> ]
-"17176" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2372</SUB>> ]
-"17181" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2373</SUB>> ]
-"17185" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2374</SUB>> ]
-"17188" [label = <(RETURN,return false;,return false;)<SUB>2375</SUB>> ]
-"17191" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2376</SUB>> ]
-"17194" [label = <(RETURN,return true;,return true;)<SUB>2377</SUB>> ]
-"17197" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2378</SUB>> ]
-"17200" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2379</SUB>> ]
-"17163" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2371</SUB>> ]
-"17166" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2371</SUB>> ]
-"17170" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2371</SUB>> ]
-"17178" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2372</SUB>> ]
-"17183" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2373</SUB>> ]
-"17187" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2374</SUB>> ]
-"17193" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2376</SUB>> ]
-"17199" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2378</SUB>> ]
-"17201" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2379</SUB>> ]
-"17210" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2381</SUB>> ]
-"17219" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2382</SUB>> ]
-"17165" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2371</SUB>> ]
-"17168" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2371</SUB>> ]
-"17172" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2371</SUB>> ]
-"17202" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2379</SUB>> ]
-"17211" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2381</SUB>> ]
-"17215" [label = <(GetState,lock_word.GetState())<SUB>2381</SUB>> ]
-"17203" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2379</SUB>> ]
-"17207" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2379</SUB>> ]
-"17212" [label = <(LOG,LOG(FATAL))<SUB>2381</SUB>> ]
-"17216" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2381</SUB>> ]
-"17204" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2379</SUB>> ]
-"17218" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2381</SUB>> ]
-"17206" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2379</SUB>> ]
-"17151" [label = <(METHOD,IsLocked)<SUB>2369</SUB>> ]
-"17220" [label = <(METHOD_RETURN,bool)<SUB>2369</SUB>> ]
-  "17156" -> "17165" 
-  "17159" -> "17178" 
-  "17161" -> "17159" 
-  "17175" -> "17183" 
-  "17175" -> "17187" 
-  "17175" -> "17193" 
-  "17175" -> "17199" 
-  "17175" -> "17212" 
-  "17162" -> "17172" 
-  "17169" -> "17161" 
-  "17176" -> "17175" 
-  "17181" -> "17187" 
-  "17185" -> "17188" 
-  "17188" -> "17220" 
-  "17191" -> "17194" 
-  "17194" -> "17220" 
-  "17197" -> "17206" 
-  "17200" -> "17220" 
-  "17163" -> "17168" 
-  "17166" -> "17162" 
-  "17170" -> "17169" 
-  "17178" -> "17176" 
-  "17183" -> "17181" 
-  "17187" -> "17185" 
-  "17193" -> "17191" 
-  "17199" -> "17197" 
-  "17201" -> "17200" 
-  "17210" -> "17219" 
-  "17219" -> "17220" 
-  "17165" -> "17163" 
-  "17168" -> "17166" 
-  "17172" -> "17170" 
-  "17202" -> "17201" 
-  "17211" -> "17218" 
-  "17215" -> "17210" 
-  "17203" -> "17207" 
-  "17207" -> "17202" 
-  "17212" -> "17211" 
-  "17216" -> "17215" 
-  "17204" -> "17203" 
-  "17218" -> "17216" 
-  "17206" -> "17204" 
-  "17151" -> "17156" 
+digraph "&lt;operator&gt;.equals" {  
+"17199" [label = <(METHOD,&lt;operator&gt;.equals)> ]
+"17203" [label = <(METHOD_RETURN,ANY)> ]
+  "17199" -> "17203" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/289-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/289-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/289-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/289-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,15 +1,5 @@
-digraph "CountNewGlobalRef" {  
-"17237" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2467</SUB>> ]
-"17239" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2468</SUB>> ]
-"17240" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2468</SUB>> ]
-"17241" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2468</SUB>> ]
-"17243" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2468</SUB>> ]
-"17233" [label = <(METHOD,CountNewGlobalRef)<SUB>2466</SUB>> ]
-"17246" [label = <(METHOD_RETURN,jobject)<SUB>2466</SUB>> ]
-  "17237" -> "17243" 
-  "17239" -> "17246" 
-  "17240" -> "17239" 
-  "17241" -> "17240" 
-  "17243" -> "17241" 
-  "17233" -> "17237" 
+digraph "&lt;operator&gt;.indirectIndexAccess" {  
+"17204" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
+"17208" [label = <(METHOD_RETURN,ANY)> ]
+  "17204" -> "17208" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/29-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/29-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/29-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/29-cfg.dot	2023-06-07 19:35:21.207385055 +0330
@@ -1,48 +1,240 @@
-digraph "Throw" {  
-"1222" [label = <(soa,soa(env))<SUB>529</SUB>> ]
-"1224" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>530</SUB>> ]
-"1248" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>534</SUB>> ]
-"1256" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>535</SUB>> ]
-"1225" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>530</SUB>> ]
-"1232" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>530</SUB>> ]
-"1242" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>531</SUB>> ]
-"1249" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>534</SUB>> ]
-"1226" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>530</SUB>> ]
-"1233" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>530</SUB>> ]
-"1246" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>532</SUB>> ]
-"1250" [label = <(Self,soa.Self())<SUB>534</SUB>> ]
-"1254" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>534</SUB>> ]
-"1228" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>530</SUB>> ]
-"1234" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>530</SUB>> ]
-"1237" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>530</SUB>> ]
-"1251" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>534</SUB>> ]
-"1230" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>530</SUB>> ]
-"1236" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>530</SUB>> ]
-"1239" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>530</SUB>> ]
-"1253" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>534</SUB>> ]
-"1217" [label = <(METHOD,Throw)<SUB>528</SUB>> ]
-"1258" [label = <(METHOD_RETURN,jint)<SUB>528</SUB>> ]
-  "1222" -> "1230" 
-  "1224" -> "1242" 
-  "1248" -> "1256" 
-  "1256" -> "1258" 
-  "1225" -> "1236" 
-  "1232" -> "1224" 
-  "1242" -> "1246" 
-  "1242" -> "1253" 
-  "1249" -> "1248" 
-  "1226" -> "1225" 
-  "1233" -> "1232" 
-  "1246" -> "1258" 
-  "1250" -> "1254" 
-  "1254" -> "1249" 
-  "1228" -> "1226" 
-  "1234" -> "1239" 
-  "1237" -> "1233" 
-  "1251" -> "1250" 
-  "1230" -> "1228" 
-  "1236" -> "1234" 
-  "1239" -> "1237" 
+digraph "ExceptionDescribe" {  
+"1134" [label = <(soa,soa(env))<SUB>472</SUB>> ]
+"1147" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>479</SUB>> ]
+"1156" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>480</SUB>> ]
+"1178" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>482</SUB>> ]
+"1185" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>483</SUB>> ]
+"1201" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>485</SUB>> ]
+"1216" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>486</SUB>> ]
+"1295" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>498</SUB>> ]
+"1137" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>475</SUB>> ]
+"1148" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>479</SUB>> ]
+"1151" [label = <(hs,hs(soa.Self()))<SUB>479</SUB>> ]
+"1157" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>480</SUB>> ]
+"1162" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>480</SUB>> ]
+"1179" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>482</SUB>> ]
+"1186" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>483</SUB>> ]
+"1189" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>483</SUB>> ]
+"1202" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>485</SUB>> ]
+"1205" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>485</SUB>> ]
+"1218" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>486</SUB>> ]
+"1229" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>487</SUB>> ]
+"1296" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>498</SUB>> ]
+"1302" [label = <(Get,old_exception.Get())<SUB>498</SUB>> ]
+"1138" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>475</SUB>> ]
+"1146" [label = <(RETURN,return;,return;)<SUB>476</SUB>> ]
+"1152" [label = <(Self,soa.Self())<SUB>479</SUB>> ]
+"1159" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>480</SUB>> ]
+"1163" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>481</SUB>> ]
+"1180" [label = <(Self,soa.Self())<SUB>482</SUB>> ]
+"1184" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>482</SUB>> ]
+"1191" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>484</SUB>> ]
+"1207" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>485</SUB>> ]
+"1219" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>486</SUB>> ]
+"1222" [label = <(get,exception_class.get())<SUB>486</SUB>> ]
+"1233" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>488</SUB>> ]
+"1297" [label = <(Self,soa.Self())<SUB>498</SUB>> ]
+"1301" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>498</SUB>> ]
+"1303" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>498</SUB>> ]
+"1139" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>475</SUB>> ]
+"1153" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>479</SUB>> ]
+"1161" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>480</SUB>> ]
+"1164" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>481</SUB>> ]
+"1171" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>481</SUB>> ]
+"1181" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>482</SUB>> ]
+"1192" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>484</SUB>> ]
+"1197" [label = <(Get,old_exception.Get())<SUB>484</SUB>> ]
+"1208" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>485</SUB>> ]
+"1211" [label = <(get,exception.get())<SUB>485</SUB>> ]
+"1221" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>486</SUB>> ]
+"1223" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>486</SUB>> ]
+"1234" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>488</SUB>> ]
+"1238" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>489</SUB>> ]
+"1250" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>491</SUB>> ]
+"1298" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>498</SUB>> ]
+"1305" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>498</SUB>> ]
+"1140" [label = <(Self,soa.Self())<SUB>475</SUB>> ]
+"1144" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>475</SUB>> ]
+"1155" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>479</SUB>> ]
+"1165" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>481</SUB>> ]
+"1168" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>481</SUB>> ]
+"1172" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>481</SUB>> ]
+"1183" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>482</SUB>> ]
+"1193" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>484</SUB>> ]
+"1198" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>484</SUB>> ]
+"1210" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>485</SUB>> ]
+"1212" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>485</SUB>> ]
+"1225" [label = <(FIELD_IDENTIFIER,get,get)<SUB>486</SUB>> ]
+"1235" [label = <(LOG,LOG(WARNING))<SUB>488</SUB>> ]
+"1239" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>489</SUB>> ]
+"1244" [label = <(Get,old_exception.Get())<SUB>489</SUB>> ]
+"1251" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>491</SUB>> ]
+"1254" [label = <(get,exception.get())<SUB>491</SUB>> ]
+"1260" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>492</SUB>> ]
+"1300" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>498</SUB>> ]
+"1141" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>475</SUB>> ]
+"1167" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>481</SUB>> ]
+"1170" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>481</SUB>> ]
+"1173" [label = <(Self,soa.Self())<SUB>481</SUB>> ]
+"1177" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>481</SUB>> ]
+"1195" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>484</SUB>> ]
+"1200" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>484</SUB>> ]
+"1214" [label = <(FIELD_IDENTIFIER,get,get)<SUB>485</SUB>> ]
+"1240" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>489</SUB>> ]
+"1243" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>489</SUB>> ]
+"1245" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>489</SUB>> ]
+"1253" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>491</SUB>> ]
+"1255" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>491</SUB>> ]
+"1261" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>492</SUB>> ]
+"1268" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>493</SUB>> ]
+"1288" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>495</SUB>> ]
+"1143" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>475</SUB>> ]
+"1174" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>481</SUB>> ]
+"1247" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>489</SUB>> ]
+"1257" [label = <(FIELD_IDENTIFIER,get,get)<SUB>491</SUB>> ]
+"1262" [label = <(Self,soa.Self())<SUB>492</SUB>> ]
+"1266" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>492</SUB>> ]
+"1269" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>493</SUB>> ]
+"1289" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>495</SUB>> ]
+"1176" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>481</SUB>> ]
+"1263" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>492</SUB>> ]
+"1270" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>493</SUB>> ]
+"1274" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>493</SUB>> ]
+"1290" [label = <(Self,soa.Self())<SUB>495</SUB>> ]
+"1294" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>495</SUB>> ]
+"1265" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>492</SUB>> ]
+"1271" [label = <(LOG,LOG(WARNING))<SUB>493</SUB>> ]
+"1275" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>493</SUB>> ]
+"1280" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>493</SUB>> ]
+"1291" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>495</SUB>> ]
+"1276" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>493</SUB>> ]
+"1279" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>493</SUB>> ]
+"1281" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>493</SUB>> ]
+"1293" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>495</SUB>> ]
+"1282" [label = <(Self,soa.Self())<SUB>493</SUB>> ]
+"1286" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>493</SUB>> ]
+"1283" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>493</SUB>> ]
+"1285" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>493</SUB>> ]
+"1130" [label = <(METHOD,ExceptionDescribe)<SUB>471</SUB>> ]
+"1306" [label = <(METHOD_RETURN,void)<SUB>471</SUB>> ]
+  "1134" -> "1143" 
+  "1147" -> "1161" 
+  "1156" -> "1183" 
+  "1178" -> "1186" 
+  "1185" -> "1202" 
+  "1201" -> "1221" 
+  "1216" -> "1229" 
+  "1295" -> "1306" 
+  "1137" -> "1146" 
+  "1137" -> "1148" 
+  "1148" -> "1155" 
+  "1151" -> "1147" 
+  "1157" -> "1167" 
+  "1162" -> "1156" 
+  "1179" -> "1178" 
+  "1186" -> "1195" 
+  "1189" -> "1185" 
+  "1202" -> "1210" 
+  "1205" -> "1201" 
+  "1218" -> "1216" 
+  "1229" -> "1235" 
+  "1229" -> "1253" 
+  "1296" -> "1305" 
+  "1302" -> "1295" 
+  "1138" -> "1137" 
+  "1146" -> "1306" 
+  "1152" -> "1151" 
+  "1159" -> "1157" 
+  "1163" -> "1162" 
+  "1180" -> "1184" 
+  "1184" -> "1179" 
+  "1191" -> "1189" 
+  "1207" -> "1205" 
+  "1219" -> "1225" 
+  "1222" -> "1218" 
+  "1233" -> "1300" 
+  "1297" -> "1301" 
+  "1301" -> "1296" 
+  "1303" -> "1302" 
+  "1139" -> "1138" 
+  "1153" -> "1152" 
+  "1161" -> "1159" 
+  "1164" -> "1176" 
+  "1171" -> "1163" 
+  "1181" -> "1180" 
+  "1192" -> "1200" 
+  "1197" -> "1191" 
+  "1208" -> "1214" 
+  "1211" -> "1207" 
+  "1221" -> "1219" 
+  "1223" -> "1222" 
+  "1234" -> "1240" 
+  "1238" -> "1233" 
+  "1250" -> "1265" 
+  "1298" -> "1297" 
+  "1305" -> "1303" 
+  "1140" -> "1144" 
+  "1144" -> "1139" 
+  "1155" -> "1153" 
+  "1165" -> "1170" 
+  "1168" -> "1164" 
+  "1172" -> "1171" 
+  "1183" -> "1181" 
+  "1193" -> "1192" 
+  "1198" -> "1197" 
+  "1210" -> "1208" 
+  "1212" -> "1211" 
+  "1225" -> "1223" 
+  "1235" -> "1234" 
+  "1239" -> "1247" 
+  "1244" -> "1238" 
+  "1251" -> "1257" 
+  "1254" -> "1250" 
+  "1260" -> "1271" 
+  "1260" -> "1300" 
+  "1300" -> "1298" 
+  "1141" -> "1140" 
+  "1167" -> "1165" 
+  "1170" -> "1168" 
+  "1173" -> "1177" 
+  "1177" -> "1172" 
+  "1195" -> "1193" 
+  "1200" -> "1198" 
+  "1214" -> "1212" 
+  "1240" -> "1243" 
+  "1243" -> "1239" 
+  "1245" -> "1244" 
   "1253" -> "1251" 
-  "1217" -> "1222" 
+  "1255" -> "1254" 
+  "1261" -> "1260" 
+  "1268" -> "1293" 
+  "1288" -> "1300" 
+  "1143" -> "1141" 
+  "1174" -> "1173" 
+  "1247" -> "1245" 
+  "1257" -> "1255" 
+  "1262" -> "1266" 
+  "1266" -> "1261" 
+  "1269" -> "1268" 
+  "1289" -> "1288" 
+  "1176" -> "1174" 
+  "1263" -> "1262" 
+  "1270" -> "1276" 
+  "1274" -> "1269" 
+  "1290" -> "1294" 
+  "1294" -> "1289" 
+  "1265" -> "1263" 
+  "1271" -> "1270" 
+  "1275" -> "1285" 
+  "1280" -> "1274" 
+  "1291" -> "1290" 
+  "1276" -> "1279" 
+  "1279" -> "1275" 
+  "1281" -> "1280" 
+  "1293" -> "1291" 
+  "1282" -> "1286" 
+  "1286" -> "1281" 
+  "1283" -> "1282" 
+  "1285" -> "1283" 
+  "1130" -> "1134" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/290-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/290-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/290-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/290-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,7 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17254" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>25</SUB>> ]
-"17252" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17255" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17254" -> "17255" 
-  "17252" -> "17254" 
+digraph "&lt;operator&gt;.assignmentPlus" {  
+"17209" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
+"17213" [label = <(METHOD_RETURN,ANY)> ]
+  "17209" -> "17213" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/291-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/291-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/291-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/291-cfg.dot	2023-06-07 19:35:21.397385031 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignment" {  
-"17565" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
-"17569" [label = <(METHOD_RETURN,ANY)> ]
-  "17565" -> "17569" 
+digraph "&lt;operator&gt;.notEquals" {  
+"17214" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
+"17218" [label = <(METHOD_RETURN,ANY)> ]
+  "17214" -> "17218" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/292-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/292-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/292-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/292-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_LE" {  
-"17570" [label = <(METHOD,DCHECK_LE)> ]
-"17574" [label = <(METHOD_RETURN,ANY)> ]
-  "17570" -> "17574" 
+digraph "find" {  
+"17219" [label = <(METHOD,find)> ]
+"17223" [label = <(METHOD_RETURN,ANY)> ]
+  "17219" -> "17223" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/293-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/293-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/293-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/293-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "strlen" {  
-"17575" [label = <(METHOD,strlen)> ]
-"17578" [label = <(METHOD_RETURN,ANY)> ]
-  "17575" -> "17578" 
+digraph "&lt;operator&gt;.fieldAccess" {  
+"17224" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
+"17228" [label = <(METHOD_RETURN,ANY)> ]
+  "17224" -> "17228" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/294-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/294-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/294-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/294-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addition" {  
-"17579" [label = <(METHOD,&lt;operator&gt;.addition)> ]
-"17583" [label = <(METHOD_RETURN,ANY)> ]
-  "17579" -> "17583" 
+digraph "&lt;operator&gt;.shiftLeft" {  
+"17229" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
+"17233" [label = <(METHOD_RETURN,ANY)> ]
+  "17229" -> "17233" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/295-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/295-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/295-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/295-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.notEquals" {  
-"17584" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
-"17588" [label = <(METHOD_RETURN,ANY)> ]
-  "17584" -> "17588" 
+digraph "LOG" {  
+"17234" [label = <(METHOD,LOG)> ]
+"17237" [label = <(METHOD_RETURN,ANY)> ]
+  "17234" -> "17237" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/296-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/296-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/296-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/296-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirection" {  
-"17589" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
-"17592" [label = <(METHOD_RETURN,ANY)> ]
-  "17589" -> "17592" 
+digraph "std::replace" {  
+"17238" [label = <(METHOD,std::replace)> ]
+"17245" [label = <(METHOD_RETURN,ANY)> ]
+  "17238" -> "17245" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/297-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/297-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/297-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/297-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "LIKELY" {  
-"17593" [label = <(METHOD,LIKELY)> ]
-"17596" [label = <(METHOD_RETURN,ANY)> ]
-  "17593" -> "17596" 
+digraph "begin" {  
+"17246" [label = <(METHOD,begin)> ]
+"17249" [label = <(METHOD_RETURN,ANY)> ]
+  "17246" -> "17249" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/298-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/298-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/298-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/298-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.equals" {  
-"17597" [label = <(METHOD,&lt;operator&gt;.equals)> ]
-"17601" [label = <(METHOD_RETURN,ANY)> ]
-  "17597" -> "17601" 
+digraph "end" {  
+"17250" [label = <(METHOD,end)> ]
+"17253" [label = <(METHOD_RETURN,ANY)> ]
+  "17250" -> "17253" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/299-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/299-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/299-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/299-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.and" {  
-"17602" [label = <(METHOD,&lt;operator&gt;.and)> ]
-"17606" [label = <(METHOD_RETURN,ANY)> ]
-  "17602" -> "17606" 
+digraph "h_klass" {  
+"17254" [label = <(METHOD,h_klass)> ]
+"17257" [label = <(METHOD_RETURN,ANY)> ]
+  "17254" -> "17257" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/3-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/3-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/3-cfg.dot	2023-06-07 19:35:14.647385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/3-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,1199 +1,5 @@
-digraph "&lt;global&gt;" {  
-"294" [label = <(UNKNOWN,),))<SUB>191</SUB>> ]
-"295" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(return_errors ? ::android::base::ERROR : ::android::base::FATAL)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>192</SUB>> ]
-"296" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>197</SUB>> ]
-"297" [label = <(UNKNOWN,},})<SUB>201</SUB>> ]
-"304" [label = <(UNKNOWN,),))<SUB>203</SUB>> ]
-"305" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>204</SUB>> ]
-"312" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>209</SUB>> ]
-"318" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>210</SUB>> ]
-"319" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>213</SUB>> ]
-"320" [label = <(UNKNOWN,},})<SUB>214</SUB>> ]
-"330" [label = <(UNKNOWN,),))<SUB>217</SUB>> ]
-"331" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>218</SUB>> ]
-"332" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>220</SUB>> ]
-"334" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>223</SUB>> ]
-"338" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>224</SUB>> ]
-"350" [label = <(UNKNOWN,if (is_static) {\012    method = c-&gt;FindDirectMethod(name, sig, pointer_size);\012 },if (is_static) {\012    method = c-&gt;FindDirectMethod(name, sig, pointer_size);\012 })<SUB>225</SUB>> ]
-"351" [label = <(UNKNOWN,else if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },else if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>227</SUB>> ]
-"352" [label = <(UNKNOWN,else {\012    method = c-&gt;FindVirtualMethod(name, sig, pointer_size);\012 if (method == nullptr) {\012 // No virtual method matching the signature.  Search declared\012 // private methods and constructors.\012      method = c-&gt;FindDeclaredDirectMethod(name, sig, pointer_size);\012 }\012 },else {\012    method = c-&gt;FindVirtualMethod(name, sig, pointer_size);\012 if (method == nullptr) {\012 // No virtual method matching the signature.  Search declared\012 // private methods and constructors.\012      method = c-&gt;FindDeclaredDirectMethod(name, sig, pointer_size);\012 }\012 })<SUB>229</SUB>> ]
-"353" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>237</SUB>> ]
-"354" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>241</SUB>> ]
-"355" [label = <(UNKNOWN,},})<SUB>242</SUB>> ]
-"361" [label = <(UNKNOWN,),))<SUB>244</SUB>> ]
-"362" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>245</SUB>> ]
-"363" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>248</SUB>> ]
-"364" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>252</SUB>> ]
-"366" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>256</SUB>> ]
-"383" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>258</SUB>> ]
-"384" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>262</SUB>> ]
-"385" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>263</SUB>> ]
-"386" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>271</SUB>> ]
-"387" [label = <(UNKNOWN,},})<SUB>272</SUB>> ]
-"397" [label = <(UNKNOWN,),))<SUB>275</SUB>> ]
-"398" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>276</SUB>> ]
-"400" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>278</SUB>> ]
-"419" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>280</SUB>> ]
-"421" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>283</SUB>> ]
-"426" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>285</SUB>> ]
-"435" [label = <(UNKNOWN,if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>286</SUB>> ]
-"436" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>289</SUB>> ]
-"437" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 })<SUB>292</SUB>> ]
-"439" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>307</SUB>> ]
-"440" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>310</SUB>> ]
-"441" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>313</SUB>> ]
-"442" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>319</SUB>> ]
-"443" [label = <(UNKNOWN,},})<SUB>320</SUB>> ]
-"453" [label = <(UNKNOWN,),))<SUB>323</SUB>> ]
-"454" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>324</SUB>> ]
-"455" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>326</SUB>> ]
-"456" [label = <(UNKNOWN,},})<SUB>329</SUB>> ]
-"465" [label = <(UNKNOWN,),))<SUB>332</SUB>> ]
-"466" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>333</SUB>> ]
-"467" [label = <(UNKNOWN,},})<SUB>337</SUB>> ]
-"476" [label = <(UNKNOWN,),))<SUB>339</SUB>> ]
-"477" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>340</SUB>> ]
-"496" [label = <(UNKNOWN,),))<SUB>410</SUB>> ]
-"497" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>411</SUB>> ]
-"498" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>413</SUB>> ]
-"499" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>418</SUB>> ]
-"500" [label = <(UNKNOWN,},})<SUB>419</SUB>> ]
-"13052" [label = <(UNKNOWN,},})<SUB>2564</SUB>> ]
-"13108" [label = <(UNKNOWN,),))<SUB>2579</SUB>> ]
-"13109" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2580</SUB>> ]
-"13110" [label = <(UNKNOWN,if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2582</SUB>> ]
-"13111" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2591</SUB>> ]
-"13112" [label = <(UNKNOWN,return array.Ptr();,return array.Ptr();)<SUB>2592</SUB>> ]
-"13113" [label = <(UNKNOWN,},})<SUB>2593</SUB>> ]
-"13286" [label = <(UNKNOWN,),))<SUB>2637</SUB>> ]
-"13287" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2638</SUB>> ]
-"13289" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2640</SUB>> ]
-"13299" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2641</SUB>> ]
-"13305" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2642</SUB>> ]
-"13313" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2643</SUB>> ]
-"13314" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2661</SUB>> ]
-"13315" [label = <(UNKNOWN,},})<SUB>2673</SUB>> ]
-"13528" [label = <(UNKNOWN,};,};)<SUB>2714</SUB>> ]
-"13530" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2716</SUB>> ]
-"14235" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2956</SUB>> ]
-"14525" [label = <(UNKNOWN,},})<SUB>3205</SUB>> ]
-"204" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>146</SUB>> ]
-"282" [label = <(UNKNOWN,),))<SUB>176</SUB>> ]
-"283" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>177</SUB>> ]
-"284" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>179</SUB>> ]
-"313" [label = <(NewHandle,hs.NewHandle(klass))<SUB>209</SUB>> ]
-"340" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>224</SUB>> ]
-"368" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>257</SUB>> ]
-"401" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>279</SUB>> ]
-"428" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>285</SUB>> ]
-"13291" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2640</SUB>> ]
-"13301" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2641</SUB>> ]
-"13307" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2642</SUB>> ]
-"13532" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2716</SUB>> ]
-"14237" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2956</SUB>> ]
-"25" [label = <(&lt;operator&gt;.assignment,kBadUtf8ReplacementChar[] = &quot;?&quot;)<SUB>66</SUB>> ]
-"314" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>209</SUB>> ]
-"341" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>224</SUB>> ]
-"369" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>257</SUB>> ]
-"376" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>257</SUB>> ]
-"402" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>279</SUB>> ]
-"405" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>279</SUB>> ]
-"429" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>285</SUB>> ]
-"13292" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2640</SUB>> ]
-"13308" [label = <(GetLength,array-&gt;GetLength())<SUB>2642</SUB>> ]
-"13537" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>2721</SUB>> ]
-"13540" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>2722</SUB>> ]
-"13543" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>2723</SUB>> ]
-"13546" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>2724</SUB>> ]
-"13549" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>2725</SUB>> ]
-"13552" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>2726</SUB>> ]
-"13555" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>2727</SUB>> ]
-"13558" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>2728</SUB>> ]
-"13561" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>2729</SUB>> ]
-"13564" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>2730</SUB>> ]
-"13567" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>2731</SUB>> ]
-"13570" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>2732</SUB>> ]
-"13573" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>2733</SUB>> ]
-"13576" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>2734</SUB>> ]
-"13579" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>2735</SUB>> ]
-"13582" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>2736</SUB>> ]
-"13585" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>2737</SUB>> ]
-"13588" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>2738</SUB>> ]
-"13591" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>2739</SUB>> ]
-"13594" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>2740</SUB>> ]
-"13597" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>2741</SUB>> ]
-"13600" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>2742</SUB>> ]
-"13603" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>2743</SUB>> ]
-"13606" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>2744</SUB>> ]
-"13609" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>2745</SUB>> ]
-"13612" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>2746</SUB>> ]
-"13615" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>2747</SUB>> ]
-"13618" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>2748</SUB>> ]
-"13621" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>2749</SUB>> ]
-"13624" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>2750</SUB>> ]
-"13627" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>2751</SUB>> ]
-"13630" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>2752</SUB>> ]
-"13633" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>2753</SUB>> ]
-"13636" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>2754</SUB>> ]
-"13639" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>2755</SUB>> ]
-"13642" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>2756</SUB>> ]
-"13645" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>2757</SUB>> ]
-"13648" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>2758</SUB>> ]
-"13651" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>2759</SUB>> ]
-"13654" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>2760</SUB>> ]
-"13657" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>2761</SUB>> ]
-"13660" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>2762</SUB>> ]
-"13663" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>2763</SUB>> ]
-"13666" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>2764</SUB>> ]
-"13669" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>2765</SUB>> ]
-"13672" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>2766</SUB>> ]
-"13675" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>2767</SUB>> ]
-"13678" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>2768</SUB>> ]
-"13681" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>2769</SUB>> ]
-"13684" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>2770</SUB>> ]
-"13687" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>2771</SUB>> ]
-"13690" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>2772</SUB>> ]
-"13693" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>2773</SUB>> ]
-"13696" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>2774</SUB>> ]
-"13699" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>2775</SUB>> ]
-"13702" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>2776</SUB>> ]
-"13705" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>2777</SUB>> ]
-"13708" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>2778</SUB>> ]
-"13711" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>2779</SUB>> ]
-"13714" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>2780</SUB>> ]
-"13717" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>2781</SUB>> ]
-"13720" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>2782</SUB>> ]
-"13723" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>2783</SUB>> ]
-"13726" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>2784</SUB>> ]
-"13729" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>2785</SUB>> ]
-"13732" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>2786</SUB>> ]
-"13735" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>2787</SUB>> ]
-"13738" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>2788</SUB>> ]
-"13741" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>2789</SUB>> ]
-"13744" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>2790</SUB>> ]
-"13747" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>2791</SUB>> ]
-"13750" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>2792</SUB>> ]
-"13753" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>2793</SUB>> ]
-"13756" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>2794</SUB>> ]
-"13759" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>2795</SUB>> ]
-"13762" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>2796</SUB>> ]
-"13765" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>2797</SUB>> ]
-"13768" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>2798</SUB>> ]
-"13771" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>2799</SUB>> ]
-"13774" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>2800</SUB>> ]
-"13777" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>2801</SUB>> ]
-"13780" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>2802</SUB>> ]
-"13783" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>2803</SUB>> ]
-"13786" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>2804</SUB>> ]
-"13789" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>2805</SUB>> ]
-"13792" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>2806</SUB>> ]
-"13795" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>2807</SUB>> ]
-"13798" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>2808</SUB>> ]
-"13801" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>2809</SUB>> ]
-"13804" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>2810</SUB>> ]
-"13807" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>2811</SUB>> ]
-"13810" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>2812</SUB>> ]
-"13813" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>2813</SUB>> ]
-"13816" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>2814</SUB>> ]
-"13819" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>2815</SUB>> ]
-"13822" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>2816</SUB>> ]
-"13825" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>2817</SUB>> ]
-"13828" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>2818</SUB>> ]
-"13831" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>2819</SUB>> ]
-"13834" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>2820</SUB>> ]
-"13837" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>2821</SUB>> ]
-"13840" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>2822</SUB>> ]
-"13843" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>2823</SUB>> ]
-"13846" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>2824</SUB>> ]
-"13849" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>2825</SUB>> ]
-"13852" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>2826</SUB>> ]
-"13855" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>2827</SUB>> ]
-"13858" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>2828</SUB>> ]
-"13861" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>2829</SUB>> ]
-"13864" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>2830</SUB>> ]
-"13867" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>2831</SUB>> ]
-"13870" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>2832</SUB>> ]
-"13873" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>2833</SUB>> ]
-"13876" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>2834</SUB>> ]
-"13879" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>2835</SUB>> ]
-"13882" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>2836</SUB>> ]
-"13885" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>2837</SUB>> ]
-"13888" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>2838</SUB>> ]
-"13891" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>2839</SUB>> ]
-"13894" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>2840</SUB>> ]
-"13897" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>2841</SUB>> ]
-"13900" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>2842</SUB>> ]
-"13903" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>2843</SUB>> ]
-"13906" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>2844</SUB>> ]
-"13909" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>2845</SUB>> ]
-"13912" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>2846</SUB>> ]
-"13915" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>2847</SUB>> ]
-"13918" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>2848</SUB>> ]
-"13921" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>2849</SUB>> ]
-"13924" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>2850</SUB>> ]
-"13927" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>2851</SUB>> ]
-"13930" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>2852</SUB>> ]
-"13933" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>2853</SUB>> ]
-"13936" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>2854</SUB>> ]
-"13939" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>2855</SUB>> ]
-"13942" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>2856</SUB>> ]
-"13945" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>2857</SUB>> ]
-"13948" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>2858</SUB>> ]
-"13951" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>2859</SUB>> ]
-"13954" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>2860</SUB>> ]
-"13957" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>2861</SUB>> ]
-"13960" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>2862</SUB>> ]
-"13963" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>2863</SUB>> ]
-"13966" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>2864</SUB>> ]
-"13969" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>2865</SUB>> ]
-"13972" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>2866</SUB>> ]
-"13975" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>2867</SUB>> ]
-"13978" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>2868</SUB>> ]
-"13981" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>2869</SUB>> ]
-"13984" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>2870</SUB>> ]
-"13987" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>2871</SUB>> ]
-"13990" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>2872</SUB>> ]
-"13993" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>2873</SUB>> ]
-"13996" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>2874</SUB>> ]
-"13999" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>2875</SUB>> ]
-"14002" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>2876</SUB>> ]
-"14005" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>2877</SUB>> ]
-"14008" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>2878</SUB>> ]
-"14011" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>2879</SUB>> ]
-"14014" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>2880</SUB>> ]
-"14017" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>2881</SUB>> ]
-"14020" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>2882</SUB>> ]
-"14023" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>2883</SUB>> ]
-"14026" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>2884</SUB>> ]
-"14029" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>2885</SUB>> ]
-"14032" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>2886</SUB>> ]
-"14035" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>2887</SUB>> ]
-"14038" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>2888</SUB>> ]
-"14041" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>2889</SUB>> ]
-"14044" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>2890</SUB>> ]
-"14047" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>2891</SUB>> ]
-"14050" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>2892</SUB>> ]
-"14053" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>2893</SUB>> ]
-"14056" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>2894</SUB>> ]
-"14059" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>2895</SUB>> ]
-"14062" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>2896</SUB>> ]
-"14065" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>2897</SUB>> ]
-"14068" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>2898</SUB>> ]
-"14071" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>2899</SUB>> ]
-"14074" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>2900</SUB>> ]
-"14077" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>2901</SUB>> ]
-"14080" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>2902</SUB>> ]
-"14083" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>2903</SUB>> ]
-"14086" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>2904</SUB>> ]
-"14089" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>2905</SUB>> ]
-"14092" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>2906</SUB>> ]
-"14095" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>2907</SUB>> ]
-"14098" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>2908</SUB>> ]
-"14101" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>2909</SUB>> ]
-"14104" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>2910</SUB>> ]
-"14107" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>2911</SUB>> ]
-"14110" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>2912</SUB>> ]
-"14113" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>2913</SUB>> ]
-"14116" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>2914</SUB>> ]
-"14119" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>2915</SUB>> ]
-"14122" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>2916</SUB>> ]
-"14125" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>2917</SUB>> ]
-"14128" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>2918</SUB>> ]
-"14131" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>2919</SUB>> ]
-"14134" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>2920</SUB>> ]
-"14137" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>2921</SUB>> ]
-"14140" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>2922</SUB>> ]
-"14143" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>2923</SUB>> ]
-"14146" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>2924</SUB>> ]
-"14149" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>2925</SUB>> ]
-"14152" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>2926</SUB>> ]
-"14155" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>2927</SUB>> ]
-"14158" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>2928</SUB>> ]
-"14161" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>2929</SUB>> ]
-"14164" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>2930</SUB>> ]
-"14167" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>2931</SUB>> ]
-"14170" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>2932</SUB>> ]
-"14173" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>2933</SUB>> ]
-"14176" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>2934</SUB>> ]
-"14179" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>2935</SUB>> ]
-"14182" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>2936</SUB>> ]
-"14185" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>2937</SUB>> ]
-"14188" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>2938</SUB>> ]
-"14191" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>2939</SUB>> ]
-"14194" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>2940</SUB>> ]
-"14197" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>2941</SUB>> ]
-"14200" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>2942</SUB>> ]
-"14203" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>2943</SUB>> ]
-"14206" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>2944</SUB>> ]
-"14209" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>2945</SUB>> ]
-"14212" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>2946</SUB>> ]
-"14215" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>2947</SUB>> ]
-"14218" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>2948</SUB>> ]
-"14221" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>2949</SUB>> ]
-"316" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>209</SUB>> ]
-"342" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>224</SUB>> ]
-"349" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>224</SUB>> ]
-"370" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>257</SUB>> ]
-"373" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>257</SUB>> ]
-"377" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>257</SUB>> ]
-"404" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>279</SUB>> ]
-"406" [label = <(Self,soa.Self())<SUB>279</SUB>> ]
-"410" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>279</SUB>> ]
-"430" [label = <(Runtime::Current,Runtime::Current())<SUB>285</SUB>> ]
-"434" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>285</SUB>> ]
-"13293" [label = <(Runtime::Current,Runtime::Current())<SUB>2640</SUB>> ]
-"13297" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2640</SUB>> ]
-"13309" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2642</SUB>> ]
-"13539" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2721</SUB>> ]
-"13542" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2722</SUB>> ]
-"13545" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2723</SUB>> ]
-"13548" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2724</SUB>> ]
-"13551" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2725</SUB>> ]
-"13554" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2726</SUB>> ]
-"13557" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2727</SUB>> ]
-"13560" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2728</SUB>> ]
-"13563" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2729</SUB>> ]
-"13566" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2730</SUB>> ]
-"13569" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2731</SUB>> ]
-"13572" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2732</SUB>> ]
-"13575" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2733</SUB>> ]
-"13578" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2734</SUB>> ]
-"13581" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2735</SUB>> ]
-"13584" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2736</SUB>> ]
-"13587" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2737</SUB>> ]
-"13590" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2738</SUB>> ]
-"13593" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2739</SUB>> ]
-"13596" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2740</SUB>> ]
-"13599" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2741</SUB>> ]
-"13602" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2742</SUB>> ]
-"13605" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2743</SUB>> ]
-"13608" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2744</SUB>> ]
-"13611" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2745</SUB>> ]
-"13614" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2746</SUB>> ]
-"13617" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2747</SUB>> ]
-"13620" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2748</SUB>> ]
-"13623" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2749</SUB>> ]
-"13626" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2750</SUB>> ]
-"13629" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2751</SUB>> ]
-"13632" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2752</SUB>> ]
-"13635" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2753</SUB>> ]
-"13638" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2754</SUB>> ]
-"13641" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2755</SUB>> ]
-"13644" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2756</SUB>> ]
-"13647" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2757</SUB>> ]
-"13650" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2758</SUB>> ]
-"13653" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2759</SUB>> ]
-"13656" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2760</SUB>> ]
-"13659" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2761</SUB>> ]
-"13662" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2762</SUB>> ]
-"13665" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2763</SUB>> ]
-"13668" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2764</SUB>> ]
-"13671" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2765</SUB>> ]
-"13674" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2766</SUB>> ]
-"13677" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2767</SUB>> ]
-"13680" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2768</SUB>> ]
-"13683" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2769</SUB>> ]
-"13686" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2770</SUB>> ]
-"13689" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2771</SUB>> ]
-"13692" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2772</SUB>> ]
-"13695" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2773</SUB>> ]
-"13698" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2774</SUB>> ]
-"13701" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2775</SUB>> ]
-"13704" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2776</SUB>> ]
-"13707" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2777</SUB>> ]
-"13710" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2778</SUB>> ]
-"13713" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2779</SUB>> ]
-"13716" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2780</SUB>> ]
-"13719" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2781</SUB>> ]
-"13722" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2782</SUB>> ]
-"13725" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2783</SUB>> ]
-"13728" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2784</SUB>> ]
-"13731" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2785</SUB>> ]
-"13734" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2786</SUB>> ]
-"13737" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2787</SUB>> ]
-"13740" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2788</SUB>> ]
-"13743" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2789</SUB>> ]
-"13746" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2790</SUB>> ]
-"13749" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2791</SUB>> ]
-"13752" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2792</SUB>> ]
-"13755" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2793</SUB>> ]
-"13758" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2794</SUB>> ]
-"13761" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2795</SUB>> ]
-"13764" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2796</SUB>> ]
-"13767" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2797</SUB>> ]
-"13770" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2798</SUB>> ]
-"13773" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2799</SUB>> ]
-"13776" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2800</SUB>> ]
-"13779" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2801</SUB>> ]
-"13782" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2802</SUB>> ]
-"13785" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2803</SUB>> ]
-"13788" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2804</SUB>> ]
-"13791" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2805</SUB>> ]
-"13794" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2806</SUB>> ]
-"13797" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2807</SUB>> ]
-"13800" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2808</SUB>> ]
-"13803" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2809</SUB>> ]
-"13806" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2810</SUB>> ]
-"13809" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2811</SUB>> ]
-"13812" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2812</SUB>> ]
-"13815" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2813</SUB>> ]
-"13818" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2814</SUB>> ]
-"13821" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2815</SUB>> ]
-"13824" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2816</SUB>> ]
-"13827" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2817</SUB>> ]
-"13830" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2818</SUB>> ]
-"13833" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2819</SUB>> ]
-"13836" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2820</SUB>> ]
-"13839" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2821</SUB>> ]
-"13842" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2822</SUB>> ]
-"13845" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2823</SUB>> ]
-"13848" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2824</SUB>> ]
-"13851" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2825</SUB>> ]
-"13854" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2826</SUB>> ]
-"13857" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2827</SUB>> ]
-"13860" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2828</SUB>> ]
-"13863" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2829</SUB>> ]
-"13866" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2830</SUB>> ]
-"13869" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2831</SUB>> ]
-"13872" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2832</SUB>> ]
-"13875" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2833</SUB>> ]
-"13878" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2834</SUB>> ]
-"13881" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2835</SUB>> ]
-"13884" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2836</SUB>> ]
-"13887" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2837</SUB>> ]
-"13890" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2838</SUB>> ]
-"13893" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2839</SUB>> ]
-"13896" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2840</SUB>> ]
-"13899" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2841</SUB>> ]
-"13902" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2842</SUB>> ]
-"13905" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2843</SUB>> ]
-"13908" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2844</SUB>> ]
-"13911" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2845</SUB>> ]
-"13914" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2846</SUB>> ]
-"13917" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2847</SUB>> ]
-"13920" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2848</SUB>> ]
-"13923" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2849</SUB>> ]
-"13926" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2850</SUB>> ]
-"13929" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2851</SUB>> ]
-"13932" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2852</SUB>> ]
-"13935" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2853</SUB>> ]
-"13938" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2854</SUB>> ]
-"13941" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2855</SUB>> ]
-"13944" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2856</SUB>> ]
-"13947" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2857</SUB>> ]
-"13950" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2858</SUB>> ]
-"13953" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2859</SUB>> ]
-"13956" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>2860</SUB>> ]
-"13959" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>2861</SUB>> ]
-"13962" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>2862</SUB>> ]
-"13965" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>2863</SUB>> ]
-"13968" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>2864</SUB>> ]
-"13971" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>2865</SUB>> ]
-"13974" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>2866</SUB>> ]
-"13977" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>2867</SUB>> ]
-"13980" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>2868</SUB>> ]
-"13983" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>2869</SUB>> ]
-"13986" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>2870</SUB>> ]
-"13989" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>2871</SUB>> ]
-"13992" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>2872</SUB>> ]
-"13995" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>2873</SUB>> ]
-"13998" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>2874</SUB>> ]
-"14001" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>2875</SUB>> ]
-"14004" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>2876</SUB>> ]
-"14007" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>2877</SUB>> ]
-"14010" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>2878</SUB>> ]
-"14013" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>2879</SUB>> ]
-"14016" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>2880</SUB>> ]
-"14019" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>2881</SUB>> ]
-"14022" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>2882</SUB>> ]
-"14025" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>2883</SUB>> ]
-"14028" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>2884</SUB>> ]
-"14031" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>2885</SUB>> ]
-"14034" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>2886</SUB>> ]
-"14037" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>2887</SUB>> ]
-"14040" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>2888</SUB>> ]
-"14043" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>2889</SUB>> ]
-"14046" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>2890</SUB>> ]
-"14049" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>2891</SUB>> ]
-"14052" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>2892</SUB>> ]
-"14055" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>2893</SUB>> ]
-"14058" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>2894</SUB>> ]
-"14061" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>2895</SUB>> ]
-"14064" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>2896</SUB>> ]
-"14067" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>2897</SUB>> ]
-"14070" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>2898</SUB>> ]
-"14073" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>2899</SUB>> ]
-"14076" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>2900</SUB>> ]
-"14079" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>2901</SUB>> ]
-"14082" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>2902</SUB>> ]
-"14085" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>2903</SUB>> ]
-"14088" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>2904</SUB>> ]
-"14091" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>2905</SUB>> ]
-"14094" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>2906</SUB>> ]
-"14097" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>2907</SUB>> ]
-"14100" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>2908</SUB>> ]
-"14103" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>2909</SUB>> ]
-"14106" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>2910</SUB>> ]
-"14109" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>2911</SUB>> ]
-"14112" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>2912</SUB>> ]
-"14115" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>2913</SUB>> ]
-"14118" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>2914</SUB>> ]
-"14121" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>2915</SUB>> ]
-"14124" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>2916</SUB>> ]
-"14127" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>2917</SUB>> ]
-"14130" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>2918</SUB>> ]
-"14133" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>2919</SUB>> ]
-"14136" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>2920</SUB>> ]
-"14139" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>2921</SUB>> ]
-"14142" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>2922</SUB>> ]
-"14145" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>2923</SUB>> ]
-"14148" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>2924</SUB>> ]
-"14151" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>2925</SUB>> ]
-"14154" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>2926</SUB>> ]
-"14157" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>2927</SUB>> ]
-"14160" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>2928</SUB>> ]
-"14163" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>2929</SUB>> ]
-"14166" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>2930</SUB>> ]
-"14169" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>2931</SUB>> ]
-"14172" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>2932</SUB>> ]
-"14175" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>2933</SUB>> ]
-"14178" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2934</SUB>> ]
-"14181" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2935</SUB>> ]
-"14184" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2936</SUB>> ]
-"14187" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>2937</SUB>> ]
-"14190" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>2938</SUB>> ]
-"14193" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>2939</SUB>> ]
-"14196" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>2940</SUB>> ]
-"14199" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>2941</SUB>> ]
-"14202" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>2942</SUB>> ]
-"14205" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>2943</SUB>> ]
-"14208" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>2944</SUB>> ]
-"14211" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>2945</SUB>> ]
-"14214" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>2946</SUB>> ]
-"14217" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>2947</SUB>> ]
-"14220" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>2948</SUB>> ]
-"14223" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>2949</SUB>> ]
-"343" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>224</SUB>> ]
-"372" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>257</SUB>> ]
-"375" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>257</SUB>> ]
-"378" [label = <(Runtime::Current,Runtime::Current())<SUB>257</SUB>> ]
-"382" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>257</SUB>> ]
-"407" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>279</SUB>> ]
-"411" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>279</SUB>> ]
-"431" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>285</SUB>> ]
-"13294" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2640</SUB>> ]
-"13311" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2642</SUB>> ]
-"344" [label = <(Runtime::Current,Runtime::Current())<SUB>224</SUB>> ]
-"348" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>224</SUB>> ]
-"379" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>257</SUB>> ]
-"409" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>279</SUB>> ]
-"412" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>279</SUB>> ]
-"415" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>279</SUB>> ]
-"433" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>285</SUB>> ]
-"13296" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2640</SUB>> ]
-"345" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>224</SUB>> ]
-"381" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>257</SUB>> ]
-"414" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>279</SUB>> ]
-"417" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>279</SUB>> ]
-"347" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>224</SUB>> ]
-"20" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"14575" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "294" -> "295" 
-  "295" -> "296" 
-  "296" -> "297" 
-  "297" -> "304" 
-  "304" -> "305" 
-  "305" -> "316" 
-  "312" -> "318" 
-  "318" -> "319" 
-  "319" -> "320" 
-  "320" -> "330" 
-  "330" -> "331" 
-  "331" -> "332" 
-  "332" -> "334" 
-  "334" -> "347" 
-  "338" -> "350" 
-  "350" -> "351" 
-  "351" -> "352" 
-  "352" -> "353" 
-  "353" -> "354" 
-  "354" -> "355" 
-  "355" -> "361" 
-  "361" -> "362" 
-  "362" -> "363" 
-  "363" -> "364" 
-  "364" -> "372" 
-  "366" -> "383" 
-  "383" -> "384" 
-  "384" -> "385" 
-  "385" -> "386" 
-  "386" -> "387" 
-  "387" -> "397" 
-  "397" -> "398" 
-  "398" -> "404" 
-  "400" -> "419" 
-  "419" -> "421" 
-  "421" -> "433" 
-  "426" -> "435" 
-  "435" -> "436" 
-  "436" -> "437" 
-  "437" -> "439" 
-  "439" -> "440" 
-  "440" -> "441" 
-  "441" -> "442" 
-  "442" -> "443" 
-  "443" -> "453" 
-  "453" -> "454" 
-  "454" -> "455" 
-  "455" -> "456" 
-  "456" -> "465" 
-  "465" -> "466" 
-  "466" -> "467" 
-  "467" -> "476" 
-  "476" -> "477" 
-  "477" -> "496" 
-  "496" -> "497" 
-  "497" -> "498" 
-  "498" -> "499" 
-  "499" -> "500" 
-  "500" -> "13052" 
-  "13052" -> "13108" 
-  "13108" -> "13109" 
-  "13109" -> "13110" 
-  "13110" -> "13111" 
-  "13111" -> "13112" 
-  "13112" -> "13113" 
-  "13113" -> "13286" 
-  "13286" -> "13287" 
-  "13287" -> "13296" 
-  "13289" -> "13301" 
-  "13299" -> "13311" 
-  "13305" -> "13313" 
-  "13313" -> "13314" 
-  "13314" -> "13315" 
-  "13315" -> "13528" 
-  "13528" -> "13539" 
-  "13530" -> "14237" 
-  "14235" -> "14525" 
-  "14525" -> "14575" 
-  "204" -> "282" 
-  "282" -> "283" 
-  "283" -> "284" 
-  "284" -> "294" 
-  "313" -> "312" 
-  "340" -> "338" 
-  "368" -> "366" 
-  "401" -> "400" 
-  "428" -> "426" 
-  "13291" -> "13289" 
-  "13301" -> "13299" 
-  "13307" -> "13305" 
-  "13532" -> "13530" 
-  "14237" -> "14235" 
-  "25" -> "204" 
-  "314" -> "313" 
-  "341" -> "340" 
-  "369" -> "381" 
-  "376" -> "368" 
-  "402" -> "409" 
-  "405" -> "401" 
-  "429" -> "428" 
-  "13292" -> "13291" 
-  "13308" -> "13307" 
-  "13537" -> "13542" 
-  "13540" -> "13545" 
-  "13543" -> "13548" 
-  "13546" -> "13551" 
-  "13549" -> "13554" 
-  "13552" -> "13557" 
-  "13555" -> "13560" 
-  "13558" -> "13563" 
-  "13561" -> "13566" 
-  "13564" -> "13569" 
-  "13567" -> "13572" 
-  "13570" -> "13575" 
-  "13573" -> "13578" 
-  "13576" -> "13581" 
-  "13579" -> "13584" 
-  "13582" -> "13587" 
-  "13585" -> "13590" 
-  "13588" -> "13593" 
-  "13591" -> "13596" 
-  "13594" -> "13599" 
-  "13597" -> "13602" 
-  "13600" -> "13605" 
-  "13603" -> "13608" 
-  "13606" -> "13611" 
-  "13609" -> "13614" 
-  "13612" -> "13617" 
-  "13615" -> "13620" 
-  "13618" -> "13623" 
-  "13621" -> "13626" 
-  "13624" -> "13629" 
-  "13627" -> "13632" 
-  "13630" -> "13635" 
-  "13633" -> "13638" 
-  "13636" -> "13641" 
-  "13639" -> "13644" 
-  "13642" -> "13647" 
-  "13645" -> "13650" 
-  "13648" -> "13653" 
-  "13651" -> "13656" 
-  "13654" -> "13659" 
-  "13657" -> "13662" 
-  "13660" -> "13665" 
-  "13663" -> "13668" 
-  "13666" -> "13671" 
-  "13669" -> "13674" 
-  "13672" -> "13677" 
-  "13675" -> "13680" 
-  "13678" -> "13683" 
-  "13681" -> "13686" 
-  "13684" -> "13689" 
-  "13687" -> "13692" 
-  "13690" -> "13695" 
-  "13693" -> "13698" 
-  "13696" -> "13701" 
-  "13699" -> "13704" 
-  "13702" -> "13707" 
-  "13705" -> "13710" 
-  "13708" -> "13713" 
-  "13711" -> "13716" 
-  "13714" -> "13719" 
-  "13717" -> "13722" 
-  "13720" -> "13725" 
-  "13723" -> "13728" 
-  "13726" -> "13731" 
-  "13729" -> "13734" 
-  "13732" -> "13737" 
-  "13735" -> "13740" 
-  "13738" -> "13743" 
-  "13741" -> "13746" 
-  "13744" -> "13749" 
-  "13747" -> "13752" 
-  "13750" -> "13755" 
-  "13753" -> "13758" 
-  "13756" -> "13761" 
-  "13759" -> "13764" 
-  "13762" -> "13767" 
-  "13765" -> "13770" 
-  "13768" -> "13773" 
-  "13771" -> "13776" 
-  "13774" -> "13779" 
-  "13777" -> "13782" 
-  "13780" -> "13785" 
-  "13783" -> "13788" 
-  "13786" -> "13791" 
-  "13789" -> "13794" 
-  "13792" -> "13797" 
-  "13795" -> "13800" 
-  "13798" -> "13803" 
-  "13801" -> "13806" 
-  "13804" -> "13809" 
-  "13807" -> "13812" 
-  "13810" -> "13815" 
-  "13813" -> "13818" 
-  "13816" -> "13821" 
-  "13819" -> "13824" 
-  "13822" -> "13827" 
-  "13825" -> "13830" 
-  "13828" -> "13833" 
-  "13831" -> "13836" 
-  "13834" -> "13839" 
-  "13837" -> "13842" 
-  "13840" -> "13845" 
-  "13843" -> "13848" 
-  "13846" -> "13851" 
-  "13849" -> "13854" 
-  "13852" -> "13857" 
-  "13855" -> "13860" 
-  "13858" -> "13863" 
-  "13861" -> "13866" 
-  "13864" -> "13869" 
-  "13867" -> "13872" 
-  "13870" -> "13875" 
-  "13873" -> "13878" 
-  "13876" -> "13881" 
-  "13879" -> "13884" 
-  "13882" -> "13887" 
-  "13885" -> "13890" 
-  "13888" -> "13893" 
-  "13891" -> "13896" 
-  "13894" -> "13899" 
-  "13897" -> "13902" 
-  "13900" -> "13905" 
-  "13903" -> "13908" 
-  "13906" -> "13911" 
-  "13909" -> "13914" 
-  "13912" -> "13917" 
-  "13915" -> "13920" 
-  "13918" -> "13923" 
-  "13921" -> "13926" 
-  "13924" -> "13929" 
-  "13927" -> "13932" 
-  "13930" -> "13935" 
-  "13933" -> "13938" 
-  "13936" -> "13941" 
-  "13939" -> "13944" 
-  "13942" -> "13947" 
-  "13945" -> "13950" 
-  "13948" -> "13953" 
-  "13951" -> "13956" 
-  "13954" -> "13959" 
-  "13957" -> "13962" 
-  "13960" -> "13965" 
-  "13963" -> "13968" 
-  "13966" -> "13971" 
-  "13969" -> "13974" 
-  "13972" -> "13977" 
-  "13975" -> "13980" 
-  "13978" -> "13983" 
-  "13981" -> "13986" 
-  "13984" -> "13989" 
-  "13987" -> "13992" 
-  "13990" -> "13995" 
-  "13993" -> "13998" 
-  "13996" -> "14001" 
-  "13999" -> "14004" 
-  "14002" -> "14007" 
-  "14005" -> "14010" 
-  "14008" -> "14013" 
-  "14011" -> "14016" 
-  "14014" -> "14019" 
-  "14017" -> "14022" 
-  "14020" -> "14025" 
-  "14023" -> "14028" 
-  "14026" -> "14031" 
-  "14029" -> "14034" 
-  "14032" -> "14037" 
-  "14035" -> "14040" 
-  "14038" -> "14043" 
-  "14041" -> "14046" 
-  "14044" -> "14049" 
-  "14047" -> "14052" 
-  "14050" -> "14055" 
-  "14053" -> "14058" 
-  "14056" -> "14061" 
-  "14059" -> "14064" 
-  "14062" -> "14067" 
-  "14065" -> "14070" 
-  "14068" -> "14073" 
-  "14071" -> "14076" 
-  "14074" -> "14079" 
-  "14077" -> "14082" 
-  "14080" -> "14085" 
-  "14083" -> "14088" 
-  "14086" -> "14091" 
-  "14089" -> "14094" 
-  "14092" -> "14097" 
-  "14095" -> "14100" 
-  "14098" -> "14103" 
-  "14101" -> "14106" 
-  "14104" -> "14109" 
-  "14107" -> "14112" 
-  "14110" -> "14115" 
-  "14113" -> "14118" 
-  "14116" -> "14121" 
-  "14119" -> "14124" 
-  "14122" -> "14127" 
-  "14125" -> "14130" 
-  "14128" -> "14133" 
-  "14131" -> "14136" 
-  "14134" -> "14139" 
-  "14137" -> "14142" 
-  "14140" -> "14145" 
-  "14143" -> "14148" 
-  "14146" -> "14151" 
-  "14149" -> "14154" 
-  "14152" -> "14157" 
-  "14155" -> "14160" 
-  "14158" -> "14163" 
-  "14161" -> "14166" 
-  "14164" -> "14169" 
-  "14167" -> "14172" 
-  "14170" -> "14175" 
-  "14173" -> "14178" 
-  "14176" -> "14181" 
-  "14179" -> "14184" 
-  "14182" -> "14187" 
-  "14185" -> "14190" 
-  "14188" -> "14193" 
-  "14191" -> "14196" 
-  "14194" -> "14199" 
-  "14197" -> "14202" 
-  "14200" -> "14205" 
-  "14203" -> "14208" 
-  "14206" -> "14211" 
-  "14209" -> "14214" 
-  "14212" -> "14217" 
-  "14215" -> "14220" 
-  "14218" -> "14223" 
-  "14221" -> "13532" 
-  "316" -> "314" 
-  "342" -> "349" 
-  "349" -> "341" 
-  "370" -> "375" 
-  "373" -> "369" 
-  "377" -> "376" 
-  "404" -> "402" 
-  "406" -> "414" 
-  "410" -> "405" 
-  "430" -> "434" 
-  "434" -> "429" 
-  "13293" -> "13297" 
-  "13297" -> "13292" 
-  "13309" -> "13308" 
-  "13539" -> "13537" 
-  "13542" -> "13540" 
-  "13545" -> "13543" 
-  "13548" -> "13546" 
-  "13551" -> "13549" 
-  "13554" -> "13552" 
-  "13557" -> "13555" 
-  "13560" -> "13558" 
-  "13563" -> "13561" 
-  "13566" -> "13564" 
-  "13569" -> "13567" 
-  "13572" -> "13570" 
-  "13575" -> "13573" 
-  "13578" -> "13576" 
-  "13581" -> "13579" 
-  "13584" -> "13582" 
-  "13587" -> "13585" 
-  "13590" -> "13588" 
-  "13593" -> "13591" 
-  "13596" -> "13594" 
-  "13599" -> "13597" 
-  "13602" -> "13600" 
-  "13605" -> "13603" 
-  "13608" -> "13606" 
-  "13611" -> "13609" 
-  "13614" -> "13612" 
-  "13617" -> "13615" 
-  "13620" -> "13618" 
-  "13623" -> "13621" 
-  "13626" -> "13624" 
-  "13629" -> "13627" 
-  "13632" -> "13630" 
-  "13635" -> "13633" 
-  "13638" -> "13636" 
-  "13641" -> "13639" 
-  "13644" -> "13642" 
-  "13647" -> "13645" 
-  "13650" -> "13648" 
-  "13653" -> "13651" 
-  "13656" -> "13654" 
-  "13659" -> "13657" 
-  "13662" -> "13660" 
-  "13665" -> "13663" 
-  "13668" -> "13666" 
-  "13671" -> "13669" 
-  "13674" -> "13672" 
-  "13677" -> "13675" 
-  "13680" -> "13678" 
-  "13683" -> "13681" 
-  "13686" -> "13684" 
-  "13689" -> "13687" 
-  "13692" -> "13690" 
-  "13695" -> "13693" 
-  "13698" -> "13696" 
-  "13701" -> "13699" 
-  "13704" -> "13702" 
-  "13707" -> "13705" 
-  "13710" -> "13708" 
-  "13713" -> "13711" 
-  "13716" -> "13714" 
-  "13719" -> "13717" 
-  "13722" -> "13720" 
-  "13725" -> "13723" 
-  "13728" -> "13726" 
-  "13731" -> "13729" 
-  "13734" -> "13732" 
-  "13737" -> "13735" 
-  "13740" -> "13738" 
-  "13743" -> "13741" 
-  "13746" -> "13744" 
-  "13749" -> "13747" 
-  "13752" -> "13750" 
-  "13755" -> "13753" 
-  "13758" -> "13756" 
-  "13761" -> "13759" 
-  "13764" -> "13762" 
-  "13767" -> "13765" 
-  "13770" -> "13768" 
-  "13773" -> "13771" 
-  "13776" -> "13774" 
-  "13779" -> "13777" 
-  "13782" -> "13780" 
-  "13785" -> "13783" 
-  "13788" -> "13786" 
-  "13791" -> "13789" 
-  "13794" -> "13792" 
-  "13797" -> "13795" 
-  "13800" -> "13798" 
-  "13803" -> "13801" 
-  "13806" -> "13804" 
-  "13809" -> "13807" 
-  "13812" -> "13810" 
-  "13815" -> "13813" 
-  "13818" -> "13816" 
-  "13821" -> "13819" 
-  "13824" -> "13822" 
-  "13827" -> "13825" 
-  "13830" -> "13828" 
-  "13833" -> "13831" 
-  "13836" -> "13834" 
-  "13839" -> "13837" 
-  "13842" -> "13840" 
-  "13845" -> "13843" 
-  "13848" -> "13846" 
-  "13851" -> "13849" 
-  "13854" -> "13852" 
-  "13857" -> "13855" 
-  "13860" -> "13858" 
-  "13863" -> "13861" 
-  "13866" -> "13864" 
-  "13869" -> "13867" 
-  "13872" -> "13870" 
-  "13875" -> "13873" 
-  "13878" -> "13876" 
-  "13881" -> "13879" 
-  "13884" -> "13882" 
-  "13887" -> "13885" 
-  "13890" -> "13888" 
-  "13893" -> "13891" 
-  "13896" -> "13894" 
-  "13899" -> "13897" 
-  "13902" -> "13900" 
-  "13905" -> "13903" 
-  "13908" -> "13906" 
-  "13911" -> "13909" 
-  "13914" -> "13912" 
-  "13917" -> "13915" 
-  "13920" -> "13918" 
-  "13923" -> "13921" 
-  "13926" -> "13924" 
-  "13929" -> "13927" 
-  "13932" -> "13930" 
-  "13935" -> "13933" 
-  "13938" -> "13936" 
-  "13941" -> "13939" 
-  "13944" -> "13942" 
-  "13947" -> "13945" 
-  "13950" -> "13948" 
-  "13953" -> "13951" 
-  "13956" -> "13954" 
-  "13959" -> "13957" 
-  "13962" -> "13960" 
-  "13965" -> "13963" 
-  "13968" -> "13966" 
-  "13971" -> "13969" 
-  "13974" -> "13972" 
-  "13977" -> "13975" 
-  "13980" -> "13978" 
-  "13983" -> "13981" 
-  "13986" -> "13984" 
-  "13989" -> "13987" 
-  "13992" -> "13990" 
-  "13995" -> "13993" 
-  "13998" -> "13996" 
-  "14001" -> "13999" 
-  "14004" -> "14002" 
-  "14007" -> "14005" 
-  "14010" -> "14008" 
-  "14013" -> "14011" 
-  "14016" -> "14014" 
-  "14019" -> "14017" 
-  "14022" -> "14020" 
-  "14025" -> "14023" 
-  "14028" -> "14026" 
-  "14031" -> "14029" 
-  "14034" -> "14032" 
-  "14037" -> "14035" 
-  "14040" -> "14038" 
-  "14043" -> "14041" 
-  "14046" -> "14044" 
-  "14049" -> "14047" 
-  "14052" -> "14050" 
-  "14055" -> "14053" 
-  "14058" -> "14056" 
-  "14061" -> "14059" 
-  "14064" -> "14062" 
-  "14067" -> "14065" 
-  "14070" -> "14068" 
-  "14073" -> "14071" 
-  "14076" -> "14074" 
-  "14079" -> "14077" 
-  "14082" -> "14080" 
-  "14085" -> "14083" 
-  "14088" -> "14086" 
-  "14091" -> "14089" 
-  "14094" -> "14092" 
-  "14097" -> "14095" 
-  "14100" -> "14098" 
-  "14103" -> "14101" 
-  "14106" -> "14104" 
-  "14109" -> "14107" 
-  "14112" -> "14110" 
-  "14115" -> "14113" 
-  "14118" -> "14116" 
-  "14121" -> "14119" 
-  "14124" -> "14122" 
-  "14127" -> "14125" 
-  "14130" -> "14128" 
-  "14133" -> "14131" 
-  "14136" -> "14134" 
-  "14139" -> "14137" 
-  "14142" -> "14140" 
-  "14145" -> "14143" 
-  "14148" -> "14146" 
-  "14151" -> "14149" 
-  "14154" -> "14152" 
-  "14157" -> "14155" 
-  "14160" -> "14158" 
-  "14163" -> "14161" 
-  "14166" -> "14164" 
-  "14169" -> "14167" 
-  "14172" -> "14170" 
-  "14175" -> "14173" 
-  "14178" -> "14176" 
-  "14181" -> "14179" 
-  "14184" -> "14182" 
-  "14187" -> "14185" 
-  "14190" -> "14188" 
-  "14193" -> "14191" 
-  "14196" -> "14194" 
-  "14199" -> "14197" 
-  "14202" -> "14200" 
-  "14205" -> "14203" 
-  "14208" -> "14206" 
-  "14211" -> "14209" 
-  "14214" -> "14212" 
-  "14217" -> "14215" 
-  "14220" -> "14218" 
-  "14223" -> "14221" 
-  "343" -> "342" 
-  "372" -> "370" 
-  "375" -> "373" 
-  "378" -> "382" 
-  "382" -> "377" 
-  "407" -> "406" 
-  "411" -> "410" 
-  "431" -> "430" 
-  "13294" -> "13293" 
-  "13311" -> "13309" 
-  "344" -> "348" 
-  "348" -> "343" 
-  "379" -> "378" 
-  "409" -> "407" 
-  "412" -> "417" 
-  "415" -> "411" 
-  "433" -> "431" 
-  "13296" -> "13294" 
-  "345" -> "344" 
-  "381" -> "379" 
-  "414" -> "412" 
-  "417" -> "415" 
-  "347" -> "345" 
-  "20" -> "25" 
+digraph "ReportInvalidJNINativeMethod" {  
+"90" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>106</SUB>> ]
+"97" [label = <(METHOD_RETURN,void)<SUB>106</SUB>> ]
+  "90" -> "97" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/30-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/30-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/30-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/30-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,27 +1,31 @@
-digraph "ThrowNew" {  
-"1265" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>539</SUB>> ]
-"1284" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>540</SUB>> ]
-"1285" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>540</SUB>> ]
-"1270" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>539</SUB>> ]
-"1271" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>539</SUB>> ]
-"1275" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;c == null&quot;))<SUB>539</SUB>> ]
-"1282" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>539</SUB>> ]
-"1276" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>539</SUB>> ]
-"1277" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>539</SUB>> ]
-"1279" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>539</SUB>> ]
-"1260" [label = <(METHOD,ThrowNew)<SUB>538</SUB>> ]
-"1290" [label = <(METHOD_RETURN,jint)<SUB>538</SUB>> ]
-  "1265" -> "1271" 
-  "1265" -> "1285" 
-  "1284" -> "1290" 
-  "1285" -> "1284" 
-  "1270" -> "1277" 
-  "1270" -> "1285" 
-  "1271" -> "1270" 
-  "1275" -> "1282" 
-  "1282" -> "1290" 
-  "1276" -> "1275" 
-  "1277" -> "1279" 
-  "1279" -> "1276" 
-  "1260" -> "1265" 
+digraph "ExceptionOccurred" {  
+"1312" [label = <(soa,soa(env))<SUB>502</SUB>> ]
+"1315" [label = <(&lt;operator&gt;.assignment,* exception = soa.Self()-&gt;GetException())<SUB>503</SUB>> ]
+"1324" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>504</SUB>> ]
+"1317" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>503</SUB>> ]
+"1325" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>504</SUB>> ]
+"1318" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>503</SUB>> ]
+"1326" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>504</SUB>> ]
+"1319" [label = <(Self,soa.Self())<SUB>503</SUB>> ]
+"1323" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>503</SUB>> ]
+"1327" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>504</SUB>> ]
+"1320" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>503</SUB>> ]
+"1329" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>504</SUB>> ]
+"1322" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>503</SUB>> ]
+"1308" [label = <(METHOD,ExceptionOccurred)<SUB>501</SUB>> ]
+"1332" [label = <(METHOD_RETURN,jthrowable)<SUB>501</SUB>> ]
+  "1312" -> "1322" 
+  "1315" -> "1329" 
+  "1324" -> "1332" 
+  "1317" -> "1315" 
+  "1325" -> "1324" 
+  "1318" -> "1317" 
+  "1326" -> "1325" 
+  "1319" -> "1323" 
+  "1323" -> "1318" 
+  "1327" -> "1326" 
+  "1320" -> "1319" 
+  "1329" -> "1327" 
+  "1322" -> "1320" 
+  "1308" -> "1312" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/300-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/300-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/300-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/300-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "good" {  
-"17607" [label = <(METHOD,good)> ]
-"17611" [label = <(METHOD_RETURN,ANY)> ]
-  "17607" -> "17611" 
+digraph "NewHandle" {  
+"17258" [label = <(METHOD,NewHandle)> ]
+"17262" [label = <(METHOD_RETURN,ANY)> ]
+  "17258" -> "17262" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/301-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/301-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/301-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/301-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignmentPlus" {  
-"17612" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
-"17616" [label = <(METHOD_RETURN,ANY)> ]
-  "17612" -> "17616" 
+digraph "GetImagePointerSize" {  
+"17263" [label = <(METHOD,GetImagePointerSize)> ]
+"17266" [label = <(METHOD_RETURN,ANY)> ]
+  "17263" -> "17266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/302-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/302-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/302-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/302-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.lessThan" {  
-"17617" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
-"17621" [label = <(METHOD_RETURN,ANY)> ]
-  "17617" -> "17621" 
+digraph "&lt;operator&gt;.indirectFieldAccess" {  
+"17267" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
+"17271" [label = <(METHOD_RETURN,ANY)> ]
+  "17267" -> "17271" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/303-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/303-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/303-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/303-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.cast" {  
-"17622" [label = <(METHOD,&lt;operator&gt;.cast)> ]
-"17626" [label = <(METHOD_RETURN,ANY)> ]
-  "17622" -> "17626" 
+digraph "GetClassLinker" {  
+"17272" [label = <(METHOD,GetClassLinker)> ]
+"17275" [label = <(METHOD_RETURN,ANY)> ]
+  "17272" -> "17275" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/304-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/304-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/304-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/304-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.subtraction" {  
-"17627" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
-"17631" [label = <(METHOD_RETURN,ANY)> ]
-  "17627" -> "17631" 
+digraph "Runtime::Current" {  
+"17276" [label = <(METHOD,Runtime::Current)> ]
+"17279" [label = <(METHOD_RETURN,ANY)> ]
+  "17276" -> "17279" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/305-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/305-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/305-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/305-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.conditional" {  
-"17632" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
-"17637" [label = <(METHOD_RETURN,ANY)> ]
-  "17632" -> "17637" 
+digraph "&lt;operator&gt;.greaterThan" {  
+"17280" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
+"17284" [label = <(METHOD_RETURN,ANY)> ]
+  "17280" -> "17284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/306-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/306-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/306-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/306-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "bad" {  
-"17638" [label = <(METHOD,bad)> ]
-"17640" [label = <(METHOD_RETURN,ANY)> ]
-  "17638" -> "17640" 
+digraph "&lt;operator&gt;.lessThan" {  
+"17285" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
+"17289" [label = <(METHOD_RETURN,ANY)> ]
+  "17285" -> "17289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/307-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/307-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/307-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/307-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalAnd" {  
-"17641" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
-"17645" [label = <(METHOD_RETURN,ANY)> ]
-  "17641" -> "17645" 
+digraph "GetSystemClassLoader" {  
+"17290" [label = <(METHOD,GetSystemClassLoader)> ]
+"17293" [label = <(METHOD_RETURN,ANY)> ]
+  "17290" -> "17293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/308-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/308-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/308-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/308-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.fieldAccess" {  
-"17646" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
-"17650" [label = <(METHOD_RETURN,ANY)> ]
-  "17646" -> "17650" 
+digraph "c" {  
+"17294" [label = <(METHOD,c)> ]
+"17298" [label = <(METHOD_RETURN,ANY)> ]
+  "17294" -> "17298" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/309-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/309-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/309-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/309-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "is_ascii" {  
-"17651" [label = <(METHOD,is_ascii)> ]
-"17653" [label = <(METHOD_RETURN,ANY)> ]
-  "17651" -> "17653" 
+digraph "Self" {  
+"17299" [label = <(METHOD,Self)> ]
+"17302" [label = <(METHOD_RETURN,ANY)> ]
+  "17299" -> "17302" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/31-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/31-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/31-cfg.dot	2023-06-07 19:35:14.667385856 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/31-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,23 +1,11 @@
-digraph "ExceptionCheck" {  
-"1295" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>544</SUB>> ]
-"1296" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>544</SUB>> ]
-"1297" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending())<SUB>544</SUB>> ]
-"1298" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self-&gt;IsExceptionPending)<SUB>544</SUB>> ]
-"1299" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>544</SUB>> ]
-"1304" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>544</SUB>> ]
-"1300" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>544</SUB>> ]
-"1303" [label = <(FIELD_IDENTIFIER,self,self)<SUB>544</SUB>> ]
-"1301" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>544</SUB>> ]
-"1292" [label = <(METHOD,ExceptionCheck)<SUB>543</SUB>> ]
-"1307" [label = <(METHOD_RETURN,jboolean)<SUB>543</SUB>> ]
-  "1295" -> "1307" 
-  "1296" -> "1295" 
-  "1297" -> "1296" 
-  "1298" -> "1297" 
-  "1299" -> "1304" 
-  "1304" -> "1298" 
-  "1300" -> "1303" 
-  "1303" -> "1299" 
-  "1301" -> "1300" 
-  "1292" -> "1301" 
+digraph "FatalError" {  
+"1338" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>508</SUB>> ]
+"1339" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>508</SUB>> ]
+"1340" [label = <(LOG,LOG(FATAL))<SUB>508</SUB>> ]
+"1334" [label = <(METHOD,FatalError)<SUB>507</SUB>> ]
+"1344" [label = <(METHOD_RETURN,void)<SUB>507</SUB>> ]
+  "1338" -> "1344" 
+  "1339" -> "1338" 
+  "1340" -> "1339" 
+  "1334" -> "1340" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/310-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/310-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/310-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/310-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectIndexAccess" {  
-"17654" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
-"17658" [label = <(METHOD_RETURN,ANY)> ]
-  "17654" -> "17658" 
+digraph "&lt;operator&gt;.cast" {  
+"17303" [label = <(METHOD,&lt;operator&gt;.cast)> ]
+"17307" [label = <(METHOD_RETURN,ANY)> ]
+  "17303" -> "17307" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/311-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/311-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/311-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/311-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "find" {  
-"17659" [label = <(METHOD,find)> ]
-"17663" [label = <(METHOD_RETURN,ANY)> ]
-  "17659" -> "17663" 
+digraph "CHECK_NON_NULL_ARGUMENT" {  
+"17308" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>304</SUB>> ]
+"17311" [label = <(METHOD_RETURN,ANY)> ]
+  "17308" -> "17311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/312-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/312-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/312-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/312-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.shiftLeft" {  
-"17664" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
-"17668" [label = <(METHOD_RETURN,ANY)> ]
-  "17664" -> "17668" 
+digraph "UNLIKELY" {  
+"17312" [label = <(METHOD,UNLIKELY)> ]
+"17315" [label = <(METHOD_RETURN,ANY)> ]
+  "17312" -> "17315" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/313-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/313-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/313-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/313-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "LOG" {  
-"17669" [label = <(METHOD,LOG)> ]
-"17672" [label = <(METHOD_RETURN,ANY)> ]
-  "17669" -> "17672" 
+digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
+"17316" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
+"17321" [label = <(METHOD_RETURN,ANY)> ]
+  "17316" -> "17321" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/314-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/314-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/314-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/314-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "std::replace" {  
-"17673" [label = <(METHOD,std::replace)> ]
-"17680" [label = <(METHOD_RETURN,ANY)> ]
-  "17673" -> "17680" 
+digraph "descriptor" {  
+"17322" [label = <(METHOD,descriptor)> ]
+"17325" [label = <(METHOD_RETURN,ANY)> ]
+  "17322" -> "17325" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/315-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/315-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/315-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/315-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "begin" {  
-"17681" [label = <(METHOD,begin)> ]
-"17684" [label = <(METHOD_RETURN,ANY)> ]
-  "17681" -> "17684" 
+digraph "NormalizeJniClassDescriptor" {  
+"17326" [label = <(METHOD,NormalizeJniClassDescriptor)> ]
+"17329" [label = <(METHOD_RETURN,ANY)> ]
+  "17326" -> "17329" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/316-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/316-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/316-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/316-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "end" {  
-"17685" [label = <(METHOD,end)> ]
-"17688" [label = <(METHOD_RETURN,ANY)> ]
-  "17685" -> "17688" 
+digraph "soa" {  
+"17330" [label = <(METHOD,soa)> ]
+"17333" [label = <(METHOD_RETURN,ANY)> ]
+  "17330" -> "17333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/317-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/317-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/317-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/317-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "h_klass" {  
-"17689" [label = <(METHOD,h_klass)> ]
-"17692" [label = <(METHOD_RETURN,ANY)> ]
-  "17689" -> "17692" 
+digraph "IsStarted" {  
+"17334" [label = <(METHOD,IsStarted)> ]
+"17337" [label = <(METHOD_RETURN,ANY)> ]
+  "17334" -> "17337" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/318-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/318-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/318-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/318-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandle" {  
-"17693" [label = <(METHOD,NewHandle)> ]
-"17697" [label = <(METHOD_RETURN,ANY)> ]
-  "17693" -> "17697" 
+digraph "class_loader" {  
+"17338" [label = <(METHOD,class_loader)> ]
+"17341" [label = <(METHOD_RETURN,ANY)> ]
+  "17338" -> "17341" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/319-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/319-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/319-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/319-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetImagePointerSize" {  
-"17698" [label = <(METHOD,GetImagePointerSize)> ]
-"17701" [label = <(METHOD_RETURN,ANY)> ]
-  "17698" -> "17701" 
+digraph "FindClass" {  
+"17342" [label = <(METHOD,FindClass)> ]
+"17346" [label = <(METHOD_RETURN,ANY)> ]
+  "17342" -> "17346" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/32-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/32-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/32-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/32-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,19 +1,24 @@
-digraph "ExceptionClear" {  
-"1313" [label = <(soa,soa(env))<SUB>548</SUB>> ]
-"1315" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>549</SUB>> ]
-"1316" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>549</SUB>> ]
-"1317" [label = <(Self,soa.Self())<SUB>549</SUB>> ]
-"1321" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>549</SUB>> ]
-"1318" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>549</SUB>> ]
-"1320" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>549</SUB>> ]
-"1309" [label = <(METHOD,ExceptionClear)<SUB>547</SUB>> ]
-"1322" [label = <(METHOD_RETURN,void)<SUB>547</SUB>> ]
-  "1313" -> "1320" 
-  "1315" -> "1322" 
-  "1316" -> "1315" 
-  "1317" -> "1321" 
-  "1321" -> "1316" 
-  "1318" -> "1317" 
-  "1320" -> "1318" 
-  "1309" -> "1313" 
+digraph "PushLocalFrame" {  
+"1351" [label = <(soa,soa(env))<SUB>513</SUB>> ]
+"1363" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>517</SUB>> ]
+"1369" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>518</SUB>> ]
+"1354" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>514</SUB>> ]
+"1364" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>517</SUB>> ]
+"1355" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>514</SUB>> ]
+"1361" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>515</SUB>> ]
+"1365" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>517</SUB>> ]
+"1367" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>517</SUB>> ]
+"1346" [label = <(METHOD,PushLocalFrame)<SUB>511</SUB>> ]
+"1371" [label = <(METHOD_RETURN,jint)<SUB>511</SUB>> ]
+  "1351" -> "1355" 
+  "1363" -> "1369" 
+  "1369" -> "1371" 
+  "1354" -> "1361" 
+  "1354" -> "1365" 
+  "1364" -> "1363" 
+  "1355" -> "1354" 
+  "1361" -> "1371" 
+  "1365" -> "1367" 
+  "1367" -> "1364" 
+  "1346" -> "1351" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/320-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/320-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/320-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/320-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectFieldAccess" {  
-"17702" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
-"17706" [label = <(METHOD_RETURN,ANY)> ]
-  "17702" -> "17706" 
+digraph "c_str" {  
+"17347" [label = <(METHOD,c_str)> ]
+"17350" [label = <(METHOD_RETURN,ANY)> ]
+  "17347" -> "17350" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/321-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/321-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/321-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/321-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLinker" {  
-"17707" [label = <(METHOD,GetClassLinker)> ]
-"17710" [label = <(METHOD_RETURN,ANY)> ]
-  "17707" -> "17710" 
+digraph "FindSystemClass" {  
+"17351" [label = <(METHOD,FindSystemClass)> ]
+"17356" [label = <(METHOD_RETURN,ANY)> ]
+  "17351" -> "17356" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/322-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/322-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/322-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/322-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Runtime::Current" {  
-"17711" [label = <(METHOD,Runtime::Current)> ]
-"17714" [label = <(METHOD_RETURN,ANY)> ]
-  "17711" -> "17714" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
+"17357" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
+"17362" [label = <(METHOD_RETURN,ANY)> ]
+  "17357" -> "17362" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/323-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/323-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/323-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/323-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterThan" {  
-"17715" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
-"17719" [label = <(METHOD_RETURN,ANY)> ]
-  "17715" -> "17719" 
+digraph "jni::EncodeArtMethod" {  
+"17363" [label = <(METHOD,jni::EncodeArtMethod)> ]
+"17367" [label = <(METHOD_RETURN,ANY)> ]
+  "17363" -> "17367" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/324-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/324-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/324-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/324-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetSystemClassLoader" {  
-"17720" [label = <(METHOD,GetSystemClassLoader)> ]
-"17723" [label = <(METHOD_RETURN,ANY)> ]
-  "17720" -> "17723" 
+digraph "ArtMethod::FromReflectedMethod" {  
+"17368" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
+"17373" [label = <(METHOD_RETURN,ANY)> ]
+  "17368" -> "17373" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/325-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/325-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/325-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/325-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "c" {  
-"17724" [label = <(METHOD,c)> ]
-"17728" [label = <(METHOD_RETURN,ANY)> ]
-  "17724" -> "17728" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
+"17374" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
+"17379" [label = <(METHOD_RETURN,ANY)> ]
+  "17374" -> "17379" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/326-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/326-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/326-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/326-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Self" {  
-"17729" [label = <(METHOD,Self)> ]
-"17732" [label = <(METHOD_RETURN,ANY)> ]
-  "17729" -> "17732" 
+digraph "GetClass" {  
+"17380" [label = <(METHOD,GetClass)> ]
+"17383" [label = <(METHOD_RETURN,ANY)> ]
+  "17380" -> "17383" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/327-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/327-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/327-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/327-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT" {  
-"17733" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>385</SUB>> ]
-"17736" [label = <(METHOD_RETURN,ANY)> ]
-  "17733" -> "17736" 
+digraph "mirror::Field::StaticClass" {  
+"17384" [label = <(METHOD,mirror::Field::StaticClass)> ]
+"17387" [label = <(METHOD_RETURN,ANY)> ]
+  "17384" -> "17387" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/328-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/328-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/328-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/328-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "UNLIKELY" {  
-"17737" [label = <(METHOD,UNLIKELY)> ]
-"17740" [label = <(METHOD_RETURN,ANY)> ]
-  "17737" -> "17740" 
+digraph "::DownCast" {  
+"17388" [label = <(METHOD,::DownCast)> ]
+"17392" [label = <(METHOD_RETURN,ANY)> ]
+  "17388" -> "17392" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/329-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/329-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/329-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/329-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
-"17741" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
-"17746" [label = <(METHOD_RETURN,ANY)> ]
-  "17741" -> "17746" 
+digraph "jni::EncodeArtField" {  
+"17393" [label = <(METHOD,jni::EncodeArtField)> ]
+"17397" [label = <(METHOD_RETURN,ANY)> ]
+  "17393" -> "17397" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/33-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/33-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/33-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/33-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,240 +1,51 @@
-digraph "ExceptionDescribe" {  
-"1328" [label = <(soa,soa(env))<SUB>553</SUB>> ]
-"1341" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>560</SUB>> ]
-"1350" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>561</SUB>> ]
-"1372" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>563</SUB>> ]
-"1379" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>564</SUB>> ]
-"1395" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>566</SUB>> ]
-"1410" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>567</SUB>> ]
-"1489" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>579</SUB>> ]
-"1331" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>556</SUB>> ]
-"1342" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>560</SUB>> ]
-"1345" [label = <(hs,hs(soa.Self()))<SUB>560</SUB>> ]
-"1351" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>561</SUB>> ]
-"1356" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>561</SUB>> ]
-"1373" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>563</SUB>> ]
-"1380" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>564</SUB>> ]
-"1383" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>564</SUB>> ]
-"1396" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>566</SUB>> ]
-"1399" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>566</SUB>> ]
-"1412" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>567</SUB>> ]
-"1423" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>568</SUB>> ]
-"1490" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>579</SUB>> ]
-"1496" [label = <(Get,old_exception.Get())<SUB>579</SUB>> ]
-"1332" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>556</SUB>> ]
-"1340" [label = <(RETURN,return;,return;)<SUB>557</SUB>> ]
-"1346" [label = <(Self,soa.Self())<SUB>560</SUB>> ]
-"1353" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>561</SUB>> ]
-"1357" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>562</SUB>> ]
-"1374" [label = <(Self,soa.Self())<SUB>563</SUB>> ]
-"1378" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>563</SUB>> ]
-"1385" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>565</SUB>> ]
-"1401" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>566</SUB>> ]
-"1413" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>567</SUB>> ]
-"1416" [label = <(get,exception_class.get())<SUB>567</SUB>> ]
-"1427" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>569</SUB>> ]
-"1491" [label = <(Self,soa.Self())<SUB>579</SUB>> ]
-"1495" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>579</SUB>> ]
-"1497" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>579</SUB>> ]
-"1333" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>556</SUB>> ]
-"1347" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>560</SUB>> ]
-"1355" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>561</SUB>> ]
-"1358" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>562</SUB>> ]
-"1365" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>562</SUB>> ]
-"1375" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>563</SUB>> ]
-"1386" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>565</SUB>> ]
-"1391" [label = <(Get,old_exception.Get())<SUB>565</SUB>> ]
-"1402" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>566</SUB>> ]
-"1405" [label = <(get,exception.get())<SUB>566</SUB>> ]
-"1415" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>567</SUB>> ]
-"1417" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>567</SUB>> ]
-"1428" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>569</SUB>> ]
-"1432" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>570</SUB>> ]
-"1444" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>572</SUB>> ]
-"1492" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>579</SUB>> ]
-"1499" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>579</SUB>> ]
-"1334" [label = <(Self,soa.Self())<SUB>556</SUB>> ]
-"1338" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>556</SUB>> ]
-"1349" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>560</SUB>> ]
-"1359" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>562</SUB>> ]
-"1362" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>562</SUB>> ]
-"1366" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>562</SUB>> ]
-"1377" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>563</SUB>> ]
-"1387" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>565</SUB>> ]
-"1392" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>565</SUB>> ]
-"1404" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>566</SUB>> ]
-"1406" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>566</SUB>> ]
-"1419" [label = <(FIELD_IDENTIFIER,get,get)<SUB>567</SUB>> ]
-"1429" [label = <(LOG,LOG(WARNING))<SUB>569</SUB>> ]
-"1433" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>570</SUB>> ]
-"1438" [label = <(Get,old_exception.Get())<SUB>570</SUB>> ]
-"1445" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>572</SUB>> ]
-"1448" [label = <(get,exception.get())<SUB>572</SUB>> ]
-"1454" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>573</SUB>> ]
-"1494" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>579</SUB>> ]
-"1335" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>556</SUB>> ]
-"1361" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>562</SUB>> ]
-"1364" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>562</SUB>> ]
-"1367" [label = <(Self,soa.Self())<SUB>562</SUB>> ]
-"1371" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>562</SUB>> ]
-"1389" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>565</SUB>> ]
-"1394" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>565</SUB>> ]
-"1408" [label = <(FIELD_IDENTIFIER,get,get)<SUB>566</SUB>> ]
-"1434" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>570</SUB>> ]
-"1437" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>570</SUB>> ]
-"1439" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>570</SUB>> ]
-"1447" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>572</SUB>> ]
-"1449" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>572</SUB>> ]
-"1455" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>573</SUB>> ]
-"1462" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>574</SUB>> ]
-"1482" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>576</SUB>> ]
-"1337" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>556</SUB>> ]
-"1368" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>562</SUB>> ]
-"1441" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>570</SUB>> ]
-"1451" [label = <(FIELD_IDENTIFIER,get,get)<SUB>572</SUB>> ]
-"1456" [label = <(Self,soa.Self())<SUB>573</SUB>> ]
-"1460" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>573</SUB>> ]
-"1463" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>574</SUB>> ]
-"1483" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>576</SUB>> ]
-"1370" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>562</SUB>> ]
-"1457" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>573</SUB>> ]
-"1464" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>574</SUB>> ]
-"1468" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>574</SUB>> ]
-"1484" [label = <(Self,soa.Self())<SUB>576</SUB>> ]
-"1488" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>576</SUB>> ]
-"1459" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>573</SUB>> ]
-"1465" [label = <(LOG,LOG(WARNING))<SUB>574</SUB>> ]
-"1469" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>574</SUB>> ]
-"1474" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>574</SUB>> ]
-"1485" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>576</SUB>> ]
-"1470" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>574</SUB>> ]
-"1473" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>574</SUB>> ]
-"1475" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>574</SUB>> ]
-"1487" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>576</SUB>> ]
-"1476" [label = <(Self,soa.Self())<SUB>574</SUB>> ]
-"1480" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>574</SUB>> ]
-"1477" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>574</SUB>> ]
-"1479" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>574</SUB>> ]
-"1324" [label = <(METHOD,ExceptionDescribe)<SUB>552</SUB>> ]
-"1500" [label = <(METHOD_RETURN,void)<SUB>552</SUB>> ]
-  "1328" -> "1337" 
-  "1341" -> "1355" 
-  "1350" -> "1377" 
-  "1372" -> "1380" 
-  "1379" -> "1396" 
-  "1395" -> "1415" 
-  "1410" -> "1423" 
-  "1489" -> "1500" 
-  "1331" -> "1340" 
-  "1331" -> "1342" 
-  "1342" -> "1349" 
-  "1345" -> "1341" 
-  "1351" -> "1361" 
-  "1356" -> "1350" 
-  "1373" -> "1372" 
-  "1380" -> "1389" 
-  "1383" -> "1379" 
-  "1396" -> "1404" 
-  "1399" -> "1395" 
-  "1412" -> "1410" 
-  "1423" -> "1429" 
-  "1423" -> "1447" 
-  "1490" -> "1499" 
-  "1496" -> "1489" 
-  "1332" -> "1331" 
-  "1340" -> "1500" 
-  "1346" -> "1345" 
-  "1353" -> "1351" 
-  "1357" -> "1356" 
-  "1374" -> "1378" 
-  "1378" -> "1373" 
-  "1385" -> "1383" 
-  "1401" -> "1399" 
-  "1413" -> "1419" 
-  "1416" -> "1412" 
-  "1427" -> "1494" 
-  "1491" -> "1495" 
-  "1495" -> "1490" 
-  "1497" -> "1496" 
-  "1333" -> "1332" 
-  "1347" -> "1346" 
-  "1355" -> "1353" 
-  "1358" -> "1370" 
-  "1365" -> "1357" 
-  "1375" -> "1374" 
-  "1386" -> "1394" 
-  "1391" -> "1385" 
-  "1402" -> "1408" 
-  "1405" -> "1401" 
-  "1415" -> "1413" 
-  "1417" -> "1416" 
-  "1428" -> "1434" 
-  "1432" -> "1427" 
-  "1444" -> "1459" 
-  "1492" -> "1491" 
-  "1499" -> "1497" 
-  "1334" -> "1338" 
-  "1338" -> "1333" 
-  "1349" -> "1347" 
-  "1359" -> "1364" 
-  "1362" -> "1358" 
-  "1366" -> "1365" 
-  "1377" -> "1375" 
-  "1387" -> "1386" 
-  "1392" -> "1391" 
-  "1404" -> "1402" 
+digraph "PopLocalFrame" {  
+"1378" [label = <(soa,soa(env))<SUB>522</SUB>> ]
+"1380" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>523</SUB>> ]
+"1397" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>524</SUB>> ]
+"1404" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>525</SUB>> ]
+"1381" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>523</SUB>> ]
+"1388" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>523</SUB>> ]
+"1398" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>524</SUB>> ]
+"1405" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>525</SUB>> ]
+"1382" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>523</SUB>> ]
+"1389" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>523</SUB>> ]
+"1399" [label = <(Env,soa.Env())<SUB>524</SUB>> ]
+"1403" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>524</SUB>> ]
+"1406" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>525</SUB>> ]
+"1384" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>523</SUB>> ]
+"1390" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>523</SUB>> ]
+"1393" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>523</SUB>> ]
+"1400" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>524</SUB>> ]
+"1407" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>525</SUB>> ]
+"1386" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>523</SUB>> ]
+"1392" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>523</SUB>> ]
+"1395" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>523</SUB>> ]
+"1402" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>524</SUB>> ]
+"1409" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>525</SUB>> ]
+"1373" [label = <(METHOD,PopLocalFrame)<SUB>521</SUB>> ]
+"1412" [label = <(METHOD_RETURN,jobject)<SUB>521</SUB>> ]
+  "1378" -> "1386" 
+  "1380" -> "1402" 
+  "1397" -> "1409" 
+  "1404" -> "1412" 
+  "1381" -> "1392" 
+  "1388" -> "1380" 
+  "1398" -> "1397" 
+  "1405" -> "1404" 
+  "1382" -> "1381" 
+  "1389" -> "1388" 
+  "1399" -> "1403" 
+  "1403" -> "1398" 
   "1406" -> "1405" 
-  "1419" -> "1417" 
-  "1429" -> "1428" 
-  "1433" -> "1441" 
-  "1438" -> "1432" 
-  "1445" -> "1451" 
-  "1448" -> "1444" 
-  "1454" -> "1465" 
-  "1454" -> "1494" 
-  "1494" -> "1492" 
-  "1335" -> "1334" 
-  "1361" -> "1359" 
-  "1364" -> "1362" 
-  "1367" -> "1371" 
-  "1371" -> "1366" 
-  "1389" -> "1387" 
-  "1394" -> "1392" 
-  "1408" -> "1406" 
-  "1434" -> "1437" 
-  "1437" -> "1433" 
-  "1439" -> "1438" 
-  "1447" -> "1445" 
-  "1449" -> "1448" 
-  "1455" -> "1454" 
-  "1462" -> "1487" 
-  "1482" -> "1494" 
-  "1337" -> "1335" 
-  "1368" -> "1367" 
-  "1441" -> "1439" 
-  "1451" -> "1449" 
-  "1456" -> "1460" 
-  "1460" -> "1455" 
-  "1463" -> "1462" 
-  "1483" -> "1482" 
-  "1370" -> "1368" 
-  "1457" -> "1456" 
-  "1464" -> "1470" 
-  "1468" -> "1463" 
-  "1484" -> "1488" 
-  "1488" -> "1483" 
-  "1459" -> "1457" 
-  "1465" -> "1464" 
-  "1469" -> "1479" 
-  "1474" -> "1468" 
-  "1485" -> "1484" 
-  "1470" -> "1473" 
-  "1473" -> "1469" 
-  "1475" -> "1474" 
-  "1487" -> "1485" 
-  "1476" -> "1480" 
-  "1480" -> "1475" 
-  "1477" -> "1476" 
-  "1479" -> "1477" 
-  "1324" -> "1328" 
+  "1384" -> "1382" 
+  "1390" -> "1395" 
+  "1393" -> "1389" 
+  "1400" -> "1399" 
+  "1407" -> "1406" 
+  "1386" -> "1384" 
+  "1392" -> "1390" 
+  "1395" -> "1393" 
+  "1402" -> "1400" 
+  "1409" -> "1407" 
+  "1373" -> "1378" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/330-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/330-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/330-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/330-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "descriptor" {  
-"17747" [label = <(METHOD,descriptor)> ]
-"17750" [label = <(METHOD_RETURN,ANY)> ]
-  "17747" -> "17750" 
+digraph "GetArtField" {  
+"17398" [label = <(METHOD,GetArtField)> ]
+"17401" [label = <(METHOD_RETURN,ANY)> ]
+  "17398" -> "17401" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/331-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/331-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/331-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/331-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "NormalizeJniClassDescriptor" {  
-"17751" [label = <(METHOD,NormalizeJniClassDescriptor)> ]
-"17754" [label = <(METHOD_RETURN,ANY)> ]
-  "17751" -> "17754" 
+digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
+"17402" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
+"17407" [label = <(METHOD_RETURN,ANY)> ]
+  "17402" -> "17407" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/332-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/332-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/332-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/332-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "soa" {  
-"17755" [label = <(METHOD,soa)> ]
-"17758" [label = <(METHOD_RETURN,ANY)> ]
-  "17755" -> "17758" 
+digraph "jni::DecodeArtMethod" {  
+"17408" [label = <(METHOD,jni::DecodeArtMethod)> ]
+"17412" [label = <(METHOD_RETURN,ANY)> ]
+  "17408" -> "17412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/333-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/333-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/333-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/333-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsStarted" {  
-"17759" [label = <(METHOD,IsStarted)> ]
-"17762" [label = <(METHOD_RETURN,ANY)> ]
-  "17759" -> "17762" 
+digraph "&lt;operator&gt;.multiplication" {  
+"17413" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
+"17417" [label = <(METHOD_RETURN,ANY)> ]
+  "17413" -> "17417" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/334-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/334-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/334-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/334-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "class_loader" {  
-"17763" [label = <(METHOD,class_loader)> ]
-"17766" [label = <(METHOD_RETURN,ANY)> ]
-  "17763" -> "17766" 
+digraph "DCHECK_EQ" {  
+"17418" [label = <(METHOD,DCHECK_EQ)> ]
+"17422" [label = <(METHOD_RETURN,ANY)> ]
+  "17418" -> "17422" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/335-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/335-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/335-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/335-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "FindClass" {  
-"17767" [label = <(METHOD,FindClass)> ]
-"17771" [label = <(METHOD_RETURN,ANY)> ]
-  "17767" -> "17771" 
+digraph "DCHECK" {  
+"17423" [label = <(METHOD,DCHECK)> ]
+"17426" [label = <(METHOD_RETURN,ANY)> ]
+  "17423" -> "17426" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/336-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/336-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/336-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/336-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "c_str" {  
-"17772" [label = <(METHOD,c_str)> ]
-"17775" [label = <(METHOD_RETURN,ANY)> ]
-  "17772" -> "17775" 
+digraph "&lt;operator&gt;.logicalNot" {  
+"17427" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
+"17430" [label = <(METHOD_RETURN,ANY)> ]
+  "17427" -> "17430" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/337-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/337-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/337-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/337-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "FindSystemClass" {  
-"17776" [label = <(METHOD,FindSystemClass)> ]
-"17781" [label = <(METHOD_RETURN,ANY)> ]
-  "17776" -> "17781" 
+digraph "IsActiveTransaction" {  
+"17431" [label = <(METHOD,IsActiveTransaction)> ]
+"17434" [label = <(METHOD_RETURN,ANY)> ]
+  "17431" -> "17434" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/338-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/338-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/338-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/338-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
-"17782" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
-"17787" [label = <(METHOD_RETURN,ANY)> ]
-  "17782" -> "17787" 
+digraph "IsConstructor" {  
+"17435" [label = <(METHOD,IsConstructor)> ]
+"17438" [label = <(METHOD_RETURN,ANY)> ]
+  "17435" -> "17438" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/339-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/339-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/339-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/339-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtMethod" {  
-"17788" [label = <(METHOD,jni::EncodeArtMethod)> ]
-"17792" [label = <(METHOD_RETURN,ANY)> ]
-  "17788" -> "17792" 
+digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"17439" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"17444" [label = <(METHOD_RETURN,ANY)> ]
+  "17439" -> "17444" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/34-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/34-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/34-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/34-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,31 +1,11 @@
-digraph "ExceptionOccurred" {  
-"1506" [label = <(soa,soa(env))<SUB>583</SUB>> ]
-"1509" [label = <(&lt;operator&gt;.assignment,* exception = soa.Self()-&gt;GetException())<SUB>584</SUB>> ]
-"1518" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>585</SUB>> ]
-"1511" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>584</SUB>> ]
-"1519" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>585</SUB>> ]
-"1512" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>584</SUB>> ]
-"1520" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>585</SUB>> ]
-"1513" [label = <(Self,soa.Self())<SUB>584</SUB>> ]
-"1517" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>584</SUB>> ]
-"1521" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>585</SUB>> ]
-"1514" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>584</SUB>> ]
-"1523" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>585</SUB>> ]
-"1516" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>584</SUB>> ]
-"1502" [label = <(METHOD,ExceptionOccurred)<SUB>582</SUB>> ]
-"1526" [label = <(METHOD_RETURN,jthrowable)<SUB>582</SUB>> ]
-  "1506" -> "1516" 
-  "1509" -> "1523" 
-  "1518" -> "1526" 
-  "1511" -> "1509" 
-  "1519" -> "1518" 
-  "1512" -> "1511" 
-  "1520" -> "1519" 
-  "1513" -> "1517" 
-  "1517" -> "1512" 
-  "1521" -> "1520" 
-  "1514" -> "1513" 
-  "1523" -> "1521" 
-  "1516" -> "1514" 
-  "1502" -> "1506" 
+digraph "EnsureLocalCapacity" {  
+"1419" [label = <(soa,soa(env))<SUB>530</SUB>> ]
+"1421" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>531</SUB>> ]
+"1422" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>531</SUB>> ]
+"1414" [label = <(METHOD,EnsureLocalCapacity)<SUB>528</SUB>> ]
+"1426" [label = <(METHOD_RETURN,jint)<SUB>528</SUB>> ]
+  "1419" -> "1422" 
+  "1421" -> "1426" 
+  "1422" -> "1421" 
+  "1414" -> "1419" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/340-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/340-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/340-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/340-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "ArtMethod::FromReflectedMethod" {  
-"17793" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
-"17798" [label = <(METHOD_RETURN,ANY)> ]
-  "17793" -> "17798" 
+digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"17445" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"17450" [label = <(METHOD_RETURN,ANY)> ]
+  "17445" -> "17450" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/341-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/341-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/341-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/341-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
-"17799" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
-"17804" [label = <(METHOD_RETURN,ANY)> ]
-  "17799" -> "17804" 
+digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
+"17451" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
+"17456" [label = <(METHOD_RETURN,ANY)> ]
+  "17451" -> "17456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/342-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/342-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/342-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/342-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetClass" {  
-"17805" [label = <(METHOD,GetClass)> ]
-"17808" [label = <(METHOD_RETURN,ANY)> ]
-  "17805" -> "17808" 
+digraph "jni::DecodeArtField" {  
+"17457" [label = <(METHOD,jni::DecodeArtField)> ]
+"17461" [label = <(METHOD_RETURN,ANY)> ]
+  "17457" -> "17461" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/343-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/343-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/343-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/343-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Field::StaticClass" {  
-"17809" [label = <(METHOD,mirror::Field::StaticClass)> ]
-"17812" [label = <(METHOD_RETURN,ANY)> ]
-  "17809" -> "17812" 
+digraph "&lt;operator&gt;.bracketedPrimary" {  
+"17462" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
+"17465" [label = <(METHOD_RETURN,ANY)> ]
+  "17462" -> "17465" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/344-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/344-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/344-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/344-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "::DownCast" {  
-"17813" [label = <(METHOD,::DownCast)> ]
-"17817" [label = <(METHOD_RETURN,ANY)> ]
-  "17813" -> "17817" 
+digraph "&lt;operator&gt;.expressionList" {  
+"17466" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
+"17471" [label = <(METHOD_RETURN,ANY)> ]
+  "17466" -> "17471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/345-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/345-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/345-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/345-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtField" {  
-"17818" [label = <(METHOD,jni::EncodeArtField)> ]
-"17822" [label = <(METHOD_RETURN,ANY)> ]
-  "17818" -> "17822" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
+"17472" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
+"17477" [label = <(METHOD_RETURN,ANY)> ]
+  "17472" -> "17477" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/346-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/346-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/346-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/346-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetArtField" {  
-"17823" [label = <(METHOD,GetArtField)> ]
-"17826" [label = <(METHOD_RETURN,ANY)> ]
-  "17823" -> "17826" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
+"17478" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
+"17483" [label = <(METHOD_RETURN,ANY)> ]
+  "17478" -> "17483" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/347-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/347-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/347-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/347-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
-"17827" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
-"17832" [label = <(METHOD_RETURN,ANY)> ]
-  "17827" -> "17832" 
+digraph "&lt;operator&gt;.conditional" {  
+"17484" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
+"17489" [label = <(METHOD_RETURN,ANY)> ]
+  "17484" -> "17489" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/348-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/348-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/348-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/348-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtMethod" {  
-"17833" [label = <(METHOD,jni::DecodeArtMethod)> ]
-"17837" [label = <(METHOD_RETURN,ANY)> ]
-  "17833" -> "17837" 
+digraph "IsInterface" {  
+"17490" [label = <(METHOD,IsInterface)> ]
+"17493" [label = <(METHOD_RETURN,ANY)> ]
+  "17490" -> "17493" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/349-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/349-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/349-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/349-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.multiplication" {  
-"17838" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
-"17842" [label = <(METHOD_RETURN,ANY)> ]
-  "17838" -> "17842" 
+digraph "GetSuperClass" {  
+"17494" [label = <(METHOD,GetSuperClass)> ]
+"17497" [label = <(METHOD_RETURN,ANY)> ]
+  "17494" -> "17497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/35-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/35-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/35-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/35-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,11 +1,49 @@
-digraph "FatalError" {  
-"1532" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>589</SUB>> ]
-"1533" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>589</SUB>> ]
-"1534" [label = <(LOG,LOG(FATAL))<SUB>589</SUB>> ]
-"1528" [label = <(METHOD,FatalError)<SUB>588</SUB>> ]
-"1538" [label = <(METHOD_RETURN,void)<SUB>588</SUB>> ]
-  "1532" -> "1538" 
-  "1533" -> "1532" 
-  "1534" -> "1533" 
-  "1528" -> "1534" 
+digraph "NewGlobalRef" {  
+"1433" [label = <(soa,soa(env))<SUB>535</SUB>> ]
+"1435" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>536</SUB>> ]
+"1452" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>537</SUB>> ]
+"1436" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>536</SUB>> ]
+"1443" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>536</SUB>> ]
+"1453" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>537</SUB>> ]
+"1437" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>536</SUB>> ]
+"1444" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>536</SUB>> ]
+"1454" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>537</SUB>> ]
+"1460" [label = <(Self,soa.Self())<SUB>537</SUB>> ]
+"1439" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>536</SUB>> ]
+"1445" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>536</SUB>> ]
+"1448" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>536</SUB>> ]
+"1455" [label = <(Vm,soa.Vm())<SUB>537</SUB>> ]
+"1459" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>537</SUB>> ]
+"1461" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>537</SUB>> ]
+"1441" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>536</SUB>> ]
+"1447" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>536</SUB>> ]
+"1450" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>536</SUB>> ]
+"1456" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>537</SUB>> ]
+"1463" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>537</SUB>> ]
+"1458" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>537</SUB>> ]
+"1428" [label = <(METHOD,NewGlobalRef)<SUB>534</SUB>> ]
+"1465" [label = <(METHOD_RETURN,jobject)<SUB>534</SUB>> ]
+  "1433" -> "1441" 
+  "1435" -> "1458" 
+  "1452" -> "1465" 
+  "1436" -> "1447" 
+  "1443" -> "1435" 
+  "1453" -> "1452" 
+  "1437" -> "1436" 
+  "1444" -> "1443" 
+  "1454" -> "1463" 
+  "1460" -> "1453" 
+  "1439" -> "1437" 
+  "1445" -> "1450" 
+  "1448" -> "1444" 
+  "1455" -> "1459" 
+  "1459" -> "1454" 
+  "1461" -> "1460" 
+  "1441" -> "1439" 
+  "1447" -> "1445" 
+  "1450" -> "1448" 
+  "1456" -> "1455" 
+  "1463" -> "1461" 
+  "1458" -> "1456" 
+  "1428" -> "1433" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/350-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/350-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/350-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/350-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_EQ" {  
-"17843" [label = <(METHOD,DCHECK_EQ)> ]
-"17847" [label = <(METHOD_RETURN,ANY)> ]
-  "17843" -> "17847" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
+"17498" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>313</SUB>> ]
+"17502" [label = <(METHOD_RETURN,ANY)> ]
+  "17498" -> "17502" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/351-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/351-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/351-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/351-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK" {  
-"17848" [label = <(METHOD,DCHECK)> ]
-"17851" [label = <(METHOD_RETURN,ANY)> ]
-  "17848" -> "17851" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
+"17503" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
+"17508" [label = <(METHOD_RETURN,ANY)> ]
+  "17503" -> "17508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/352-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/352-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/352-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/352-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalNot" {  
-"17852" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
-"17855" [label = <(METHOD_RETURN,ANY)> ]
-  "17852" -> "17855" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
+"17509" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
+"17514" [label = <(METHOD_RETURN,ANY)> ]
+  "17509" -> "17514" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/353-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/353-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/353-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/353-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsActiveTransaction" {  
-"17856" [label = <(METHOD,IsActiveTransaction)> ]
-"17859" [label = <(METHOD_RETURN,ANY)> ]
-  "17856" -> "17859" 
+digraph "IsAssignableFrom" {  
+"17515" [label = <(METHOD,IsAssignableFrom)> ]
+"17519" [label = <(METHOD_RETURN,ANY)> ]
+  "17515" -> "17519" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/354-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/354-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/354-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/354-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsConstructor" {  
-"17860" [label = <(METHOD,IsConstructor)> ]
-"17863" [label = <(METHOD_RETURN,ANY)> ]
-  "17860" -> "17863" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
+"17520" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
+"17525" [label = <(METHOD_RETURN,ANY)> ]
+  "17520" -> "17525" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/355-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/355-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/355-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/355-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"17864" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"17869" [label = <(METHOD_RETURN,ANY)> ]
-  "17864" -> "17869" 
+digraph "InstanceOf" {  
+"17526" [label = <(METHOD,InstanceOf)> ]
+"17530" [label = <(METHOD_RETURN,ANY)> ]
+  "17526" -> "17530" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/356-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/356-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/356-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/356-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"17870" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"17875" [label = <(METHOD_RETURN,ANY)> ]
-  "17870" -> "17875" 
+digraph "SetException" {  
+"17531" [label = <(METHOD,SetException)> ]
+"17535" [label = <(METHOD_RETURN,ANY)> ]
+  "17531" -> "17535" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/357-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/357-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/357-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/357-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
-"17876" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
-"17881" [label = <(METHOD_RETURN,ANY)> ]
-  "17876" -> "17881" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
+"17536" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
+"17541" [label = <(METHOD_RETURN,ANY)> ]
+  "17536" -> "17541" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/358-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/358-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/358-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/358-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtField" {  
-"17882" [label = <(METHOD,jni::DecodeArtField)> ]
-"17886" [label = <(METHOD_RETURN,ANY)> ]
-  "17882" -> "17886" 
+digraph "IsExceptionPending" {  
+"17542" [label = <(METHOD,IsExceptionPending)> ]
+"17545" [label = <(METHOD_RETURN,ANY)> ]
+  "17542" -> "17545" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/359-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/359-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/359-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/359-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.bracketedPrimary" {  
-"17887" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
-"17890" [label = <(METHOD_RETURN,ANY)> ]
-  "17887" -> "17890" 
+digraph "ClearException" {  
+"17546" [label = <(METHOD,ClearException)> ]
+"17549" [label = <(METHOD_RETURN,ANY)> ]
+  "17546" -> "17549" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/36-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/36-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/36-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/36-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,24 +1,27 @@
-digraph "PushLocalFrame" {  
-"1545" [label = <(soa,soa(env))<SUB>594</SUB>> ]
-"1557" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>598</SUB>> ]
-"1563" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>599</SUB>> ]
-"1548" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>595</SUB>> ]
-"1558" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>598</SUB>> ]
-"1549" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>595</SUB>> ]
-"1555" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>596</SUB>> ]
-"1559" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>598</SUB>> ]
-"1561" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>598</SUB>> ]
-"1540" [label = <(METHOD,PushLocalFrame)<SUB>592</SUB>> ]
-"1565" [label = <(METHOD_RETURN,jint)<SUB>592</SUB>> ]
-  "1545" -> "1549" 
-  "1557" -> "1563" 
-  "1563" -> "1565" 
-  "1548" -> "1555" 
-  "1548" -> "1559" 
-  "1558" -> "1557" 
-  "1549" -> "1548" 
-  "1555" -> "1565" 
-  "1559" -> "1561" 
-  "1561" -> "1558" 
-  "1540" -> "1545" 
+digraph "DeleteGlobalRef" {  
+"1472" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>541</SUB>> ]
+"1479" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>542</SUB>> ]
+"1485" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>543</SUB>> ]
+"1474" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>541</SUB>> ]
+"1481" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>542</SUB>> ]
+"1486" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>543</SUB>> ]
+"1475" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>541</SUB>> ]
+"1477" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>541</SUB>> ]
+"1482" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>542</SUB>> ]
+"1484" [label = <(FIELD_IDENTIFIER,self,self)<SUB>542</SUB>> ]
+"1488" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>543</SUB>> ]
+"1467" [label = <(METHOD,DeleteGlobalRef)<SUB>540</SUB>> ]
+"1491" [label = <(METHOD_RETURN,void)<SUB>540</SUB>> ]
+  "1472" -> "1482" 
+  "1479" -> "1488" 
+  "1485" -> "1491" 
+  "1474" -> "1472" 
+  "1481" -> "1479" 
+  "1486" -> "1485" 
+  "1475" -> "1477" 
+  "1477" -> "1474" 
+  "1482" -> "1484" 
+  "1484" -> "1481" 
+  "1488" -> "1486" 
+  "1467" -> "1475" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/360-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/360-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/360-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/360-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.expressionList" {  
-"17891" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
-"17896" [label = <(METHOD_RETURN,ANY)> ]
-  "17891" -> "17896" 
+digraph "GetException" {  
+"17550" [label = <(METHOD,GetException)> ]
+"17553" [label = <(METHOD_RETURN,ANY)> ]
+  "17550" -> "17553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/361-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/361-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/361-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/361-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
-"17897" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
-"17902" [label = <(METHOD_RETURN,ANY)> ]
-  "17897" -> "17902" 
+digraph "old_exception" {  
+"17554" [label = <(METHOD,old_exception)> ]
+"17557" [label = <(METHOD_RETURN,ANY)> ]
+  "17554" -> "17557" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/362-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/362-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/362-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/362-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
-"17903" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
-"17908" [label = <(METHOD_RETURN,ANY)> ]
-  "17903" -> "17908" 
+digraph "exception" {  
+"17558" [label = <(METHOD,exception)> ]
+"17562" [label = <(METHOD_RETURN,ANY)> ]
+  "17558" -> "17562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/363-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/363-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/363-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/363-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsInterface" {  
-"17909" [label = <(METHOD,IsInterface)> ]
-"17912" [label = <(METHOD_RETURN,ANY)> ]
-  "17909" -> "17912" 
+digraph "Get" {  
+"17563" [label = <(METHOD,Get)> ]
+"17566" [label = <(METHOD_RETURN,ANY)> ]
+  "17563" -> "17566" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/364-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/364-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/364-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/364-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetSuperClass" {  
-"17913" [label = <(METHOD,GetSuperClass)> ]
-"17916" [label = <(METHOD_RETURN,ANY)> ]
-  "17913" -> "17916" 
+digraph "exception_class" {  
+"17567" [label = <(METHOD,exception_class)> ]
+"17571" [label = <(METHOD_RETURN,ANY)> ]
+  "17567" -> "17571" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/365-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/365-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/365-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/365-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
-"17917" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>394</SUB>> ]
-"17921" [label = <(METHOD_RETURN,ANY)> ]
-  "17917" -> "17921" 
+digraph "GetObjectClass" {  
+"17572" [label = <(METHOD,GetObjectClass)> ]
+"17576" [label = <(METHOD_RETURN,ANY)> ]
+  "17572" -> "17576" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/366-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/366-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/366-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/366-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
-"17922" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
-"17927" [label = <(METHOD_RETURN,ANY)> ]
-  "17922" -> "17927" 
+digraph "get" {  
+"17577" [label = <(METHOD,get)> ]
+"17580" [label = <(METHOD_RETURN,ANY)> ]
+  "17577" -> "17580" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/367-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/367-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/367-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/367-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
-"17928" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
-"17933" [label = <(METHOD_RETURN,ANY)> ]
-  "17928" -> "17933" 
+digraph "GetMethodID" {  
+"17581" [label = <(METHOD,GetMethodID)> ]
+"17587" [label = <(METHOD_RETURN,ANY)> ]
+  "17581" -> "17587" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/368-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/368-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/368-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/368-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsAssignableFrom" {  
-"17934" [label = <(METHOD,IsAssignableFrom)> ]
-"17938" [label = <(METHOD_RETURN,ANY)> ]
-  "17934" -> "17938" 
+digraph "mirror::Object::PrettyTypeOf" {  
+"17588" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
+"17592" [label = <(METHOD_RETURN,ANY)> ]
+  "17588" -> "17592" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/369-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/369-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/369-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/369-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
-"17939" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
-"17944" [label = <(METHOD_RETURN,ANY)> ]
-  "17939" -> "17944" 
+digraph "CallVoidMethod" {  
+"17593" [label = <(METHOD,CallVoidMethod)> ]
+"17598" [label = <(METHOD_RETURN,ANY)> ]
+  "17593" -> "17598" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/37-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/37-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/37-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/37-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,51 +1,49 @@
-digraph "PopLocalFrame" {  
-"1572" [label = <(soa,soa(env))<SUB>603</SUB>> ]
-"1574" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>604</SUB>> ]
-"1591" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>605</SUB>> ]
-"1598" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>606</SUB>> ]
-"1575" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>604</SUB>> ]
-"1582" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>604</SUB>> ]
-"1592" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>605</SUB>> ]
-"1599" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>606</SUB>> ]
-"1576" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>604</SUB>> ]
-"1583" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>604</SUB>> ]
-"1593" [label = <(Env,soa.Env())<SUB>605</SUB>> ]
-"1597" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>605</SUB>> ]
-"1600" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>606</SUB>> ]
-"1578" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>604</SUB>> ]
-"1584" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>604</SUB>> ]
-"1587" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>604</SUB>> ]
-"1594" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>605</SUB>> ]
-"1601" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>606</SUB>> ]
-"1580" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>604</SUB>> ]
-"1586" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>604</SUB>> ]
-"1589" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>604</SUB>> ]
-"1596" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>605</SUB>> ]
-"1603" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>606</SUB>> ]
-"1567" [label = <(METHOD,PopLocalFrame)<SUB>602</SUB>> ]
-"1606" [label = <(METHOD_RETURN,jobject)<SUB>602</SUB>> ]
-  "1572" -> "1580" 
-  "1574" -> "1596" 
-  "1591" -> "1603" 
-  "1598" -> "1606" 
-  "1575" -> "1586" 
-  "1582" -> "1574" 
-  "1592" -> "1591" 
-  "1599" -> "1598" 
-  "1576" -> "1575" 
-  "1583" -> "1582" 
-  "1593" -> "1597" 
-  "1597" -> "1592" 
-  "1600" -> "1599" 
-  "1578" -> "1576" 
-  "1584" -> "1589" 
-  "1587" -> "1583" 
-  "1594" -> "1593" 
-  "1601" -> "1600" 
-  "1580" -> "1578" 
-  "1586" -> "1584" 
-  "1589" -> "1587" 
-  "1596" -> "1594" 
-  "1603" -> "1601" 
-  "1567" -> "1572" 
+digraph "NewWeakGlobalRef" {  
+"1498" [label = <(soa,soa(env))<SUB>547</SUB>> ]
+"1500" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>548</SUB>> ]
+"1517" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>549</SUB>> ]
+"1501" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>548</SUB>> ]
+"1508" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>548</SUB>> ]
+"1518" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>549</SUB>> ]
+"1502" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>548</SUB>> ]
+"1509" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>548</SUB>> ]
+"1519" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>549</SUB>> ]
+"1525" [label = <(Self,soa.Self())<SUB>549</SUB>> ]
+"1504" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>548</SUB>> ]
+"1510" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>548</SUB>> ]
+"1513" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>548</SUB>> ]
+"1520" [label = <(Vm,soa.Vm())<SUB>549</SUB>> ]
+"1524" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>549</SUB>> ]
+"1526" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>549</SUB>> ]
+"1506" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>548</SUB>> ]
+"1512" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>548</SUB>> ]
+"1515" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>548</SUB>> ]
+"1521" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>549</SUB>> ]
+"1528" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>549</SUB>> ]
+"1523" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>549</SUB>> ]
+"1493" [label = <(METHOD,NewWeakGlobalRef)<SUB>546</SUB>> ]
+"1530" [label = <(METHOD_RETURN,jweak)<SUB>546</SUB>> ]
+  "1498" -> "1506" 
+  "1500" -> "1523" 
+  "1517" -> "1530" 
+  "1501" -> "1512" 
+  "1508" -> "1500" 
+  "1518" -> "1517" 
+  "1502" -> "1501" 
+  "1509" -> "1508" 
+  "1519" -> "1528" 
+  "1525" -> "1518" 
+  "1504" -> "1502" 
+  "1510" -> "1515" 
+  "1513" -> "1509" 
+  "1520" -> "1524" 
+  "1524" -> "1519" 
+  "1526" -> "1525" 
+  "1506" -> "1504" 
+  "1512" -> "1510" 
+  "1515" -> "1513" 
+  "1521" -> "1520" 
+  "1528" -> "1526" 
+  "1523" -> "1521" 
+  "1493" -> "1498" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/370-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/370-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/370-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/370-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "InstanceOf" {  
-"17945" [label = <(METHOD,InstanceOf)> ]
-"17949" [label = <(METHOD_RETURN,ANY)> ]
-  "17945" -> "17949" 
+digraph "EnsureLocalCapacityInternal" {  
+"17599" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
+"17604" [label = <(METHOD_RETURN,ANY)> ]
+  "17599" -> "17604" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/371-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/371-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/371-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/371-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetException" {  
-"17950" [label = <(METHOD,SetException)> ]
-"17954" [label = <(METHOD_RETURN,ANY)> ]
-  "17950" -> "17954" 
+digraph "PushFrame" {  
+"17605" [label = <(METHOD,PushFrame)> ]
+"17609" [label = <(METHOD_RETURN,ANY)> ]
+  "17605" -> "17609" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/372-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/372-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/372-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/372-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
-"17955" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
-"17960" [label = <(METHOD_RETURN,ANY)> ]
-  "17955" -> "17960" 
+digraph "down_cast&lt;JNIEnvExt*&gt;" {  
+"17610" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
+"17613" [label = <(METHOD_RETURN,ANY)> ]
+  "17610" -> "17613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/373-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/373-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/373-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/373-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsExceptionPending" {  
-"17961" [label = <(METHOD,IsExceptionPending)> ]
-"17964" [label = <(METHOD_RETURN,ANY)> ]
-  "17961" -> "17964" 
+digraph "PopFrame" {  
+"17614" [label = <(METHOD,PopFrame)> ]
+"17617" [label = <(METHOD_RETURN,ANY)> ]
+  "17614" -> "17617" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/374-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/374-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/374-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/374-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "ClearException" {  
-"17965" [label = <(METHOD,ClearException)> ]
-"17968" [label = <(METHOD_RETURN,ANY)> ]
-  "17965" -> "17968" 
+digraph "Env" {  
+"17618" [label = <(METHOD,Env)> ]
+"17621" [label = <(METHOD_RETURN,ANY)> ]
+  "17618" -> "17621" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/375-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/375-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/375-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/375-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetException" {  
-"17969" [label = <(METHOD,GetException)> ]
-"17972" [label = <(METHOD_RETURN,ANY)> ]
-  "17969" -> "17972" 
+digraph "AddGlobalRef" {  
+"17622" [label = <(METHOD,AddGlobalRef)> ]
+"17627" [label = <(METHOD_RETURN,ANY)> ]
+  "17622" -> "17627" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/376-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/376-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/376-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/376-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "old_exception" {  
-"17973" [label = <(METHOD,old_exception)> ]
-"17976" [label = <(METHOD_RETURN,ANY)> ]
-  "17973" -> "17976" 
+digraph "Vm" {  
+"17628" [label = <(METHOD,Vm)> ]
+"17631" [label = <(METHOD_RETURN,ANY)> ]
+  "17628" -> "17631" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/377-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/377-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/377-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/377-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "exception" {  
-"17977" [label = <(METHOD,exception)> ]
-"17981" [label = <(METHOD_RETURN,ANY)> ]
-  "17977" -> "17981" 
+digraph "DeleteGlobalRef" {  
+"17632" [label = <(METHOD,DeleteGlobalRef)> ]
+"17636" [label = <(METHOD_RETURN,ANY)> ]
+  "17632" -> "17636" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/378-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/378-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/378-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/378-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Get" {  
-"17982" [label = <(METHOD,Get)> ]
-"17985" [label = <(METHOD_RETURN,ANY)> ]
-  "17982" -> "17985" 
+digraph "AddWeakGlobalRef" {  
+"17637" [label = <(METHOD,AddWeakGlobalRef)> ]
+"17642" [label = <(METHOD_RETURN,ANY)> ]
+  "17637" -> "17642" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/379-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/379-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/379-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/379-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "exception_class" {  
-"17986" [label = <(METHOD,exception_class)> ]
-"17990" [label = <(METHOD_RETURN,ANY)> ]
-  "17986" -> "17990" 
+digraph "DeleteWeakGlobalRef" {  
+"17643" [label = <(METHOD,DeleteWeakGlobalRef)> ]
+"17648" [label = <(METHOD_RETURN,ANY)> ]
+  "17643" -> "17648" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/38-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/38-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/38-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/38-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,11 +1,27 @@
-digraph "EnsureLocalCapacity" {  
-"1613" [label = <(soa,soa(env))<SUB>611</SUB>> ]
-"1615" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>612</SUB>> ]
-"1616" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>612</SUB>> ]
-"1608" [label = <(METHOD,EnsureLocalCapacity)<SUB>609</SUB>> ]
-"1620" [label = <(METHOD_RETURN,jint)<SUB>609</SUB>> ]
-  "1613" -> "1616" 
-  "1615" -> "1620" 
-  "1616" -> "1615" 
-  "1608" -> "1613" 
+digraph "DeleteWeakGlobalRef" {  
+"1537" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>553</SUB>> ]
+"1544" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>554</SUB>> ]
+"1550" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>555</SUB>> ]
+"1539" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>553</SUB>> ]
+"1546" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>554</SUB>> ]
+"1551" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>555</SUB>> ]
+"1540" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>553</SUB>> ]
+"1542" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>553</SUB>> ]
+"1547" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>554</SUB>> ]
+"1549" [label = <(FIELD_IDENTIFIER,self,self)<SUB>554</SUB>> ]
+"1553" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>555</SUB>> ]
+"1532" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>552</SUB>> ]
+"1556" [label = <(METHOD_RETURN,void)<SUB>552</SUB>> ]
+  "1537" -> "1547" 
+  "1544" -> "1553" 
+  "1550" -> "1556" 
+  "1539" -> "1537" 
+  "1546" -> "1544" 
+  "1551" -> "1550" 
+  "1540" -> "1542" 
+  "1542" -> "1539" 
+  "1547" -> "1549" 
+  "1549" -> "1546" 
+  "1553" -> "1551" 
+  "1532" -> "1540" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/380-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/380-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/380-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/380-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetObjectClass" {  
-"17991" [label = <(METHOD,GetObjectClass)> ]
-"17995" [label = <(METHOD_RETURN,ANY)> ]
-  "17991" -> "17995" 
+digraph "Remove" {  
+"17649" [label = <(METHOD,Remove)> ]
+"17654" [label = <(METHOD_RETURN,ANY)> ]
+  "17649" -> "17654" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/381-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/381-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/381-cfg.dot	2023-06-07 19:35:14.857385837 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/381-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "get" {  
-"17996" [label = <(METHOD,get)> ]
-"17999" [label = <(METHOD_RETURN,ANY)> ]
-  "17996" -> "17999" 
+digraph "IsStringClass" {  
+"17655" [label = <(METHOD,IsStringClass)> ]
+"17658" [label = <(METHOD_RETURN,ANY)> ]
+  "17655" -> "17658" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/382-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/382-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/382-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/382-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethodID" {  
-"18000" [label = <(METHOD,GetMethodID)> ]
-"18006" [label = <(METHOD_RETURN,ANY)> ]
-  "18000" -> "18006" 
+digraph "GetCurrentAllocator" {  
+"17659" [label = <(METHOD,GetCurrentAllocator)> ]
+"17662" [label = <(METHOD_RETURN,ANY)> ]
+  "17659" -> "17662" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/383-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/383-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/383-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/383-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Object::PrettyTypeOf" {  
-"18007" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
-"18011" [label = <(METHOD_RETURN,ANY)> ]
-  "18007" -> "18011" 
+digraph "GetHeap" {  
+"17663" [label = <(METHOD,GetHeap)> ]
+"17666" [label = <(METHOD_RETURN,ANY)> ]
+  "17663" -> "17666" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/384-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/384-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/384-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/384-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CallVoidMethod" {  
-"18012" [label = <(METHOD,CallVoidMethod)> ]
-"18017" [label = <(METHOD_RETURN,ANY)> ]
-  "18012" -> "18017" 
+digraph "AllocObject" {  
+"17667" [label = <(METHOD,AllocObject)> ]
+"17671" [label = <(METHOD_RETURN,ANY)> ]
+  "17667" -> "17671" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/385-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/385-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/385-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/385-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureLocalCapacityInternal" {  
-"18018" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
-"18023" [label = <(METHOD_RETURN,ANY)> ]
-  "18018" -> "18023" 
+digraph "va_start" {  
+"17672" [label = <(METHOD,va_start)> ]
+"17676" [label = <(METHOD_RETURN,ANY)> ]
+  "17672" -> "17676" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/386-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/386-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/386-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/386-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "PushFrame" {  
-"18024" [label = <(METHOD,PushFrame)> ]
-"18028" [label = <(METHOD_RETURN,ANY)> ]
-  "18024" -> "18028" 
+digraph "NewObjectV" {  
+"17677" [label = <(METHOD,NewObjectV)> ]
+"17683" [label = <(METHOD_RETURN,ANY)> ]
+  "17677" -> "17683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/387-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/387-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/387-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/387-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "down_cast&lt;JNIEnvExt*&gt;" {  
-"18029" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
-"18032" [label = <(METHOD_RETURN,ANY)> ]
-  "18029" -> "18032" 
+digraph "va_end" {  
+"17684" [label = <(METHOD,va_end)> ]
+"17687" [label = <(METHOD_RETURN,ANY)> ]
+  "17684" -> "17687" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/388-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/388-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/388-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/388-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "PopFrame" {  
-"18033" [label = <(METHOD,PopFrame)> ]
-"18036" [label = <(METHOD_RETURN,ANY)> ]
-  "18033" -> "18036" 
+digraph "WellKnownClasses::StringInitToStringFactory" {  
+"17688" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
+"17692" [label = <(METHOD_RETURN,ANY)> ]
+  "17688" -> "17692" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/389-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/389-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/389-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/389-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Env" {  
-"18037" [label = <(METHOD,Env)> ]
-"18040" [label = <(METHOD_RETURN,ANY)> ]
-  "18037" -> "18040" 
+digraph "CallStaticObjectMethodV" {  
+"17693" [label = <(METHOD,CallStaticObjectMethodV)> ]
+"17699" [label = <(METHOD_RETURN,ANY)> ]
+  "17693" -> "17699" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/39-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/39-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/39-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/39-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,49 +1,44 @@
-digraph "NewGlobalRef" {  
-"1627" [label = <(soa,soa(env))<SUB>616</SUB>> ]
-"1629" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>617</SUB>> ]
-"1646" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>618</SUB>> ]
-"1630" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>617</SUB>> ]
-"1637" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>617</SUB>> ]
-"1647" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>618</SUB>> ]
-"1631" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>617</SUB>> ]
-"1638" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>617</SUB>> ]
-"1648" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>618</SUB>> ]
-"1654" [label = <(Self,soa.Self())<SUB>618</SUB>> ]
-"1633" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>617</SUB>> ]
-"1639" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>617</SUB>> ]
-"1642" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>617</SUB>> ]
-"1649" [label = <(Vm,soa.Vm())<SUB>618</SUB>> ]
-"1653" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>618</SUB>> ]
-"1655" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>618</SUB>> ]
-"1635" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>617</SUB>> ]
-"1641" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>617</SUB>> ]
-"1644" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>617</SUB>> ]
-"1650" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>618</SUB>> ]
-"1657" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>618</SUB>> ]
-"1652" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>618</SUB>> ]
-"1622" [label = <(METHOD,NewGlobalRef)<SUB>615</SUB>> ]
-"1659" [label = <(METHOD_RETURN,jobject)<SUB>615</SUB>> ]
-  "1627" -> "1635" 
-  "1629" -> "1652" 
-  "1646" -> "1659" 
-  "1630" -> "1641" 
-  "1637" -> "1629" 
-  "1647" -> "1646" 
-  "1631" -> "1630" 
-  "1638" -> "1637" 
-  "1648" -> "1657" 
-  "1654" -> "1647" 
-  "1633" -> "1631" 
-  "1639" -> "1644" 
-  "1642" -> "1638" 
-  "1649" -> "1653" 
-  "1653" -> "1648" 
-  "1655" -> "1654" 
-  "1635" -> "1633" 
-  "1641" -> "1639" 
-  "1644" -> "1642" 
-  "1650" -> "1649" 
-  "1657" -> "1655" 
-  "1652" -> "1650" 
-  "1622" -> "1627" 
+digraph "NewLocalRef" {  
+"1563" [label = <(soa,soa(env))<SUB>559</SUB>> ]
+"1565" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>560</SUB>> ]
+"1589" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>565</SUB>> ]
+"1566" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>560</SUB>> ]
+"1573" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>560</SUB>> ]
+"1583" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>562</SUB>> ]
+"1590" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>565</SUB>> ]
+"1567" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>560</SUB>> ]
+"1574" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>560</SUB>> ]
+"1587" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>563</SUB>> ]
+"1591" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>565</SUB>> ]
+"1569" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>560</SUB>> ]
+"1575" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>560</SUB>> ]
+"1578" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>560</SUB>> ]
+"1592" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>565</SUB>> ]
+"1571" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>560</SUB>> ]
+"1577" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>560</SUB>> ]
+"1580" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>560</SUB>> ]
+"1594" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>565</SUB>> ]
+"1558" [label = <(METHOD,NewLocalRef)<SUB>558</SUB>> ]
+"1597" [label = <(METHOD_RETURN,jobject)<SUB>558</SUB>> ]
+  "1563" -> "1571" 
+  "1565" -> "1583" 
+  "1589" -> "1597" 
+  "1566" -> "1577" 
+  "1573" -> "1565" 
+  "1583" -> "1587" 
+  "1583" -> "1594" 
+  "1590" -> "1589" 
+  "1567" -> "1566" 
+  "1574" -> "1573" 
+  "1587" -> "1597" 
+  "1591" -> "1590" 
+  "1569" -> "1567" 
+  "1575" -> "1580" 
+  "1578" -> "1574" 
+  "1592" -> "1591" 
+  "1571" -> "1569" 
+  "1577" -> "1575" 
+  "1580" -> "1578" 
+  "1594" -> "1592" 
+  "1558" -> "1563" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/390-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/390-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/390-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/390-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "AddGlobalRef" {  
-"18041" [label = <(METHOD,AddGlobalRef)> ]
-"18046" [label = <(METHOD_RETURN,ANY)> ]
-  "18041" -> "18046" 
+digraph "CallNonvirtualVoidMethodV" {  
+"17700" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
+"17707" [label = <(METHOD_RETURN,ANY)> ]
+  "17700" -> "17707" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/391-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/391-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/391-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/391-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Vm" {  
-"18047" [label = <(METHOD,Vm)> ]
-"18050" [label = <(METHOD_RETURN,ANY)> ]
-  "18047" -> "18050" 
+digraph "CallStaticObjectMethodA" {  
+"17708" [label = <(METHOD,CallStaticObjectMethodA)> ]
+"17714" [label = <(METHOD_RETURN,ANY)> ]
+  "17708" -> "17714" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/392-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/392-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/392-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/392-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteGlobalRef" {  
-"18051" [label = <(METHOD,DeleteGlobalRef)> ]
-"18055" [label = <(METHOD_RETURN,ANY)> ]
-  "18051" -> "18055" 
+digraph "CallNonvirtualVoidMethodA" {  
+"17715" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
+"17722" [label = <(METHOD_RETURN,ANY)> ]
+  "17715" -> "17722" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/393-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/393-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/393-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/393-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "AddWeakGlobalRef" {  
-"18056" [label = <(METHOD,AddWeakGlobalRef)> ]
-"18061" [label = <(METHOD_RETURN,ANY)> ]
-  "18056" -> "18061" 
+digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
+"17723" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
+"17728" [label = <(METHOD_RETURN,ANY)> ]
+  "17723" -> "17728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/394-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/394-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/394-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/394-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteWeakGlobalRef" {  
-"18062" [label = <(METHOD,DeleteWeakGlobalRef)> ]
-"18067" [label = <(METHOD_RETURN,ANY)> ]
-  "18062" -> "18067" 
+digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
+"17729" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
+"17734" [label = <(METHOD_RETURN,ANY)> ]
+  "17729" -> "17734" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/395-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/395-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/395-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/395-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "Remove" {  
-"18068" [label = <(METHOD,Remove)> ]
-"18073" [label = <(METHOD_RETURN,ANY)> ]
-  "18068" -> "18073" 
+digraph "result" {  
+"17735" [label = <(METHOD,result)> ]
+"17738" [label = <(METHOD_RETURN,ANY)> ]
+  "17735" -> "17738" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/396-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/396-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/396-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/396-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsStringClass" {  
-"18074" [label = <(METHOD,IsStringClass)> ]
-"18077" [label = <(METHOD_RETURN,ANY)> ]
-  "18074" -> "18077" 
+digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
+"17739" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
+"17745" [label = <(METHOD_RETURN,ANY)> ]
+  "17739" -> "17745" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/397-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/397-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/397-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/397-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetCurrentAllocator" {  
-"18078" [label = <(METHOD,GetCurrentAllocator)> ]
-"18081" [label = <(METHOD_RETURN,ANY)> ]
-  "18078" -> "18081" 
+digraph "GetL" {  
+"17746" [label = <(METHOD,GetL)> ]
+"17749" [label = <(METHOD_RETURN,ANY)> ]
+  "17746" -> "17749" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/398-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/398-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/398-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/398-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetHeap" {  
-"18082" [label = <(METHOD,GetHeap)> ]
-"18085" [label = <(METHOD_RETURN,ANY)> ]
-  "18082" -> "18085" 
+digraph "InvokeVirtualOrInterfaceWithJValues" {  
+"17750" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
+"17756" [label = <(METHOD_RETURN,ANY)> ]
+  "17750" -> "17756" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/399-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/399-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/399-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/399-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "AllocObject" {  
-"18086" [label = <(METHOD,AllocObject)> ]
-"18090" [label = <(METHOD_RETURN,ANY)> ]
-  "18086" -> "18090" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
+"17757" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>310</SUB>> ]
+"17760" [label = <(METHOD_RETURN,ANY)> ]
+  "17757" -> "17760" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/4-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/4-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/4-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/4-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,153 +1,5 @@
-digraph "VisitModifiedUtf8Chars" {  
-"34" [label = <(DCHECK_LE,DCHECK_LE(byte_count, strlen(utf8)))<SUB>79</SUB>> ]
-"39" [label = <(&lt;operator&gt;.assignment,len = 0)<SUB>80</SUB>> ]
-"43" [label = <(&lt;operator&gt;.assignment,* end = utf8 + byte_count)<SUB>81</SUB>> ]
-"199" [label = <(RETURN,return len;,return len;)<SUB>139</SUB>> ]
-"36" [label = <(strlen,strlen(utf8))<SUB>79</SUB>> ]
-"45" [label = <(&lt;operator&gt;.addition,utf8 + byte_count)<SUB>81</SUB>> ]
-"49" [label = <(&lt;operator&gt;.notEquals,utf8 != end)<SUB>82</SUB>> ]
-"54" [label = <(&lt;operator&gt;.assignment,ic = *utf8)<SUB>83</SUB>> ]
-"77" [label = <(&lt;operator&gt;.assignment,is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>91</SUB>> ]
-"190" [label = <(good,good(utf8, 4u))<SUB>135</SUB>> ]
-"193" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 4u)<SUB>136</SUB>> ]
-"196" [label = <(&lt;operator&gt;.assignmentPlus,len += 2u)<SUB>137</SUB>> ]
-"56" [label = <(&lt;operator&gt;.indirection,*utf8)<SUB>83</SUB>> ]
-"59" [label = <(LIKELY,LIKELY((ic &amp; 0x80) == 0))<SUB>84</SUB>> ]
-"79" [label = <(METHOD_REF,ANY anonymous_lambda_3 (),is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>91</SUB>> ]
-"81" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x20) == 0)<SUB>97</SUB>> ]
-"128" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x10) == 0)<SUB>113</SUB>> ]
-"175" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 4u)<SUB>132</SUB>> ]
-"60" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x80) == 0)<SUB>84</SUB>> ]
-"66" [label = <(good,good(utf8, 1u))<SUB>86</SUB>> ]
-"69" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 1u)<SUB>87</SUB>> ]
-"72" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>88</SUB>> ]
-"82" [label = <(&lt;operator&gt;.and,ic &amp; 0x20)<SUB>97</SUB>> ]
-"120" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 2u)<SUB>109</SUB>> ]
-"123" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>110</SUB>> ]
-"129" [label = <(&lt;operator&gt;.and,ic &amp; 0x10)<SUB>113</SUB>> ]
-"167" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 3u)<SUB>125</SUB>> ]
-"170" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>126</SUB>> ]
-"176" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>132</SUB>> ]
-"183" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>133</SUB>> ]
-"61" [label = <(&lt;operator&gt;.and,ic &amp; 0x80)<SUB>84</SUB>> ]
-"88" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 2u)<SUB>99</SUB>> ]
-"104" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>102</SUB>> ]
-"135" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 3u)<SUB>115</SUB>> ]
-"151" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>118</SUB>> ]
-"177" [label = <(UNKNOWN,size_t,size_t)<SUB>132</SUB>> ]
-"178" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>132</SUB>> ]
-"184" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>133</SUB>> ]
-"89" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>99</SUB>> ]
-"96" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>100</SUB>> ]
-"105" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>102</SUB>> ]
-"108" [label = <(is_ascii,is_ascii())<SUB>102</SUB>> ]
-"136" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>115</SUB>> ]
-"143" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>116</SUB>> ]
-"152" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>118</SUB>> ]
-"155" [label = <(is_ascii,is_ascii())<SUB>118</SUB>> ]
-"185" [label = <(bad,bad())<SUB>133</SUB>> ]
-"187" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>133</SUB>> ]
-"90" [label = <(UNKNOWN,size_t,size_t)<SUB>99</SUB>> ]
-"91" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>99</SUB>> ]
-"97" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>100</SUB>> ]
-"107" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>102</SUB>> ]
-"111" [label = <(bad,bad())<SUB>103</SUB>> ]
-"117" [label = <(good,good(utf8, 2u))<SUB>107</SUB>> ]
-"137" [label = <(UNKNOWN,size_t,size_t)<SUB>115</SUB>> ]
-"138" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>115</SUB>> ]
-"144" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>116</SUB>> ]
-"154" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>118</SUB>> ]
-"158" [label = <(bad,bad())<SUB>119</SUB>> ]
-"164" [label = <(good,good(utf8, 3u))<SUB>123</SUB>> ]
-"98" [label = <(bad,bad())<SUB>100</SUB>> ]
-"100" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>100</SUB>> ]
-"113" [label = <(RETURN,return 0u;,return 0u;)<SUB>104</SUB>> ]
-"145" [label = <(bad,bad())<SUB>116</SUB>> ]
-"147" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>116</SUB>> ]
-"160" [label = <(RETURN,return 0u;,return 0u;)<SUB>120</SUB>> ]
-"28" [label = <(METHOD,VisitModifiedUtf8Chars)<SUB>78</SUB>> ]
-"201" [label = <(METHOD_RETURN,size_t)<SUB>78</SUB>> ]
-  "34" -> "39" 
-  "39" -> "45" 
-  "43" -> "49" 
-  "199" -> "201" 
-  "36" -> "34" 
-  "45" -> "43" 
-  "49" -> "56" 
-  "49" -> "199" 
-  "54" -> "61" 
-  "77" -> "82" 
-  "190" -> "193" 
-  "193" -> "196" 
-  "196" -> "49" 
-  "56" -> "54" 
-  "59" -> "66" 
-  "59" -> "79" 
-  "79" -> "77" 
-  "81" -> "90" 
-  "81" -> "129" 
-  "128" -> "137" 
-  "128" -> "177" 
-  "175" -> "185" 
-  "175" -> "190" 
-  "60" -> "59" 
-  "66" -> "69" 
-  "69" -> "72" 
-  "72" -> "49" 
-  "82" -> "81" 
-  "120" -> "123" 
-  "123" -> "49" 
-  "129" -> "128" 
-  "167" -> "170" 
-  "170" -> "49" 
-  "176" -> "175" 
-  "183" -> "201" 
-  "61" -> "60" 
-  "88" -> "98" 
-  "88" -> "107" 
-  "104" -> "111" 
-  "104" -> "117" 
-  "135" -> "145" 
-  "135" -> "154" 
-  "151" -> "158" 
-  "151" -> "164" 
-  "177" -> "178" 
-  "178" -> "176" 
-  "184" -> "183" 
-  "89" -> "88" 
-  "96" -> "201" 
-  "105" -> "108" 
-  "105" -> "104" 
-  "108" -> "104" 
-  "136" -> "135" 
-  "143" -> "201" 
-  "152" -> "155" 
-  "152" -> "151" 
-  "155" -> "151" 
-  "185" -> "184" 
-  "185" -> "187" 
-  "187" -> "184" 
-  "90" -> "91" 
-  "91" -> "89" 
-  "97" -> "96" 
-  "107" -> "105" 
-  "111" -> "113" 
-  "111" -> "120" 
-  "117" -> "120" 
-  "137" -> "138" 
-  "138" -> "136" 
-  "144" -> "143" 
-  "154" -> "152" 
-  "158" -> "160" 
-  "158" -> "167" 
-  "164" -> "167" 
-  "98" -> "97" 
-  "98" -> "100" 
-  "100" -> "97" 
-  "113" -> "201" 
-  "145" -> "144" 
-  "145" -> "147" 
-  "147" -> "144" 
-  "160" -> "201" 
-  "28" -> "36" 
+digraph "EnsureInitialized" {  
+"103" [label = <(METHOD,EnsureInitialized)<SUB>122</SUB>> ]
+"107" [label = <(METHOD_RETURN,ANY)<SUB>122</SUB>> ]
+  "103" -> "107" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/40-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/40-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/40-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/40-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,27 +1,43 @@
-digraph "DeleteGlobalRef" {  
-"1666" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>622</SUB>> ]
-"1673" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>623</SUB>> ]
-"1679" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>624</SUB>> ]
-"1668" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>622</SUB>> ]
-"1675" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>623</SUB>> ]
-"1680" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>624</SUB>> ]
-"1669" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>622</SUB>> ]
-"1671" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>622</SUB>> ]
-"1676" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>623</SUB>> ]
-"1678" [label = <(FIELD_IDENTIFIER,self,self)<SUB>623</SUB>> ]
-"1682" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>624</SUB>> ]
-"1661" [label = <(METHOD,DeleteGlobalRef)<SUB>621</SUB>> ]
-"1685" [label = <(METHOD_RETURN,void)<SUB>621</SUB>> ]
-  "1666" -> "1676" 
-  "1673" -> "1682" 
-  "1679" -> "1685" 
-  "1668" -> "1666" 
-  "1675" -> "1673" 
-  "1680" -> "1679" 
-  "1669" -> "1671" 
-  "1671" -> "1668" 
-  "1676" -> "1678" 
-  "1678" -> "1675" 
-  "1682" -> "1680" 
-  "1661" -> "1669" 
+digraph "DeleteLocalRef" {  
+"1610" [label = <(soa,soa(env))<SUB>575</SUB>> ]
+"1613" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>576</SUB>> ]
+"1604" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>569</SUB>> ]
+"1615" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>576</SUB>> ]
+"1618" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals.Remove(ext_env-&gt;local_ref_cookie, obj))<SUB>577</SUB>> ]
+"1608" [label = <(RETURN,return;,return;)<SUB>570</SUB>> ]
+"1619" [label = <(Remove,ext_env-&gt;locals.Remove(ext_env-&gt;local_ref_cookie, obj))<SUB>577</SUB>> ]
+"1630" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>583</SUB>> ]
+"1620" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals.Remove)<SUB>577</SUB>> ]
+"1625" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie)<SUB>577</SUB>> ]
+"1631" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>583</SUB>> ]
+"1621" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals)<SUB>577</SUB>> ]
+"1624" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>577</SUB>> ]
+"1627" [label = <(FIELD_IDENTIFIER,local_ref_cookie,local_ref_cookie)<SUB>577</SUB>> ]
+"1632" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>583</SUB>> ]
+"1623" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>577</SUB>> ]
+"1633" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>583</SUB>> ]
+"1634" [label = <(LOG,LOG(WARNING))<SUB>583</SUB>> ]
+"1599" [label = <(METHOD,DeleteLocalRef)<SUB>568</SUB>> ]
+"1640" [label = <(METHOD_RETURN,void)<SUB>568</SUB>> ]
+  "1610" -> "1615" 
+  "1613" -> "1623" 
+  "1604" -> "1608" 
+  "1604" -> "1610" 
+  "1615" -> "1613" 
+  "1618" -> "1640" 
+  "1618" -> "1634" 
+  "1608" -> "1640" 
+  "1619" -> "1618" 
+  "1630" -> "1640" 
+  "1620" -> "1627" 
+  "1625" -> "1619" 
+  "1631" -> "1630" 
+  "1621" -> "1624" 
+  "1624" -> "1620" 
+  "1627" -> "1625" 
+  "1632" -> "1631" 
+  "1623" -> "1621" 
+  "1633" -> "1632" 
+  "1634" -> "1633" 
+  "1599" -> "1604" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/400-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/400-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/400-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/400-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "va_start" {  
-"18091" [label = <(METHOD,va_start)> ]
-"18095" [label = <(METHOD_RETURN,ANY)> ]
-  "18091" -> "18095" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
+"17761" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
+"17766" [label = <(METHOD_RETURN,ANY)> ]
+  "17761" -> "17766" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/401-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/401-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/401-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/401-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewObjectV" {  
-"18096" [label = <(METHOD,NewObjectV)> ]
-"18102" [label = <(METHOD_RETURN,ANY)> ]
-  "18096" -> "18102" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
+"17767" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
+"17772" [label = <(METHOD_RETURN,ANY)> ]
+  "17767" -> "17772" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/402-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/402-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/402-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/402-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "va_end" {  
-"18103" [label = <(METHOD,va_end)> ]
-"18106" [label = <(METHOD_RETURN,ANY)> ]
-  "18103" -> "18106" 
+digraph "GetZ" {  
+"17773" [label = <(METHOD,GetZ)> ]
+"17776" [label = <(METHOD_RETURN,ANY)> ]
+  "17773" -> "17776" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/403-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/403-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/403-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/403-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "WellKnownClasses::StringInitToStringFactory" {  
-"18107" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
-"18111" [label = <(METHOD_RETURN,ANY)> ]
-  "18107" -> "18111" 
+digraph "GetB" {  
+"17777" [label = <(METHOD,GetB)> ]
+"17780" [label = <(METHOD_RETURN,ANY)> ]
+  "17777" -> "17780" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/404-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/404-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/404-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/404-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodV" {  
-"18112" [label = <(METHOD,CallStaticObjectMethodV)> ]
-"18118" [label = <(METHOD_RETURN,ANY)> ]
-  "18112" -> "18118" 
+digraph "GetC" {  
+"17781" [label = <(METHOD,GetC)> ]
+"17784" [label = <(METHOD_RETURN,ANY)> ]
+  "17781" -> "17784" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/405-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/405-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/405-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/405-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"18119" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
-"18126" [label = <(METHOD_RETURN,ANY)> ]
-  "18119" -> "18126" 
+digraph "GetD" {  
+"17785" [label = <(METHOD,GetD)> ]
+"17788" [label = <(METHOD_RETURN,ANY)> ]
+  "17785" -> "17788" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/406-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/406-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/406-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/406-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodA" {  
-"18127" [label = <(METHOD,CallStaticObjectMethodA)> ]
-"18133" [label = <(METHOD_RETURN,ANY)> ]
-  "18127" -> "18133" 
+digraph "GetF" {  
+"17789" [label = <(METHOD,GetF)> ]
+"17792" [label = <(METHOD_RETURN,ANY)> ]
+  "17789" -> "17792" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/407-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/407-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/407-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/407-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"18134" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
-"18141" [label = <(METHOD_RETURN,ANY)> ]
-  "18134" -> "18141" 
+digraph "GetI" {  
+"17793" [label = <(METHOD,GetI)> ]
+"17796" [label = <(METHOD_RETURN,ANY)> ]
+  "17793" -> "17796" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/408-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/408-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/408-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/408-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
-"18142" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
-"18147" [label = <(METHOD_RETURN,ANY)> ]
-  "18142" -> "18147" 
+digraph "GetJ" {  
+"17797" [label = <(METHOD,GetJ)> ]
+"17800" [label = <(METHOD_RETURN,ANY)> ]
+  "17797" -> "17800" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/409-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/409-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/409-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/409-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
-"18148" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
-"18153" [label = <(METHOD_RETURN,ANY)> ]
-  "18148" -> "18153" 
+digraph "GetS" {  
+"17801" [label = <(METHOD,GetS)> ]
+"17804" [label = <(METHOD_RETURN,ANY)> ]
+  "17801" -> "17804" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/41-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/41-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/41-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/41-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,49 +1,42 @@
-digraph "NewWeakGlobalRef" {  
-"1692" [label = <(soa,soa(env))<SUB>628</SUB>> ]
-"1694" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>629</SUB>> ]
-"1711" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>630</SUB>> ]
-"1695" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>629</SUB>> ]
-"1702" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>629</SUB>> ]
-"1712" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>630</SUB>> ]
-"1696" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>629</SUB>> ]
-"1703" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>629</SUB>> ]
-"1713" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>630</SUB>> ]
-"1719" [label = <(Self,soa.Self())<SUB>630</SUB>> ]
-"1698" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>629</SUB>> ]
-"1704" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>629</SUB>> ]
-"1707" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>629</SUB>> ]
-"1714" [label = <(Vm,soa.Vm())<SUB>630</SUB>> ]
-"1718" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>630</SUB>> ]
-"1720" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>630</SUB>> ]
-"1700" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>629</SUB>> ]
-"1706" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>629</SUB>> ]
-"1709" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>629</SUB>> ]
-"1715" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>630</SUB>> ]
-"1722" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>630</SUB>> ]
-"1717" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>630</SUB>> ]
-"1687" [label = <(METHOD,NewWeakGlobalRef)<SUB>627</SUB>> ]
-"1724" [label = <(METHOD_RETURN,jweak)<SUB>627</SUB>> ]
-  "1692" -> "1700" 
-  "1694" -> "1717" 
-  "1711" -> "1724" 
-  "1695" -> "1706" 
-  "1702" -> "1694" 
-  "1712" -> "1711" 
-  "1696" -> "1695" 
-  "1703" -> "1702" 
-  "1713" -> "1722" 
-  "1719" -> "1712" 
-  "1698" -> "1696" 
-  "1704" -> "1709" 
-  "1707" -> "1703" 
-  "1714" -> "1718" 
-  "1718" -> "1713" 
-  "1720" -> "1719" 
-  "1700" -> "1698" 
-  "1706" -> "1704" 
-  "1709" -> "1707" 
-  "1715" -> "1714" 
-  "1722" -> "1720" 
-  "1717" -> "1715" 
-  "1687" -> "1692" 
+digraph "IsSameObject" {  
+"1648" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>589</SUB>> ]
+"1652" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>590</SUB>> ]
+"1657" [label = <(soa,soa(env))<SUB>592</SUB>> ]
+"1659" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>593</SUB>> ]
+"1660" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>593</SUB>> ]
+"1661" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>593</SUB>> ]
+"1662" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>593</SUB>> ]
+"1671" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>593</SUB>> ]
+"1663" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>593</SUB>> ]
+"1672" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>593</SUB>> ]
+"1664" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>593</SUB>> ]
+"1667" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>593</SUB>> ]
+"1673" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>593</SUB>> ]
+"1676" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>593</SUB>> ]
+"1666" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>593</SUB>> ]
+"1669" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>593</SUB>> ]
+"1675" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>593</SUB>> ]
+"1678" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>593</SUB>> ]
+"1642" [label = <(METHOD,IsSameObject)<SUB>588</SUB>> ]
+"1682" [label = <(METHOD_RETURN,jboolean)<SUB>588</SUB>> ]
+  "1648" -> "1652" 
+  "1648" -> "1657" 
+  "1652" -> "1682" 
+  "1657" -> "1666" 
+  "1659" -> "1682" 
+  "1660" -> "1659" 
+  "1661" -> "1660" 
+  "1662" -> "1675" 
+  "1671" -> "1661" 
+  "1663" -> "1662" 
+  "1672" -> "1671" 
+  "1664" -> "1669" 
+  "1667" -> "1663" 
+  "1673" -> "1678" 
+  "1676" -> "1672" 
+  "1666" -> "1664" 
+  "1669" -> "1667" 
+  "1675" -> "1673" 
+  "1678" -> "1676" 
+  "1642" -> "1648" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/410-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/410-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/410-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/410-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "result" {  
-"18154" [label = <(METHOD,result)> ]
-"18157" [label = <(METHOD_RETURN,ANY)> ]
-  "18154" -> "18157" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
+"17805" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>307</SUB>> ]
+"17808" [label = <(METHOD_RETURN,ANY)> ]
+  "17805" -> "17808" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/411-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/411-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/411-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/411-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
-"18158" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
-"18164" [label = <(METHOD_RETURN,ANY)> ]
-  "18158" -> "18164" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
+"17809" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
+"17814" [label = <(METHOD_RETURN,ANY)> ]
+  "17809" -> "17814" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/412-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/412-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/412-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/412-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetL" {  
-"18165" [label = <(METHOD,GetL)> ]
-"18168" [label = <(METHOD_RETURN,ANY)> ]
-  "18165" -> "18168" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
+"17815" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
+"17820" [label = <(METHOD_RETURN,ANY)> ]
+  "17815" -> "17820" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/413-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/413-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/413-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/413-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithJValues" {  
-"18169" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
-"18175" [label = <(METHOD_RETURN,ANY)> ]
-  "18169" -> "18175" 
+digraph "InvokeWithVarArgs" {  
+"17821" [label = <(METHOD,InvokeWithVarArgs)> ]
+"17827" [label = <(METHOD_RETURN,ANY)> ]
+  "17821" -> "17827" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/414-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/414-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/414-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/414-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
-"18176" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>391</SUB>> ]
-"18179" [label = <(METHOD_RETURN,ANY)> ]
-  "18176" -> "18179" 
+digraph "InvokeWithJValues" {  
+"17828" [label = <(METHOD,InvokeWithJValues)> ]
+"17834" [label = <(METHOD_RETURN,ANY)> ]
+  "17828" -> "17834" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/415-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/415-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/415-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/415-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
-"18180" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
-"18185" [label = <(METHOD_RETURN,ANY)> ]
-  "18180" -> "18185" 
+digraph "GetObject" {  
+"17835" [label = <(METHOD,GetObject)> ]
+"17839" [label = <(METHOD_RETURN,ANY)> ]
+  "17835" -> "17839" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/416-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/416-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/416-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/416-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
-"18186" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
-"18191" [label = <(METHOD_RETURN,ANY)> ]
-  "18186" -> "18191" 
+digraph "GetDeclaringClass" {  
+"17840" [label = <(METHOD,GetDeclaringClass)> ]
+"17843" [label = <(METHOD_RETURN,ANY)> ]
+  "17840" -> "17843" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/417-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/417-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/417-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/417-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetZ" {  
-"18192" [label = <(METHOD,GetZ)> ]
-"18195" [label = <(METHOD_RETURN,ANY)> ]
-  "18192" -> "18195" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
+"17844" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
+"17849" [label = <(METHOD_RETURN,ANY)> ]
+  "17844" -> "17849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/418-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/418-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/418-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/418-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetB" {  
-"18196" [label = <(METHOD,GetB)> ]
-"18199" [label = <(METHOD_RETURN,ANY)> ]
-  "18196" -> "18199" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
+"17850" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
+"17855" [label = <(METHOD_RETURN,ANY)> ]
+  "17850" -> "17855" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/419-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/419-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/419-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/419-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetC" {  
-"18200" [label = <(METHOD,GetC)> ]
-"18203" [label = <(METHOD_RETURN,ANY)> ]
-  "18200" -> "18203" 
+digraph "GET_PRIMITIVE_FIELD" {  
+"17856" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1269</SUB>> ]
+"17859" [label = <(METHOD_RETURN,ANY)> ]
+  "17856" -> "17859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/42-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/42-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/42-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/42-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,27 +1,139 @@
-digraph "DeleteWeakGlobalRef" {  
-"1731" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>634</SUB>> ]
-"1738" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>635</SUB>> ]
-"1744" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>636</SUB>> ]
-"1733" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;vm)<SUB>634</SUB>> ]
-"1740" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self)<SUB>635</SUB>> ]
-"1745" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>636</SUB>> ]
-"1734" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>634</SUB>> ]
-"1736" [label = <(FIELD_IDENTIFIER,vm,vm)<SUB>634</SUB>> ]
-"1741" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>635</SUB>> ]
-"1743" [label = <(FIELD_IDENTIFIER,self,self)<SUB>635</SUB>> ]
-"1747" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>636</SUB>> ]
-"1726" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>633</SUB>> ]
-"1750" [label = <(METHOD_RETURN,void)<SUB>633</SUB>> ]
-  "1731" -> "1741" 
-  "1738" -> "1747" 
-  "1744" -> "1750" 
-  "1733" -> "1731" 
-  "1740" -> "1738" 
-  "1745" -> "1744" 
-  "1734" -> "1736" 
-  "1736" -> "1733" 
-  "1741" -> "1743" 
-  "1743" -> "1740" 
+digraph "AllocObject" {  
+"1688" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>599</SUB>> ]
+"1707" [label = <(soa,soa(env))<SUB>600</SUB>> ]
+"1709" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>601</SUB>> ]
+"1779" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>610</SUB>> ]
+"1710" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>601</SUB>> ]
+"1717" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>601</SUB>> ]
+"1732" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>602</SUB>> ]
+"1739" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>605</SUB>> ]
+"1780" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>610</SUB>> ]
+"1711" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>601</SUB>> ]
+"1718" [label = <(Self,soa.Self())<SUB>601</SUB>> ]
+"1722" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>601</SUB>> ]
+"1736" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>603</SUB>> ]
+"1740" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>605</SUB>> ]
+"1745" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>606</SUB>> ]
+"1757" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>607</SUB>> ]
+"1781" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>610</SUB>> ]
+"1786" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>610</SUB>> ]
+"1692" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>599</SUB>> ]
+"1713" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>601</SUB>> ]
+"1719" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>601</SUB>> ]
+"1723" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>601</SUB>> ]
+"1742" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>605</SUB>> ]
+"1747" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>606</SUB>> ]
+"1758" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>607</SUB>> ]
+"1782" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>610</SUB>> ]
+"1787" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>610</SUB>> ]
+"1790" [label = <(Self,soa.Self())<SUB>610</SUB>> ]
+"1693" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>599</SUB>> ]
+"1697" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>599</SUB>> ]
+"1704" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>599</SUB>> ]
+"1715" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>601</SUB>> ]
+"1721" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>601</SUB>> ]
+"1724" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>601</SUB>> ]
+"1727" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>601</SUB>> ]
+"1748" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>606</SUB>> ]
+"1759" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>607</SUB>> ]
+"1764" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>607</SUB>> ]
+"1784" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>610</SUB>> ]
+"1789" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>610</SUB>> ]
+"1791" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>610</SUB>> ]
+"1698" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>599</SUB>> ]
+"1726" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>601</SUB>> ]
+"1729" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>601</SUB>> ]
+"1749" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>606</SUB>> ]
+"1756" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>606</SUB>> ]
+"1760" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>607</SUB>> ]
+"1765" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>607</SUB>> ]
+"1772" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>607</SUB>> ]
+"1793" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>610</SUB>> ]
+"1699" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>599</SUB>> ]
+"1701" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>599</SUB>> ]
+"1750" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>606</SUB>> ]
+"1762" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>607</SUB>> ]
+"1766" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>607</SUB>> ]
+"1773" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>607</SUB>> ]
+"1751" [label = <(Runtime::Current,Runtime::Current())<SUB>606</SUB>> ]
+"1755" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>606</SUB>> ]
+"1767" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>607</SUB>> ]
+"1770" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>607</SUB>> ]
+"1774" [label = <(Self,soa.Self())<SUB>607</SUB>> ]
+"1752" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>606</SUB>> ]
+"1775" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>607</SUB>> ]
+"1754" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>606</SUB>> ]
+"1777" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>607</SUB>> ]
+"1684" [label = <(METHOD,AllocObject)<SUB>598</SUB>> ]
+"1794" [label = <(METHOD_RETURN,jobject)<SUB>598</SUB>> ]
+  "1688" -> "1693" 
+  "1688" -> "1707" 
+  "1707" -> "1715" 
+  "1709" -> "1732" 
+  "1779" -> "1794" 
+  "1710" -> "1721" 
+  "1717" -> "1709" 
+  "1732" -> "1736" 
+  "1732" -> "1742" 
+  "1739" -> "1754" 
+  "1739" -> "1784" 
+  "1780" -> "1779" 
+  "1711" -> "1710" 
+  "1718" -> "1726" 
+  "1722" -> "1717" 
+  "1736" -> "1794" 
+  "1740" -> "1739" 
+  "1745" -> "1762" 
+  "1757" -> "1794" 
+  "1781" -> "1789" 
+  "1786" -> "1780" 
+  "1692" -> "1699" 
+  "1692" -> "1707" 
+  "1713" -> "1711" 
+  "1719" -> "1718" 
+  "1723" -> "1722" 
+  "1742" -> "1740" 
   "1747" -> "1745" 
-  "1726" -> "1734" 
+  "1758" -> "1757" 
+  "1782" -> "1781" 
+  "1787" -> "1793" 
+  "1790" -> "1786" 
+  "1693" -> "1692" 
+  "1697" -> "1704" 
+  "1704" -> "1794" 
+  "1715" -> "1713" 
+  "1721" -> "1719" 
+  "1724" -> "1729" 
+  "1727" -> "1723" 
+  "1748" -> "1747" 
+  "1759" -> "1767" 
+  "1764" -> "1758" 
+  "1784" -> "1782" 
+  "1789" -> "1787" 
+  "1791" -> "1790" 
+  "1698" -> "1697" 
+  "1726" -> "1724" 
+  "1729" -> "1727" 
+  "1749" -> "1756" 
+  "1756" -> "1748" 
+  "1760" -> "1759" 
+  "1765" -> "1777" 
+  "1772" -> "1764" 
+  "1793" -> "1791" 
+  "1699" -> "1701" 
+  "1701" -> "1698" 
+  "1750" -> "1749" 
+  "1762" -> "1760" 
+  "1766" -> "1765" 
+  "1773" -> "1772" 
+  "1751" -> "1755" 
+  "1755" -> "1750" 
+  "1767" -> "1770" 
+  "1770" -> "1766" 
+  "1774" -> "1773" 
+  "1752" -> "1751" 
+  "1775" -> "1774" 
+  "1754" -> "1752" 
+  "1777" -> "1775" 
+  "1684" -> "1688" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/420-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/420-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/420-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/420-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetD" {  
-"18204" [label = <(METHOD,GetD)> ]
-"18207" [label = <(METHOD_RETURN,ANY)> ]
-  "18204" -> "18207" 
+digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
+"17860" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
+"17864" [label = <(METHOD_RETURN,ANY)> ]
+  "17860" -> "17864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/421-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/421-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/421-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/421-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetF" {  
-"18208" [label = <(METHOD,GetF)> ]
-"18211" [label = <(METHOD_RETURN,ANY)> ]
-  "18208" -> "18211" 
+digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
+"17865" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
+"17869" [label = <(METHOD_RETURN,ANY)> ]
+  "17865" -> "17869" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/422-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/422-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/422-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/422-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetI" {  
-"18212" [label = <(METHOD,GetI)> ]
-"18215" [label = <(METHOD_RETURN,ANY)> ]
-  "18212" -> "18215" 
+digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
+"17870" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
+"17874" [label = <(METHOD_RETURN,ANY)> ]
+  "17870" -> "17874" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/423-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/423-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/423-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/423-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetJ" {  
-"18216" [label = <(METHOD,GetJ)> ]
-"18219" [label = <(METHOD_RETURN,ANY)> ]
-  "18216" -> "18219" 
+digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
+"17875" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
+"17879" [label = <(METHOD_RETURN,ANY)> ]
+  "17875" -> "17879" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/424-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/424-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/424-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/424-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetS" {  
-"18220" [label = <(METHOD,GetS)> ]
-"18223" [label = <(METHOD_RETURN,ANY)> ]
-  "18220" -> "18223" 
+digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
+"17880" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
+"17884" [label = <(METHOD_RETURN,ANY)> ]
+  "17880" -> "17884" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/425-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/425-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/425-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/425-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
-"18224" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>388</SUB>> ]
-"18227" [label = <(METHOD_RETURN,ANY)> ]
-  "18224" -> "18227" 
+digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
+"17885" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
+"17889" [label = <(METHOD_RETURN,ANY)> ]
+  "17885" -> "17889" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/426-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/426-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/426-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/426-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
-"18228" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
-"18233" [label = <(METHOD_RETURN,ANY)> ]
-  "18228" -> "18233" 
+digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
+"17890" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
+"17894" [label = <(METHOD_RETURN,ANY)> ]
+  "17890" -> "17894" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/427-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/427-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/427-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/427-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
-"18234" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
-"18239" [label = <(METHOD_RETURN,ANY)> ]
-  "18234" -> "18239" 
+digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
+"17895" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
+"17899" [label = <(METHOD_RETURN,ANY)> ]
+  "17895" -> "17899" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/428-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/428-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/428-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/428-cfg.dot	2023-06-07 19:35:21.407385028 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithVarArgs" {  
-"18240" [label = <(METHOD,InvokeWithVarArgs)> ]
-"18246" [label = <(METHOD_RETURN,ANY)> ]
-  "18240" -> "18246" 
+digraph "GET_STATIC_PRIMITIVE_FIELD" {  
+"17900" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1277</SUB>> ]
+"17902" [label = <(METHOD_RETURN,ANY)> ]
+  "17900" -> "17902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/429-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/429-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/429-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/429-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithJValues" {  
-"18247" [label = <(METHOD,InvokeWithJValues)> ]
-"18253" [label = <(METHOD_RETURN,ANY)> ]
-  "18247" -> "18253" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
+"17903" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
+"17906" [label = <(METHOD_RETURN,ANY)> ]
+  "17903" -> "17906" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/43-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/43-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/43-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/43-cfg.dot	2023-06-07 19:35:21.217385053 +0330
@@ -1,44 +1,51 @@
-digraph "NewLocalRef" {  
-"1757" [label = <(soa,soa(env))<SUB>640</SUB>> ]
-"1759" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>641</SUB>> ]
-"1783" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>646</SUB>> ]
-"1760" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>641</SUB>> ]
-"1767" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>641</SUB>> ]
-"1777" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>643</SUB>> ]
-"1784" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>646</SUB>> ]
-"1761" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>641</SUB>> ]
-"1768" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>641</SUB>> ]
-"1781" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>644</SUB>> ]
-"1785" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>646</SUB>> ]
-"1763" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>641</SUB>> ]
-"1769" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>641</SUB>> ]
-"1772" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>641</SUB>> ]
-"1786" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>646</SUB>> ]
-"1765" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>641</SUB>> ]
-"1771" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>641</SUB>> ]
-"1774" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>641</SUB>> ]
-"1788" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>646</SUB>> ]
-"1752" [label = <(METHOD,NewLocalRef)<SUB>639</SUB>> ]
-"1791" [label = <(METHOD_RETURN,jobject)<SUB>639</SUB>> ]
-  "1757" -> "1765" 
-  "1759" -> "1777" 
-  "1783" -> "1791" 
-  "1760" -> "1771" 
-  "1767" -> "1759" 
-  "1777" -> "1781" 
-  "1777" -> "1788" 
-  "1784" -> "1783" 
-  "1761" -> "1760" 
-  "1768" -> "1767" 
-  "1781" -> "1791" 
-  "1785" -> "1784" 
-  "1763" -> "1761" 
-  "1769" -> "1774" 
-  "1772" -> "1768" 
-  "1786" -> "1785" 
-  "1765" -> "1763" 
-  "1771" -> "1769" 
-  "1774" -> "1772" 
-  "1788" -> "1786" 
-  "1752" -> "1757" 
+digraph "NewObject" {  
+"1802" [label = <(va_start,va_start(args, mid))<SUB>615</SUB>> ]
+"1805" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>616</SUB>> ]
+"1823" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>617</SUB>> ]
+"1842" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>618</SUB>> ]
+"1849" [label = <(va_end,va_end(args))<SUB>619</SUB>> ]
+"1851" [label = <(RETURN,return result;,return result;)<SUB>620</SUB>> ]
+"1844" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>618</SUB>> ]
+"1809" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>616</SUB>> ]
+"1827" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>617</SUB>> ]
+"1810" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>616</SUB>> ]
+"1814" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>616</SUB>> ]
+"1821" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>616</SUB>> ]
+"1828" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>617</SUB>> ]
+"1832" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>617</SUB>> ]
+"1839" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>617</SUB>> ]
+"1815" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>616</SUB>> ]
+"1833" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>617</SUB>> ]
+"1816" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>616</SUB>> ]
+"1818" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>616</SUB>> ]
+"1834" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>617</SUB>> ]
+"1836" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>617</SUB>> ]
+"1796" [label = <(METHOD,NewObject)<SUB>613</SUB>> ]
+"1853" [label = <(METHOD_RETURN,jobject)<SUB>613</SUB>> ]
+  "1802" -> "1805" 
+  "1805" -> "1810" 
+  "1805" -> "1823" 
+  "1823" -> "1828" 
+  "1823" -> "1844" 
+  "1842" -> "1849" 
+  "1849" -> "1851" 
+  "1851" -> "1853" 
+  "1844" -> "1842" 
+  "1809" -> "1816" 
+  "1809" -> "1823" 
+  "1827" -> "1834" 
+  "1827" -> "1844" 
+  "1810" -> "1809" 
+  "1814" -> "1821" 
+  "1821" -> "1853" 
+  "1828" -> "1827" 
+  "1832" -> "1839" 
+  "1839" -> "1853" 
+  "1815" -> "1814" 
+  "1833" -> "1832" 
+  "1816" -> "1818" 
+  "1818" -> "1815" 
+  "1834" -> "1836" 
+  "1836" -> "1833" 
+  "1796" -> "1802" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/430-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/430-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/430-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/430-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetObject" {  
-"18254" [label = <(METHOD,GetObject)> ]
-"18258" [label = <(METHOD_RETURN,ANY)> ]
-  "18254" -> "18258" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
+"17907" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
+"17910" [label = <(METHOD_RETURN,ANY)> ]
+  "17907" -> "17910" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/431-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/431-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/431-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/431-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetDeclaringClass" {  
-"18259" [label = <(METHOD,GetDeclaringClass)> ]
-"18262" [label = <(METHOD_RETURN,ANY)> ]
-  "18259" -> "18262" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
+"17911" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
+"17914" [label = <(METHOD_RETURN,ANY)> ]
+  "17911" -> "17914" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/432-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/432-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/432-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/432-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
-"18263" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
-"18268" [label = <(METHOD_RETURN,ANY)> ]
-  "18263" -> "18268" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
+"17915" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
+"17918" [label = <(METHOD_RETURN,ANY)> ]
+  "17915" -> "17918" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/433-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/433-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/433-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/433-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
-"18269" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
-"18274" [label = <(METHOD_RETURN,ANY)> ]
-  "18269" -> "18274" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
+"17919" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
+"17922" [label = <(METHOD_RETURN,ANY)> ]
+  "17919" -> "17922" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/434-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/434-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/434-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/434-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD" {  
-"18275" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1350</SUB>> ]
-"18278" [label = <(METHOD_RETURN,ANY)> ]
-  "18275" -> "18278" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
+"17923" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
+"17926" [label = <(METHOD_RETURN,ANY)> ]
+  "17923" -> "17926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/435-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/435-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/435-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/435-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
-"18279" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
-"18283" [label = <(METHOD_RETURN,ANY)> ]
-  "18279" -> "18283" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
+"17927" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
+"17930" [label = <(METHOD_RETURN,ANY)> ]
+  "17927" -> "17930" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/436-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/436-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/436-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/436-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
-"18284" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
-"18288" [label = <(METHOD_RETURN,ANY)> ]
-  "18284" -> "18288" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
+"17931" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
+"17934" [label = <(METHOD_RETURN,ANY)> ]
+  "17931" -> "17934" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/437-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/437-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/437-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/437-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
-"18289" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
-"18293" [label = <(METHOD_RETURN,ANY)> ]
-  "18289" -> "18293" 
+digraph "SET_PRIMITIVE_FIELD" {  
+"17935" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1283</SUB>> ]
+"17938" [label = <(METHOD_RETURN,ANY)> ]
+  "17935" -> "17938" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/438-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/438-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/438-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/438-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
-"18294" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
-"18298" [label = <(METHOD_RETURN,ANY)> ]
-  "18294" -> "18298" 
+digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
+"17939" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
+"17943" [label = <(METHOD_RETURN,ANY)> ]
+  "17939" -> "17943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/439-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/439-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/439-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/439-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
-"18299" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
-"18303" [label = <(METHOD_RETURN,ANY)> ]
-  "18299" -> "18303" 
+digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
+"17944" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
+"17948" [label = <(METHOD_RETURN,ANY)> ]
+  "17944" -> "17948" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/44-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/44-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/44-cfg.dot	2023-06-07 19:35:14.677385855 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/44-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,43 +1,169 @@
-digraph "DeleteLocalRef" {  
-"1804" [label = <(soa,soa(env))<SUB>656</SUB>> ]
-"1807" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>657</SUB>> ]
-"1798" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>650</SUB>> ]
-"1809" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>657</SUB>> ]
-"1812" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals.Remove(ext_env-&gt;local_ref_cookie, obj))<SUB>658</SUB>> ]
-"1802" [label = <(RETURN,return;,return;)<SUB>651</SUB>> ]
-"1813" [label = <(Remove,ext_env-&gt;locals.Remove(ext_env-&gt;local_ref_cookie, obj))<SUB>658</SUB>> ]
-"1824" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>664</SUB>> ]
-"1814" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals.Remove)<SUB>658</SUB>> ]
-"1819" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie)<SUB>658</SUB>> ]
-"1825" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>664</SUB>> ]
-"1815" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals)<SUB>658</SUB>> ]
-"1818" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>658</SUB>> ]
-"1821" [label = <(FIELD_IDENTIFIER,local_ref_cookie,local_ref_cookie)<SUB>658</SUB>> ]
-"1826" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>664</SUB>> ]
-"1817" [label = <(FIELD_IDENTIFIER,locals,locals)<SUB>658</SUB>> ]
-"1827" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>664</SUB>> ]
-"1828" [label = <(LOG,LOG(WARNING))<SUB>664</SUB>> ]
-"1793" [label = <(METHOD,DeleteLocalRef)<SUB>649</SUB>> ]
-"1834" [label = <(METHOD_RETURN,void)<SUB>649</SUB>> ]
-  "1804" -> "1809" 
-  "1807" -> "1817" 
-  "1798" -> "1802" 
-  "1798" -> "1804" 
-  "1809" -> "1807" 
-  "1812" -> "1834" 
-  "1812" -> "1828" 
-  "1802" -> "1834" 
-  "1813" -> "1812" 
-  "1824" -> "1834" 
-  "1814" -> "1821" 
-  "1819" -> "1813" 
-  "1825" -> "1824" 
-  "1815" -> "1818" 
-  "1818" -> "1814" 
-  "1821" -> "1819" 
-  "1826" -> "1825" 
-  "1817" -> "1815" 
-  "1827" -> "1826" 
-  "1828" -> "1827" 
-  "1793" -> "1798" 
+digraph "NewObjectV" {  
+"1861" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>624</SUB>> ]
+"1879" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>625</SUB>> ]
+"1898" [label = <(soa,soa(env))<SUB>626</SUB>> ]
+"1900" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>627</SUB>> ]
+"1959" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>638</SUB>> ]
+"1983" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>642</SUB>> ]
+"1992" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>643</SUB>> ]
+"2009" [label = <(RETURN,return local_result;,return local_result;)<SUB>647</SUB>> ]
+"1901" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>627</SUB>> ]
+"1908" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>627</SUB>> ]
+"1923" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>629</SUB>> ]
+"1930" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>632</SUB>> ]
+"1960" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>638</SUB>> ]
+"1967" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>638</SUB>> ]
+"1976" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>639</SUB>> ]
+"1985" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>642</SUB>> ]
+"1999" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>644</SUB>> ]
+"1902" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>627</SUB>> ]
+"1909" [label = <(Self,soa.Self())<SUB>627</SUB>> ]
+"1913" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>628</SUB>> ]
+"1927" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>630</SUB>> ]
+"1931" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>632</SUB>> ]
+"1936" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>634</SUB>> ]
+"1951" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>636</SUB>> ]
+"1961" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>638</SUB>> ]
+"1968" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>638</SUB>> ]
+"1971" [label = <(Self,soa.Self())<SUB>638</SUB>> ]
+"1980" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>640</SUB>> ]
+"1986" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>642</SUB>> ]
+"2000" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>644</SUB>> ]
+"2007" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>645</SUB>> ]
+"1865" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>624</SUB>> ]
+"1883" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>625</SUB>> ]
+"1904" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>627</SUB>> ]
+"1910" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>627</SUB>> ]
+"1914" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>628</SUB>> ]
+"1933" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>632</SUB>> ]
+"1938" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>634</SUB>> ]
+"1952" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>636</SUB>> ]
+"1963" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>638</SUB>> ]
+"1970" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>638</SUB>> ]
+"1972" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>638</SUB>> ]
+"1987" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>642</SUB>> ]
+"2001" [label = <(Self,soa.Self())<SUB>644</SUB>> ]
+"2005" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>644</SUB>> ]
+"1866" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>624</SUB>> ]
+"1870" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>624</SUB>> ]
+"1877" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>624</SUB>> ]
+"1884" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>625</SUB>> ]
+"1888" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>625</SUB>> ]
+"1895" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>625</SUB>> ]
+"1906" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>627</SUB>> ]
+"1912" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>627</SUB>> ]
+"1915" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>628</SUB>> ]
+"1918" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>628</SUB>> ]
+"1939" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>634</SUB>> ]
+"1942" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>635</SUB>> ]
+"1954" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>636</SUB>> ]
+"1965" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>638</SUB>> ]
+"1974" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>638</SUB>> ]
+"1989" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>642</SUB>> ]
+"2002" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>644</SUB>> ]
+"1871" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>624</SUB>> ]
+"1889" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>625</SUB>> ]
+"1917" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>628</SUB>> ]
+"1920" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>628</SUB>> ]
+"1941" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>634</SUB>> ]
+"1943" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>635</SUB>> ]
+"1946" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>635</SUB>> ]
+"1956" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>636</SUB>> ]
+"2004" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>644</SUB>> ]
+"1872" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>624</SUB>> ]
+"1874" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>624</SUB>> ]
+"1890" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>625</SUB>> ]
+"1892" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>625</SUB>> ]
+"1945" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>635</SUB>> ]
+"1947" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>635</SUB>> ]
+"1949" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>635</SUB>> ]
+"1855" [label = <(METHOD,NewObjectV)<SUB>623</SUB>> ]
+"2011" [label = <(METHOD_RETURN,jobject)<SUB>623</SUB>> ]
+  "1861" -> "1866" 
+  "1861" -> "1879" 
+  "1879" -> "1884" 
+  "1879" -> "1898" 
+  "1898" -> "1906" 
+  "1900" -> "1923" 
+  "1959" -> "1976" 
+  "1983" -> "1992" 
+  "1992" -> "2004" 
+  "2009" -> "2011" 
+  "1901" -> "1912" 
+  "1908" -> "1900" 
+  "1923" -> "1927" 
+  "1923" -> "1933" 
+  "1930" -> "1941" 
+  "1930" -> "1965" 
+  "1960" -> "1970" 
+  "1967" -> "1959" 
+  "1976" -> "1980" 
+  "1976" -> "1989" 
+  "1985" -> "1983" 
+  "1999" -> "2007" 
+  "1999" -> "2009" 
+  "1902" -> "1901" 
+  "1909" -> "1917" 
+  "1913" -> "1908" 
+  "1927" -> "2011" 
+  "1931" -> "1930" 
+  "1936" -> "1956" 
+  "1951" -> "2011" 
+  "1961" -> "1960" 
+  "1968" -> "1974" 
+  "1971" -> "1967" 
+  "1980" -> "2011" 
+  "1986" -> "1985" 
+  "2000" -> "1999" 
+  "2007" -> "2011" 
+  "1865" -> "1872" 
+  "1865" -> "1879" 
+  "1883" -> "1890" 
+  "1883" -> "1898" 
+  "1904" -> "1902" 
+  "1910" -> "1909" 
+  "1914" -> "1913" 
+  "1933" -> "1931" 
+  "1938" -> "1936" 
+  "1952" -> "1951" 
+  "1963" -> "1961" 
+  "1970" -> "1968" 
+  "1972" -> "1971" 
+  "1987" -> "1986" 
+  "2001" -> "2005" 
+  "2005" -> "2000" 
+  "1866" -> "1865" 
+  "1870" -> "1877" 
+  "1877" -> "2011" 
+  "1884" -> "1883" 
+  "1888" -> "1895" 
+  "1895" -> "2011" 
+  "1906" -> "1904" 
+  "1912" -> "1910" 
+  "1915" -> "1920" 
+  "1918" -> "1914" 
+  "1939" -> "1945" 
+  "1942" -> "1938" 
+  "1954" -> "1952" 
+  "1965" -> "1963" 
+  "1974" -> "1972" 
+  "1989" -> "1987" 
+  "2002" -> "2001" 
+  "1871" -> "1870" 
+  "1889" -> "1888" 
+  "1917" -> "1915" 
+  "1920" -> "1918" 
+  "1941" -> "1939" 
+  "1943" -> "1949" 
+  "1946" -> "1942" 
+  "1956" -> "1954" 
+  "2004" -> "2002" 
+  "1872" -> "1874" 
+  "1874" -> "1871" 
+  "1890" -> "1892" 
+  "1892" -> "1889" 
+  "1945" -> "1943" 
+  "1947" -> "1946" 
+  "1949" -> "1947" 
+  "1855" -> "1861" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/440-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/440-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/440-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/440-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
-"18304" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
-"18308" [label = <(METHOD_RETURN,ANY)> ]
-  "18304" -> "18308" 
+digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
+"17949" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
+"17953" [label = <(METHOD_RETURN,ANY)> ]
+  "17949" -> "17953" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/441-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/441-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/441-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/441-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
-"18309" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
-"18313" [label = <(METHOD_RETURN,ANY)> ]
-  "18309" -> "18313" 
+digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
+"17954" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
+"17958" [label = <(METHOD_RETURN,ANY)> ]
+  "17954" -> "17958" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/442-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/442-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/442-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/442-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
-"18314" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
-"18318" [label = <(METHOD_RETURN,ANY)> ]
-  "18314" -> "18318" 
+digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
+"17959" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
+"17963" [label = <(METHOD_RETURN,ANY)> ]
+  "17959" -> "17963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/443-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/443-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/443-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/443-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD" {  
-"18319" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1358</SUB>> ]
-"18321" [label = <(METHOD_RETURN,ANY)> ]
-  "18319" -> "18321" 
+digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
+"17964" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
+"17968" [label = <(METHOD_RETURN,ANY)> ]
+  "17964" -> "17968" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/444-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/444-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/444-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/444-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
-"18322" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
-"18325" [label = <(METHOD_RETURN,ANY)> ]
-  "18322" -> "18325" 
+digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
+"17969" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
+"17973" [label = <(METHOD_RETURN,ANY)> ]
+  "17969" -> "17973" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/445-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/445-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/445-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/445-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
-"18326" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
-"18329" [label = <(METHOD_RETURN,ANY)> ]
-  "18326" -> "18329" 
+digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
+"17974" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
+"17978" [label = <(METHOD_RETURN,ANY)> ]
+  "17974" -> "17978" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/446-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/446-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/446-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/446-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
-"18330" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
-"18333" [label = <(METHOD_RETURN,ANY)> ]
-  "18330" -> "18333" 
+digraph "SET_STATIC_PRIMITIVE_FIELD" {  
+"17979" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1291</SUB>> ]
+"17981" [label = <(METHOD_RETURN,ANY)> ]
+  "17979" -> "17981" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/447-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/447-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/447-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/447-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
-"18334" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
-"18337" [label = <(METHOD_RETURN,ANY)> ]
-  "18334" -> "18337" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
+"17982" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
+"17985" [label = <(METHOD_RETURN,ANY)> ]
+  "17982" -> "17985" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/448-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/448-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/448-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/448-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
-"18338" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
-"18341" [label = <(METHOD_RETURN,ANY)> ]
-  "18338" -> "18341" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
+"17986" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
+"17989" [label = <(METHOD_RETURN,ANY)> ]
+  "17986" -> "17989" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/449-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/449-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/449-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/449-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
-"18342" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
-"18345" [label = <(METHOD_RETURN,ANY)> ]
-  "18342" -> "18345" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
+"17990" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
+"17993" [label = <(METHOD_RETURN,ANY)> ]
+  "17990" -> "17993" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/45-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/45-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/45-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/45-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,42 +1,169 @@
-digraph "IsSameObject" {  
-"1842" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>670</SUB>> ]
-"1846" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>671</SUB>> ]
-"1851" [label = <(soa,soa(env))<SUB>673</SUB>> ]
-"1853" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>674</SUB>> ]
-"1854" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>674</SUB>> ]
-"1855" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>674</SUB>> ]
-"1856" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>674</SUB>> ]
-"1865" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>674</SUB>> ]
-"1857" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>674</SUB>> ]
-"1866" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>674</SUB>> ]
-"1858" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>674</SUB>> ]
-"1861" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>674</SUB>> ]
-"1867" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>674</SUB>> ]
-"1870" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>674</SUB>> ]
-"1860" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>674</SUB>> ]
-"1863" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>674</SUB>> ]
-"1869" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>674</SUB>> ]
-"1872" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>674</SUB>> ]
-"1836" [label = <(METHOD,IsSameObject)<SUB>669</SUB>> ]
-"1876" [label = <(METHOD_RETURN,jboolean)<SUB>669</SUB>> ]
-  "1842" -> "1846" 
-  "1842" -> "1851" 
-  "1846" -> "1876" 
-  "1851" -> "1860" 
-  "1853" -> "1876" 
-  "1854" -> "1853" 
-  "1855" -> "1854" 
-  "1856" -> "1869" 
-  "1865" -> "1855" 
-  "1857" -> "1856" 
-  "1866" -> "1865" 
-  "1858" -> "1863" 
-  "1861" -> "1857" 
-  "1867" -> "1872" 
-  "1870" -> "1866" 
-  "1860" -> "1858" 
-  "1863" -> "1861" 
-  "1869" -> "1867" 
-  "1872" -> "1870" 
-  "1836" -> "1842" 
+digraph "NewObjectA" {  
+"2019" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>651</SUB>> ]
+"2037" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>652</SUB>> ]
+"2056" [label = <(soa,soa(env))<SUB>653</SUB>> ]
+"2058" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>654</SUB>> ]
+"2117" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>665</SUB>> ]
+"2141" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>669</SUB>> ]
+"2150" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>670</SUB>> ]
+"2167" [label = <(RETURN,return local_result;,return local_result;)<SUB>674</SUB>> ]
+"2059" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>654</SUB>> ]
+"2066" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>654</SUB>> ]
+"2081" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>656</SUB>> ]
+"2088" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>659</SUB>> ]
+"2118" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>665</SUB>> ]
+"2125" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>665</SUB>> ]
+"2134" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>666</SUB>> ]
+"2143" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>669</SUB>> ]
+"2157" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>671</SUB>> ]
+"2060" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>654</SUB>> ]
+"2067" [label = <(Self,soa.Self())<SUB>654</SUB>> ]
+"2071" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>655</SUB>> ]
+"2085" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>657</SUB>> ]
+"2089" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>659</SUB>> ]
+"2094" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>661</SUB>> ]
+"2109" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>663</SUB>> ]
+"2119" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>665</SUB>> ]
+"2126" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>665</SUB>> ]
+"2129" [label = <(Self,soa.Self())<SUB>665</SUB>> ]
+"2138" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>667</SUB>> ]
+"2144" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>669</SUB>> ]
+"2158" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>671</SUB>> ]
+"2165" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>672</SUB>> ]
+"2023" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>651</SUB>> ]
+"2041" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>652</SUB>> ]
+"2062" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>654</SUB>> ]
+"2068" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>654</SUB>> ]
+"2072" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>655</SUB>> ]
+"2091" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>659</SUB>> ]
+"2096" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>661</SUB>> ]
+"2110" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>663</SUB>> ]
+"2121" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>665</SUB>> ]
+"2128" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>665</SUB>> ]
+"2130" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>665</SUB>> ]
+"2145" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>669</SUB>> ]
+"2159" [label = <(Self,soa.Self())<SUB>671</SUB>> ]
+"2163" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>671</SUB>> ]
+"2024" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>651</SUB>> ]
+"2028" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>651</SUB>> ]
+"2035" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>651</SUB>> ]
+"2042" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>652</SUB>> ]
+"2046" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>652</SUB>> ]
+"2053" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>652</SUB>> ]
+"2064" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>654</SUB>> ]
+"2070" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>654</SUB>> ]
+"2073" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>655</SUB>> ]
+"2076" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>655</SUB>> ]
+"2097" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>661</SUB>> ]
+"2100" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>662</SUB>> ]
+"2112" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>663</SUB>> ]
+"2123" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>665</SUB>> ]
+"2132" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>665</SUB>> ]
+"2147" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>669</SUB>> ]
+"2160" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>671</SUB>> ]
+"2029" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>651</SUB>> ]
+"2047" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>652</SUB>> ]
+"2075" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>655</SUB>> ]
+"2078" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>655</SUB>> ]
+"2099" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>661</SUB>> ]
+"2101" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>662</SUB>> ]
+"2104" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>662</SUB>> ]
+"2114" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>663</SUB>> ]
+"2162" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>671</SUB>> ]
+"2030" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>651</SUB>> ]
+"2032" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>651</SUB>> ]
+"2048" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>652</SUB>> ]
+"2050" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>652</SUB>> ]
+"2103" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>662</SUB>> ]
+"2105" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>662</SUB>> ]
+"2107" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>662</SUB>> ]
+"2013" [label = <(METHOD,NewObjectA)<SUB>650</SUB>> ]
+"2169" [label = <(METHOD_RETURN,jobject)<SUB>650</SUB>> ]
+  "2019" -> "2024" 
+  "2019" -> "2037" 
+  "2037" -> "2042" 
+  "2037" -> "2056" 
+  "2056" -> "2064" 
+  "2058" -> "2081" 
+  "2117" -> "2134" 
+  "2141" -> "2150" 
+  "2150" -> "2162" 
+  "2167" -> "2169" 
+  "2059" -> "2070" 
+  "2066" -> "2058" 
+  "2081" -> "2085" 
+  "2081" -> "2091" 
+  "2088" -> "2099" 
+  "2088" -> "2123" 
+  "2118" -> "2128" 
+  "2125" -> "2117" 
+  "2134" -> "2138" 
+  "2134" -> "2147" 
+  "2143" -> "2141" 
+  "2157" -> "2165" 
+  "2157" -> "2167" 
+  "2060" -> "2059" 
+  "2067" -> "2075" 
+  "2071" -> "2066" 
+  "2085" -> "2169" 
+  "2089" -> "2088" 
+  "2094" -> "2114" 
+  "2109" -> "2169" 
+  "2119" -> "2118" 
+  "2126" -> "2132" 
+  "2129" -> "2125" 
+  "2138" -> "2169" 
+  "2144" -> "2143" 
+  "2158" -> "2157" 
+  "2165" -> "2169" 
+  "2023" -> "2030" 
+  "2023" -> "2037" 
+  "2041" -> "2048" 
+  "2041" -> "2056" 
+  "2062" -> "2060" 
+  "2068" -> "2067" 
+  "2072" -> "2071" 
+  "2091" -> "2089" 
+  "2096" -> "2094" 
+  "2110" -> "2109" 
+  "2121" -> "2119" 
+  "2128" -> "2126" 
+  "2130" -> "2129" 
+  "2145" -> "2144" 
+  "2159" -> "2163" 
+  "2163" -> "2158" 
+  "2024" -> "2023" 
+  "2028" -> "2035" 
+  "2035" -> "2169" 
+  "2042" -> "2041" 
+  "2046" -> "2053" 
+  "2053" -> "2169" 
+  "2064" -> "2062" 
+  "2070" -> "2068" 
+  "2073" -> "2078" 
+  "2076" -> "2072" 
+  "2097" -> "2103" 
+  "2100" -> "2096" 
+  "2112" -> "2110" 
+  "2123" -> "2121" 
+  "2132" -> "2130" 
+  "2147" -> "2145" 
+  "2160" -> "2159" 
+  "2029" -> "2028" 
+  "2047" -> "2046" 
+  "2075" -> "2073" 
+  "2078" -> "2076" 
+  "2099" -> "2097" 
+  "2101" -> "2107" 
+  "2104" -> "2100" 
+  "2114" -> "2112" 
+  "2162" -> "2160" 
+  "2030" -> "2032" 
+  "2032" -> "2029" 
+  "2048" -> "2050" 
+  "2050" -> "2047" 
+  "2103" -> "2101" 
+  "2105" -> "2104" 
+  "2107" -> "2105" 
+  "2013" -> "2019" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/450-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/450-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/450-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/450-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
-"18346" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
-"18349" [label = <(METHOD_RETURN,ANY)> ]
-  "18346" -> "18349" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
+"17994" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
+"17997" [label = <(METHOD_RETURN,ANY)> ]
+  "17994" -> "17997" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/451-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/451-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/451-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/451-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
-"18350" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
-"18353" [label = <(METHOD_RETURN,ANY)> ]
-  "18350" -> "18353" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
+"17998" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
+"18001" [label = <(METHOD_RETURN,ANY)> ]
+  "17998" -> "18001" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/452-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/452-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/452-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/452-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD" {  
-"18354" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1364</SUB>> ]
-"18357" [label = <(METHOD_RETURN,ANY)> ]
-  "18354" -> "18357" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
+"18002" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
+"18005" [label = <(METHOD_RETURN,ANY)> ]
+  "18002" -> "18005" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/453-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/453-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/453-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/453-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
-"18358" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
-"18362" [label = <(METHOD_RETURN,ANY)> ]
-  "18358" -> "18362" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
+"18006" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
+"18009" [label = <(METHOD_RETURN,ANY)> ]
+  "18006" -> "18009" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/454-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/454-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/454-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/454-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
-"18363" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
-"18367" [label = <(METHOD_RETURN,ANY)> ]
-  "18363" -> "18367" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
+"18010" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
+"18013" [label = <(METHOD_RETURN,ANY)> ]
+  "18010" -> "18013" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/455-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/455-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/455-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/455-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
-"18368" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
-"18372" [label = <(METHOD_RETURN,ANY)> ]
-  "18368" -> "18372" 
+digraph "JniAbortF" {  
+"18014" [label = <(METHOD,JniAbortF)> ]
+"18020" [label = <(METHOD_RETURN,ANY)> ]
+  "18014" -> "18020" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/456-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/456-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/456-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/456-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
-"18373" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
-"18377" [label = <(METHOD_RETURN,ANY)> ]
-  "18373" -> "18377" 
+digraph "&lt;operator&gt;.logicalAnd" {  
+"18021" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
+"18025" [label = <(METHOD_RETURN,ANY)> ]
+  "18021" -> "18025" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/457-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/457-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/457-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/457-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
-"18378" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
-"18382" [label = <(METHOD_RETURN,ANY)> ]
-  "18378" -> "18382" 
+digraph "mirror::String::AllocFromUtf16" {  
+"18026" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
+"18032" [label = <(METHOD_RETURN,ANY)> ]
+  "18026" -> "18032" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/458-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/458-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/458-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/458-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
-"18383" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
-"18387" [label = <(METHOD_RETURN,ANY)> ]
-  "18383" -> "18387" 
+digraph "mirror::String::AllocFromModifiedUtf8" {  
+"18033" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
+"18038" [label = <(METHOD_RETURN,ANY)> ]
+  "18033" -> "18038" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/459-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/459-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/459-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/459-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
-"18388" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
-"18392" [label = <(METHOD_RETURN,ANY)> ]
-  "18388" -> "18392" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
+"18039" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
+"18044" [label = <(METHOD_RETURN,ANY)> ]
+  "18039" -> "18044" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/46-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/46-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/46-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/46-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,139 +1,65 @@
-digraph "AllocObject" {  
-"1882" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>680</SUB>> ]
-"1901" [label = <(soa,soa(env))<SUB>681</SUB>> ]
-"1903" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>682</SUB>> ]
-"1973" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>691</SUB>> ]
-"1904" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>682</SUB>> ]
-"1911" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>682</SUB>> ]
-"1926" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>683</SUB>> ]
-"1933" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>686</SUB>> ]
-"1974" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>691</SUB>> ]
-"1905" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>682</SUB>> ]
-"1912" [label = <(Self,soa.Self())<SUB>682</SUB>> ]
-"1916" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>682</SUB>> ]
-"1930" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>684</SUB>> ]
-"1934" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>686</SUB>> ]
-"1939" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>687</SUB>> ]
-"1951" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>688</SUB>> ]
-"1975" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>691</SUB>> ]
-"1980" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>691</SUB>> ]
-"1886" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>680</SUB>> ]
-"1907" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>682</SUB>> ]
-"1913" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>682</SUB>> ]
-"1917" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>682</SUB>> ]
-"1936" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>686</SUB>> ]
-"1941" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>687</SUB>> ]
-"1952" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>688</SUB>> ]
-"1976" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>691</SUB>> ]
-"1981" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>691</SUB>> ]
-"1984" [label = <(Self,soa.Self())<SUB>691</SUB>> ]
-"1887" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>680</SUB>> ]
-"1891" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>680</SUB>> ]
-"1898" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>680</SUB>> ]
-"1909" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>682</SUB>> ]
-"1915" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>682</SUB>> ]
-"1918" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>682</SUB>> ]
-"1921" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>682</SUB>> ]
-"1942" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>687</SUB>> ]
-"1953" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>688</SUB>> ]
-"1958" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>688</SUB>> ]
-"1978" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>691</SUB>> ]
-"1983" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>691</SUB>> ]
-"1985" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>691</SUB>> ]
-"1892" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>680</SUB>> ]
-"1920" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>682</SUB>> ]
-"1923" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>682</SUB>> ]
-"1943" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>687</SUB>> ]
-"1950" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>687</SUB>> ]
-"1954" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>688</SUB>> ]
-"1959" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>688</SUB>> ]
-"1966" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>688</SUB>> ]
-"1987" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>691</SUB>> ]
-"1893" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>680</SUB>> ]
-"1895" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>680</SUB>> ]
-"1944" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>687</SUB>> ]
-"1956" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>688</SUB>> ]
-"1960" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>688</SUB>> ]
-"1967" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>688</SUB>> ]
-"1945" [label = <(Runtime::Current,Runtime::Current())<SUB>687</SUB>> ]
-"1949" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>687</SUB>> ]
-"1961" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>688</SUB>> ]
-"1964" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>688</SUB>> ]
-"1968" [label = <(Self,soa.Self())<SUB>688</SUB>> ]
-"1946" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>687</SUB>> ]
-"1969" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>688</SUB>> ]
-"1948" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>687</SUB>> ]
-"1971" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>688</SUB>> ]
-"1878" [label = <(METHOD,AllocObject)<SUB>679</SUB>> ]
-"1988" [label = <(METHOD_RETURN,jobject)<SUB>679</SUB>> ]
-  "1882" -> "1887" 
-  "1882" -> "1901" 
-  "1901" -> "1909" 
-  "1903" -> "1926" 
-  "1973" -> "1988" 
-  "1904" -> "1915" 
-  "1911" -> "1903" 
-  "1926" -> "1930" 
-  "1926" -> "1936" 
-  "1933" -> "1948" 
-  "1933" -> "1978" 
-  "1974" -> "1973" 
-  "1905" -> "1904" 
-  "1912" -> "1920" 
-  "1916" -> "1911" 
-  "1930" -> "1988" 
-  "1934" -> "1933" 
-  "1939" -> "1956" 
-  "1951" -> "1988" 
-  "1975" -> "1983" 
-  "1980" -> "1974" 
-  "1886" -> "1893" 
-  "1886" -> "1901" 
-  "1907" -> "1905" 
-  "1913" -> "1912" 
-  "1917" -> "1916" 
-  "1936" -> "1934" 
-  "1941" -> "1939" 
-  "1952" -> "1951" 
-  "1976" -> "1975" 
-  "1981" -> "1987" 
-  "1984" -> "1980" 
-  "1887" -> "1886" 
-  "1891" -> "1898" 
-  "1898" -> "1988" 
-  "1909" -> "1907" 
-  "1915" -> "1913" 
-  "1918" -> "1923" 
-  "1921" -> "1917" 
-  "1942" -> "1941" 
-  "1953" -> "1961" 
-  "1958" -> "1952" 
-  "1978" -> "1976" 
-  "1983" -> "1981" 
-  "1985" -> "1984" 
-  "1892" -> "1891" 
-  "1920" -> "1918" 
-  "1923" -> "1921" 
-  "1943" -> "1950" 
-  "1950" -> "1942" 
-  "1954" -> "1953" 
-  "1959" -> "1971" 
-  "1966" -> "1958" 
-  "1987" -> "1985" 
-  "1893" -> "1895" 
-  "1895" -> "1892" 
-  "1944" -> "1943" 
-  "1956" -> "1954" 
-  "1960" -> "1959" 
-  "1967" -> "1966" 
-  "1945" -> "1949" 
-  "1949" -> "1944" 
-  "1961" -> "1964" 
-  "1964" -> "1960" 
-  "1968" -> "1967" 
-  "1946" -> "1945" 
-  "1969" -> "1968" 
-  "1948" -> "1946" 
-  "1971" -> "1969" 
-  "1878" -> "1882" 
+digraph "GetMethodID" {  
+"2177" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>678</SUB>> ]
+"2195" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>679</SUB>> ]
+"2213" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>680</SUB>> ]
+"2232" [label = <(soa,soa(env))<SUB>681</SUB>> ]
+"2234" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>682</SUB>> ]
+"2235" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>682</SUB>> ]
+"2181" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>678</SUB>> ]
+"2199" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>679</SUB>> ]
+"2217" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>680</SUB>> ]
+"2182" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>678</SUB>> ]
+"2186" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>678</SUB>> ]
+"2193" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>678</SUB>> ]
+"2200" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>679</SUB>> ]
+"2204" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>679</SUB>> ]
+"2211" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>679</SUB>> ]
+"2218" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>680</SUB>> ]
+"2222" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>680</SUB>> ]
+"2229" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>680</SUB>> ]
+"2187" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>678</SUB>> ]
+"2205" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>679</SUB>> ]
+"2223" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>680</SUB>> ]
+"2188" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>678</SUB>> ]
+"2190" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>678</SUB>> ]
+"2206" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>679</SUB>> ]
+"2208" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>679</SUB>> ]
+"2224" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>680</SUB>> ]
+"2226" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>680</SUB>> ]
+"2171" [label = <(METHOD,GetMethodID)<SUB>677</SUB>> ]
+"2241" [label = <(METHOD_RETURN,jmethodID)<SUB>677</SUB>> ]
+  "2177" -> "2182" 
+  "2177" -> "2195" 
+  "2195" -> "2200" 
+  "2195" -> "2213" 
+  "2213" -> "2218" 
+  "2213" -> "2232" 
+  "2232" -> "2235" 
+  "2234" -> "2241" 
+  "2235" -> "2234" 
+  "2181" -> "2188" 
+  "2181" -> "2195" 
+  "2199" -> "2206" 
+  "2199" -> "2213" 
+  "2217" -> "2224" 
+  "2217" -> "2232" 
+  "2182" -> "2181" 
+  "2186" -> "2193" 
+  "2193" -> "2241" 
+  "2200" -> "2199" 
+  "2204" -> "2211" 
+  "2211" -> "2241" 
+  "2218" -> "2217" 
+  "2222" -> "2229" 
+  "2229" -> "2241" 
+  "2187" -> "2186" 
+  "2205" -> "2204" 
+  "2223" -> "2222" 
+  "2188" -> "2190" 
+  "2190" -> "2187" 
+  "2206" -> "2208" 
+  "2208" -> "2205" 
+  "2224" -> "2226" 
+  "2226" -> "2223" 
+  "2171" -> "2177" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/460-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/460-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/460-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/460-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
-"18393" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
-"18397" [label = <(METHOD_RETURN,ANY)> ]
-  "18393" -> "18397" 
+digraph "GetLength" {  
+"18045" [label = <(METHOD,GetLength)> ]
+"18048" [label = <(METHOD_RETURN,ANY)> ]
+  "18045" -> "18048" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/461-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/461-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/461-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/461-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD" {  
-"18398" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1372</SUB>> ]
-"18400" [label = <(METHOD_RETURN,ANY)> ]
-  "18398" -> "18400" 
+digraph "GetUtfLength" {  
+"18049" [label = <(METHOD,GetUtfLength)> ]
+"18052" [label = <(METHOD_RETURN,ANY)> ]
+  "18049" -> "18052" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/462-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/462-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/462-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/462-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
-"18401" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
-"18404" [label = <(METHOD_RETURN,ANY)> ]
-  "18401" -> "18404" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
+"18053" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
+"18058" [label = <(METHOD_RETURN,ANY)> ]
+  "18053" -> "18058" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/463-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/463-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/463-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/463-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
-"18405" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
-"18408" [label = <(METHOD_RETURN,ANY)> ]
-  "18405" -> "18408" 
+digraph "&lt;operator&gt;.logicalOr" {  
+"18059" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
+"18063" [label = <(METHOD_RETURN,ANY)> ]
+  "18059" -> "18063" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/464-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/464-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/464-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/464-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
-"18409" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
-"18412" [label = <(METHOD_RETURN,ANY)> ]
-  "18409" -> "18412" 
+digraph "&lt;operator&gt;.subtraction" {  
+"18064" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
+"18068" [label = <(METHOD_RETURN,ANY)> ]
+  "18064" -> "18068" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/465-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/465-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/465-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/465-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
-"18413" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
-"18416" [label = <(METHOD_RETURN,ANY)> ]
-  "18413" -> "18416" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
+"18069" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>322</SUB>> ]
+"18073" [label = <(METHOD_RETURN,ANY)> ]
+  "18069" -> "18073" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/466-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/466-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/466-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/466-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
-"18417" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
-"18420" [label = <(METHOD_RETURN,ANY)> ]
-  "18417" -> "18420" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
+"18074" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
+"18079" [label = <(METHOD_RETURN,ANY)> ]
+  "18074" -> "18079" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/467-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/467-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/467-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/467-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
-"18421" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
-"18424" [label = <(METHOD_RETURN,ANY)> ]
-  "18421" -> "18424" 
+digraph "IsCompressed" {  
+"18080" [label = <(METHOD,IsCompressed)> ]
+"18083" [label = <(METHOD_RETURN,ANY)> ]
+  "18080" -> "18083" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/468-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/468-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/468-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/468-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
-"18425" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
-"18428" [label = <(METHOD_RETURN,ANY)> ]
-  "18425" -> "18428" 
+digraph "&lt;operator&gt;.preIncrement" {  
+"18084" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
+"18087" [label = <(METHOD_RETURN,ANY)> ]
+  "18084" -> "18087" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/469-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/469-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/469-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/469-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
-"18429" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
-"18432" [label = <(METHOD_RETURN,ANY)> ]
-  "18429" -> "18432" 
+digraph "CharAt" {  
+"18088" [label = <(METHOD,CharAt)> ]
+"18092" [label = <(METHOD_RETURN,ANY)> ]
+  "18088" -> "18092" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/47-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/47-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/47-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/47-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,51 +1,65 @@
-digraph "NewObject" {  
-"1996" [label = <(va_start,va_start(args, mid))<SUB>696</SUB>> ]
-"1999" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>697</SUB>> ]
-"2017" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>698</SUB>> ]
-"2036" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>699</SUB>> ]
-"2043" [label = <(va_end,va_end(args))<SUB>700</SUB>> ]
-"2045" [label = <(RETURN,return result;,return result;)<SUB>701</SUB>> ]
-"2038" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>699</SUB>> ]
-"2003" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>697</SUB>> ]
-"2021" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>698</SUB>> ]
-"2004" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>697</SUB>> ]
-"2008" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>697</SUB>> ]
-"2015" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>697</SUB>> ]
-"2022" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>698</SUB>> ]
-"2026" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>698</SUB>> ]
-"2033" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>698</SUB>> ]
-"2009" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>697</SUB>> ]
-"2027" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>698</SUB>> ]
-"2010" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>697</SUB>> ]
-"2012" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>697</SUB>> ]
-"2028" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>698</SUB>> ]
-"2030" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>698</SUB>> ]
-"1990" [label = <(METHOD,NewObject)<SUB>694</SUB>> ]
-"2047" [label = <(METHOD_RETURN,jobject)<SUB>694</SUB>> ]
-  "1996" -> "1999" 
-  "1999" -> "2004" 
-  "1999" -> "2017" 
-  "2017" -> "2022" 
-  "2017" -> "2038" 
-  "2036" -> "2043" 
-  "2043" -> "2045" 
-  "2045" -> "2047" 
-  "2038" -> "2036" 
-  "2003" -> "2010" 
-  "2003" -> "2017" 
-  "2021" -> "2028" 
-  "2021" -> "2038" 
-  "2004" -> "2003" 
-  "2008" -> "2015" 
-  "2015" -> "2047" 
-  "2022" -> "2021" 
-  "2026" -> "2033" 
-  "2033" -> "2047" 
-  "2009" -> "2008" 
-  "2027" -> "2026" 
-  "2010" -> "2012" 
-  "2012" -> "2009" 
-  "2028" -> "2030" 
-  "2030" -> "2027" 
-  "1990" -> "1996" 
+digraph "GetStaticMethodID" {  
+"2249" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>687</SUB>> ]
+"2267" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>688</SUB>> ]
+"2285" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>689</SUB>> ]
+"2304" [label = <(soa,soa(env))<SUB>690</SUB>> ]
+"2306" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>691</SUB>> ]
+"2307" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>691</SUB>> ]
+"2253" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>687</SUB>> ]
+"2271" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>688</SUB>> ]
+"2289" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>689</SUB>> ]
+"2254" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>687</SUB>> ]
+"2258" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>687</SUB>> ]
+"2265" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>687</SUB>> ]
+"2272" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>688</SUB>> ]
+"2276" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>688</SUB>> ]
+"2283" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>688</SUB>> ]
+"2290" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>689</SUB>> ]
+"2294" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>689</SUB>> ]
+"2301" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>689</SUB>> ]
+"2259" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>687</SUB>> ]
+"2277" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>688</SUB>> ]
+"2295" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>689</SUB>> ]
+"2260" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>687</SUB>> ]
+"2262" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>687</SUB>> ]
+"2278" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>688</SUB>> ]
+"2280" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>688</SUB>> ]
+"2296" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>689</SUB>> ]
+"2298" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>689</SUB>> ]
+"2243" [label = <(METHOD,GetStaticMethodID)<SUB>685</SUB>> ]
+"2313" [label = <(METHOD_RETURN,jmethodID)<SUB>685</SUB>> ]
+  "2249" -> "2254" 
+  "2249" -> "2267" 
+  "2267" -> "2272" 
+  "2267" -> "2285" 
+  "2285" -> "2290" 
+  "2285" -> "2304" 
+  "2304" -> "2307" 
+  "2306" -> "2313" 
+  "2307" -> "2306" 
+  "2253" -> "2260" 
+  "2253" -> "2267" 
+  "2271" -> "2278" 
+  "2271" -> "2285" 
+  "2289" -> "2296" 
+  "2289" -> "2304" 
+  "2254" -> "2253" 
+  "2258" -> "2265" 
+  "2265" -> "2313" 
+  "2272" -> "2271" 
+  "2276" -> "2283" 
+  "2283" -> "2313" 
+  "2290" -> "2289" 
+  "2294" -> "2301" 
+  "2301" -> "2313" 
+  "2259" -> "2258" 
+  "2277" -> "2276" 
+  "2295" -> "2294" 
+  "2260" -> "2262" 
+  "2262" -> "2259" 
+  "2278" -> "2280" 
+  "2280" -> "2277" 
+  "2296" -> "2298" 
+  "2298" -> "2295" 
+  "2243" -> "2249" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/470-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/470-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/470-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/470-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "JniAbortF" {  
-"18433" [label = <(METHOD,JniAbortF)> ]
-"18439" [label = <(METHOD_RETURN,ANY)> ]
-  "18433" -> "18439" 
+digraph "&lt;operator&gt;.addition" {  
+"18093" [label = <(METHOD,&lt;operator&gt;.addition)> ]
+"18097" [label = <(METHOD_RETURN,ANY)> ]
+  "18093" -> "18097" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/471-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/471-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/471-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/471-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromUtf16" {  
-"18440" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
-"18446" [label = <(METHOD_RETURN,ANY)> ]
-  "18440" -> "18446" 
+digraph "GetValue" {  
+"18098" [label = <(METHOD,GetValue)> ]
+"18101" [label = <(METHOD_RETURN,ANY)> ]
+  "18098" -> "18101" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/472-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/472-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/472-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/472-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "::max" {  
-"18447" [label = <(METHOD,::max)> ]
-"18450" [label = <(METHOD_RETURN,ANY)> ]
-  "18447" -> "18450" 
+digraph "memcpy" {  
+"18102" [label = <(METHOD,memcpy)> ]
+"18107" [label = <(METHOD_RETURN,ANY)> ]
+  "18102" -> "18107" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/473-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/473-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/473-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/473-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "android::base::StringPrintf" {  
-"18451" [label = <(METHOD,android::base::StringPrintf)> ]
-"18456" [label = <(METHOD_RETURN,ANY)> ]
-  "18451" -> "18456" 
+digraph "&lt;operator&gt;.sizeOf" {  
+"18108" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
+"18111" [label = <(METHOD_RETURN,ANY)> ]
+  "18108" -> "18111" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/474-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/474-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/474-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/474-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowOutOfMemoryError" {  
-"18457" [label = <(METHOD,ThrowOutOfMemoryError)> ]
-"18461" [label = <(METHOD_RETURN,ANY)> ]
-  "18457" -> "18461" 
+digraph "CountUtf8Bytes" {  
+"18112" [label = <(METHOD,CountUtf8Bytes)> ]
+"18116" [label = <(METHOD_RETURN,ANY)> ]
+  "18112" -> "18116" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/475-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/475-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/475-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/475-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "UINT64_C" {  
-"18462" [label = <(METHOD,UINT64_C)> ]
-"18465" [label = <(METHOD_RETURN,ANY)> ]
-  "18462" -> "18465" 
+digraph "ConvertUtf16ToModifiedUtf8" {  
+"18117" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
+"18123" [label = <(METHOD_RETURN,ANY)> ]
+  "18117" -> "18123" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/476-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/476-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/476-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/476-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "prev_bad_input_time" {  
-"18466" [label = <(METHOD,prev_bad_input_time)> ]
-"18469" [label = <(METHOD_RETURN,ANY)> ]
-  "18466" -> "18469" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
+"18124" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
+"18129" [label = <(METHOD_RETURN,ANY)> ]
+  "18124" -> "18129" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/477-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/477-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/477-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/477-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "load" {  
-"18470" [label = <(METHOD,load)> ]
-"18474" [label = <(METHOD_RETURN,ANY)> ]
-  "18470" -> "18474" 
+digraph "IsMovableObject" {  
+"18130" [label = <(METHOD,IsMovableObject)> ]
+"18134" [label = <(METHOD_RETURN,ANY)> ]
+  "18130" -> "18134" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/478-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/478-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/478-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/478-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NanoTime" {  
-"18475" [label = <(METHOD,NanoTime)> ]
-"18477" [label = <(METHOD_RETURN,ANY)> ]
-  "18475" -> "18477" 
+digraph "&lt;operator&gt;.new" {  
+"18135" [label = <(METHOD,&lt;operator&gt;.new)> ]
+"18138" [label = <(METHOD_RETURN,ANY)> ]
+  "18135" -> "18138" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/479-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/479-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/479-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/479-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalOr" {  
-"18478" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
-"18482" [label = <(METHOD_RETURN,ANY)> ]
-  "18478" -> "18482" 
+digraph "&lt;operator&gt;.indirection" {  
+"18139" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
+"18142" [label = <(METHOD_RETURN,ANY)> ]
+  "18139" -> "18142" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/48-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/48-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/48-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/48-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,169 +1,67 @@
-digraph "NewObjectV" {  
-"2055" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>705</SUB>> ]
-"2073" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>706</SUB>> ]
-"2092" [label = <(soa,soa(env))<SUB>707</SUB>> ]
-"2094" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>708</SUB>> ]
-"2153" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>719</SUB>> ]
-"2177" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>723</SUB>> ]
-"2186" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>724</SUB>> ]
-"2203" [label = <(RETURN,return local_result;,return local_result;)<SUB>728</SUB>> ]
-"2095" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>708</SUB>> ]
-"2102" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>708</SUB>> ]
-"2117" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>710</SUB>> ]
-"2124" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>713</SUB>> ]
-"2154" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>719</SUB>> ]
-"2161" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>719</SUB>> ]
-"2170" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>720</SUB>> ]
-"2179" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>723</SUB>> ]
-"2193" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>725</SUB>> ]
-"2096" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>708</SUB>> ]
-"2103" [label = <(Self,soa.Self())<SUB>708</SUB>> ]
-"2107" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>709</SUB>> ]
-"2121" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>711</SUB>> ]
-"2125" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>713</SUB>> ]
-"2130" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>715</SUB>> ]
-"2145" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>717</SUB>> ]
-"2155" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>719</SUB>> ]
-"2162" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>719</SUB>> ]
-"2165" [label = <(Self,soa.Self())<SUB>719</SUB>> ]
-"2174" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>721</SUB>> ]
-"2180" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>723</SUB>> ]
-"2194" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>725</SUB>> ]
-"2201" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>726</SUB>> ]
-"2059" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>705</SUB>> ]
-"2077" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>706</SUB>> ]
-"2098" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>708</SUB>> ]
-"2104" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>708</SUB>> ]
-"2108" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>709</SUB>> ]
-"2127" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>713</SUB>> ]
-"2132" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>715</SUB>> ]
-"2146" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>717</SUB>> ]
-"2157" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>719</SUB>> ]
-"2164" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>719</SUB>> ]
-"2166" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>719</SUB>> ]
-"2181" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>723</SUB>> ]
-"2195" [label = <(Self,soa.Self())<SUB>725</SUB>> ]
-"2199" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>725</SUB>> ]
-"2060" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>705</SUB>> ]
-"2064" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>705</SUB>> ]
-"2071" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>705</SUB>> ]
-"2078" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>706</SUB>> ]
-"2082" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>706</SUB>> ]
-"2089" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>706</SUB>> ]
-"2100" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>708</SUB>> ]
-"2106" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>708</SUB>> ]
-"2109" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>709</SUB>> ]
-"2112" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>709</SUB>> ]
-"2133" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>715</SUB>> ]
-"2136" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>716</SUB>> ]
-"2148" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>717</SUB>> ]
-"2159" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>719</SUB>> ]
-"2168" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>719</SUB>> ]
-"2183" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>723</SUB>> ]
-"2196" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>725</SUB>> ]
-"2065" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>705</SUB>> ]
-"2083" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>706</SUB>> ]
-"2111" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>709</SUB>> ]
-"2114" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>709</SUB>> ]
-"2135" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>715</SUB>> ]
-"2137" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>716</SUB>> ]
-"2140" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>716</SUB>> ]
-"2150" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>717</SUB>> ]
-"2198" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>725</SUB>> ]
-"2066" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>705</SUB>> ]
-"2068" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>705</SUB>> ]
-"2084" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>706</SUB>> ]
-"2086" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>706</SUB>> ]
-"2139" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>716</SUB>> ]
-"2141" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>716</SUB>> ]
-"2143" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>716</SUB>> ]
-"2049" [label = <(METHOD,NewObjectV)<SUB>704</SUB>> ]
-"2205" [label = <(METHOD_RETURN,jobject)<SUB>704</SUB>> ]
-  "2055" -> "2060" 
-  "2055" -> "2073" 
-  "2073" -> "2078" 
-  "2073" -> "2092" 
-  "2092" -> "2100" 
-  "2094" -> "2117" 
-  "2153" -> "2170" 
-  "2177" -> "2186" 
-  "2186" -> "2198" 
-  "2203" -> "2205" 
-  "2095" -> "2106" 
-  "2102" -> "2094" 
-  "2117" -> "2121" 
-  "2117" -> "2127" 
-  "2124" -> "2135" 
-  "2124" -> "2159" 
-  "2154" -> "2164" 
-  "2161" -> "2153" 
-  "2170" -> "2174" 
-  "2170" -> "2183" 
-  "2179" -> "2177" 
-  "2193" -> "2201" 
-  "2193" -> "2203" 
-  "2096" -> "2095" 
-  "2103" -> "2111" 
-  "2107" -> "2102" 
-  "2121" -> "2205" 
-  "2125" -> "2124" 
-  "2130" -> "2150" 
-  "2145" -> "2205" 
-  "2155" -> "2154" 
-  "2162" -> "2168" 
-  "2165" -> "2161" 
-  "2174" -> "2205" 
-  "2180" -> "2179" 
-  "2194" -> "2193" 
-  "2201" -> "2205" 
-  "2059" -> "2066" 
-  "2059" -> "2073" 
-  "2077" -> "2084" 
-  "2077" -> "2092" 
-  "2098" -> "2096" 
-  "2104" -> "2103" 
-  "2108" -> "2107" 
-  "2127" -> "2125" 
-  "2132" -> "2130" 
-  "2146" -> "2145" 
-  "2157" -> "2155" 
-  "2164" -> "2162" 
-  "2166" -> "2165" 
-  "2181" -> "2180" 
-  "2195" -> "2199" 
-  "2199" -> "2194" 
-  "2060" -> "2059" 
-  "2064" -> "2071" 
-  "2071" -> "2205" 
-  "2078" -> "2077" 
-  "2082" -> "2089" 
-  "2089" -> "2205" 
-  "2100" -> "2098" 
-  "2106" -> "2104" 
-  "2109" -> "2114" 
-  "2112" -> "2108" 
-  "2133" -> "2139" 
-  "2136" -> "2132" 
-  "2148" -> "2146" 
-  "2159" -> "2157" 
-  "2168" -> "2166" 
-  "2183" -> "2181" 
-  "2196" -> "2195" 
-  "2065" -> "2064" 
-  "2083" -> "2082" 
-  "2111" -> "2109" 
-  "2114" -> "2112" 
-  "2135" -> "2133" 
-  "2137" -> "2143" 
-  "2140" -> "2136" 
-  "2150" -> "2148" 
-  "2198" -> "2196" 
-  "2066" -> "2068" 
-  "2068" -> "2065" 
-  "2084" -> "2086" 
-  "2086" -> "2083" 
-  "2139" -> "2137" 
-  "2141" -> "2140" 
-  "2143" -> "2141" 
-  "2049" -> "2055" 
+digraph "CallObjectMethod" {  
+"2321" [label = <(va_start,va_start(ap, mid))<SUB>696</SUB>> ]
+"2324" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>697</SUB>> ]
+"2342" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>698</SUB>> ]
+"2361" [label = <(soa,soa(env))<SUB>699</SUB>> ]
+"2364" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>700</SUB>> ]
+"2370" [label = <(va_end,va_end(ap))<SUB>701</SUB>> ]
+"2372" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>702</SUB>> ]
+"2365" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>700</SUB>> ]
+"2373" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>702</SUB>> ]
+"2374" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>702</SUB>> ]
+"2379" [label = <(GetL,result.GetL())<SUB>702</SUB>> ]
+"2328" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>697</SUB>> ]
+"2346" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>698</SUB>> ]
+"2375" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>702</SUB>> ]
+"2380" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>702</SUB>> ]
+"2329" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>697</SUB>> ]
+"2333" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>697</SUB>> ]
+"2340" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>697</SUB>> ]
+"2347" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>698</SUB>> ]
+"2351" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>698</SUB>> ]
+"2358" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>698</SUB>> ]
+"2377" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>702</SUB>> ]
+"2382" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>702</SUB>> ]
+"2334" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>697</SUB>> ]
+"2352" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>698</SUB>> ]
+"2335" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>697</SUB>> ]
+"2337" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>697</SUB>> ]
+"2353" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>698</SUB>> ]
+"2355" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>698</SUB>> ]
+"2315" [label = <(METHOD,CallObjectMethod)<SUB>694</SUB>> ]
+"2383" [label = <(METHOD_RETURN,jobject)<SUB>694</SUB>> ]
+  "2321" -> "2324" 
+  "2324" -> "2329" 
+  "2324" -> "2342" 
+  "2342" -> "2347" 
+  "2342" -> "2361" 
+  "2361" -> "2365" 
+  "2364" -> "2370" 
+  "2370" -> "2377" 
+  "2372" -> "2383" 
+  "2365" -> "2364" 
+  "2373" -> "2372" 
+  "2374" -> "2382" 
+  "2379" -> "2373" 
+  "2328" -> "2335" 
+  "2328" -> "2342" 
+  "2346" -> "2353" 
+  "2346" -> "2361" 
+  "2375" -> "2374" 
+  "2380" -> "2379" 
+  "2329" -> "2328" 
+  "2333" -> "2340" 
+  "2340" -> "2383" 
+  "2347" -> "2346" 
+  "2351" -> "2358" 
+  "2358" -> "2383" 
+  "2377" -> "2375" 
+  "2382" -> "2380" 
+  "2334" -> "2333" 
+  "2352" -> "2351" 
+  "2335" -> "2337" 
+  "2337" -> "2334" 
+  "2353" -> "2355" 
+  "2355" -> "2352" 
+  "2315" -> "2321" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/480-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/480-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/480-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/480-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterEqualsThan" {  
-"18483" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
-"18487" [label = <(METHOD_RETURN,ANY)> ]
-  "18483" -> "18487" 
+digraph "&lt;operator&gt;.delete" {  
+"18143" [label = <(METHOD,&lt;operator&gt;.delete)> ]
+"18146" [label = <(METHOD_RETURN,ANY)> ]
+  "18143" -> "18146" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/481-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/481-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/481-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/481-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "compare_exchange_strong" {  
-"18488" [label = <(METHOD,compare_exchange_strong)> ]
-"18494" [label = <(METHOD_RETURN,ANY)> ]
-  "18488" -> "18494" 
+digraph "h" {  
+"18147" [label = <(METHOD,h)> ]
+"18150" [label = <(METHOD_RETURN,ANY)> ]
+  "18147" -> "18150" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/482-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/482-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/482-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/482-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "reset" {  
-"18495" [label = <(METHOD,reset)> ]
-"18499" [label = <(METHOD_RETURN,ANY)> ]
-  "18495" -> "18499" 
+digraph "NewHandleWrapper" {  
+"18151" [label = <(METHOD,NewHandleWrapper)> ]
+"18155" [label = <(METHOD_RETURN,ANY)> ]
+  "18151" -> "18155" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/483-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/483-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/483-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/483-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.new" {  
-"18500" [label = <(METHOD,&lt;operator&gt;.new)> ]
-"18503" [label = <(METHOD_RETURN,ANY)> ]
-  "18500" -> "18503" 
+digraph "&lt;operator&gt;.addressOf" {  
+"18156" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
+"18159" [label = <(METHOD_RETURN,ANY)> ]
+  "18156" -> "18159" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/484-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/484-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/484-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/484-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "VisitModifiedUtf8Chars" {  
-"18504" [label = <(METHOD,VisitModifiedUtf8Chars)> ]
-"18510" [label = <(METHOD_RETURN,ANY)> ]
-  "18504" -> "18510" 
+digraph "IncrementDisableMovingGC" {  
+"18160" [label = <(METHOD,IncrementDisableMovingGC)> ]
+"18164" [label = <(METHOD_RETURN,ANY)> ]
+  "18160" -> "18164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/485-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/485-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/485-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/485-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromModifiedUtf8" {  
-"18511" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
-"18518" [label = <(METHOD_RETURN,ANY)> ]
-  "18511" -> "18518" 
+digraph "IncrementDisableThreadFlip" {  
+"18165" [label = <(METHOD,IncrementDisableThreadFlip)> ]
+"18169" [label = <(METHOD_RETURN,ANY)> ]
+  "18165" -> "18169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/486-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/486-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/486-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/486-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
-"18519" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
-"18524" [label = <(METHOD_RETURN,ANY)> ]
-  "18519" -> "18524" 
+digraph "DecrementDisableMovingGC" {  
+"18170" [label = <(METHOD,DecrementDisableMovingGC)> ]
+"18174" [label = <(METHOD_RETURN,ANY)> ]
+  "18170" -> "18174" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/487-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/487-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/487-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/487-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetLength" {  
-"18525" [label = <(METHOD,GetLength)> ]
-"18528" [label = <(METHOD_RETURN,ANY)> ]
-  "18525" -> "18528" 
+digraph "DecrementDisableThreadFlip" {  
+"18175" [label = <(METHOD,DecrementDisableThreadFlip)> ]
+"18179" [label = <(METHOD_RETURN,ANY)> ]
+  "18175" -> "18179" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/488-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/488-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/488-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/488-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetUtfLength" {  
-"18529" [label = <(METHOD,GetUtfLength)> ]
-"18532" [label = <(METHOD_RETURN,ANY)> ]
-  "18529" -> "18532" 
+digraph "CHECK" {  
+"18180" [label = <(METHOD,CHECK)> ]
+"18183" [label = <(METHOD_RETURN,ANY)> ]
+  "18180" -> "18183" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/489-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/489-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/489-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/489-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
-"18533" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
-"18538" [label = <(METHOD_RETURN,ANY)> ]
-  "18533" -> "18538" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
+"18184" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
+"18189" [label = <(METHOD_RETURN,ANY)> ]
+  "18184" -> "18189" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/49-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/49-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/49-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/49-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,169 +1,63 @@
-digraph "NewObjectA" {  
-"2213" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>732</SUB>> ]
-"2231" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>733</SUB>> ]
-"2250" [label = <(soa,soa(env))<SUB>734</SUB>> ]
-"2252" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>735</SUB>> ]
-"2311" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>746</SUB>> ]
-"2335" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>750</SUB>> ]
-"2344" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>751</SUB>> ]
-"2361" [label = <(RETURN,return local_result;,return local_result;)<SUB>755</SUB>> ]
-"2253" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>735</SUB>> ]
-"2260" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>735</SUB>> ]
-"2275" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>737</SUB>> ]
-"2282" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>740</SUB>> ]
-"2312" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>746</SUB>> ]
-"2319" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>746</SUB>> ]
-"2328" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>747</SUB>> ]
-"2337" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>750</SUB>> ]
-"2351" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>752</SUB>> ]
-"2254" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>735</SUB>> ]
-"2261" [label = <(Self,soa.Self())<SUB>735</SUB>> ]
-"2265" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>736</SUB>> ]
-"2279" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>738</SUB>> ]
-"2283" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>740</SUB>> ]
-"2288" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>742</SUB>> ]
-"2303" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>744</SUB>> ]
-"2313" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>746</SUB>> ]
-"2320" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>746</SUB>> ]
-"2323" [label = <(Self,soa.Self())<SUB>746</SUB>> ]
-"2332" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>748</SUB>> ]
-"2338" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>750</SUB>> ]
-"2352" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>752</SUB>> ]
-"2359" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>753</SUB>> ]
-"2217" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>732</SUB>> ]
-"2235" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>733</SUB>> ]
-"2256" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>735</SUB>> ]
-"2262" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>735</SUB>> ]
-"2266" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>736</SUB>> ]
-"2285" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>740</SUB>> ]
-"2290" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>742</SUB>> ]
-"2304" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>744</SUB>> ]
-"2315" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>746</SUB>> ]
-"2322" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>746</SUB>> ]
-"2324" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>746</SUB>> ]
-"2339" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>750</SUB>> ]
-"2353" [label = <(Self,soa.Self())<SUB>752</SUB>> ]
-"2357" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>752</SUB>> ]
-"2218" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>732</SUB>> ]
-"2222" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>732</SUB>> ]
-"2229" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>732</SUB>> ]
-"2236" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>733</SUB>> ]
-"2240" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>733</SUB>> ]
-"2247" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>733</SUB>> ]
-"2258" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>735</SUB>> ]
-"2264" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>735</SUB>> ]
-"2267" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>736</SUB>> ]
-"2270" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>736</SUB>> ]
-"2291" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>742</SUB>> ]
-"2294" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>743</SUB>> ]
-"2306" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>744</SUB>> ]
-"2317" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>746</SUB>> ]
-"2326" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>746</SUB>> ]
-"2341" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>750</SUB>> ]
-"2354" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>752</SUB>> ]
-"2223" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>732</SUB>> ]
-"2241" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>733</SUB>> ]
-"2269" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>736</SUB>> ]
-"2272" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>736</SUB>> ]
-"2293" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>742</SUB>> ]
-"2295" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>743</SUB>> ]
-"2298" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>743</SUB>> ]
-"2308" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>744</SUB>> ]
-"2356" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>752</SUB>> ]
-"2224" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>732</SUB>> ]
-"2226" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>732</SUB>> ]
-"2242" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>733</SUB>> ]
-"2244" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>733</SUB>> ]
-"2297" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>743</SUB>> ]
-"2299" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>743</SUB>> ]
-"2301" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>743</SUB>> ]
-"2207" [label = <(METHOD,NewObjectA)<SUB>731</SUB>> ]
-"2363" [label = <(METHOD_RETURN,jobject)<SUB>731</SUB>> ]
-  "2213" -> "2218" 
-  "2213" -> "2231" 
-  "2231" -> "2236" 
-  "2231" -> "2250" 
-  "2250" -> "2258" 
-  "2252" -> "2275" 
-  "2311" -> "2328" 
-  "2335" -> "2344" 
-  "2344" -> "2356" 
-  "2361" -> "2363" 
-  "2253" -> "2264" 
-  "2260" -> "2252" 
-  "2275" -> "2279" 
-  "2275" -> "2285" 
-  "2282" -> "2293" 
-  "2282" -> "2317" 
-  "2312" -> "2322" 
-  "2319" -> "2311" 
-  "2328" -> "2332" 
-  "2328" -> "2341" 
-  "2337" -> "2335" 
-  "2351" -> "2359" 
-  "2351" -> "2361" 
-  "2254" -> "2253" 
-  "2261" -> "2269" 
-  "2265" -> "2260" 
-  "2279" -> "2363" 
-  "2283" -> "2282" 
-  "2288" -> "2308" 
-  "2303" -> "2363" 
-  "2313" -> "2312" 
-  "2320" -> "2326" 
-  "2323" -> "2319" 
-  "2332" -> "2363" 
-  "2338" -> "2337" 
-  "2352" -> "2351" 
-  "2359" -> "2363" 
-  "2217" -> "2224" 
-  "2217" -> "2231" 
-  "2235" -> "2242" 
-  "2235" -> "2250" 
-  "2256" -> "2254" 
-  "2262" -> "2261" 
-  "2266" -> "2265" 
-  "2285" -> "2283" 
-  "2290" -> "2288" 
-  "2304" -> "2303" 
-  "2315" -> "2313" 
-  "2322" -> "2320" 
-  "2324" -> "2323" 
-  "2339" -> "2338" 
-  "2353" -> "2357" 
-  "2357" -> "2352" 
-  "2218" -> "2217" 
-  "2222" -> "2229" 
-  "2229" -> "2363" 
-  "2236" -> "2235" 
-  "2240" -> "2247" 
-  "2247" -> "2363" 
-  "2258" -> "2256" 
-  "2264" -> "2262" 
-  "2267" -> "2272" 
-  "2270" -> "2266" 
-  "2291" -> "2297" 
-  "2294" -> "2290" 
-  "2306" -> "2304" 
-  "2317" -> "2315" 
-  "2326" -> "2324" 
-  "2341" -> "2339" 
-  "2354" -> "2353" 
-  "2223" -> "2222" 
-  "2241" -> "2240" 
-  "2269" -> "2267" 
-  "2272" -> "2270" 
-  "2293" -> "2291" 
-  "2295" -> "2301" 
-  "2298" -> "2294" 
-  "2308" -> "2306" 
-  "2356" -> "2354" 
-  "2224" -> "2226" 
-  "2226" -> "2223" 
-  "2242" -> "2244" 
-  "2244" -> "2241" 
-  "2297" -> "2295" 
-  "2299" -> "2298" 
-  "2301" -> "2299" 
-  "2207" -> "2213" 
+digraph "CallObjectMethodV" {  
+"2391" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>706</SUB>> ]
+"2409" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>707</SUB>> ]
+"2428" [label = <(soa,soa(env))<SUB>708</SUB>> ]
+"2431" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>709</SUB>> ]
+"2437" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>710</SUB>> ]
+"2432" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>709</SUB>> ]
+"2438" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>710</SUB>> ]
+"2439" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>710</SUB>> ]
+"2444" [label = <(GetL,result.GetL())<SUB>710</SUB>> ]
+"2395" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>706</SUB>> ]
+"2413" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>707</SUB>> ]
+"2440" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>710</SUB>> ]
+"2445" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>710</SUB>> ]
+"2396" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>706</SUB>> ]
+"2400" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>706</SUB>> ]
+"2407" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>706</SUB>> ]
+"2414" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>707</SUB>> ]
+"2418" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>707</SUB>> ]
+"2425" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>707</SUB>> ]
+"2442" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>710</SUB>> ]
+"2447" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>710</SUB>> ]
+"2401" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>706</SUB>> ]
+"2419" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>707</SUB>> ]
+"2402" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>706</SUB>> ]
+"2404" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>706</SUB>> ]
+"2420" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>707</SUB>> ]
+"2422" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>707</SUB>> ]
+"2385" [label = <(METHOD,CallObjectMethodV)<SUB>705</SUB>> ]
+"2448" [label = <(METHOD_RETURN,jobject)<SUB>705</SUB>> ]
+  "2391" -> "2396" 
+  "2391" -> "2409" 
+  "2409" -> "2414" 
+  "2409" -> "2428" 
+  "2428" -> "2432" 
+  "2431" -> "2442" 
+  "2437" -> "2448" 
+  "2432" -> "2431" 
+  "2438" -> "2437" 
+  "2439" -> "2447" 
+  "2444" -> "2438" 
+  "2395" -> "2402" 
+  "2395" -> "2409" 
+  "2413" -> "2420" 
+  "2413" -> "2428" 
+  "2440" -> "2439" 
+  "2445" -> "2444" 
+  "2396" -> "2395" 
+  "2400" -> "2407" 
+  "2407" -> "2448" 
+  "2414" -> "2413" 
+  "2418" -> "2425" 
+  "2425" -> "2448" 
+  "2442" -> "2440" 
+  "2447" -> "2445" 
+  "2401" -> "2400" 
+  "2419" -> "2418" 
+  "2402" -> "2404" 
+  "2404" -> "2401" 
+  "2420" -> "2422" 
+  "2422" -> "2419" 
+  "2385" -> "2391" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/490-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/490-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/490-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/490-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
-"18539" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>403</SUB>> ]
-"18543" [label = <(METHOD_RETURN,ANY)> ]
-  "18539" -> "18543" 
+digraph "IsArrayInstance" {  
+"18190" [label = <(METHOD,IsArrayInstance)> ]
+"18193" [label = <(METHOD_RETURN,ANY)> ]
+  "18190" -> "18193" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/491-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/491-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/491-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/491-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
-"18544" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
-"18549" [label = <(METHOD_RETURN,ANY)> ]
-  "18544" -> "18549" 
+digraph "PrettyTypeOf" {  
+"18194" [label = <(METHOD,PrettyTypeOf)> ]
+"18197" [label = <(METHOD_RETURN,ANY)> ]
+  "18194" -> "18197" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/492-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/492-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/492-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/492-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsCompressed" {  
-"18550" [label = <(METHOD,IsCompressed)> ]
-"18553" [label = <(METHOD_RETURN,ANY)> ]
-  "18550" -> "18553" 
+digraph "AsArray" {  
+"18198" [label = <(METHOD,AsArray)> ]
+"18201" [label = <(METHOD_RETURN,ANY)> ]
+  "18198" -> "18201" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/493-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/493-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/493-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/493-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.preIncrement" {  
-"18554" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
-"18557" [label = <(METHOD_RETURN,ANY)> ]
-  "18554" -> "18557" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
+"18202" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
+"18207" [label = <(METHOD_RETURN,ANY)> ]
+  "18202" -> "18207" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/494-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/494-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/494-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/494-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CharAt" {  
-"18558" [label = <(METHOD,CharAt)> ]
-"18562" [label = <(METHOD_RETURN,ANY)> ]
-  "18558" -> "18562" 
+digraph "&lt;operator&gt;.arithmeticShiftRight" {  
+"18208" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
+"18212" [label = <(METHOD_RETURN,ANY)> ]
+  "18208" -> "18212" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/495-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/495-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/495-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/495-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetValue" {  
-"18563" [label = <(METHOD,GetValue)> ]
-"18566" [label = <(METHOD_RETURN,ANY)> ]
-  "18563" -> "18566" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
+"18213" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
+"18218" [label = <(METHOD_RETURN,ANY)> ]
+  "18213" -> "18218" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/496-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/496-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/496-cfg.dot	2023-06-07 19:35:14.867385834 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/496-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "memcpy" {  
-"18567" [label = <(METHOD,memcpy)> ]
-"18572" [label = <(METHOD_RETURN,ANY)> ]
-  "18567" -> "18572" 
+digraph "Ptr" {  
+"18219" [label = <(METHOD,Ptr)> ]
+"18222" [label = <(METHOD_RETURN,ANY)> ]
+  "18219" -> "18222" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/497-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/497-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/497-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/497-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.sizeOf" {  
-"18573" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
-"18576" [label = <(METHOD_RETURN,ANY)> ]
-  "18573" -> "18576" 
+digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
+"18223" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
+"18227" [label = <(METHOD_RETURN,ANY)> ]
+  "18223" -> "18227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/498-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/498-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/498-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/498-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CountUtf8Bytes" {  
-"18577" [label = <(METHOD,CountUtf8Bytes)> ]
-"18581" [label = <(METHOD_RETURN,ANY)> ]
-  "18577" -> "18581" 
+digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
+"18228" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
+"18232" [label = <(METHOD_RETURN,ANY)> ]
+  "18228" -> "18232" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/499-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/499-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/499-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/499-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ConvertUtf16ToModifiedUtf8" {  
-"18582" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
-"18588" [label = <(METHOD_RETURN,ANY)> ]
-  "18582" -> "18588" 
+digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
+"18233" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
+"18237" [label = <(METHOD_RETURN,ANY)> ]
+  "18233" -> "18237" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/5-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/5-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/5-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/5-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,63 +1,5 @@
-digraph "NormalizeJniClassDescriptor" {  
-"269" [label = <(RETURN,return result;,return result;)<SUB>169</SUB>> ]
-"212" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>156</SUB>> ]
-"233" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>164</SUB>> ]
-"213" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>156</SUB>> ]
-"218" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>157</SUB>> ]
-"234" [label = <(find,result.find('.'))<SUB>164</SUB>> ]
-"239" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>164</SUB>> ]
-"245" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>165</SUB>> ]
-"255" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>167</SUB>> ]
-"223" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>159</SUB>> ]
-"226" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>160</SUB>> ]
-"229" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>161</SUB>> ]
-"235" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>164</SUB>> ]
-"240" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>164</SUB>> ]
-"243" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>164</SUB>> ]
-"246" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>165</SUB>> ]
-"256" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>167</SUB>> ]
-"259" [label = <(begin,result.begin())<SUB>167</SUB>> ]
-"263" [label = <(end,result.end())<SUB>167</SUB>> ]
-"237" [label = <(FIELD_IDENTIFIER,find,find)<SUB>164</SUB>> ]
-"247" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>165</SUB>> ]
-"258" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>167</SUB>> ]
-"260" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>167</SUB>> ]
-"264" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>167</SUB>> ]
-"248" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>165</SUB>> ]
-"262" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>167</SUB>> ]
-"266" [label = <(FIELD_IDENTIFIER,end,end)<SUB>167</SUB>> ]
-"249" [label = <(LOG,LOG(WARNING))<SUB>165</SUB>> ]
-"207" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>153</SUB>> ]
-"271" [label = <(METHOD_RETURN,string)<SUB>153</SUB>> ]
-  "269" -> "271" 
-  "212" -> "218" 
-  "212" -> "223" 
-  "233" -> "249" 
-  "233" -> "269" 
-  "213" -> "212" 
-  "218" -> "237" 
-  "234" -> "240" 
-  "239" -> "233" 
-  "245" -> "258" 
-  "255" -> "269" 
-  "223" -> "226" 
-  "226" -> "229" 
-  "229" -> "237" 
-  "235" -> "234" 
-  "240" -> "243" 
-  "243" -> "239" 
-  "246" -> "245" 
-  "256" -> "262" 
-  "259" -> "266" 
-  "263" -> "255" 
-  "237" -> "235" 
-  "247" -> "246" 
-  "258" -> "256" 
-  "260" -> "259" 
-  "264" -> "263" 
-  "248" -> "247" 
-  "262" -> "260" 
-  "266" -> "264" 
-  "249" -> "248" 
-  "207" -> "213" 
+digraph "hs" {  
+"111" [label = <(METHOD,hs)<SUB>127</SUB>> ]
+"114" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>127</SUB>> ]
+  "111" -> "114" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/50-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/50-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/50-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/50-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,65 +1,63 @@
-digraph "GetMethodID" {  
-"2371" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
-"2389" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>760</SUB>> ]
-"2407" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>761</SUB>> ]
-"2426" [label = <(soa,soa(env))<SUB>762</SUB>> ]
-"2428" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>763</SUB>> ]
-"2429" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>763</SUB>> ]
-"2375" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>759</SUB>> ]
-"2393" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>760</SUB>> ]
-"2411" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>761</SUB>> ]
-"2376" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>759</SUB>> ]
-"2380" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>759</SUB>> ]
-"2387" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
-"2394" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>760</SUB>> ]
-"2398" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>760</SUB>> ]
-"2405" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>760</SUB>> ]
-"2412" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>761</SUB>> ]
-"2416" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>761</SUB>> ]
-"2423" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>761</SUB>> ]
-"2381" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>759</SUB>> ]
-"2399" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>760</SUB>> ]
-"2417" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>761</SUB>> ]
-"2382" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>759</SUB>> ]
-"2384" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>759</SUB>> ]
-"2400" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>760</SUB>> ]
-"2402" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>760</SUB>> ]
-"2418" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>761</SUB>> ]
-"2420" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>761</SUB>> ]
-"2365" [label = <(METHOD,GetMethodID)<SUB>758</SUB>> ]
-"2435" [label = <(METHOD_RETURN,jmethodID)<SUB>758</SUB>> ]
-  "2371" -> "2376" 
-  "2371" -> "2389" 
-  "2389" -> "2394" 
-  "2389" -> "2407" 
-  "2407" -> "2412" 
-  "2407" -> "2426" 
-  "2426" -> "2429" 
-  "2428" -> "2435" 
-  "2429" -> "2428" 
-  "2375" -> "2382" 
-  "2375" -> "2389" 
-  "2393" -> "2400" 
-  "2393" -> "2407" 
-  "2411" -> "2418" 
-  "2411" -> "2426" 
-  "2376" -> "2375" 
-  "2380" -> "2387" 
-  "2387" -> "2435" 
-  "2394" -> "2393" 
-  "2398" -> "2405" 
-  "2405" -> "2435" 
-  "2412" -> "2411" 
-  "2416" -> "2423" 
-  "2423" -> "2435" 
-  "2381" -> "2380" 
-  "2399" -> "2398" 
-  "2417" -> "2416" 
-  "2382" -> "2384" 
-  "2384" -> "2381" 
-  "2400" -> "2402" 
-  "2402" -> "2399" 
-  "2418" -> "2420" 
-  "2420" -> "2417" 
-  "2365" -> "2371" 
+digraph "CallObjectMethodA" {  
+"2456" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>714</SUB>> ]
+"2474" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>715</SUB>> ]
+"2493" [label = <(soa,soa(env))<SUB>716</SUB>> ]
+"2496" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>717</SUB>> ]
+"2502" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>718</SUB>> ]
+"2497" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>717</SUB>> ]
+"2503" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>718</SUB>> ]
+"2504" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>718</SUB>> ]
+"2509" [label = <(GetL,result.GetL())<SUB>718</SUB>> ]
+"2460" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>714</SUB>> ]
+"2478" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>715</SUB>> ]
+"2505" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>718</SUB>> ]
+"2510" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>718</SUB>> ]
+"2461" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>714</SUB>> ]
+"2465" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>714</SUB>> ]
+"2472" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>714</SUB>> ]
+"2479" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>715</SUB>> ]
+"2483" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>715</SUB>> ]
+"2490" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>715</SUB>> ]
+"2507" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>718</SUB>> ]
+"2512" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>718</SUB>> ]
+"2466" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>714</SUB>> ]
+"2484" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>715</SUB>> ]
+"2467" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>714</SUB>> ]
+"2469" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>714</SUB>> ]
+"2485" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>715</SUB>> ]
+"2487" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>715</SUB>> ]
+"2450" [label = <(METHOD,CallObjectMethodA)<SUB>713</SUB>> ]
+"2513" [label = <(METHOD_RETURN,jobject)<SUB>713</SUB>> ]
+  "2456" -> "2461" 
+  "2456" -> "2474" 
+  "2474" -> "2479" 
+  "2474" -> "2493" 
+  "2493" -> "2497" 
+  "2496" -> "2507" 
+  "2502" -> "2513" 
+  "2497" -> "2496" 
+  "2503" -> "2502" 
+  "2504" -> "2512" 
+  "2509" -> "2503" 
+  "2460" -> "2467" 
+  "2460" -> "2474" 
+  "2478" -> "2485" 
+  "2478" -> "2493" 
+  "2505" -> "2504" 
+  "2510" -> "2509" 
+  "2461" -> "2460" 
+  "2465" -> "2472" 
+  "2472" -> "2513" 
+  "2479" -> "2478" 
+  "2483" -> "2490" 
+  "2490" -> "2513" 
+  "2507" -> "2505" 
+  "2512" -> "2510" 
+  "2466" -> "2465" 
+  "2484" -> "2483" 
+  "2467" -> "2469" 
+  "2469" -> "2466" 
+  "2485" -> "2487" 
+  "2487" -> "2484" 
+  "2450" -> "2456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/500-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/500-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/500-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/500-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
-"18589" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
-"18594" [label = <(METHOD_RETURN,ANY)> ]
-  "18589" -> "18594" 
+digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
+"18238" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
+"18242" [label = <(METHOD_RETURN,ANY)> ]
+  "18238" -> "18242" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/501-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/501-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/501-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/501-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsMovableObject" {  
-"18595" [label = <(METHOD,IsMovableObject)> ]
-"18599" [label = <(METHOD_RETURN,ANY)> ]
-  "18595" -> "18599" 
+digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
+"18243" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
+"18247" [label = <(METHOD_RETURN,ANY)> ]
+  "18243" -> "18247" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/502-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/502-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/502-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/502-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.delete" {  
-"18600" [label = <(METHOD,&lt;operator&gt;.delete)> ]
-"18603" [label = <(METHOD_RETURN,ANY)> ]
-  "18600" -> "18603" 
+digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
+"18248" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
+"18252" [label = <(METHOD_RETURN,ANY)> ]
+  "18248" -> "18252" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/503-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/503-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/503-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/503-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "h" {  
-"18604" [label = <(METHOD,h)> ]
-"18607" [label = <(METHOD_RETURN,ANY)> ]
-  "18604" -> "18607" 
+digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
+"18253" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
+"18257" [label = <(METHOD_RETURN,ANY)> ]
+  "18253" -> "18257" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/504-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/504-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/504-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/504-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandleWrapper" {  
-"18608" [label = <(METHOD,NewHandleWrapper)> ]
-"18612" [label = <(METHOD_RETURN,ANY)> ]
-  "18608" -> "18612" 
+digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
+"18258" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
+"18263" [label = <(METHOD_RETURN,ANY)> ]
+  "18258" -> "18263" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/505-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/505-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/505-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/505-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addressOf" {  
-"18613" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
-"18616" [label = <(METHOD_RETURN,ANY)> ]
-  "18613" -> "18616" 
+digraph "IsPrimitive" {  
+"18264" [label = <(METHOD,IsPrimitive)> ]
+"18267" [label = <(METHOD_RETURN,ANY)> ]
+  "18264" -> "18267" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/506-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/506-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/506-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/506-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableMovingGC" {  
-"18617" [label = <(METHOD,IncrementDisableMovingGC)> ]
-"18621" [label = <(METHOD_RETURN,ANY)> ]
-  "18617" -> "18621" 
+digraph "PrettyDescriptor" {  
+"18268" [label = <(METHOD,PrettyDescriptor)> ]
+"18271" [label = <(METHOD_RETURN,ANY)> ]
+  "18268" -> "18271" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/507-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/507-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/507-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/507-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableThreadFlip" {  
-"18622" [label = <(METHOD,IncrementDisableThreadFlip)> ]
-"18626" [label = <(METHOD_RETURN,ANY)> ]
-  "18622" -> "18626" 
+digraph "FindArrayClass" {  
+"18272" [label = <(METHOD,FindArrayClass)> ]
+"18277" [label = <(METHOD_RETURN,ANY)> ]
+  "18272" -> "18277" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/508-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/508-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/508-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/508-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableMovingGC" {  
-"18627" [label = <(METHOD,DecrementDisableMovingGC)> ]
-"18631" [label = <(METHOD_RETURN,ANY)> ]
-  "18627" -> "18631" 
+digraph "::Alloc" {  
+"18278" [label = <(METHOD,::Alloc)> ]
+"18284" [label = <(METHOD_RETURN,ANY)> ]
+  "18278" -> "18284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/509-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/509-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/509-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/509-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableThreadFlip" {  
-"18632" [label = <(METHOD,DecrementDisableThreadFlip)> ]
-"18636" [label = <(METHOD_RETURN,ANY)> ]
-  "18632" -> "18636" 
+digraph "GetComponentType" {  
+"18285" [label = <(METHOD,GetComponentType)> ]
+"18288" [label = <(METHOD_RETURN,ANY)> ]
+  "18285" -> "18288" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/51-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/51-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/51-cfg.dot	2023-06-07 19:35:14.687385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/51-cfg.dot	2023-06-07 19:35:21.227385051 +0330
@@ -1,65 +1,59 @@
-digraph "GetStaticMethodID" {  
-"2443" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>768</SUB>> ]
-"2461" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>769</SUB>> ]
-"2479" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>770</SUB>> ]
-"2498" [label = <(soa,soa(env))<SUB>771</SUB>> ]
-"2500" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>772</SUB>> ]
-"2501" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>772</SUB>> ]
-"2447" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>768</SUB>> ]
-"2465" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>769</SUB>> ]
-"2483" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>770</SUB>> ]
-"2448" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>768</SUB>> ]
-"2452" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;java_class == null&quot;))<SUB>768</SUB>> ]
-"2459" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>768</SUB>> ]
-"2466" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>769</SUB>> ]
-"2470" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;name == null&quot;))<SUB>769</SUB>> ]
-"2477" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>769</SUB>> ]
-"2484" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>770</SUB>> ]
-"2488" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;sig == null&quot;))<SUB>770</SUB>> ]
-"2495" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>770</SUB>> ]
-"2453" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>768</SUB>> ]
-"2471" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>769</SUB>> ]
-"2489" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>770</SUB>> ]
-"2454" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>768</SUB>> ]
-"2456" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>768</SUB>> ]
-"2472" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>769</SUB>> ]
-"2474" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>769</SUB>> ]
-"2490" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>770</SUB>> ]
-"2492" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>770</SUB>> ]
-"2437" [label = <(METHOD,GetStaticMethodID)<SUB>766</SUB>> ]
-"2507" [label = <(METHOD_RETURN,jmethodID)<SUB>766</SUB>> ]
-  "2443" -> "2448" 
-  "2443" -> "2461" 
-  "2461" -> "2466" 
-  "2461" -> "2479" 
-  "2479" -> "2484" 
-  "2479" -> "2498" 
-  "2498" -> "2501" 
-  "2500" -> "2507" 
-  "2501" -> "2500" 
-  "2447" -> "2454" 
-  "2447" -> "2461" 
-  "2465" -> "2472" 
-  "2465" -> "2479" 
-  "2483" -> "2490" 
-  "2483" -> "2498" 
-  "2448" -> "2447" 
-  "2452" -> "2459" 
-  "2459" -> "2507" 
-  "2466" -> "2465" 
-  "2470" -> "2477" 
-  "2477" -> "2507" 
-  "2484" -> "2483" 
-  "2488" -> "2495" 
-  "2495" -> "2507" 
-  "2453" -> "2452" 
-  "2471" -> "2470" 
-  "2489" -> "2488" 
-  "2454" -> "2456" 
-  "2456" -> "2453" 
-  "2472" -> "2474" 
-  "2474" -> "2471" 
-  "2490" -> "2492" 
-  "2492" -> "2489" 
-  "2437" -> "2443" 
+digraph "CallBooleanMethod" {  
+"2521" [label = <(va_start,va_start(ap, mid))<SUB>723</SUB>> ]
+"2524" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>724</SUB>> ]
+"2542" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>725</SUB>> ]
+"2561" [label = <(soa,soa(env))<SUB>726</SUB>> ]
+"2564" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>727</SUB>> ]
+"2570" [label = <(va_end,va_end(ap))<SUB>728</SUB>> ]
+"2572" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>729</SUB>> ]
+"2565" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>727</SUB>> ]
+"2573" [label = <(GetZ,result.GetZ())<SUB>729</SUB>> ]
+"2574" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>729</SUB>> ]
+"2528" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>724</SUB>> ]
+"2546" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>725</SUB>> ]
+"2576" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>729</SUB>> ]
+"2529" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>724</SUB>> ]
+"2533" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>724</SUB>> ]
+"2540" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>724</SUB>> ]
+"2547" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>725</SUB>> ]
+"2551" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>725</SUB>> ]
+"2558" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>725</SUB>> ]
+"2534" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>724</SUB>> ]
+"2552" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>725</SUB>> ]
+"2535" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>724</SUB>> ]
+"2537" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>724</SUB>> ]
+"2553" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>725</SUB>> ]
+"2555" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>725</SUB>> ]
+"2515" [label = <(METHOD,CallBooleanMethod)<SUB>721</SUB>> ]
+"2577" [label = <(METHOD_RETURN,jboolean)<SUB>721</SUB>> ]
+  "2521" -> "2524" 
+  "2524" -> "2529" 
+  "2524" -> "2542" 
+  "2542" -> "2547" 
+  "2542" -> "2561" 
+  "2561" -> "2565" 
+  "2564" -> "2570" 
+  "2570" -> "2576" 
+  "2572" -> "2577" 
+  "2565" -> "2564" 
+  "2573" -> "2572" 
+  "2574" -> "2573" 
+  "2528" -> "2535" 
+  "2528" -> "2542" 
+  "2546" -> "2553" 
+  "2546" -> "2561" 
+  "2576" -> "2574" 
+  "2529" -> "2528" 
+  "2533" -> "2540" 
+  "2540" -> "2577" 
+  "2547" -> "2546" 
+  "2551" -> "2558" 
+  "2558" -> "2577" 
+  "2534" -> "2533" 
+  "2552" -> "2551" 
+  "2535" -> "2537" 
+  "2537" -> "2534" 
+  "2553" -> "2555" 
+  "2555" -> "2552" 
+  "2515" -> "2521" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/510-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/510-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/510-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/510-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK" {  
-"18637" [label = <(METHOD,CHECK)> ]
-"18640" [label = <(METHOD_RETURN,ANY)> ]
-  "18637" -> "18640" 
+digraph "mirror::Class::PrettyDescriptor" {  
+"18289" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
+"18293" [label = <(METHOD_RETURN,ANY)> ]
+  "18289" -> "18293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/511-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/511-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/511-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/511-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
-"18641" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
-"18646" [label = <(METHOD_RETURN,ANY)> ]
-  "18641" -> "18646" 
+digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
+"18294" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
+"18298" [label = <(METHOD_RETURN,ANY)> ]
+  "18294" -> "18298" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/512-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/512-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/512-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/512-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsArrayInstance" {  
-"18647" [label = <(METHOD,IsArrayInstance)> ]
-"18650" [label = <(METHOD_RETURN,ANY)> ]
-  "18647" -> "18650" 
+digraph "IsPrimitiveArray" {  
+"18299" [label = <(METHOD,IsPrimitiveArray)> ]
+"18302" [label = <(METHOD_RETURN,ANY)> ]
+  "18299" -> "18302" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/513-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/513-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/513-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/513-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyTypeOf" {  
-"18651" [label = <(METHOD,PrettyTypeOf)> ]
-"18654" [label = <(METHOD_RETURN,ANY)> ]
-  "18651" -> "18654" 
+digraph "GetRawData" {  
+"18303" [label = <(METHOD,GetRawData)> ]
+"18308" [label = <(METHOD_RETURN,ANY)> ]
+  "18303" -> "18308" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/514-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/514-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/514-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/514-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "AsArray" {  
-"18655" [label = <(METHOD,AsArray)> ]
-"18658" [label = <(METHOD_RETURN,ANY)> ]
-  "18655" -> "18658" 
+digraph "GetComponentSize" {  
+"18309" [label = <(METHOD,GetComponentSize)> ]
+"18312" [label = <(METHOD_RETURN,ANY)> ]
+  "18309" -> "18312" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/515-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/515-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/515-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/515-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
-"18659" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
-"18664" [label = <(METHOD_RETURN,ANY)> ]
-  "18659" -> "18664" 
+digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18313" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18318" [label = <(METHOD_RETURN,ANY)> ]
+  "18313" -> "18318" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/516-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/516-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/516-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/516-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arithmeticShiftRight" {  
-"18665" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
-"18669" [label = <(METHOD_RETURN,ANY)> ]
-  "18665" -> "18669" 
+digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18319" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18324" [label = <(METHOD_RETURN,ANY)> ]
+  "18319" -> "18324" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/517-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/517-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/517-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/517-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
-"18670" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
-"18675" [label = <(METHOD_RETURN,ANY)> ]
-  "18670" -> "18675" 
+digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18325" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18330" [label = <(METHOD_RETURN,ANY)> ]
+  "18325" -> "18330" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/518-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/518-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/518-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/518-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "Ptr" {  
-"18676" [label = <(METHOD,Ptr)> ]
-"18679" [label = <(METHOD_RETURN,ANY)> ]
-  "18676" -> "18679" 
+digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18331" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18336" [label = <(METHOD_RETURN,ANY)> ]
+  "18331" -> "18336" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/519-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/519-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/519-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/519-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
-"18680" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
-"18684" [label = <(METHOD_RETURN,ANY)> ]
-  "18680" -> "18684" 
+digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18337" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18342" [label = <(METHOD_RETURN,ANY)> ]
+  "18337" -> "18342" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/52-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/52-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/52-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/52-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,67 +1,53 @@
-digraph "CallObjectMethod" {  
-"2515" [label = <(va_start,va_start(ap, mid))<SUB>777</SUB>> ]
-"2518" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>778</SUB>> ]
-"2536" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>779</SUB>> ]
-"2555" [label = <(soa,soa(env))<SUB>780</SUB>> ]
-"2558" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>781</SUB>> ]
-"2564" [label = <(va_end,va_end(ap))<SUB>782</SUB>> ]
-"2566" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>783</SUB>> ]
-"2559" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>781</SUB>> ]
-"2567" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>783</SUB>> ]
-"2568" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>783</SUB>> ]
-"2573" [label = <(GetL,result.GetL())<SUB>783</SUB>> ]
-"2522" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>778</SUB>> ]
-"2540" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>779</SUB>> ]
-"2569" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>783</SUB>> ]
-"2574" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>783</SUB>> ]
-"2523" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>778</SUB>> ]
-"2527" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>778</SUB>> ]
-"2534" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>778</SUB>> ]
-"2541" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>779</SUB>> ]
-"2545" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>779</SUB>> ]
-"2552" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>779</SUB>> ]
-"2571" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>783</SUB>> ]
-"2576" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>783</SUB>> ]
-"2528" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>778</SUB>> ]
-"2546" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>779</SUB>> ]
-"2529" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>778</SUB>> ]
-"2531" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>778</SUB>> ]
-"2547" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>779</SUB>> ]
-"2549" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>779</SUB>> ]
-"2509" [label = <(METHOD,CallObjectMethod)<SUB>775</SUB>> ]
-"2577" [label = <(METHOD_RETURN,jobject)<SUB>775</SUB>> ]
-  "2515" -> "2518" 
-  "2518" -> "2523" 
-  "2518" -> "2536" 
-  "2536" -> "2541" 
-  "2536" -> "2555" 
-  "2555" -> "2559" 
-  "2558" -> "2564" 
-  "2564" -> "2571" 
-  "2566" -> "2577" 
-  "2559" -> "2558" 
-  "2567" -> "2566" 
-  "2568" -> "2576" 
-  "2573" -> "2567" 
-  "2522" -> "2529" 
-  "2522" -> "2536" 
-  "2540" -> "2547" 
-  "2540" -> "2555" 
-  "2569" -> "2568" 
-  "2574" -> "2573" 
-  "2523" -> "2522" 
-  "2527" -> "2534" 
-  "2534" -> "2577" 
-  "2541" -> "2540" 
-  "2545" -> "2552" 
-  "2552" -> "2577" 
-  "2571" -> "2569" 
-  "2576" -> "2574" 
-  "2528" -> "2527" 
-  "2546" -> "2545" 
-  "2529" -> "2531" 
-  "2531" -> "2528" 
-  "2547" -> "2549" 
-  "2549" -> "2546" 
-  "2509" -> "2515" 
+digraph "CallBooleanMethodV" {  
+"2585" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>733</SUB>> ]
+"2603" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>734</SUB>> ]
+"2622" [label = <(soa,soa(env))<SUB>735</SUB>> ]
+"2624" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>736</SUB>> ]
+"2625" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>736</SUB>> ]
+"2626" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>736</SUB>> ]
+"2589" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>733</SUB>> ]
+"2607" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>734</SUB>> ]
+"2627" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>736</SUB>> ]
+"2632" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>736</SUB>> ]
+"2590" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>733</SUB>> ]
+"2594" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>733</SUB>> ]
+"2601" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>733</SUB>> ]
+"2608" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>734</SUB>> ]
+"2612" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>734</SUB>> ]
+"2619" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>734</SUB>> ]
+"2595" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>733</SUB>> ]
+"2613" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>734</SUB>> ]
+"2596" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>733</SUB>> ]
+"2598" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>733</SUB>> ]
+"2614" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>734</SUB>> ]
+"2616" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>734</SUB>> ]
+"2579" [label = <(METHOD,CallBooleanMethodV)<SUB>732</SUB>> ]
+"2633" [label = <(METHOD_RETURN,jboolean)<SUB>732</SUB>> ]
+  "2585" -> "2590" 
+  "2585" -> "2603" 
+  "2603" -> "2608" 
+  "2603" -> "2622" 
+  "2622" -> "2627" 
+  "2624" -> "2633" 
+  "2625" -> "2624" 
+  "2626" -> "2625" 
+  "2589" -> "2596" 
+  "2589" -> "2603" 
+  "2607" -> "2614" 
+  "2607" -> "2622" 
+  "2627" -> "2632" 
+  "2632" -> "2626" 
+  "2590" -> "2589" 
+  "2594" -> "2601" 
+  "2601" -> "2633" 
+  "2608" -> "2607" 
+  "2612" -> "2619" 
+  "2619" -> "2633" 
+  "2595" -> "2594" 
+  "2613" -> "2612" 
+  "2596" -> "2598" 
+  "2598" -> "2595" 
+  "2614" -> "2616" 
+  "2616" -> "2613" 
+  "2579" -> "2585" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/520-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/520-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/520-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/520-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
-"18685" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
-"18689" [label = <(METHOD_RETURN,ANY)> ]
-  "18685" -> "18689" 
+digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18343" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18348" [label = <(METHOD_RETURN,ANY)> ]
+  "18343" -> "18348" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/521-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/521-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/521-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/521-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
-"18690" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
-"18694" [label = <(METHOD_RETURN,ANY)> ]
-  "18690" -> "18694" 
+digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18349" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18354" [label = <(METHOD_RETURN,ANY)> ]
+  "18349" -> "18354" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/522-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/522-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/522-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/522-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
-"18695" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
-"18699" [label = <(METHOD_RETURN,ANY)> ]
-  "18695" -> "18699" 
+digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18355" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18360" [label = <(METHOD_RETURN,ANY)> ]
+  "18355" -> "18360" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/523-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/523-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/523-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/523-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
-"18700" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
-"18704" [label = <(METHOD_RETURN,ANY)> ]
-  "18700" -> "18704" 
+digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18361" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18367" [label = <(METHOD_RETURN,ANY)> ]
+  "18361" -> "18367" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/524-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/524-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/524-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/524-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
-"18705" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
-"18709" [label = <(METHOD_RETURN,ANY)> ]
-  "18705" -> "18709" 
+digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18368" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18374" [label = <(METHOD_RETURN,ANY)> ]
+  "18368" -> "18374" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/525-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/525-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/525-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/525-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
-"18710" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
-"18714" [label = <(METHOD_RETURN,ANY)> ]
-  "18710" -> "18714" 
+digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18375" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18381" [label = <(METHOD_RETURN,ANY)> ]
+  "18375" -> "18381" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/526-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/526-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/526-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/526-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
-"18715" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
-"18720" [label = <(METHOD_RETURN,ANY)> ]
-  "18715" -> "18720" 
+digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18382" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18388" [label = <(METHOD_RETURN,ANY)> ]
+  "18382" -> "18388" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/527-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/527-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/527-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/527-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitive" {  
-"18721" [label = <(METHOD,IsPrimitive)> ]
-"18724" [label = <(METHOD_RETURN,ANY)> ]
-  "18721" -> "18724" 
+digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18389" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18395" [label = <(METHOD_RETURN,ANY)> ]
+  "18389" -> "18395" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/528-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/528-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/528-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/528-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyDescriptor" {  
-"18725" [label = <(METHOD,PrettyDescriptor)> ]
-"18728" [label = <(METHOD_RETURN,ANY)> ]
-  "18725" -> "18728" 
+digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18396" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18402" [label = <(METHOD_RETURN,ANY)> ]
+  "18396" -> "18402" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/529-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/529-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/529-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/529-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "FindArrayClass" {  
-"18729" [label = <(METHOD,FindArrayClass)> ]
-"18734" [label = <(METHOD_RETURN,ANY)> ]
-  "18729" -> "18734" 
+digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18403" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18409" [label = <(METHOD_RETURN,ANY)> ]
+  "18403" -> "18409" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/53-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/53-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/53-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/53-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,63 +1,53 @@
-digraph "CallObjectMethodV" {  
-"2585" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>787</SUB>> ]
-"2603" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>788</SUB>> ]
-"2622" [label = <(soa,soa(env))<SUB>789</SUB>> ]
-"2625" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>790</SUB>> ]
-"2631" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>791</SUB>> ]
-"2626" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>790</SUB>> ]
-"2632" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>791</SUB>> ]
-"2633" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>791</SUB>> ]
-"2638" [label = <(GetL,result.GetL())<SUB>791</SUB>> ]
-"2589" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>787</SUB>> ]
-"2607" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>788</SUB>> ]
-"2634" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>791</SUB>> ]
-"2639" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>791</SUB>> ]
-"2590" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>787</SUB>> ]
-"2594" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>787</SUB>> ]
-"2601" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>787</SUB>> ]
-"2608" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>788</SUB>> ]
-"2612" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>788</SUB>> ]
-"2619" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>788</SUB>> ]
-"2636" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>791</SUB>> ]
-"2641" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>791</SUB>> ]
-"2595" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>787</SUB>> ]
-"2613" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>788</SUB>> ]
-"2596" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>787</SUB>> ]
-"2598" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>787</SUB>> ]
-"2614" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>788</SUB>> ]
-"2616" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>788</SUB>> ]
-"2579" [label = <(METHOD,CallObjectMethodV)<SUB>786</SUB>> ]
-"2642" [label = <(METHOD_RETURN,jobject)<SUB>786</SUB>> ]
-  "2585" -> "2590" 
-  "2585" -> "2603" 
-  "2603" -> "2608" 
-  "2603" -> "2622" 
-  "2622" -> "2626" 
-  "2625" -> "2636" 
-  "2631" -> "2642" 
-  "2626" -> "2625" 
-  "2632" -> "2631" 
-  "2633" -> "2641" 
-  "2638" -> "2632" 
-  "2589" -> "2596" 
-  "2589" -> "2603" 
-  "2607" -> "2614" 
-  "2607" -> "2622" 
-  "2634" -> "2633" 
-  "2639" -> "2638" 
-  "2590" -> "2589" 
-  "2594" -> "2601" 
-  "2601" -> "2642" 
-  "2608" -> "2607" 
-  "2612" -> "2619" 
-  "2619" -> "2642" 
-  "2636" -> "2634" 
-  "2641" -> "2639" 
-  "2595" -> "2594" 
-  "2613" -> "2612" 
-  "2596" -> "2598" 
-  "2598" -> "2595" 
-  "2614" -> "2616" 
-  "2616" -> "2613" 
-  "2579" -> "2585" 
+digraph "CallBooleanMethodA" {  
+"2641" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>740</SUB>> ]
+"2659" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>741</SUB>> ]
+"2678" [label = <(soa,soa(env))<SUB>742</SUB>> ]
+"2680" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>743</SUB>> ]
+"2681" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>743</SUB>> ]
+"2682" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>743</SUB>> ]
+"2645" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>740</SUB>> ]
+"2663" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>741</SUB>> ]
+"2683" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>743</SUB>> ]
+"2688" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>743</SUB>> ]
+"2646" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>740</SUB>> ]
+"2650" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>740</SUB>> ]
+"2657" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>740</SUB>> ]
+"2664" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>741</SUB>> ]
+"2668" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>741</SUB>> ]
+"2675" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>741</SUB>> ]
+"2651" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>740</SUB>> ]
+"2669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>741</SUB>> ]
+"2652" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>740</SUB>> ]
+"2654" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>740</SUB>> ]
+"2670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>741</SUB>> ]
+"2672" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>741</SUB>> ]
+"2635" [label = <(METHOD,CallBooleanMethodA)<SUB>739</SUB>> ]
+"2689" [label = <(METHOD_RETURN,jboolean)<SUB>739</SUB>> ]
+  "2641" -> "2646" 
+  "2641" -> "2659" 
+  "2659" -> "2664" 
+  "2659" -> "2678" 
+  "2678" -> "2683" 
+  "2680" -> "2689" 
+  "2681" -> "2680" 
+  "2682" -> "2681" 
+  "2645" -> "2652" 
+  "2645" -> "2659" 
+  "2663" -> "2670" 
+  "2663" -> "2678" 
+  "2683" -> "2688" 
+  "2688" -> "2682" 
+  "2646" -> "2645" 
+  "2650" -> "2657" 
+  "2657" -> "2689" 
+  "2664" -> "2663" 
+  "2668" -> "2675" 
+  "2675" -> "2689" 
+  "2651" -> "2650" 
+  "2669" -> "2668" 
+  "2652" -> "2654" 
+  "2654" -> "2651" 
+  "2670" -> "2672" 
+  "2672" -> "2669" 
+  "2635" -> "2641" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/530-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/530-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/530-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/530-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "::Alloc" {  
-"18735" [label = <(METHOD,::Alloc)> ]
-"18741" [label = <(METHOD_RETURN,ANY)> ]
-  "18735" -> "18741" 
+digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18410" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18416" [label = <(METHOD_RETURN,ANY)> ]
+  "18410" -> "18416" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/531-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/531-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/531-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/531-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentType" {  
-"18742" [label = <(METHOD,GetComponentType)> ]
-"18745" [label = <(METHOD_RETURN,ANY)> ]
-  "18742" -> "18745" 
+digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18417" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18424" [label = <(METHOD_RETURN,ANY)> ]
+  "18417" -> "18424" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/532-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/532-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/532-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/532-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyDescriptor" {  
-"18746" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
-"18750" [label = <(METHOD_RETURN,ANY)> ]
-  "18746" -> "18750" 
+digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18425" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18432" [label = <(METHOD_RETURN,ANY)> ]
+  "18425" -> "18432" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/533-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/533-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/533-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/533-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
-"18751" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
-"18755" [label = <(METHOD_RETURN,ANY)> ]
-  "18751" -> "18755" 
+digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18433" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18440" [label = <(METHOD_RETURN,ANY)> ]
+  "18433" -> "18440" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/534-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/534-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/534-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/534-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitiveArray" {  
-"18756" [label = <(METHOD,IsPrimitiveArray)> ]
-"18759" [label = <(METHOD_RETURN,ANY)> ]
-  "18756" -> "18759" 
+digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18441" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18448" [label = <(METHOD_RETURN,ANY)> ]
+  "18441" -> "18448" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/535-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/535-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/535-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/535-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetRawData" {  
-"18760" [label = <(METHOD,GetRawData)> ]
-"18765" [label = <(METHOD_RETURN,ANY)> ]
-  "18760" -> "18765" 
+digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18449" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18456" [label = <(METHOD_RETURN,ANY)> ]
+  "18449" -> "18456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/536-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/536-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/536-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/536-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentSize" {  
-"18766" [label = <(METHOD,GetComponentSize)> ]
-"18769" [label = <(METHOD_RETURN,ANY)> ]
-  "18766" -> "18769" 
+digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18457" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18464" [label = <(METHOD_RETURN,ANY)> ]
+  "18457" -> "18464" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/537-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/537-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/537-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/537-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"18770" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"18775" [label = <(METHOD_RETURN,ANY)> ]
-  "18770" -> "18775" 
+digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18465" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18472" [label = <(METHOD_RETURN,ANY)> ]
+  "18465" -> "18472" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/538-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/538-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/538-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/538-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"18776" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"18781" [label = <(METHOD_RETURN,ANY)> ]
-  "18776" -> "18781" 
+digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18473" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18480" [label = <(METHOD_RETURN,ANY)> ]
+  "18473" -> "18480" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/539-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/539-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/539-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/539-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"18782" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"18787" [label = <(METHOD_RETURN,ANY)> ]
-  "18782" -> "18787" 
+digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18481" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18488" [label = <(METHOD_RETURN,ANY)> ]
+  "18481" -> "18488" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/54-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/54-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/54-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/54-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,63 +1,59 @@
-digraph "CallObjectMethodA" {  
-"2650" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>795</SUB>> ]
-"2668" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>796</SUB>> ]
-"2687" [label = <(soa,soa(env))<SUB>797</SUB>> ]
-"2690" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>798</SUB>> ]
-"2696" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>799</SUB>> ]
-"2691" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>798</SUB>> ]
-"2697" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>799</SUB>> ]
-"2698" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>799</SUB>> ]
-"2703" [label = <(GetL,result.GetL())<SUB>799</SUB>> ]
-"2654" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>795</SUB>> ]
-"2672" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>796</SUB>> ]
-"2699" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>799</SUB>> ]
-"2704" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>799</SUB>> ]
-"2655" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>795</SUB>> ]
-"2659" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>795</SUB>> ]
-"2666" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>795</SUB>> ]
-"2673" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>796</SUB>> ]
-"2677" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>796</SUB>> ]
-"2684" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>796</SUB>> ]
-"2701" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>799</SUB>> ]
-"2706" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>799</SUB>> ]
-"2660" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>795</SUB>> ]
-"2678" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>796</SUB>> ]
-"2661" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>795</SUB>> ]
-"2663" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>795</SUB>> ]
-"2679" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>796</SUB>> ]
-"2681" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>796</SUB>> ]
-"2644" [label = <(METHOD,CallObjectMethodA)<SUB>794</SUB>> ]
-"2707" [label = <(METHOD_RETURN,jobject)<SUB>794</SUB>> ]
-  "2650" -> "2655" 
-  "2650" -> "2668" 
-  "2668" -> "2673" 
-  "2668" -> "2687" 
-  "2687" -> "2691" 
-  "2690" -> "2701" 
-  "2696" -> "2707" 
-  "2691" -> "2690" 
-  "2697" -> "2696" 
-  "2698" -> "2706" 
-  "2703" -> "2697" 
-  "2654" -> "2661" 
-  "2654" -> "2668" 
-  "2672" -> "2679" 
-  "2672" -> "2687" 
-  "2699" -> "2698" 
-  "2704" -> "2703" 
-  "2655" -> "2654" 
-  "2659" -> "2666" 
-  "2666" -> "2707" 
-  "2673" -> "2672" 
-  "2677" -> "2684" 
-  "2684" -> "2707" 
-  "2701" -> "2699" 
-  "2706" -> "2704" 
-  "2660" -> "2659" 
-  "2678" -> "2677" 
-  "2661" -> "2663" 
-  "2663" -> "2660" 
-  "2679" -> "2681" 
-  "2681" -> "2678" 
-  "2644" -> "2650" 
+digraph "CallByteMethod" {  
+"2697" [label = <(va_start,va_start(ap, mid))<SUB>748</SUB>> ]
+"2700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>749</SUB>> ]
+"2718" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>750</SUB>> ]
+"2737" [label = <(soa,soa(env))<SUB>751</SUB>> ]
+"2740" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>752</SUB>> ]
+"2746" [label = <(va_end,va_end(ap))<SUB>753</SUB>> ]
+"2748" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>754</SUB>> ]
+"2741" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>752</SUB>> ]
+"2749" [label = <(GetB,result.GetB())<SUB>754</SUB>> ]
+"2750" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>754</SUB>> ]
+"2704" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>749</SUB>> ]
+"2722" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>750</SUB>> ]
+"2752" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>754</SUB>> ]
+"2705" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>749</SUB>> ]
+"2709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>749</SUB>> ]
+"2716" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>749</SUB>> ]
+"2723" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>750</SUB>> ]
+"2727" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>750</SUB>> ]
+"2734" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>750</SUB>> ]
+"2710" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>749</SUB>> ]
+"2728" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>750</SUB>> ]
+"2711" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>749</SUB>> ]
+"2713" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>749</SUB>> ]
+"2729" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>750</SUB>> ]
+"2731" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>750</SUB>> ]
+"2691" [label = <(METHOD,CallByteMethod)<SUB>746</SUB>> ]
+"2753" [label = <(METHOD_RETURN,jbyte)<SUB>746</SUB>> ]
+  "2697" -> "2700" 
+  "2700" -> "2705" 
+  "2700" -> "2718" 
+  "2718" -> "2723" 
+  "2718" -> "2737" 
+  "2737" -> "2741" 
+  "2740" -> "2746" 
+  "2746" -> "2752" 
+  "2748" -> "2753" 
+  "2741" -> "2740" 
+  "2749" -> "2748" 
+  "2750" -> "2749" 
+  "2704" -> "2711" 
+  "2704" -> "2718" 
+  "2722" -> "2729" 
+  "2722" -> "2737" 
+  "2752" -> "2750" 
+  "2705" -> "2704" 
+  "2709" -> "2716" 
+  "2716" -> "2753" 
+  "2723" -> "2722" 
+  "2727" -> "2734" 
+  "2734" -> "2753" 
+  "2710" -> "2709" 
+  "2728" -> "2727" 
+  "2711" -> "2713" 
+  "2713" -> "2710" 
+  "2729" -> "2731" 
+  "2731" -> "2728" 
+  "2691" -> "2697" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/540-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/540-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/540-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/540-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"18788" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"18793" [label = <(METHOD_RETURN,ANY)> ]
-  "18788" -> "18793" 
+digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18489" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18496" [label = <(METHOD_RETURN,ANY)> ]
+  "18489" -> "18496" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/541-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/541-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/541-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/541-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"18794" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"18799" [label = <(METHOD_RETURN,ANY)> ]
-  "18794" -> "18799" 
+digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18497" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18504" [label = <(METHOD_RETURN,ANY)> ]
+  "18497" -> "18504" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/542-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/542-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/542-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/542-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"18800" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"18805" [label = <(METHOD_RETURN,ANY)> ]
-  "18800" -> "18805" 
+digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18505" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18512" [label = <(METHOD_RETURN,ANY)> ]
+  "18505" -> "18512" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/543-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/543-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/543-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/543-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"18806" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"18811" [label = <(METHOD_RETURN,ANY)> ]
-  "18806" -> "18811" 
+digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18513" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18520" [label = <(METHOD_RETURN,ANY)> ]
+  "18513" -> "18520" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/544-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/544-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/544-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/544-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"18812" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"18817" [label = <(METHOD_RETURN,ANY)> ]
-  "18812" -> "18817" 
+digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18521" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18528" [label = <(METHOD_RETURN,ANY)> ]
+  "18521" -> "18528" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/545-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/545-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/545-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/545-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"18818" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"18824" [label = <(METHOD_RETURN,ANY)> ]
-  "18818" -> "18824" 
+digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18529" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18536" [label = <(METHOD_RETURN,ANY)> ]
+  "18529" -> "18536" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/546-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/546-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/546-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/546-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"18825" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"18831" [label = <(METHOD_RETURN,ANY)> ]
-  "18825" -> "18831" 
+digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18537" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18544" [label = <(METHOD_RETURN,ANY)> ]
+  "18537" -> "18544" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/547-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/547-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/547-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/547-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"18832" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"18838" [label = <(METHOD_RETURN,ANY)> ]
-  "18832" -> "18838" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
+"18545" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>316</SUB>> ]
+"18550" [label = <(METHOD_RETURN,ANY)> ]
+  "18545" -> "18550" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/548-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/548-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/548-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/548-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"18839" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"18845" [label = <(METHOD_RETURN,ANY)> ]
-  "18839" -> "18845" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
+"18551" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
+"18556" [label = <(METHOD_RETURN,ANY)> ]
+  "18551" -> "18556" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/549-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/549-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/549-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/549-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"18846" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"18852" [label = <(METHOD_RETURN,ANY)> ]
-  "18846" -> "18852" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
+"18557" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
+"18562" [label = <(METHOD_RETURN,ANY)> ]
+  "18557" -> "18562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/55-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/55-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/55-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/55-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,59 +1,53 @@
-digraph "CallBooleanMethod" {  
-"2715" [label = <(va_start,va_start(ap, mid))<SUB>804</SUB>> ]
-"2718" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>805</SUB>> ]
-"2736" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>806</SUB>> ]
-"2755" [label = <(soa,soa(env))<SUB>807</SUB>> ]
-"2758" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>808</SUB>> ]
-"2764" [label = <(va_end,va_end(ap))<SUB>809</SUB>> ]
-"2766" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>810</SUB>> ]
-"2759" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>808</SUB>> ]
-"2767" [label = <(GetZ,result.GetZ())<SUB>810</SUB>> ]
-"2768" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>810</SUB>> ]
-"2722" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>805</SUB>> ]
-"2740" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>806</SUB>> ]
-"2770" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>810</SUB>> ]
-"2723" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>805</SUB>> ]
-"2727" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>805</SUB>> ]
-"2734" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>805</SUB>> ]
-"2741" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>806</SUB>> ]
-"2745" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>806</SUB>> ]
-"2752" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>806</SUB>> ]
-"2728" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>805</SUB>> ]
-"2746" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>806</SUB>> ]
-"2729" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>805</SUB>> ]
-"2731" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>805</SUB>> ]
-"2747" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>806</SUB>> ]
-"2749" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>806</SUB>> ]
-"2709" [label = <(METHOD,CallBooleanMethod)<SUB>802</SUB>> ]
-"2771" [label = <(METHOD_RETURN,jboolean)<SUB>802</SUB>> ]
-  "2715" -> "2718" 
-  "2718" -> "2723" 
-  "2718" -> "2736" 
-  "2736" -> "2741" 
-  "2736" -> "2755" 
-  "2755" -> "2759" 
-  "2758" -> "2764" 
-  "2764" -> "2770" 
-  "2766" -> "2771" 
-  "2759" -> "2758" 
-  "2767" -> "2766" 
-  "2768" -> "2767" 
-  "2722" -> "2729" 
-  "2722" -> "2736" 
-  "2740" -> "2747" 
-  "2740" -> "2755" 
-  "2770" -> "2768" 
-  "2723" -> "2722" 
-  "2727" -> "2734" 
-  "2734" -> "2771" 
-  "2741" -> "2740" 
-  "2745" -> "2752" 
-  "2752" -> "2771" 
-  "2728" -> "2727" 
-  "2746" -> "2745" 
-  "2729" -> "2731" 
-  "2731" -> "2728" 
-  "2747" -> "2749" 
-  "2749" -> "2746" 
-  "2709" -> "2715" 
+digraph "CallByteMethodV" {  
+"2761" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>758</SUB>> ]
+"2779" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>759</SUB>> ]
+"2798" [label = <(soa,soa(env))<SUB>760</SUB>> ]
+"2800" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>761</SUB>> ]
+"2801" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>761</SUB>> ]
+"2802" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>761</SUB>> ]
+"2765" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>758</SUB>> ]
+"2783" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>759</SUB>> ]
+"2803" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>761</SUB>> ]
+"2808" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>761</SUB>> ]
+"2766" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>758</SUB>> ]
+"2770" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>758</SUB>> ]
+"2777" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>758</SUB>> ]
+"2784" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>759</SUB>> ]
+"2788" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>759</SUB>> ]
+"2795" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>759</SUB>> ]
+"2771" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>758</SUB>> ]
+"2789" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>759</SUB>> ]
+"2772" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>758</SUB>> ]
+"2774" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>758</SUB>> ]
+"2790" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>759</SUB>> ]
+"2792" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>759</SUB>> ]
+"2755" [label = <(METHOD,CallByteMethodV)<SUB>757</SUB>> ]
+"2809" [label = <(METHOD_RETURN,jbyte)<SUB>757</SUB>> ]
+  "2761" -> "2766" 
+  "2761" -> "2779" 
+  "2779" -> "2784" 
+  "2779" -> "2798" 
+  "2798" -> "2803" 
+  "2800" -> "2809" 
+  "2801" -> "2800" 
+  "2802" -> "2801" 
+  "2765" -> "2772" 
+  "2765" -> "2779" 
+  "2783" -> "2790" 
+  "2783" -> "2798" 
+  "2803" -> "2808" 
+  "2808" -> "2802" 
+  "2766" -> "2765" 
+  "2770" -> "2777" 
+  "2777" -> "2809" 
+  "2784" -> "2783" 
+  "2788" -> "2795" 
+  "2795" -> "2809" 
+  "2771" -> "2770" 
+  "2789" -> "2788" 
+  "2772" -> "2774" 
+  "2774" -> "2771" 
+  "2790" -> "2792" 
+  "2792" -> "2789" 
+  "2755" -> "2761" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/550-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/550-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/550-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/550-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"18853" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"18859" [label = <(METHOD_RETURN,ANY)> ]
-  "18853" -> "18859" 
+digraph "IsCheckJniEnabled" {  
+"18563" [label = <(METHOD,IsCheckJniEnabled)> ]
+"18566" [label = <(METHOD_RETURN,ANY)> ]
+  "18563" -> "18566" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/551-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/551-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/551-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/551-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"18860" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"18866" [label = <(METHOD_RETURN,ANY)> ]
-  "18860" -> "18866" 
+digraph "DumpClass" {  
+"18567" [label = <(METHOD,DumpClass)> ]
+"18572" [label = <(METHOD_RETURN,ANY)> ]
+  "18567" -> "18572" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/552-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/552-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/552-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/552-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"18867" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"18873" [label = <(METHOD_RETURN,ANY)> ]
-  "18867" -> "18873" 
+digraph "LOG_STREAM" {  
+"18573" [label = <(METHOD,LOG_STREAM)> ]
+"18576" [label = <(METHOD_RETURN,ANY)> ]
+  "18573" -> "18576" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/553-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/553-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/553-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/553-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"18874" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"18881" [label = <(METHOD_RETURN,ANY)> ]
-  "18874" -> "18881" 
+digraph "ToModifiedUtf8" {  
+"18577" [label = <(METHOD,ToModifiedUtf8)> ]
+"18580" [label = <(METHOD_RETURN,ANY)> ]
+  "18577" -> "18580" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/554-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/554-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/554-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/554-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"18882" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"18889" [label = <(METHOD_RETURN,ANY)> ]
-  "18882" -> "18889" 
+digraph "GetLocation" {  
+"18581" [label = <(METHOD,GetLocation)> ]
+"18584" [label = <(METHOD_RETURN,ANY)> ]
+  "18581" -> "18584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/555-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/555-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/555-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/555-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"18890" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"18897" [label = <(METHOD_RETURN,ANY)> ]
-  "18890" -> "18897" 
+digraph "GetDexCache" {  
+"18585" [label = <(METHOD,GetDexCache)> ]
+"18588" [label = <(METHOD_RETURN,ANY)> ]
+  "18585" -> "18588" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/556-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/556-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/556-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/556-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"18898" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"18905" [label = <(METHOD_RETURN,ANY)> ]
-  "18898" -> "18905" 
+digraph "ThrowNoSuchMethodError" {  
+"18589" [label = <(METHOD,ThrowNoSuchMethodError)> ]
+"18596" [label = <(METHOD_RETURN,ANY)> ]
+  "18589" -> "18596" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/557-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/557-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/557-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/557-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"18906" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"18913" [label = <(METHOD_RETURN,ANY)> ]
-  "18906" -> "18913" 
+digraph "IsNative" {  
+"18597" [label = <(METHOD,IsNative)> ]
+"18600" [label = <(METHOD_RETURN,ANY)> ]
+  "18597" -> "18600" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/558-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/558-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/558-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/558-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"18914" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"18921" [label = <(METHOD_RETURN,ANY)> ]
-  "18914" -> "18921" 
+digraph "VLOG" {  
+"18601" [label = <(METHOD,VLOG)> ]
+"18604" [label = <(METHOD_RETURN,ANY)> ]
+  "18601" -> "18604" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/559-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/559-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/559-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/559-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"18922" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"18929" [label = <(METHOD_RETURN,ANY)> ]
-  "18922" -> "18929" 
+digraph "PrettyMethod" {  
+"18605" [label = <(METHOD,PrettyMethod)> ]
+"18608" [label = <(METHOD_RETURN,ANY)> ]
+  "18605" -> "18608" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/56-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/56-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/56-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/56-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,53 @@
-digraph "CallBooleanMethodV" {  
-"2779" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>814</SUB>> ]
-"2797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>815</SUB>> ]
-"2816" [label = <(soa,soa(env))<SUB>816</SUB>> ]
-"2818" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>817</SUB>> ]
-"2819" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>817</SUB>> ]
-"2820" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>817</SUB>> ]
-"2783" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>814</SUB>> ]
-"2801" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>815</SUB>> ]
-"2821" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>817</SUB>> ]
-"2826" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>817</SUB>> ]
-"2784" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>814</SUB>> ]
-"2788" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>814</SUB>> ]
-"2795" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>814</SUB>> ]
-"2802" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>815</SUB>> ]
-"2806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>815</SUB>> ]
-"2813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>815</SUB>> ]
-"2789" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>814</SUB>> ]
-"2807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>815</SUB>> ]
-"2790" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>814</SUB>> ]
-"2792" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>814</SUB>> ]
-"2808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>815</SUB>> ]
-"2810" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>815</SUB>> ]
-"2773" [label = <(METHOD,CallBooleanMethodV)<SUB>813</SUB>> ]
-"2827" [label = <(METHOD_RETURN,jboolean)<SUB>813</SUB>> ]
-  "2779" -> "2784" 
-  "2779" -> "2797" 
-  "2797" -> "2802" 
-  "2797" -> "2816" 
-  "2816" -> "2821" 
-  "2818" -> "2827" 
-  "2819" -> "2818" 
-  "2820" -> "2819" 
-  "2783" -> "2790" 
-  "2783" -> "2797" 
-  "2801" -> "2808" 
-  "2801" -> "2816" 
-  "2821" -> "2826" 
-  "2826" -> "2820" 
-  "2784" -> "2783" 
-  "2788" -> "2795" 
-  "2795" -> "2827" 
-  "2802" -> "2801" 
-  "2806" -> "2813" 
-  "2813" -> "2827" 
-  "2789" -> "2788" 
-  "2807" -> "2806" 
-  "2790" -> "2792" 
-  "2792" -> "2789" 
-  "2808" -> "2810" 
-  "2810" -> "2807" 
-  "2773" -> "2779" 
+digraph "CallByteMethodA" {  
+"2817" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>765</SUB>> ]
+"2835" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>766</SUB>> ]
+"2854" [label = <(soa,soa(env))<SUB>767</SUB>> ]
+"2856" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>768</SUB>> ]
+"2857" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>768</SUB>> ]
+"2858" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>768</SUB>> ]
+"2821" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>765</SUB>> ]
+"2839" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>766</SUB>> ]
+"2859" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>768</SUB>> ]
+"2864" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>768</SUB>> ]
+"2822" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>765</SUB>> ]
+"2826" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>765</SUB>> ]
+"2833" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>765</SUB>> ]
+"2840" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>766</SUB>> ]
+"2844" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>766</SUB>> ]
+"2851" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>766</SUB>> ]
+"2827" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>765</SUB>> ]
+"2845" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>766</SUB>> ]
+"2828" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>765</SUB>> ]
+"2830" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>765</SUB>> ]
+"2846" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>766</SUB>> ]
+"2848" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>766</SUB>> ]
+"2811" [label = <(METHOD,CallByteMethodA)<SUB>764</SUB>> ]
+"2865" [label = <(METHOD_RETURN,jbyte)<SUB>764</SUB>> ]
+  "2817" -> "2822" 
+  "2817" -> "2835" 
+  "2835" -> "2840" 
+  "2835" -> "2854" 
+  "2854" -> "2859" 
+  "2856" -> "2865" 
+  "2857" -> "2856" 
+  "2858" -> "2857" 
+  "2821" -> "2828" 
+  "2821" -> "2835" 
+  "2839" -> "2846" 
+  "2839" -> "2854" 
+  "2859" -> "2864" 
+  "2864" -> "2858" 
+  "2822" -> "2821" 
+  "2826" -> "2833" 
+  "2833" -> "2865" 
+  "2840" -> "2839" 
+  "2844" -> "2851" 
+  "2851" -> "2865" 
+  "2827" -> "2826" 
+  "2845" -> "2844" 
+  "2828" -> "2830" 
+  "2830" -> "2827" 
+  "2846" -> "2848" 
+  "2848" -> "2845" 
+  "2811" -> "2817" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/560-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/560-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/560-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/560-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"18930" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"18937" [label = <(METHOD_RETURN,ANY)> ]
-  "18930" -> "18937" 
+digraph "RegisterNative" {  
+"18609" [label = <(METHOD,RegisterNative)> ]
+"18614" [label = <(METHOD_RETURN,ANY)> ]
+  "18609" -> "18614" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/561-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/561-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/561-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/561-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"18938" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"18945" [label = <(METHOD_RETURN,ANY)> ]
-  "18938" -> "18945" 
+digraph "UNUSED" {  
+"18615" [label = <(METHOD,UNUSED)> ]
+"18618" [label = <(METHOD_RETURN,ANY)> ]
+  "18615" -> "18618" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/562-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/562-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/562-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/562-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"18946" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"18953" [label = <(METHOD_RETURN,ANY)> ]
-  "18946" -> "18953" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
+"18619" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
+"18624" [label = <(METHOD_RETURN,ANY)> ]
+  "18619" -> "18624" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/563-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/563-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/563-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/563-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"18954" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"18961" [label = <(METHOD_RETURN,ANY)> ]
-  "18954" -> "18961" 
+digraph "mirror::Class::PrettyClass" {  
+"18625" [label = <(METHOD,mirror::Class::PrettyClass)> ]
+"18629" [label = <(METHOD_RETURN,ANY)> ]
+  "18625" -> "18629" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/564-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/564-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/564-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/564-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"18962" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"18969" [label = <(METHOD_RETURN,ANY)> ]
-  "18962" -> "18969" 
+digraph "GetMethods" {  
+"18630" [label = <(METHOD,GetMethods)> ]
+"18634" [label = <(METHOD_RETURN,ANY)> ]
+  "18630" -> "18634" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/565-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/565-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/565-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/565-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"18970" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"18977" [label = <(METHOD_RETURN,ANY)> ]
-  "18970" -> "18977" 
+digraph "UnregisterNative" {  
+"18635" [label = <(METHOD,UnregisterNative)> ]
+"18638" [label = <(METHOD_RETURN,ANY)> ]
+  "18635" -> "18638" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/566-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/566-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/566-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/566-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"18978" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"18985" [label = <(METHOD_RETURN,ANY)> ]
-  "18978" -> "18985" 
+digraph "&lt;operator&gt;.postIncrement" {  
+"18639" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
+"18642" [label = <(METHOD_RETURN,ANY)> ]
+  "18639" -> "18642" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/567-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/567-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/567-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/567-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"18986" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"18993" [label = <(METHOD_RETURN,ANY)> ]
-  "18986" -> "18993" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
+"18643" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
+"18648" [label = <(METHOD_RETURN,ANY)> ]
+  "18643" -> "18648" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/568-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/568-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/568-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/568-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"18994" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19001" [label = <(METHOD_RETURN,ANY)> ]
-  "18994" -> "19001" 
+digraph "GetJavaVM" {  
+"18649" [label = <(METHOD,GetJavaVM)> ]
+"18652" [label = <(METHOD_RETURN,ANY)> ]
+  "18649" -> "18652" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/569-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/569-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/569-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/569-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
-"19002" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>397</SUB>> ]
-"19007" [label = <(METHOD_RETURN,ANY)> ]
-  "19002" -> "19007" 
+digraph "NewObject" {  
+"18653" [label = <(METHOD,NewObject)> ]
+"18658" [label = <(METHOD_RETURN,ANY)> ]
+  "18653" -> "18658" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/57-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/57-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/57-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/57-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,59 @@
-digraph "CallBooleanMethodA" {  
-"2835" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>821</SUB>> ]
-"2853" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>822</SUB>> ]
-"2872" [label = <(soa,soa(env))<SUB>823</SUB>> ]
-"2874" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>824</SUB>> ]
-"2875" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>824</SUB>> ]
-"2876" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>824</SUB>> ]
-"2839" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>821</SUB>> ]
-"2857" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>822</SUB>> ]
-"2877" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>824</SUB>> ]
-"2882" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>824</SUB>> ]
-"2840" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>821</SUB>> ]
-"2844" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>821</SUB>> ]
-"2851" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>821</SUB>> ]
-"2858" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>822</SUB>> ]
-"2862" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>822</SUB>> ]
-"2869" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>822</SUB>> ]
-"2845" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>821</SUB>> ]
-"2863" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>822</SUB>> ]
-"2846" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>821</SUB>> ]
-"2848" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>821</SUB>> ]
-"2864" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>822</SUB>> ]
-"2866" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>822</SUB>> ]
-"2829" [label = <(METHOD,CallBooleanMethodA)<SUB>820</SUB>> ]
-"2883" [label = <(METHOD_RETURN,jboolean)<SUB>820</SUB>> ]
-  "2835" -> "2840" 
-  "2835" -> "2853" 
-  "2853" -> "2858" 
-  "2853" -> "2872" 
-  "2872" -> "2877" 
-  "2874" -> "2883" 
-  "2875" -> "2874" 
-  "2876" -> "2875" 
-  "2839" -> "2846" 
-  "2839" -> "2853" 
-  "2857" -> "2864" 
-  "2857" -> "2872" 
-  "2877" -> "2882" 
-  "2882" -> "2876" 
-  "2840" -> "2839" 
-  "2844" -> "2851" 
-  "2851" -> "2883" 
-  "2858" -> "2857" 
-  "2862" -> "2869" 
-  "2869" -> "2883" 
-  "2845" -> "2844" 
-  "2863" -> "2862" 
-  "2846" -> "2848" 
-  "2848" -> "2845" 
-  "2864" -> "2866" 
-  "2866" -> "2863" 
-  "2829" -> "2835" 
+digraph "CallCharMethod" {  
+"2873" [label = <(va_start,va_start(ap, mid))<SUB>773</SUB>> ]
+"2876" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>774</SUB>> ]
+"2894" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>775</SUB>> ]
+"2913" [label = <(soa,soa(env))<SUB>776</SUB>> ]
+"2916" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>777</SUB>> ]
+"2922" [label = <(va_end,va_end(ap))<SUB>778</SUB>> ]
+"2924" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>779</SUB>> ]
+"2917" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>777</SUB>> ]
+"2925" [label = <(GetC,result.GetC())<SUB>779</SUB>> ]
+"2926" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>779</SUB>> ]
+"2880" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>774</SUB>> ]
+"2898" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>775</SUB>> ]
+"2928" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>779</SUB>> ]
+"2881" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>774</SUB>> ]
+"2885" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>774</SUB>> ]
+"2892" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>774</SUB>> ]
+"2899" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>775</SUB>> ]
+"2903" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>775</SUB>> ]
+"2910" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>775</SUB>> ]
+"2886" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>774</SUB>> ]
+"2904" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>775</SUB>> ]
+"2887" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>774</SUB>> ]
+"2889" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>774</SUB>> ]
+"2905" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>775</SUB>> ]
+"2907" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>775</SUB>> ]
+"2867" [label = <(METHOD,CallCharMethod)<SUB>771</SUB>> ]
+"2929" [label = <(METHOD_RETURN,jchar)<SUB>771</SUB>> ]
+  "2873" -> "2876" 
+  "2876" -> "2881" 
+  "2876" -> "2894" 
+  "2894" -> "2899" 
+  "2894" -> "2913" 
+  "2913" -> "2917" 
+  "2916" -> "2922" 
+  "2922" -> "2928" 
+  "2924" -> "2929" 
+  "2917" -> "2916" 
+  "2925" -> "2924" 
+  "2926" -> "2925" 
+  "2880" -> "2887" 
+  "2880" -> "2894" 
+  "2898" -> "2905" 
+  "2898" -> "2913" 
+  "2928" -> "2926" 
+  "2881" -> "2880" 
+  "2885" -> "2892" 
+  "2892" -> "2929" 
+  "2899" -> "2898" 
+  "2903" -> "2910" 
+  "2910" -> "2929" 
+  "2886" -> "2885" 
+  "2904" -> "2903" 
+  "2887" -> "2889" 
+  "2889" -> "2886" 
+  "2905" -> "2907" 
+  "2907" -> "2904" 
+  "2867" -> "2873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/570-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/570-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/570-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/570-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
-"19008" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
-"19013" [label = <(METHOD_RETURN,ANY)> ]
-  "19008" -> "19013" 
+digraph "GetLongField" {  
+"18659" [label = <(METHOD,GetLongField)> ]
+"18664" [label = <(METHOD_RETURN,ANY)> ]
+  "18659" -> "18664" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/571-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/571-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/571-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/571-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
-"19014" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
-"19019" [label = <(METHOD_RETURN,ANY)> ]
-  "19014" -> "19019" 
+digraph "GetIntField" {  
+"18665" [label = <(METHOD,GetIntField)> ]
+"18670" [label = <(METHOD_RETURN,ANY)> ]
+  "18665" -> "18670" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/572-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/572-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/572-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/572-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsCheckJniEnabled" {  
-"19020" [label = <(METHOD,IsCheckJniEnabled)> ]
-"19023" [label = <(METHOD_RETURN,ANY)> ]
-  "19020" -> "19023" 
+digraph "Capacity" {  
+"18671" [label = <(METHOD,Capacity)> ]
+"18674" [label = <(METHOD_RETURN,ANY)> ]
+  "18671" -> "18674" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/573-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/573-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/573-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/573-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "DumpClass" {  
-"19024" [label = <(METHOD,DumpClass)> ]
-"19029" [label = <(METHOD_RETURN,ANY)> ]
-  "19024" -> "19029" 
+digraph "&lt;operator&gt;.greaterEqualsThan" {  
+"18675" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
+"18679" [label = <(METHOD_RETURN,ANY)> ]
+  "18675" -> "18679" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/574-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/574-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/574-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/574-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "LOG_STREAM" {  
-"19030" [label = <(METHOD,LOG_STREAM)> ]
-"19033" [label = <(METHOD_RETURN,ANY)> ]
-  "19030" -> "19033" 
+digraph "ArtT::Alloc" {  
+"18680" [label = <(METHOD,ArtT::Alloc)> ]
+"18685" [label = <(METHOD_RETURN,ANY)> ]
+  "18680" -> "18685" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/575-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/575-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/575-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/575-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ToModifiedUtf8" {  
-"19034" [label = <(METHOD,ToModifiedUtf8)> ]
-"19037" [label = <(METHOD_RETURN,ANY)> ]
-  "19034" -> "19037" 
+digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
+"18686" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
+"18692" [label = <(METHOD_RETURN,ANY)> ]
+  "18686" -> "18692" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/576-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/576-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/576-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/576-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetLocation" {  
-"19038" [label = <(METHOD,GetLocation)> ]
-"19041" [label = <(METHOD_RETURN,ANY)> ]
-  "19038" -> "19041" 
+digraph "GetData" {  
+"18693" [label = <(METHOD,GetData)> ]
+"18696" [label = <(METHOD_RETURN,ANY)> ]
+  "18693" -> "18696" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/577-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/577-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/577-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/577-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetDexCache" {  
-"19042" [label = <(METHOD,GetDexCache)> ]
-"19045" [label = <(METHOD_RETURN,ANY)> ]
-  "19042" -> "19045" 
+digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
+"18697" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
+"18703" [label = <(METHOD_RETURN,ANY)> ]
+  "18697" -> "18703" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/578-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/578-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/578-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/578-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowNoSuchMethodError" {  
-"19046" [label = <(METHOD,ThrowNoSuchMethodError)> ]
-"19053" [label = <(METHOD_RETURN,ANY)> ]
-  "19046" -> "19053" 
+digraph "&lt;operator&gt;.arrayInitializer" {  
+"18704" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
+"18709" [label = <(METHOD_RETURN,ANY)> ]
+  "18704" -> "18709" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/579-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/579-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/579-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/579-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "IsNative" {  
-"19054" [label = <(METHOD,IsNative)> ]
-"19057" [label = <(METHOD_RETURN,ANY)> ]
-  "19054" -> "19057" 
+digraph "JNI::RegisterNativeMethods" {  
+"18710" [label = <(METHOD,JNI::RegisterNativeMethods)> ]
+"18718" [label = <(METHOD_RETURN,ANY)> ]
+  "18710" -> "18718" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/58-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/58-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/58-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/58-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,59 +1,53 @@
-digraph "CallByteMethod" {  
-"2891" [label = <(va_start,va_start(ap, mid))<SUB>829</SUB>> ]
-"2894" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>830</SUB>> ]
-"2912" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>831</SUB>> ]
-"2931" [label = <(soa,soa(env))<SUB>832</SUB>> ]
-"2934" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>833</SUB>> ]
-"2940" [label = <(va_end,va_end(ap))<SUB>834</SUB>> ]
-"2942" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>835</SUB>> ]
-"2935" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>833</SUB>> ]
-"2943" [label = <(GetB,result.GetB())<SUB>835</SUB>> ]
-"2944" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>835</SUB>> ]
-"2898" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>830</SUB>> ]
-"2916" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>831</SUB>> ]
-"2946" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>835</SUB>> ]
-"2899" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>830</SUB>> ]
-"2903" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>830</SUB>> ]
-"2910" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>830</SUB>> ]
-"2917" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>831</SUB>> ]
-"2921" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>831</SUB>> ]
-"2928" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>831</SUB>> ]
-"2904" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>830</SUB>> ]
-"2922" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>831</SUB>> ]
-"2905" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>830</SUB>> ]
-"2907" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>830</SUB>> ]
-"2923" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>831</SUB>> ]
-"2925" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>831</SUB>> ]
-"2885" [label = <(METHOD,CallByteMethod)<SUB>827</SUB>> ]
-"2947" [label = <(METHOD_RETURN,jbyte)<SUB>827</SUB>> ]
-  "2891" -> "2894" 
-  "2894" -> "2899" 
-  "2894" -> "2912" 
-  "2912" -> "2917" 
-  "2912" -> "2931" 
-  "2931" -> "2935" 
-  "2934" -> "2940" 
-  "2940" -> "2946" 
-  "2942" -> "2947" 
-  "2935" -> "2934" 
-  "2943" -> "2942" 
-  "2944" -> "2943" 
-  "2898" -> "2905" 
-  "2898" -> "2912" 
-  "2916" -> "2923" 
-  "2916" -> "2931" 
-  "2946" -> "2944" 
-  "2899" -> "2898" 
-  "2903" -> "2910" 
-  "2910" -> "2947" 
-  "2917" -> "2916" 
-  "2921" -> "2928" 
-  "2928" -> "2947" 
-  "2904" -> "2903" 
-  "2922" -> "2921" 
-  "2905" -> "2907" 
-  "2907" -> "2904" 
-  "2923" -> "2925" 
-  "2925" -> "2922" 
-  "2885" -> "2891" 
+digraph "CallCharMethodV" {  
+"2937" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>783</SUB>> ]
+"2955" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>784</SUB>> ]
+"2974" [label = <(soa,soa(env))<SUB>785</SUB>> ]
+"2976" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>786</SUB>> ]
+"2977" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>786</SUB>> ]
+"2978" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>786</SUB>> ]
+"2941" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>783</SUB>> ]
+"2959" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>784</SUB>> ]
+"2979" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>786</SUB>> ]
+"2984" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>786</SUB>> ]
+"2942" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>783</SUB>> ]
+"2946" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>783</SUB>> ]
+"2953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>783</SUB>> ]
+"2960" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>784</SUB>> ]
+"2964" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>784</SUB>> ]
+"2971" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>784</SUB>> ]
+"2947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>783</SUB>> ]
+"2965" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>784</SUB>> ]
+"2948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>783</SUB>> ]
+"2950" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>783</SUB>> ]
+"2966" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>784</SUB>> ]
+"2968" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>784</SUB>> ]
+"2931" [label = <(METHOD,CallCharMethodV)<SUB>782</SUB>> ]
+"2985" [label = <(METHOD_RETURN,jchar)<SUB>782</SUB>> ]
+  "2937" -> "2942" 
+  "2937" -> "2955" 
+  "2955" -> "2960" 
+  "2955" -> "2974" 
+  "2974" -> "2979" 
+  "2976" -> "2985" 
+  "2977" -> "2976" 
+  "2978" -> "2977" 
+  "2941" -> "2948" 
+  "2941" -> "2955" 
+  "2959" -> "2966" 
+  "2959" -> "2974" 
+  "2979" -> "2984" 
+  "2984" -> "2978" 
+  "2942" -> "2941" 
+  "2946" -> "2953" 
+  "2953" -> "2985" 
+  "2960" -> "2959" 
+  "2964" -> "2971" 
+  "2971" -> "2985" 
+  "2947" -> "2946" 
+  "2965" -> "2964" 
+  "2948" -> "2950" 
+  "2950" -> "2947" 
+  "2966" -> "2968" 
+  "2968" -> "2965" 
+  "2931" -> "2937" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/580-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/580-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/580-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/580-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "VLOG" {  
-"19058" [label = <(METHOD,VLOG)> ]
-"19061" [label = <(METHOD_RETURN,ANY)> ]
-  "19058" -> "19061" 
+digraph "UNREACHABLE" {  
+"18719" [label = <(METHOD,UNREACHABLE)> ]
+"18721" [label = <(METHOD_RETURN,ANY)> ]
+  "18719" -> "18721" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/581-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/581-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/581-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/581-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyMethod" {  
-"19062" [label = <(METHOD,PrettyMethod)> ]
-"19065" [label = <(METHOD_RETURN,ANY)> ]
-  "19062" -> "19065" 
+digraph "CommonCompilerTest::SetUp" {  
+"18722" [label = <(METHOD,CommonCompilerTest::SetUp)> ]
+"18725" [label = <(METHOD_RETURN,ANY)> ]
+  "18722" -> "18725" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/582-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/582-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/582-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/582-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNative" {  
-"19066" [label = <(METHOD,RegisterNative)> ]
-"19071" [label = <(METHOD_RETURN,ANY)> ]
-  "19066" -> "19071" 
+digraph "AttachCurrentThread" {  
+"18726" [label = <(METHOD,AttachCurrentThread)> ]
+"18731" [label = <(METHOD_RETURN,ANY)> ]
+  "18726" -> "18731" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/583-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/583-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/583-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/583-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "UNUSED" {  
-"19072" [label = <(METHOD,UNUSED)> ]
-"19075" [label = <(METHOD_RETURN,ANY)> ]
-  "19072" -> "19075" 
+digraph "aioobe" {  
+"18732" [label = <(METHOD,aioobe)> ]
+"18736" [label = <(METHOD_RETURN,ANY)> ]
+  "18732" -> "18736" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/584-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/584-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/584-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/584-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
-"19076" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
-"19081" [label = <(METHOD_RETURN,ANY)> ]
-  "19076" -> "19081" 
+digraph "NewGlobalRef" {  
+"18737" [label = <(METHOD,NewGlobalRef)> ]
+"18742" [label = <(METHOD_RETURN,ANY)> ]
+  "18737" -> "18742" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/585-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/585-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/585-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/585-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyClass" {  
-"19082" [label = <(METHOD,mirror::Class::PrettyClass)> ]
-"19086" [label = <(METHOD_RETURN,ANY)> ]
-  "19082" -> "19086" 
+digraph "ase" {  
+"18743" [label = <(METHOD,ase)> ]
+"18747" [label = <(METHOD_RETURN,ANY)> ]
+  "18743" -> "18747" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/586-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/586-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/586-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/586-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethods" {  
-"19087" [label = <(METHOD,GetMethods)> ]
-"19091" [label = <(METHOD_RETURN,ANY)> ]
-  "19087" -> "19091" 
+digraph "sioobe" {  
+"18748" [label = <(METHOD,sioobe)> ]
+"18752" [label = <(METHOD_RETURN,ANY)> ]
+  "18748" -> "18752" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/587-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/587-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/587-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/587-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNative" {  
-"19092" [label = <(METHOD,UnregisterNative)> ]
-"19095" [label = <(METHOD_RETURN,ANY)> ]
-  "19092" -> "19095" 
+digraph "EXPECT_TRUE" {  
+"18753" [label = <(METHOD,EXPECT_TRUE)> ]
+"18756" [label = <(METHOD_RETURN,ANY)> ]
+  "18753" -> "18756" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/588-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/588-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/588-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/588-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.postIncrement" {  
-"19096" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
-"19099" [label = <(METHOD_RETURN,ANY)> ]
-  "19096" -> "19099" 
+digraph "ExceptionCheck" {  
+"18757" [label = <(METHOD,ExceptionCheck)> ]
+"18760" [label = <(METHOD_RETURN,ANY)> ]
+  "18757" -> "18760" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/589-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/589-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/589-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/589-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
-"19100" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
-"19105" [label = <(METHOD_RETURN,ANY)> ]
-  "19100" -> "19105" 
+digraph "ExceptionOccurred" {  
+"18761" [label = <(METHOD,ExceptionOccurred)> ]
+"18764" [label = <(METHOD_RETURN,ANY)> ]
+  "18761" -> "18764" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/59-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/59-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/59-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/59-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,53 @@
-digraph "CallByteMethodV" {  
-"2955" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>839</SUB>> ]
-"2973" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>840</SUB>> ]
-"2992" [label = <(soa,soa(env))<SUB>841</SUB>> ]
-"2994" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>842</SUB>> ]
-"2995" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>842</SUB>> ]
-"2996" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>842</SUB>> ]
-"2959" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>839</SUB>> ]
-"2977" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>840</SUB>> ]
-"2997" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>842</SUB>> ]
-"3002" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>842</SUB>> ]
-"2960" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>839</SUB>> ]
-"2964" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>839</SUB>> ]
-"2971" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>839</SUB>> ]
-"2978" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>840</SUB>> ]
-"2982" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>840</SUB>> ]
-"2989" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>840</SUB>> ]
-"2965" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>839</SUB>> ]
-"2983" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>840</SUB>> ]
-"2966" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>839</SUB>> ]
-"2968" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>839</SUB>> ]
-"2984" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>840</SUB>> ]
-"2986" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>840</SUB>> ]
-"2949" [label = <(METHOD,CallByteMethodV)<SUB>838</SUB>> ]
-"3003" [label = <(METHOD_RETURN,jbyte)<SUB>838</SUB>> ]
-  "2955" -> "2960" 
-  "2955" -> "2973" 
-  "2973" -> "2978" 
-  "2973" -> "2992" 
-  "2992" -> "2997" 
-  "2994" -> "3003" 
-  "2995" -> "2994" 
-  "2996" -> "2995" 
-  "2959" -> "2966" 
-  "2959" -> "2973" 
-  "2977" -> "2984" 
-  "2977" -> "2992" 
-  "2997" -> "3002" 
-  "3002" -> "2996" 
-  "2960" -> "2959" 
-  "2964" -> "2971" 
-  "2971" -> "3003" 
-  "2978" -> "2977" 
-  "2982" -> "2989" 
-  "2989" -> "3003" 
-  "2965" -> "2964" 
-  "2983" -> "2982" 
-  "2966" -> "2968" 
-  "2968" -> "2965" 
-  "2984" -> "2986" 
-  "2986" -> "2983" 
-  "2949" -> "2955" 
+digraph "CallCharMethodA" {  
+"2993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>790</SUB>> ]
+"3011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>791</SUB>> ]
+"3030" [label = <(soa,soa(env))<SUB>792</SUB>> ]
+"3032" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>793</SUB>> ]
+"3033" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>793</SUB>> ]
+"3034" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>793</SUB>> ]
+"2997" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>790</SUB>> ]
+"3015" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>791</SUB>> ]
+"3035" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>793</SUB>> ]
+"3040" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>793</SUB>> ]
+"2998" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>790</SUB>> ]
+"3002" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>790</SUB>> ]
+"3009" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>790</SUB>> ]
+"3016" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>791</SUB>> ]
+"3020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>791</SUB>> ]
+"3027" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>791</SUB>> ]
+"3003" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>790</SUB>> ]
+"3021" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>791</SUB>> ]
+"3004" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>790</SUB>> ]
+"3006" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>790</SUB>> ]
+"3022" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>791</SUB>> ]
+"3024" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>791</SUB>> ]
+"2987" [label = <(METHOD,CallCharMethodA)<SUB>789</SUB>> ]
+"3041" [label = <(METHOD_RETURN,jchar)<SUB>789</SUB>> ]
+  "2993" -> "2998" 
+  "2993" -> "3011" 
+  "3011" -> "3016" 
+  "3011" -> "3030" 
+  "3030" -> "3035" 
+  "3032" -> "3041" 
+  "3033" -> "3032" 
+  "3034" -> "3033" 
+  "2997" -> "3004" 
+  "2997" -> "3011" 
+  "3015" -> "3022" 
+  "3015" -> "3030" 
+  "3035" -> "3040" 
+  "3040" -> "3034" 
+  "2998" -> "2997" 
+  "3002" -> "3009" 
+  "3009" -> "3041" 
+  "3016" -> "3015" 
+  "3020" -> "3027" 
+  "3027" -> "3041" 
+  "3003" -> "3002" 
+  "3021" -> "3020" 
+  "3004" -> "3006" 
+  "3006" -> "3003" 
+  "3022" -> "3024" 
+  "3024" -> "3021" 
+  "2987" -> "2993" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/590-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/590-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/590-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/590-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetJavaVM" {  
-"19106" [label = <(METHOD,GetJavaVM)> ]
-"19109" [label = <(METHOD_RETURN,ANY)> ]
-  "19106" -> "19109" 
+digraph "EXPECT_NE" {  
+"18765" [label = <(METHOD,EXPECT_NE)> ]
+"18769" [label = <(METHOD_RETURN,ANY)> ]
+  "18765" -> "18769" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/591-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/591-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/591-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/591-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "NewObject" {  
-"19110" [label = <(METHOD,NewObject)> ]
-"19115" [label = <(METHOD_RETURN,ANY)> ]
-  "19110" -> "19115" 
+digraph "ExceptionClear" {  
+"18770" [label = <(METHOD,ExceptionClear)> ]
+"18773" [label = <(METHOD_RETURN,ANY)> ]
+  "18770" -> "18773" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/592-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/592-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/592-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/592-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongField" {  
-"19116" [label = <(METHOD,GetLongField)> ]
-"19121" [label = <(METHOD_RETURN,ANY)> ]
-  "19116" -> "19121" 
+digraph "IsInstanceOf" {  
+"18774" [label = <(METHOD,IsInstanceOf)> ]
+"18779" [label = <(METHOD_RETURN,ANY)> ]
+  "18774" -> "18779" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/593-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/593-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/593-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/593-cfg.dot	2023-06-07 19:35:21.417385029 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntField" {  
-"19122" [label = <(METHOD,GetIntField)> ]
-"19127" [label = <(METHOD_RETURN,ANY)> ]
-  "19122" -> "19127" 
+digraph "FindPrimitiveClass" {  
+"18780" [label = <(METHOD,FindPrimitiveClass)> ]
+"18784" [label = <(METHOD_RETURN,ANY)> ]
+  "18780" -> "18784" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/594-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/594-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/594-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/594-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "Capacity" {  
-"19128" [label = <(METHOD,Capacity)> ]
-"19131" [label = <(METHOD_RETURN,ANY)> ]
-  "19128" -> "19131" 
+digraph "EXPECT_FALSE" {  
+"18785" [label = <(METHOD,EXPECT_FALSE)> ]
+"18788" [label = <(METHOD_RETURN,ANY)> ]
+  "18785" -> "18788" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/595-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/595-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/595-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/595-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ArtT::Alloc" {  
-"19132" [label = <(METHOD,ArtT::Alloc)> ]
-"19137" [label = <(METHOD_RETURN,ANY)> ]
-  "19132" -> "19137" 
+digraph "EXPECT_EQ" {  
+"18789" [label = <(METHOD,EXPECT_EQ)> ]
+"18793" [label = <(METHOD_RETURN,ANY)> ]
+  "18789" -> "18793" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/596-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/596-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/596-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/596-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
-"19138" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
-"19144" [label = <(METHOD_RETURN,ANY)> ]
-  "19138" -> "19144" 
+digraph "Check" {  
+"18794" [label = <(METHOD,Check)> ]
+"18798" [label = <(METHOD_RETURN,ANY)> ]
+  "18794" -> "18798" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/597-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/597-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/597-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/597-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetData" {  
-"19145" [label = <(METHOD,GetData)> ]
-"19148" [label = <(METHOD_RETURN,ANY)> ]
-  "19145" -> "19148" 
+digraph "SetCheckJniEnabled" {  
+"18799" [label = <(METHOD,SetCheckJniEnabled)> ]
+"18803" [label = <(METHOD_RETURN,ANY)> ]
+  "18799" -> "18803" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/598-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/598-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/598-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/598-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
-"19149" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
-"19155" [label = <(METHOD_RETURN,ANY)> ]
-  "19149" -> "19155" 
+digraph "ExpectClassFound" {  
+"18804" [label = <(METHOD,ExpectClassFound)> ]
+"18807" [label = <(METHOD_RETURN,ANY)> ]
+  "18804" -> "18807" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/599-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/599-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/599-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/599-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arrayInitializer" {  
-"19156" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
-"19161" [label = <(METHOD_RETURN,ANY)> ]
-  "19156" -> "19161" 
+digraph "ExpectClassNotFound" {  
+"18808" [label = <(METHOD,ExpectClassNotFound)> ]
+"18814" [label = <(METHOD_RETURN,ANY)> ]
+  "18808" -> "18814" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/6-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/6-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/6-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/6-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowNoSuchMethodError" {  
-"273" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>172</SUB>> ]
-"280" [label = <(METHOD_RETURN,void)<SUB>172</SUB>> ]
-  "273" -> "280" 
+digraph "FindMethodID" {  
+"126" [label = <(METHOD,FindMethodID)<SUB>135</SUB>> ]
+"133" [label = <(METHOD_RETURN,jmethodID)<SUB>135</SUB>> ]
+  "126" -> "133" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/60-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/60-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/60-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/60-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,59 @@
-digraph "CallByteMethodA" {  
-"3011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>846</SUB>> ]
-"3029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>847</SUB>> ]
-"3048" [label = <(soa,soa(env))<SUB>848</SUB>> ]
-"3050" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>849</SUB>> ]
-"3051" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>849</SUB>> ]
-"3052" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>849</SUB>> ]
-"3015" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>846</SUB>> ]
-"3033" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>847</SUB>> ]
-"3053" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>849</SUB>> ]
-"3058" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>849</SUB>> ]
-"3016" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>846</SUB>> ]
-"3020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>846</SUB>> ]
-"3027" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>846</SUB>> ]
-"3034" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>847</SUB>> ]
-"3038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>847</SUB>> ]
-"3045" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>847</SUB>> ]
-"3021" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>846</SUB>> ]
-"3039" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>847</SUB>> ]
-"3022" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>846</SUB>> ]
-"3024" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>846</SUB>> ]
-"3040" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>847</SUB>> ]
-"3042" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>847</SUB>> ]
-"3005" [label = <(METHOD,CallByteMethodA)<SUB>845</SUB>> ]
-"3059" [label = <(METHOD_RETURN,jbyte)<SUB>845</SUB>> ]
-  "3011" -> "3016" 
-  "3011" -> "3029" 
-  "3029" -> "3034" 
-  "3029" -> "3048" 
-  "3048" -> "3053" 
-  "3050" -> "3059" 
-  "3051" -> "3050" 
-  "3052" -> "3051" 
-  "3015" -> "3022" 
-  "3015" -> "3029" 
-  "3033" -> "3040" 
-  "3033" -> "3048" 
-  "3053" -> "3058" 
-  "3058" -> "3052" 
-  "3016" -> "3015" 
-  "3020" -> "3027" 
-  "3027" -> "3059" 
-  "3034" -> "3033" 
-  "3038" -> "3045" 
-  "3045" -> "3059" 
-  "3021" -> "3020" 
-  "3039" -> "3038" 
-  "3022" -> "3024" 
-  "3024" -> "3021" 
-  "3040" -> "3042" 
-  "3042" -> "3039" 
-  "3005" -> "3011" 
+digraph "CallDoubleMethod" {  
+"3049" [label = <(va_start,va_start(ap, mid))<SUB>798</SUB>> ]
+"3052" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>799</SUB>> ]
+"3070" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>800</SUB>> ]
+"3089" [label = <(soa,soa(env))<SUB>801</SUB>> ]
+"3092" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>802</SUB>> ]
+"3098" [label = <(va_end,va_end(ap))<SUB>803</SUB>> ]
+"3100" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>804</SUB>> ]
+"3093" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>802</SUB>> ]
+"3101" [label = <(GetD,result.GetD())<SUB>804</SUB>> ]
+"3102" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>804</SUB>> ]
+"3056" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>799</SUB>> ]
+"3074" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>800</SUB>> ]
+"3104" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>804</SUB>> ]
+"3057" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>799</SUB>> ]
+"3061" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>799</SUB>> ]
+"3068" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>799</SUB>> ]
+"3075" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>800</SUB>> ]
+"3079" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>800</SUB>> ]
+"3086" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>800</SUB>> ]
+"3062" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>799</SUB>> ]
+"3080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>800</SUB>> ]
+"3063" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>799</SUB>> ]
+"3065" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>799</SUB>> ]
+"3081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>800</SUB>> ]
+"3083" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>800</SUB>> ]
+"3043" [label = <(METHOD,CallDoubleMethod)<SUB>796</SUB>> ]
+"3105" [label = <(METHOD_RETURN,jdouble)<SUB>796</SUB>> ]
+  "3049" -> "3052" 
+  "3052" -> "3057" 
+  "3052" -> "3070" 
+  "3070" -> "3075" 
+  "3070" -> "3089" 
+  "3089" -> "3093" 
+  "3092" -> "3098" 
+  "3098" -> "3104" 
+  "3100" -> "3105" 
+  "3093" -> "3092" 
+  "3101" -> "3100" 
+  "3102" -> "3101" 
+  "3056" -> "3063" 
+  "3056" -> "3070" 
+  "3074" -> "3081" 
+  "3074" -> "3089" 
+  "3104" -> "3102" 
+  "3057" -> "3056" 
+  "3061" -> "3068" 
+  "3068" -> "3105" 
+  "3075" -> "3074" 
+  "3079" -> "3086" 
+  "3086" -> "3105" 
+  "3062" -> "3061" 
+  "3080" -> "3079" 
+  "3063" -> "3065" 
+  "3065" -> "3062" 
+  "3081" -> "3083" 
+  "3083" -> "3080" 
+  "3043" -> "3049" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/600-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/600-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/600-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/600-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "JNI::RegisterNativeMethods" {  
-"19162" [label = <(METHOD,JNI::RegisterNativeMethods)> ]
-"19170" [label = <(METHOD_RETURN,ANY)> ]
-  "19162" -> "19170" 
+digraph "ASSERT_NE" {  
+"18815" [label = <(METHOD,ASSERT_NE)> ]
+"18819" [label = <(METHOD_RETURN,ANY)> ]
+  "18815" -> "18819" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/601-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/601-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/601-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/601-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "UNREACHABLE" {  
-"19171" [label = <(METHOD,UNREACHABLE)> ]
-"19173" [label = <(METHOD_RETURN,ANY)> ]
-  "19171" -> "19173" 
+digraph "GetFieldID" {  
+"18820" [label = <(METHOD,GetFieldID)> ]
+"18826" [label = <(METHOD_RETURN,ANY)> ]
+  "18820" -> "18826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/602-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/602-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/602-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/602-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "CommonCompilerTest::SetUp" {  
-"19174" [label = <(METHOD,CommonCompilerTest::SetUp)> ]
-"19177" [label = <(METHOD_RETURN,ANY)> ]
-  "19174" -> "19177" 
+digraph "GetStaticFieldID" {  
+"18827" [label = <(METHOD,GetStaticFieldID)> ]
+"18833" [label = <(METHOD_RETURN,ANY)> ]
+  "18827" -> "18833" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/603-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/603-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/603-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/603-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "AttachCurrentThread" {  
-"19178" [label = <(METHOD,AttachCurrentThread)> ]
-"19183" [label = <(METHOD_RETURN,ANY)> ]
-  "19178" -> "19183" 
+digraph "ASSERT_TRUE" {  
+"18834" [label = <(METHOD,ASSERT_TRUE)> ]
+"18837" [label = <(METHOD_RETURN,ANY)> ]
+  "18834" -> "18837" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/604-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/604-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/604-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/604-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "aioobe" {  
-"19184" [label = <(METHOD,aioobe)> ]
-"19188" [label = <(METHOD_RETURN,ANY)> ]
-  "19184" -> "19188" 
+digraph "GetStaticMethodID" {  
+"18838" [label = <(METHOD,GetStaticMethodID)> ]
+"18844" [label = <(METHOD_RETURN,ANY)> ]
+  "18838" -> "18844" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/605-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/605-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/605-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/605-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewGlobalRef" {  
-"19189" [label = <(METHOD,NewGlobalRef)> ]
-"19194" [label = <(METHOD_RETURN,ANY)> ]
-  "19189" -> "19194" 
+digraph "ToReflectedField" {  
+"18845" [label = <(METHOD,ToReflectedField)> ]
+"18851" [label = <(METHOD_RETURN,ANY)> ]
+  "18845" -> "18851" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/606-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/606-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/606-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/606-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ase" {  
-"19195" [label = <(METHOD,ase)> ]
-"19199" [label = <(METHOD_RETURN,ANY)> ]
-  "19195" -> "19199" 
+digraph "FromReflectedField" {  
+"18852" [label = <(METHOD,FromReflectedField)> ]
+"18856" [label = <(METHOD_RETURN,ANY)> ]
+  "18852" -> "18856" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/607-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/607-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/607-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/607-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "sioobe" {  
-"19200" [label = <(METHOD,sioobe)> ]
-"19204" [label = <(METHOD_RETURN,ANY)> ]
-  "19200" -> "19204" 
+digraph "ASSERT_EQ" {  
+"18857" [label = <(METHOD,ASSERT_EQ)> ]
+"18861" [label = <(METHOD_RETURN,ANY)> ]
+  "18857" -> "18861" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/608-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/608-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/608-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/608-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_TRUE" {  
-"19205" [label = <(METHOD,EXPECT_TRUE)> ]
-"19208" [label = <(METHOD_RETURN,ANY)> ]
-  "19205" -> "19208" 
+digraph "ToReflectedMethod" {  
+"18862" [label = <(METHOD,ToReflectedMethod)> ]
+"18868" [label = <(METHOD_RETURN,ANY)> ]
+  "18862" -> "18868" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/609-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/609-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/609-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/609-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionCheck" {  
-"19209" [label = <(METHOD,ExceptionCheck)> ]
-"19212" [label = <(METHOD_RETURN,ANY)> ]
-  "19209" -> "19212" 
+digraph "FromReflectedMethod" {  
+"18869" [label = <(METHOD,FromReflectedMethod)> ]
+"18873" [label = <(METHOD_RETURN,ANY)> ]
+  "18869" -> "18873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/61-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/61-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/61-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/61-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,59 +1,53 @@
-digraph "CallCharMethod" {  
-"3067" [label = <(va_start,va_start(ap, mid))<SUB>854</SUB>> ]
-"3070" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>855</SUB>> ]
-"3088" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>856</SUB>> ]
-"3107" [label = <(soa,soa(env))<SUB>857</SUB>> ]
-"3110" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>858</SUB>> ]
-"3116" [label = <(va_end,va_end(ap))<SUB>859</SUB>> ]
-"3118" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>860</SUB>> ]
-"3111" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>858</SUB>> ]
-"3119" [label = <(GetC,result.GetC())<SUB>860</SUB>> ]
-"3120" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>860</SUB>> ]
-"3074" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>855</SUB>> ]
-"3092" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>856</SUB>> ]
-"3122" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>860</SUB>> ]
-"3075" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>855</SUB>> ]
-"3079" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>855</SUB>> ]
-"3086" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>855</SUB>> ]
-"3093" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>856</SUB>> ]
-"3097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>856</SUB>> ]
-"3104" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>856</SUB>> ]
-"3080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>855</SUB>> ]
-"3098" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>856</SUB>> ]
-"3081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>855</SUB>> ]
-"3083" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>855</SUB>> ]
-"3099" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>856</SUB>> ]
-"3101" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>856</SUB>> ]
-"3061" [label = <(METHOD,CallCharMethod)<SUB>852</SUB>> ]
-"3123" [label = <(METHOD_RETURN,jchar)<SUB>852</SUB>> ]
-  "3067" -> "3070" 
-  "3070" -> "3075" 
-  "3070" -> "3088" 
-  "3088" -> "3093" 
-  "3088" -> "3107" 
-  "3107" -> "3111" 
-  "3110" -> "3116" 
-  "3116" -> "3122" 
-  "3118" -> "3123" 
-  "3111" -> "3110" 
-  "3119" -> "3118" 
-  "3120" -> "3119" 
-  "3074" -> "3081" 
-  "3074" -> "3088" 
-  "3092" -> "3099" 
-  "3092" -> "3107" 
-  "3122" -> "3120" 
-  "3075" -> "3074" 
-  "3079" -> "3086" 
-  "3086" -> "3123" 
-  "3093" -> "3092" 
-  "3097" -> "3104" 
-  "3104" -> "3123" 
-  "3080" -> "3079" 
-  "3098" -> "3097" 
-  "3081" -> "3083" 
-  "3083" -> "3080" 
-  "3099" -> "3101" 
-  "3101" -> "3098" 
-  "3061" -> "3067" 
+digraph "CallDoubleMethodV" {  
+"3113" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>808</SUB>> ]
+"3131" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>809</SUB>> ]
+"3150" [label = <(soa,soa(env))<SUB>810</SUB>> ]
+"3152" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>811</SUB>> ]
+"3153" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>811</SUB>> ]
+"3154" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>811</SUB>> ]
+"3117" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>808</SUB>> ]
+"3135" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>809</SUB>> ]
+"3155" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>811</SUB>> ]
+"3160" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>811</SUB>> ]
+"3118" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>808</SUB>> ]
+"3122" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>808</SUB>> ]
+"3129" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>808</SUB>> ]
+"3136" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>809</SUB>> ]
+"3140" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>809</SUB>> ]
+"3147" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>809</SUB>> ]
+"3123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>808</SUB>> ]
+"3141" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>809</SUB>> ]
+"3124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>808</SUB>> ]
+"3126" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>808</SUB>> ]
+"3142" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>809</SUB>> ]
+"3144" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>809</SUB>> ]
+"3107" [label = <(METHOD,CallDoubleMethodV)<SUB>807</SUB>> ]
+"3161" [label = <(METHOD_RETURN,jdouble)<SUB>807</SUB>> ]
+  "3113" -> "3118" 
+  "3113" -> "3131" 
+  "3131" -> "3136" 
+  "3131" -> "3150" 
+  "3150" -> "3155" 
+  "3152" -> "3161" 
+  "3153" -> "3152" 
+  "3154" -> "3153" 
+  "3117" -> "3124" 
+  "3117" -> "3131" 
+  "3135" -> "3142" 
+  "3135" -> "3150" 
+  "3155" -> "3160" 
+  "3160" -> "3154" 
+  "3118" -> "3117" 
+  "3122" -> "3129" 
+  "3129" -> "3161" 
+  "3136" -> "3135" 
+  "3140" -> "3147" 
+  "3147" -> "3161" 
+  "3123" -> "3122" 
+  "3141" -> "3140" 
+  "3124" -> "3126" 
+  "3126" -> "3123" 
+  "3142" -> "3144" 
+  "3144" -> "3141" 
+  "3107" -> "3113" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/610-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/610-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/610-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/610-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionOccurred" {  
-"19213" [label = <(METHOD,ExceptionOccurred)> ]
-"19216" [label = <(METHOD_RETURN,ANY)> ]
-  "19213" -> "19216" 
+digraph "RegisterNatives" {  
+"18874" [label = <(METHOD,RegisterNatives)> ]
+"18880" [label = <(METHOD_RETURN,ANY)> ]
+  "18874" -> "18880" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/611-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/611-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/611-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/611-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_NE" {  
-"19217" [label = <(METHOD,EXPECT_NE)> ]
-"19221" [label = <(METHOD_RETURN,ANY)> ]
-  "19217" -> "19221" 
+digraph "UnregisterNatives" {  
+"18881" [label = <(METHOD,UnregisterNatives)> ]
+"18885" [label = <(METHOD_RETURN,ANY)> ]
+  "18881" -> "18885" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/612-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/612-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/612-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/612-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionClear" {  
-"19222" [label = <(METHOD,ExceptionClear)> ]
-"19225" [label = <(METHOD_RETURN,ANY)> ]
-  "19222" -> "19225" 
+digraph "NewBooleanArray" {  
+"18886" [label = <(METHOD,NewBooleanArray)> ]
+"18890" [label = <(METHOD_RETURN,ANY)> ]
+  "18886" -> "18890" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/613-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/613-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/613-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/613-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "IsInstanceOf" {  
-"19226" [label = <(METHOD,IsInstanceOf)> ]
-"19231" [label = <(METHOD_RETURN,ANY)> ]
-  "19226" -> "19231" 
+digraph "GetByteArrayElements" {  
+"18891" [label = <(METHOD,GetByteArrayElements)> ]
+"18896" [label = <(METHOD_RETURN,ANY)> ]
+  "18891" -> "18896" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/614-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/614-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/614-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/614-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "FindPrimitiveClass" {  
-"19232" [label = <(METHOD,FindPrimitiveClass)> ]
-"19236" [label = <(METHOD_RETURN,ANY)> ]
-  "19232" -> "19236" 
+digraph "GetShortArrayElements" {  
+"18897" [label = <(METHOD,GetShortArrayElements)> ]
+"18902" [label = <(METHOD_RETURN,ANY)> ]
+  "18897" -> "18902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/615-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/615-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/615-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/615-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_FALSE" {  
-"19237" [label = <(METHOD,EXPECT_FALSE)> ]
-"19240" [label = <(METHOD_RETURN,ANY)> ]
-  "19237" -> "19240" 
+digraph "GetCharArrayElements" {  
+"18903" [label = <(METHOD,GetCharArrayElements)> ]
+"18908" [label = <(METHOD_RETURN,ANY)> ]
+  "18903" -> "18908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/616-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/616-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/616-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/616-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_EQ" {  
-"19241" [label = <(METHOD,EXPECT_EQ)> ]
-"19245" [label = <(METHOD_RETURN,ANY)> ]
-  "19241" -> "19245" 
+digraph "GetIntArrayElements" {  
+"18909" [label = <(METHOD,GetIntArrayElements)> ]
+"18914" [label = <(METHOD_RETURN,ANY)> ]
+  "18909" -> "18914" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/617-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/617-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/617-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/617-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "Check" {  
-"19246" [label = <(METHOD,Check)> ]
-"19250" [label = <(METHOD_RETURN,ANY)> ]
-  "19246" -> "19250" 
+digraph "GetLongArrayElements" {  
+"18915" [label = <(METHOD,GetLongArrayElements)> ]
+"18920" [label = <(METHOD_RETURN,ANY)> ]
+  "18915" -> "18920" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/618-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/618-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/618-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/618-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetCheckJniEnabled" {  
-"19251" [label = <(METHOD,SetCheckJniEnabled)> ]
-"19255" [label = <(METHOD_RETURN,ANY)> ]
-  "19251" -> "19255" 
+digraph "GetFloatArrayElements" {  
+"18921" [label = <(METHOD,GetFloatArrayElements)> ]
+"18926" [label = <(METHOD_RETURN,ANY)> ]
+  "18921" -> "18926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/619-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/619-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/619-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/619-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassFound" {  
-"19256" [label = <(METHOD,ExpectClassFound)> ]
-"19259" [label = <(METHOD_RETURN,ANY)> ]
-  "19256" -> "19259" 
+digraph "GetDoubleArrayElements" {  
+"18927" [label = <(METHOD,GetDoubleArrayElements)> ]
+"18932" [label = <(METHOD_RETURN,ANY)> ]
+  "18927" -> "18932" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/62-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/62-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/62-cfg.dot	2023-06-07 19:35:14.697385853 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/62-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,53 @@
-digraph "CallCharMethodV" {  
-"3131" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>864</SUB>> ]
-"3149" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>865</SUB>> ]
-"3168" [label = <(soa,soa(env))<SUB>866</SUB>> ]
-"3170" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>867</SUB>> ]
-"3171" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>867</SUB>> ]
-"3172" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>867</SUB>> ]
-"3135" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>864</SUB>> ]
-"3153" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>865</SUB>> ]
-"3173" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>867</SUB>> ]
-"3178" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>867</SUB>> ]
-"3136" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>864</SUB>> ]
-"3140" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>864</SUB>> ]
-"3147" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>864</SUB>> ]
-"3154" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>865</SUB>> ]
-"3158" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>865</SUB>> ]
-"3165" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>865</SUB>> ]
-"3141" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>864</SUB>> ]
-"3159" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>865</SUB>> ]
-"3142" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>864</SUB>> ]
-"3144" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>864</SUB>> ]
-"3160" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>865</SUB>> ]
-"3162" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>865</SUB>> ]
-"3125" [label = <(METHOD,CallCharMethodV)<SUB>863</SUB>> ]
-"3179" [label = <(METHOD_RETURN,jchar)<SUB>863</SUB>> ]
-  "3131" -> "3136" 
-  "3131" -> "3149" 
-  "3149" -> "3154" 
-  "3149" -> "3168" 
-  "3168" -> "3173" 
-  "3170" -> "3179" 
-  "3171" -> "3170" 
-  "3172" -> "3171" 
-  "3135" -> "3142" 
-  "3135" -> "3149" 
-  "3153" -> "3160" 
-  "3153" -> "3168" 
-  "3173" -> "3178" 
-  "3178" -> "3172" 
-  "3136" -> "3135" 
-  "3140" -> "3147" 
-  "3147" -> "3179" 
-  "3154" -> "3153" 
-  "3158" -> "3165" 
-  "3165" -> "3179" 
-  "3141" -> "3140" 
-  "3159" -> "3158" 
-  "3142" -> "3144" 
-  "3144" -> "3141" 
-  "3160" -> "3162" 
-  "3162" -> "3159" 
-  "3125" -> "3131" 
+digraph "CallDoubleMethodA" {  
+"3169" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>815</SUB>> ]
+"3187" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>816</SUB>> ]
+"3206" [label = <(soa,soa(env))<SUB>817</SUB>> ]
+"3208" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>818</SUB>> ]
+"3209" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>818</SUB>> ]
+"3210" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>818</SUB>> ]
+"3173" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>815</SUB>> ]
+"3191" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>816</SUB>> ]
+"3211" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>818</SUB>> ]
+"3216" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>818</SUB>> ]
+"3174" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>815</SUB>> ]
+"3178" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>815</SUB>> ]
+"3185" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>815</SUB>> ]
+"3192" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>816</SUB>> ]
+"3196" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>816</SUB>> ]
+"3203" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>816</SUB>> ]
+"3179" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>815</SUB>> ]
+"3197" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>816</SUB>> ]
+"3180" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>815</SUB>> ]
+"3182" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>815</SUB>> ]
+"3198" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>816</SUB>> ]
+"3200" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>816</SUB>> ]
+"3163" [label = <(METHOD,CallDoubleMethodA)<SUB>814</SUB>> ]
+"3217" [label = <(METHOD_RETURN,jdouble)<SUB>814</SUB>> ]
+  "3169" -> "3174" 
+  "3169" -> "3187" 
+  "3187" -> "3192" 
+  "3187" -> "3206" 
+  "3206" -> "3211" 
+  "3208" -> "3217" 
+  "3209" -> "3208" 
+  "3210" -> "3209" 
+  "3173" -> "3180" 
+  "3173" -> "3187" 
+  "3191" -> "3198" 
+  "3191" -> "3206" 
+  "3211" -> "3216" 
+  "3216" -> "3210" 
+  "3174" -> "3173" 
+  "3178" -> "3185" 
+  "3185" -> "3217" 
+  "3192" -> "3191" 
+  "3196" -> "3203" 
+  "3203" -> "3217" 
+  "3179" -> "3178" 
+  "3197" -> "3196" 
+  "3180" -> "3182" 
+  "3182" -> "3179" 
+  "3198" -> "3200" 
+  "3200" -> "3197" 
+  "3163" -> "3169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/620-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/620-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/620-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/620-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassNotFound" {  
-"19260" [label = <(METHOD,ExpectClassNotFound)> ]
-"19266" [label = <(METHOD_RETURN,ANY)> ]
-  "19260" -> "19266" 
+digraph "NewByteArray" {  
+"18933" [label = <(METHOD,NewByteArray)> ]
+"18937" [label = <(METHOD_RETURN,ANY)> ]
+  "18933" -> "18937" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/621-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/621-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/621-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/621-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_NE" {  
-"19267" [label = <(METHOD,ASSERT_NE)> ]
-"19271" [label = <(METHOD_RETURN,ANY)> ]
-  "19267" -> "19271" 
+digraph "GetBooleanArrayElements" {  
+"18938" [label = <(METHOD,GetBooleanArrayElements)> ]
+"18943" [label = <(METHOD_RETURN,ANY)> ]
+  "18938" -> "18943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/622-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/622-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/622-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/622-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetFieldID" {  
-"19272" [label = <(METHOD,GetFieldID)> ]
-"19278" [label = <(METHOD_RETURN,ANY)> ]
-  "19272" -> "19278" 
+digraph "NewStringUTF" {  
+"18944" [label = <(METHOD,NewStringUTF)> ]
+"18948" [label = <(METHOD_RETURN,ANY)> ]
+  "18944" -> "18948" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/623-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/623-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/623-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/623-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticFieldID" {  
-"19279" [label = <(METHOD,GetStaticFieldID)> ]
-"19285" [label = <(METHOD_RETURN,ANY)> ]
-  "19279" -> "19285" 
+digraph "ReleaseByteArrayElements" {  
+"18949" [label = <(METHOD,ReleaseByteArrayElements)> ]
+"18955" [label = <(METHOD_RETURN,ANY)> ]
+  "18949" -> "18955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/624-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/624-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/624-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/624-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_TRUE" {  
-"19286" [label = <(METHOD,ASSERT_TRUE)> ]
-"19289" [label = <(METHOD_RETURN,ANY)> ]
-  "19286" -> "19289" 
+digraph "ReleaseShortArrayElements" {  
+"18956" [label = <(METHOD,ReleaseShortArrayElements)> ]
+"18962" [label = <(METHOD_RETURN,ANY)> ]
+  "18956" -> "18962" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/625-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/625-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/625-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/625-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticMethodID" {  
-"19290" [label = <(METHOD,GetStaticMethodID)> ]
-"19296" [label = <(METHOD_RETURN,ANY)> ]
-  "19290" -> "19296" 
+digraph "ReleaseCharArrayElements" {  
+"18963" [label = <(METHOD,ReleaseCharArrayElements)> ]
+"18969" [label = <(METHOD_RETURN,ANY)> ]
+  "18963" -> "18969" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/626-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/626-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/626-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/626-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedField" {  
-"19297" [label = <(METHOD,ToReflectedField)> ]
-"19303" [label = <(METHOD_RETURN,ANY)> ]
-  "19297" -> "19303" 
+digraph "ReleaseIntArrayElements" {  
+"18970" [label = <(METHOD,ReleaseIntArrayElements)> ]
+"18976" [label = <(METHOD_RETURN,ANY)> ]
+  "18970" -> "18976" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/627-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/627-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/627-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/627-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedField" {  
-"19304" [label = <(METHOD,FromReflectedField)> ]
-"19308" [label = <(METHOD_RETURN,ANY)> ]
-  "19304" -> "19308" 
+digraph "ReleaseLongArrayElements" {  
+"18977" [label = <(METHOD,ReleaseLongArrayElements)> ]
+"18983" [label = <(METHOD_RETURN,ANY)> ]
+  "18977" -> "18983" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/628-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/628-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/628-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/628-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_EQ" {  
-"19309" [label = <(METHOD,ASSERT_EQ)> ]
-"19313" [label = <(METHOD_RETURN,ANY)> ]
-  "19309" -> "19313" 
+digraph "ReleaseFloatArrayElements" {  
+"18984" [label = <(METHOD,ReleaseFloatArrayElements)> ]
+"18990" [label = <(METHOD_RETURN,ANY)> ]
+  "18984" -> "18990" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/629-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/629-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/629-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/629-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedMethod" {  
-"19314" [label = <(METHOD,ToReflectedMethod)> ]
-"19320" [label = <(METHOD_RETURN,ANY)> ]
-  "19314" -> "19320" 
+digraph "ReleaseDoubleArrayElements" {  
+"18991" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
+"18997" [label = <(METHOD_RETURN,ANY)> ]
+  "18991" -> "18997" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/63-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/63-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/63-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/63-cfg.dot	2023-06-07 19:35:21.237385052 +0330
@@ -1,53 +1,59 @@
-digraph "CallCharMethodA" {  
-"3187" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>871</SUB>> ]
-"3205" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>872</SUB>> ]
-"3224" [label = <(soa,soa(env))<SUB>873</SUB>> ]
-"3226" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>874</SUB>> ]
-"3227" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>874</SUB>> ]
-"3228" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>874</SUB>> ]
-"3191" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>871</SUB>> ]
-"3209" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>872</SUB>> ]
-"3229" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>874</SUB>> ]
-"3234" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>874</SUB>> ]
-"3192" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>871</SUB>> ]
-"3196" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>871</SUB>> ]
-"3203" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>871</SUB>> ]
-"3210" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>872</SUB>> ]
-"3214" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>872</SUB>> ]
-"3221" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>872</SUB>> ]
-"3197" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>871</SUB>> ]
-"3215" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>872</SUB>> ]
-"3198" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>871</SUB>> ]
-"3200" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>871</SUB>> ]
-"3216" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>872</SUB>> ]
-"3218" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>872</SUB>> ]
-"3181" [label = <(METHOD,CallCharMethodA)<SUB>870</SUB>> ]
-"3235" [label = <(METHOD_RETURN,jchar)<SUB>870</SUB>> ]
-  "3187" -> "3192" 
-  "3187" -> "3205" 
-  "3205" -> "3210" 
-  "3205" -> "3224" 
-  "3224" -> "3229" 
-  "3226" -> "3235" 
-  "3227" -> "3226" 
-  "3228" -> "3227" 
-  "3191" -> "3198" 
-  "3191" -> "3205" 
-  "3209" -> "3216" 
-  "3209" -> "3224" 
-  "3229" -> "3234" 
-  "3234" -> "3228" 
-  "3192" -> "3191" 
-  "3196" -> "3203" 
-  "3203" -> "3235" 
-  "3210" -> "3209" 
-  "3214" -> "3221" 
-  "3221" -> "3235" 
-  "3197" -> "3196" 
-  "3215" -> "3214" 
-  "3198" -> "3200" 
-  "3200" -> "3197" 
-  "3216" -> "3218" 
-  "3218" -> "3215" 
-  "3181" -> "3187" 
+digraph "CallFloatMethod" {  
+"3225" [label = <(va_start,va_start(ap, mid))<SUB>823</SUB>> ]
+"3228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>824</SUB>> ]
+"3246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>825</SUB>> ]
+"3265" [label = <(soa,soa(env))<SUB>826</SUB>> ]
+"3268" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>827</SUB>> ]
+"3274" [label = <(va_end,va_end(ap))<SUB>828</SUB>> ]
+"3276" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>829</SUB>> ]
+"3269" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>827</SUB>> ]
+"3277" [label = <(GetF,result.GetF())<SUB>829</SUB>> ]
+"3278" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>829</SUB>> ]
+"3232" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>824</SUB>> ]
+"3250" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>825</SUB>> ]
+"3280" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>829</SUB>> ]
+"3233" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>824</SUB>> ]
+"3237" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>824</SUB>> ]
+"3244" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>824</SUB>> ]
+"3251" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>825</SUB>> ]
+"3255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>825</SUB>> ]
+"3262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>825</SUB>> ]
+"3238" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>824</SUB>> ]
+"3256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>825</SUB>> ]
+"3239" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>824</SUB>> ]
+"3241" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>824</SUB>> ]
+"3257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>825</SUB>> ]
+"3259" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>825</SUB>> ]
+"3219" [label = <(METHOD,CallFloatMethod)<SUB>821</SUB>> ]
+"3281" [label = <(METHOD_RETURN,jfloat)<SUB>821</SUB>> ]
+  "3225" -> "3228" 
+  "3228" -> "3233" 
+  "3228" -> "3246" 
+  "3246" -> "3251" 
+  "3246" -> "3265" 
+  "3265" -> "3269" 
+  "3268" -> "3274" 
+  "3274" -> "3280" 
+  "3276" -> "3281" 
+  "3269" -> "3268" 
+  "3277" -> "3276" 
+  "3278" -> "3277" 
+  "3232" -> "3239" 
+  "3232" -> "3246" 
+  "3250" -> "3257" 
+  "3250" -> "3265" 
+  "3280" -> "3278" 
+  "3233" -> "3232" 
+  "3237" -> "3244" 
+  "3244" -> "3281" 
+  "3251" -> "3250" 
+  "3255" -> "3262" 
+  "3262" -> "3281" 
+  "3238" -> "3237" 
+  "3256" -> "3255" 
+  "3239" -> "3241" 
+  "3241" -> "3238" 
+  "3257" -> "3259" 
+  "3259" -> "3256" 
+  "3219" -> "3225" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/630-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/630-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/630-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/630-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedMethod" {  
-"19321" [label = <(METHOD,FromReflectedMethod)> ]
-"19325" [label = <(METHOD_RETURN,ANY)> ]
-  "19321" -> "19325" 
+digraph "ReleaseBooleanArrayElements" {  
+"18998" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
+"19004" [label = <(METHOD_RETURN,ANY)> ]
+  "18998" -> "19004" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/631-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/631-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/631-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/631-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNatives" {  
-"19326" [label = <(METHOD,RegisterNatives)> ]
-"19332" [label = <(METHOD_RETURN,ANY)> ]
-  "19326" -> "19332" 
+digraph "GetPrimitiveArrayCritical" {  
+"19005" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
+"19010" [label = <(METHOD_RETURN,ANY)> ]
+  "19005" -> "19010" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/632-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/632-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/632-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/632-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNatives" {  
-"19333" [label = <(METHOD,UnregisterNatives)> ]
-"19337" [label = <(METHOD_RETURN,ANY)> ]
-  "19333" -> "19337" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"19011" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
+"19017" [label = <(METHOD_RETURN,ANY)> ]
+  "19011" -> "19017" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/633-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/633-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/633-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/633-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewBooleanArray" {  
-"19338" [label = <(METHOD,NewBooleanArray)> ]
-"19342" [label = <(METHOD_RETURN,ANY)> ]
-  "19338" -> "19342" 
+digraph "GetByteArrayRegion" {  
+"19018" [label = <(METHOD,GetByteArrayRegion)> ]
+"19025" [label = <(METHOD_RETURN,ANY)> ]
+  "19018" -> "19025" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/634-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/634-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/634-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/634-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayElements" {  
-"19343" [label = <(METHOD,GetByteArrayElements)> ]
-"19348" [label = <(METHOD_RETURN,ANY)> ]
-  "19343" -> "19348" 
+digraph "GetShortArrayRegion" {  
+"19026" [label = <(METHOD,GetShortArrayRegion)> ]
+"19033" [label = <(METHOD_RETURN,ANY)> ]
+  "19026" -> "19033" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/635-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/635-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/635-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/635-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayElements" {  
-"19349" [label = <(METHOD,GetShortArrayElements)> ]
-"19354" [label = <(METHOD_RETURN,ANY)> ]
-  "19349" -> "19354" 
+digraph "GetCharArrayRegion" {  
+"19034" [label = <(METHOD,GetCharArrayRegion)> ]
+"19041" [label = <(METHOD_RETURN,ANY)> ]
+  "19034" -> "19041" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/636-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/636-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/636-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/636-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayElements" {  
-"19355" [label = <(METHOD,GetCharArrayElements)> ]
-"19360" [label = <(METHOD_RETURN,ANY)> ]
-  "19355" -> "19360" 
+digraph "GetIntArrayRegion" {  
+"19042" [label = <(METHOD,GetIntArrayRegion)> ]
+"19049" [label = <(METHOD_RETURN,ANY)> ]
+  "19042" -> "19049" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/637-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/637-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/637-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/637-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayElements" {  
-"19361" [label = <(METHOD,GetIntArrayElements)> ]
-"19366" [label = <(METHOD_RETURN,ANY)> ]
-  "19361" -> "19366" 
+digraph "GetLongArrayRegion" {  
+"19050" [label = <(METHOD,GetLongArrayRegion)> ]
+"19057" [label = <(METHOD_RETURN,ANY)> ]
+  "19050" -> "19057" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/638-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/638-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/638-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/638-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayElements" {  
-"19367" [label = <(METHOD,GetLongArrayElements)> ]
-"19372" [label = <(METHOD_RETURN,ANY)> ]
-  "19367" -> "19372" 
+digraph "GetFloatArrayRegion" {  
+"19058" [label = <(METHOD,GetFloatArrayRegion)> ]
+"19065" [label = <(METHOD_RETURN,ANY)> ]
+  "19058" -> "19065" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/639-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/639-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/639-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/639-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayElements" {  
-"19373" [label = <(METHOD,GetFloatArrayElements)> ]
-"19378" [label = <(METHOD_RETURN,ANY)> ]
-  "19373" -> "19378" 
+digraph "GetDoubleArrayRegion" {  
+"19066" [label = <(METHOD,GetDoubleArrayRegion)> ]
+"19073" [label = <(METHOD_RETURN,ANY)> ]
+  "19066" -> "19073" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/64-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/64-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/64-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/64-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,59 +1,53 @@
-digraph "CallDoubleMethod" {  
-"3243" [label = <(va_start,va_start(ap, mid))<SUB>879</SUB>> ]
-"3246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>880</SUB>> ]
-"3264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>881</SUB>> ]
-"3283" [label = <(soa,soa(env))<SUB>882</SUB>> ]
-"3286" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>883</SUB>> ]
-"3292" [label = <(va_end,va_end(ap))<SUB>884</SUB>> ]
-"3294" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>885</SUB>> ]
-"3287" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>883</SUB>> ]
-"3295" [label = <(GetD,result.GetD())<SUB>885</SUB>> ]
-"3296" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>885</SUB>> ]
-"3250" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>880</SUB>> ]
-"3268" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>881</SUB>> ]
-"3298" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>885</SUB>> ]
-"3251" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>880</SUB>> ]
-"3255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>880</SUB>> ]
-"3262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>880</SUB>> ]
-"3269" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>881</SUB>> ]
-"3273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>881</SUB>> ]
-"3280" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>881</SUB>> ]
-"3256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>880</SUB>> ]
-"3274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>881</SUB>> ]
-"3257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>880</SUB>> ]
-"3259" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>880</SUB>> ]
-"3275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>881</SUB>> ]
-"3277" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>881</SUB>> ]
-"3237" [label = <(METHOD,CallDoubleMethod)<SUB>877</SUB>> ]
-"3299" [label = <(METHOD_RETURN,jdouble)<SUB>877</SUB>> ]
-  "3243" -> "3246" 
-  "3246" -> "3251" 
-  "3246" -> "3264" 
-  "3264" -> "3269" 
-  "3264" -> "3283" 
-  "3283" -> "3287" 
-  "3286" -> "3292" 
-  "3292" -> "3298" 
-  "3294" -> "3299" 
-  "3287" -> "3286" 
-  "3295" -> "3294" 
-  "3296" -> "3295" 
-  "3250" -> "3257" 
-  "3250" -> "3264" 
-  "3268" -> "3275" 
-  "3268" -> "3283" 
-  "3298" -> "3296" 
-  "3251" -> "3250" 
-  "3255" -> "3262" 
-  "3262" -> "3299" 
-  "3269" -> "3268" 
-  "3273" -> "3280" 
-  "3280" -> "3299" 
-  "3256" -> "3255" 
-  "3274" -> "3273" 
-  "3257" -> "3259" 
-  "3259" -> "3256" 
-  "3275" -> "3277" 
-  "3277" -> "3274" 
-  "3237" -> "3243" 
+digraph "CallFloatMethodV" {  
+"3289" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>833</SUB>> ]
+"3307" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>834</SUB>> ]
+"3326" [label = <(soa,soa(env))<SUB>835</SUB>> ]
+"3328" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>836</SUB>> ]
+"3329" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>836</SUB>> ]
+"3330" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>836</SUB>> ]
+"3293" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>833</SUB>> ]
+"3311" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>834</SUB>> ]
+"3331" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>836</SUB>> ]
+"3336" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>836</SUB>> ]
+"3294" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>833</SUB>> ]
+"3298" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>833</SUB>> ]
+"3305" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>833</SUB>> ]
+"3312" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>834</SUB>> ]
+"3316" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>834</SUB>> ]
+"3323" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>834</SUB>> ]
+"3299" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>833</SUB>> ]
+"3317" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>834</SUB>> ]
+"3300" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>833</SUB>> ]
+"3302" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>833</SUB>> ]
+"3318" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>834</SUB>> ]
+"3320" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>834</SUB>> ]
+"3283" [label = <(METHOD,CallFloatMethodV)<SUB>832</SUB>> ]
+"3337" [label = <(METHOD_RETURN,jfloat)<SUB>832</SUB>> ]
+  "3289" -> "3294" 
+  "3289" -> "3307" 
+  "3307" -> "3312" 
+  "3307" -> "3326" 
+  "3326" -> "3331" 
+  "3328" -> "3337" 
+  "3329" -> "3328" 
+  "3330" -> "3329" 
+  "3293" -> "3300" 
+  "3293" -> "3307" 
+  "3311" -> "3318" 
+  "3311" -> "3326" 
+  "3331" -> "3336" 
+  "3336" -> "3330" 
+  "3294" -> "3293" 
+  "3298" -> "3305" 
+  "3305" -> "3337" 
+  "3312" -> "3311" 
+  "3316" -> "3323" 
+  "3323" -> "3337" 
+  "3299" -> "3298" 
+  "3317" -> "3316" 
+  "3300" -> "3302" 
+  "3302" -> "3299" 
+  "3318" -> "3320" 
+  "3320" -> "3317" 
+  "3283" -> "3289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/640-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/640-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/640-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/640-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayElements" {  
-"19379" [label = <(METHOD,GetDoubleArrayElements)> ]
-"19384" [label = <(METHOD_RETURN,ANY)> ]
-  "19379" -> "19384" 
+digraph "GetBooleanArrayRegion" {  
+"19074" [label = <(METHOD,GetBooleanArrayRegion)> ]
+"19081" [label = <(METHOD_RETURN,ANY)> ]
+  "19074" -> "19081" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/641-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/641-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/641-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/641-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewByteArray" {  
-"19385" [label = <(METHOD,NewByteArray)> ]
-"19389" [label = <(METHOD_RETURN,ANY)> ]
-  "19385" -> "19389" 
+digraph "SetByteArrayRegion" {  
+"19082" [label = <(METHOD,SetByteArrayRegion)> ]
+"19089" [label = <(METHOD_RETURN,ANY)> ]
+  "19082" -> "19089" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/642-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/642-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/642-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/642-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayElements" {  
-"19390" [label = <(METHOD,GetBooleanArrayElements)> ]
-"19395" [label = <(METHOD_RETURN,ANY)> ]
-  "19390" -> "19395" 
+digraph "SetShortArrayRegion" {  
+"19090" [label = <(METHOD,SetShortArrayRegion)> ]
+"19097" [label = <(METHOD_RETURN,ANY)> ]
+  "19090" -> "19097" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/643-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/643-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/643-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/643-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "NewStringUTF" {  
-"19396" [label = <(METHOD,NewStringUTF)> ]
-"19400" [label = <(METHOD_RETURN,ANY)> ]
-  "19396" -> "19400" 
+digraph "SetCharArrayRegion" {  
+"19098" [label = <(METHOD,SetCharArrayRegion)> ]
+"19105" [label = <(METHOD_RETURN,ANY)> ]
+  "19098" -> "19105" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/644-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/644-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/644-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/644-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseByteArrayElements" {  
-"19401" [label = <(METHOD,ReleaseByteArrayElements)> ]
-"19407" [label = <(METHOD_RETURN,ANY)> ]
-  "19401" -> "19407" 
+digraph "SetIntArrayRegion" {  
+"19106" [label = <(METHOD,SetIntArrayRegion)> ]
+"19113" [label = <(METHOD_RETURN,ANY)> ]
+  "19106" -> "19113" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/645-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/645-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/645-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/645-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseShortArrayElements" {  
-"19408" [label = <(METHOD,ReleaseShortArrayElements)> ]
-"19414" [label = <(METHOD_RETURN,ANY)> ]
-  "19408" -> "19414" 
+digraph "SetLongArrayRegion" {  
+"19114" [label = <(METHOD,SetLongArrayRegion)> ]
+"19121" [label = <(METHOD_RETURN,ANY)> ]
+  "19114" -> "19121" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/646-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/646-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/646-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/646-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseCharArrayElements" {  
-"19415" [label = <(METHOD,ReleaseCharArrayElements)> ]
-"19421" [label = <(METHOD_RETURN,ANY)> ]
-  "19415" -> "19421" 
+digraph "SetFloatArrayRegion" {  
+"19122" [label = <(METHOD,SetFloatArrayRegion)> ]
+"19129" [label = <(METHOD_RETURN,ANY)> ]
+  "19122" -> "19129" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/647-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/647-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/647-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/647-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseIntArrayElements" {  
-"19422" [label = <(METHOD,ReleaseIntArrayElements)> ]
-"19428" [label = <(METHOD_RETURN,ANY)> ]
-  "19422" -> "19428" 
+digraph "SetDoubleArrayRegion" {  
+"19130" [label = <(METHOD,SetDoubleArrayRegion)> ]
+"19137" [label = <(METHOD_RETURN,ANY)> ]
+  "19130" -> "19137" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/648-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/648-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/648-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/648-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseLongArrayElements" {  
-"19429" [label = <(METHOD,ReleaseLongArrayElements)> ]
-"19435" [label = <(METHOD_RETURN,ANY)> ]
-  "19429" -> "19435" 
+digraph "SetBooleanArrayRegion" {  
+"19138" [label = <(METHOD,SetBooleanArrayRegion)> ]
+"19145" [label = <(METHOD_RETURN,ANY)> ]
+  "19138" -> "19145" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/649-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/649-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/649-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/649-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseFloatArrayElements" {  
-"19436" [label = <(METHOD,ReleaseFloatArrayElements)> ]
-"19442" [label = <(METHOD_RETURN,ANY)> ]
-  "19436" -> "19442" 
+digraph "NewObjectArray" {  
+"19146" [label = <(METHOD,NewObjectArray)> ]
+"19152" [label = <(METHOD_RETURN,ANY)> ]
+  "19146" -> "19152" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/65-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/65-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/65-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/65-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,53 @@
-digraph "CallDoubleMethodV" {  
-"3307" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>889</SUB>> ]
-"3325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>890</SUB>> ]
-"3344" [label = <(soa,soa(env))<SUB>891</SUB>> ]
-"3346" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>892</SUB>> ]
-"3347" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>892</SUB>> ]
-"3348" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>892</SUB>> ]
-"3311" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>889</SUB>> ]
-"3329" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>890</SUB>> ]
-"3349" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>892</SUB>> ]
-"3354" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>892</SUB>> ]
-"3312" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>889</SUB>> ]
-"3316" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>889</SUB>> ]
-"3323" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>889</SUB>> ]
-"3330" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>890</SUB>> ]
-"3334" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>890</SUB>> ]
-"3341" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>890</SUB>> ]
-"3317" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>889</SUB>> ]
-"3335" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>890</SUB>> ]
-"3318" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>889</SUB>> ]
-"3320" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>889</SUB>> ]
-"3336" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>890</SUB>> ]
-"3338" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>890</SUB>> ]
-"3301" [label = <(METHOD,CallDoubleMethodV)<SUB>888</SUB>> ]
-"3355" [label = <(METHOD_RETURN,jdouble)<SUB>888</SUB>> ]
-  "3307" -> "3312" 
-  "3307" -> "3325" 
-  "3325" -> "3330" 
-  "3325" -> "3344" 
-  "3344" -> "3349" 
-  "3346" -> "3355" 
-  "3347" -> "3346" 
-  "3348" -> "3347" 
-  "3311" -> "3318" 
-  "3311" -> "3325" 
-  "3329" -> "3336" 
-  "3329" -> "3344" 
-  "3349" -> "3354" 
-  "3354" -> "3348" 
-  "3312" -> "3311" 
-  "3316" -> "3323" 
-  "3323" -> "3355" 
-  "3330" -> "3329" 
-  "3334" -> "3341" 
-  "3341" -> "3355" 
-  "3317" -> "3316" 
-  "3335" -> "3334" 
-  "3318" -> "3320" 
-  "3320" -> "3317" 
-  "3336" -> "3338" 
-  "3338" -> "3335" 
-  "3301" -> "3307" 
+digraph "CallFloatMethodA" {  
+"3345" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>840</SUB>> ]
+"3363" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>841</SUB>> ]
+"3382" [label = <(soa,soa(env))<SUB>842</SUB>> ]
+"3384" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>843</SUB>> ]
+"3385" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>843</SUB>> ]
+"3386" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>843</SUB>> ]
+"3349" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>840</SUB>> ]
+"3367" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>841</SUB>> ]
+"3387" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>843</SUB>> ]
+"3392" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>843</SUB>> ]
+"3350" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>840</SUB>> ]
+"3354" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>840</SUB>> ]
+"3361" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>840</SUB>> ]
+"3368" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>841</SUB>> ]
+"3372" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>841</SUB>> ]
+"3379" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>841</SUB>> ]
+"3355" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>840</SUB>> ]
+"3373" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>841</SUB>> ]
+"3356" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>840</SUB>> ]
+"3358" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>840</SUB>> ]
+"3374" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>841</SUB>> ]
+"3376" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>841</SUB>> ]
+"3339" [label = <(METHOD,CallFloatMethodA)<SUB>839</SUB>> ]
+"3393" [label = <(METHOD_RETURN,jfloat)<SUB>839</SUB>> ]
+  "3345" -> "3350" 
+  "3345" -> "3363" 
+  "3363" -> "3368" 
+  "3363" -> "3382" 
+  "3382" -> "3387" 
+  "3384" -> "3393" 
+  "3385" -> "3384" 
+  "3386" -> "3385" 
+  "3349" -> "3356" 
+  "3349" -> "3363" 
+  "3367" -> "3374" 
+  "3367" -> "3382" 
+  "3387" -> "3392" 
+  "3392" -> "3386" 
+  "3350" -> "3349" 
+  "3354" -> "3361" 
+  "3361" -> "3393" 
+  "3368" -> "3367" 
+  "3372" -> "3379" 
+  "3379" -> "3393" 
+  "3355" -> "3354" 
+  "3373" -> "3372" 
+  "3356" -> "3358" 
+  "3358" -> "3355" 
+  "3374" -> "3376" 
+  "3376" -> "3373" 
+  "3339" -> "3345" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/650-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/650-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/650-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/650-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseDoubleArrayElements" {  
-"19443" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
-"19449" [label = <(METHOD_RETURN,ANY)> ]
-  "19443" -> "19449" 
+digraph "&lt;operator&gt;.minus" {  
+"19153" [label = <(METHOD,&lt;operator&gt;.minus)> ]
+"19156" [label = <(METHOD_RETURN,ANY)> ]
+  "19153" -> "19156" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/651-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/651-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/651-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/651-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseBooleanArrayElements" {  
-"19450" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
-"19456" [label = <(METHOD_RETURN,ANY)> ]
-  "19450" -> "19456" 
+digraph "::min" {  
+"19157" [label = <(METHOD,::min)> ]
+"19160" [label = <(METHOD_RETURN,ANY)> ]
+  "19157" -> "19160" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/652-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/652-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/652-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/652-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayCritical" {  
-"19457" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
-"19462" [label = <(METHOD_RETURN,ANY)> ]
-  "19457" -> "19462" 
+digraph "Thread::Current" {  
+"19161" [label = <(METHOD,Thread::Current)> ]
+"19164" [label = <(METHOD_RETURN,ANY)> ]
+  "19161" -> "19164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/653-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/653-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/653-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/653-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"19463" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
-"19469" [label = <(METHOD_RETURN,ANY)> ]
-  "19463" -> "19469" 
+digraph "LoadDex" {  
+"19165" [label = <(METHOD,LoadDex)> ]
+"19168" [label = <(METHOD_RETURN,ANY)> ]
+  "19165" -> "19168" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/654-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/654-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/654-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/654-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayRegion" {  
-"19470" [label = <(METHOD,GetByteArrayRegion)> ]
-"19477" [label = <(METHOD_RETURN,ANY)> ]
-  "19470" -> "19477" 
+digraph "loader" {  
+"19169" [label = <(METHOD,loader)> ]
+"19172" [label = <(METHOD_RETURN,ANY)> ]
+  "19169" -> "19172" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/655-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/655-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/655-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/655-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayRegion" {  
-"19478" [label = <(METHOD,GetShortArrayRegion)> ]
-"19485" [label = <(METHOD_RETURN,ANY)> ]
-  "19478" -> "19485" 
+digraph "FindDirectMethod" {  
+"19173" [label = <(METHOD,FindDirectMethod)> ]
+"19179" [label = <(METHOD_RETURN,ANY)> ]
+  "19173" -> "19179" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/656-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/656-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/656-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/656-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayRegion" {  
-"19486" [label = <(METHOD,GetCharArrayRegion)> ]
-"19493" [label = <(METHOD_RETURN,ANY)> ]
-  "19486" -> "19493" 
+digraph "FindVirtualMethod" {  
+"19180" [label = <(METHOD,FindVirtualMethod)> ]
+"19186" [label = <(METHOD_RETURN,ANY)> ]
+  "19180" -> "19186" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/657-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/657-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/657-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/657-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayRegion" {  
-"19494" [label = <(METHOD,GetIntArrayRegion)> ]
-"19501" [label = <(METHOD_RETURN,ANY)> ]
-  "19494" -> "19501" 
+digraph "SetEntryPointFromQuickCompiledCode" {  
+"19187" [label = <(METHOD,SetEntryPointFromQuickCompiledCode)> ]
+"19191" [label = <(METHOD_RETURN,ANY)> ]
+  "19187" -> "19191" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/658-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/658-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/658-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/658-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayRegion" {  
-"19502" [label = <(METHOD,GetLongArrayRegion)> ]
-"19509" [label = <(METHOD_RETURN,ANY)> ]
-  "19502" -> "19509" 
+digraph "GetRuntimeQuickGenericJniStub" {  
+"19192" [label = <(METHOD,GetRuntimeQuickGenericJniStub)> ]
+"19195" [label = <(METHOD_RETURN,ANY)> ]
+  "19192" -> "19195" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/659-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/659-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/659-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/659-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayRegion" {  
-"19510" [label = <(METHOD,GetFloatArrayRegion)> ]
-"19517" [label = <(METHOD_RETURN,ANY)> ]
-  "19510" -> "19517" 
+digraph "TransitionFromSuspendedToRunnable" {  
+"19196" [label = <(METHOD,TransitionFromSuspendedToRunnable)> ]
+"19199" [label = <(METHOD_RETURN,ANY)> ]
+  "19196" -> "19199" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/66-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/66-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/66-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/66-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,59 @@
-digraph "CallDoubleMethodA" {  
-"3363" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>896</SUB>> ]
-"3381" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>897</SUB>> ]
-"3400" [label = <(soa,soa(env))<SUB>898</SUB>> ]
-"3402" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>899</SUB>> ]
-"3403" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>899</SUB>> ]
-"3404" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>899</SUB>> ]
-"3367" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>896</SUB>> ]
-"3385" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>897</SUB>> ]
-"3405" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>899</SUB>> ]
-"3410" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>899</SUB>> ]
-"3368" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>896</SUB>> ]
-"3372" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>896</SUB>> ]
-"3379" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>896</SUB>> ]
-"3386" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>897</SUB>> ]
-"3390" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>897</SUB>> ]
-"3397" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>897</SUB>> ]
-"3373" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>896</SUB>> ]
-"3391" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>897</SUB>> ]
-"3374" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>896</SUB>> ]
-"3376" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>896</SUB>> ]
-"3392" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>897</SUB>> ]
-"3394" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>897</SUB>> ]
-"3357" [label = <(METHOD,CallDoubleMethodA)<SUB>895</SUB>> ]
-"3411" [label = <(METHOD_RETURN,jdouble)<SUB>895</SUB>> ]
-  "3363" -> "3368" 
-  "3363" -> "3381" 
-  "3381" -> "3386" 
-  "3381" -> "3400" 
-  "3400" -> "3405" 
-  "3402" -> "3411" 
-  "3403" -> "3402" 
-  "3404" -> "3403" 
-  "3367" -> "3374" 
-  "3367" -> "3381" 
-  "3385" -> "3392" 
-  "3385" -> "3400" 
-  "3405" -> "3410" 
-  "3410" -> "3404" 
-  "3368" -> "3367" 
-  "3372" -> "3379" 
-  "3379" -> "3411" 
-  "3386" -> "3385" 
-  "3390" -> "3397" 
-  "3397" -> "3411" 
-  "3373" -> "3372" 
-  "3391" -> "3390" 
-  "3374" -> "3376" 
-  "3376" -> "3373" 
-  "3392" -> "3394" 
-  "3394" -> "3391" 
-  "3357" -> "3363" 
+digraph "CallIntMethod" {  
+"3401" [label = <(va_start,va_start(ap, mid))<SUB>848</SUB>> ]
+"3404" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>849</SUB>> ]
+"3422" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>850</SUB>> ]
+"3441" [label = <(soa,soa(env))<SUB>851</SUB>> ]
+"3444" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>852</SUB>> ]
+"3450" [label = <(va_end,va_end(ap))<SUB>853</SUB>> ]
+"3452" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>854</SUB>> ]
+"3445" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>852</SUB>> ]
+"3453" [label = <(GetI,result.GetI())<SUB>854</SUB>> ]
+"3454" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>854</SUB>> ]
+"3408" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>849</SUB>> ]
+"3426" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>850</SUB>> ]
+"3456" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>854</SUB>> ]
+"3409" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>849</SUB>> ]
+"3413" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>849</SUB>> ]
+"3420" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>849</SUB>> ]
+"3427" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>850</SUB>> ]
+"3431" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>850</SUB>> ]
+"3438" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>850</SUB>> ]
+"3414" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>849</SUB>> ]
+"3432" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>850</SUB>> ]
+"3415" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>849</SUB>> ]
+"3417" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>849</SUB>> ]
+"3433" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>850</SUB>> ]
+"3435" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>850</SUB>> ]
+"3395" [label = <(METHOD,CallIntMethod)<SUB>846</SUB>> ]
+"3457" [label = <(METHOD_RETURN,jint)<SUB>846</SUB>> ]
+  "3401" -> "3404" 
+  "3404" -> "3409" 
+  "3404" -> "3422" 
+  "3422" -> "3427" 
+  "3422" -> "3441" 
+  "3441" -> "3445" 
+  "3444" -> "3450" 
+  "3450" -> "3456" 
+  "3452" -> "3457" 
+  "3445" -> "3444" 
+  "3453" -> "3452" 
+  "3454" -> "3453" 
+  "3408" -> "3415" 
+  "3408" -> "3422" 
+  "3426" -> "3433" 
+  "3426" -> "3441" 
+  "3456" -> "3454" 
+  "3409" -> "3408" 
+  "3413" -> "3420" 
+  "3420" -> "3457" 
+  "3427" -> "3426" 
+  "3431" -> "3438" 
+  "3438" -> "3457" 
+  "3414" -> "3413" 
+  "3432" -> "3431" 
+  "3415" -> "3417" 
+  "3417" -> "3414" 
+  "3433" -> "3435" 
+  "3435" -> "3432" 
+  "3395" -> "3401" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/660-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/660-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/660-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/660-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayRegion" {  
-"19518" [label = <(METHOD,GetDoubleArrayRegion)> ]
-"19525" [label = <(METHOD_RETURN,ANY)> ]
-  "19518" -> "19525" 
+digraph "Start" {  
+"19200" [label = <(METHOD,Start)> ]
+"19203" [label = <(METHOD_RETURN,ANY)> ]
+  "19200" -> "19203" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/661-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/661-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/661-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/661-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayRegion" {  
-"19526" [label = <(METHOD,GetBooleanArrayRegion)> ]
-"19533" [label = <(METHOD_RETURN,ANY)> ]
-  "19526" -> "19533" 
+digraph "GetJniEnv" {  
+"19204" [label = <(METHOD,GetJniEnv)> ]
+"19207" [label = <(METHOD_RETURN,ANY)> ]
+  "19204" -> "19207" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/662-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/662-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/662-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/662-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetByteArrayRegion" {  
-"19534" [label = <(METHOD,SetByteArrayRegion)> ]
-"19541" [label = <(METHOD_RETURN,ANY)> ]
-  "19534" -> "19541" 
+digraph "MonitorExit" {  
+"19208" [label = <(METHOD,MonitorExit)> ]
+"19212" [label = <(METHOD_RETURN,ANY)> ]
+  "19208" -> "19212" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/663-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/663-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/663-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/663-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"19542" [label = <(METHOD,SetShortArrayRegion)> ]
-"19549" [label = <(METHOD_RETURN,ANY)> ]
-  "19542" -> "19549" 
+digraph "MonitorEnter" {  
+"19213" [label = <(METHOD,MonitorEnter)> ]
+"19217" [label = <(METHOD_RETURN,ANY)> ]
+  "19213" -> "19217" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/664-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/664-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/664-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/664-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetCharArrayRegion" {  
-"19550" [label = <(METHOD,SetCharArrayRegion)> ]
-"19557" [label = <(METHOD_RETURN,ANY)> ]
-  "19550" -> "19557" 
+digraph "GetLockWord" {  
+"19218" [label = <(METHOD,GetLockWord)> ]
+"19222" [label = <(METHOD_RETURN,ANY)> ]
+  "19218" -> "19222" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/665-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/665-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/665-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/665-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetIntArrayRegion" {  
-"19558" [label = <(METHOD,SetIntArrayRegion)> ]
-"19565" [label = <(METHOD_RETURN,ANY)> ]
-  "19558" -> "19565" 
+digraph "GetState" {  
+"19223" [label = <(METHOD,GetState)> ]
+"19226" [label = <(METHOD_RETURN,ANY)> ]
+  "19223" -> "19226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/666-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/666-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/666-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/666-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"19566" [label = <(METHOD,SetLongArrayRegion)> ]
-"19573" [label = <(METHOD_RETURN,ANY)> ]
-  "19566" -> "19573" 
+digraph "IsLocked" {  
+"19227" [label = <(METHOD,IsLocked)> ]
+"19230" [label = <(METHOD_RETURN,ANY)> ]
+  "19227" -> "19230" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/667-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/667-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/667-cfg.dot	2023-06-07 19:35:14.877385835 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/667-cfg.dot	2023-06-07 19:35:21.427385028 +0330
@@ -1,5 +1,5 @@
-digraph "SetFloatArrayRegion" {  
-"19574" [label = <(METHOD,SetFloatArrayRegion)> ]
-"19581" [label = <(METHOD_RETURN,ANY)> ]
-  "19574" -> "19581" 
+digraph "FatLockMonitor" {  
+"19231" [label = <(METHOD,FatLockMonitor)> ]
+"19234" [label = <(METHOD_RETURN,ANY)> ]
+  "19231" -> "19234" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 668-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 669-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/67-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/67-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/67-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/67-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,59 +1,53 @@
-digraph "CallFloatMethod" {  
-"3419" [label = <(va_start,va_start(ap, mid))<SUB>904</SUB>> ]
-"3422" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>905</SUB>> ]
-"3440" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>906</SUB>> ]
-"3459" [label = <(soa,soa(env))<SUB>907</SUB>> ]
-"3462" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>908</SUB>> ]
-"3468" [label = <(va_end,va_end(ap))<SUB>909</SUB>> ]
-"3470" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>910</SUB>> ]
-"3463" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>908</SUB>> ]
-"3471" [label = <(GetF,result.GetF())<SUB>910</SUB>> ]
-"3472" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>910</SUB>> ]
-"3426" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>905</SUB>> ]
-"3444" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>906</SUB>> ]
-"3474" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>910</SUB>> ]
-"3427" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>905</SUB>> ]
-"3431" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>905</SUB>> ]
-"3438" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>905</SUB>> ]
-"3445" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>906</SUB>> ]
-"3449" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>906</SUB>> ]
-"3456" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>906</SUB>> ]
-"3432" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>905</SUB>> ]
-"3450" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>906</SUB>> ]
-"3433" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>905</SUB>> ]
-"3435" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>905</SUB>> ]
-"3451" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>906</SUB>> ]
-"3453" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>906</SUB>> ]
-"3413" [label = <(METHOD,CallFloatMethod)<SUB>902</SUB>> ]
-"3475" [label = <(METHOD_RETURN,jfloat)<SUB>902</SUB>> ]
-  "3419" -> "3422" 
-  "3422" -> "3427" 
-  "3422" -> "3440" 
-  "3440" -> "3445" 
-  "3440" -> "3459" 
-  "3459" -> "3463" 
-  "3462" -> "3468" 
-  "3468" -> "3474" 
-  "3470" -> "3475" 
-  "3463" -> "3462" 
-  "3471" -> "3470" 
-  "3472" -> "3471" 
-  "3426" -> "3433" 
-  "3426" -> "3440" 
-  "3444" -> "3451" 
-  "3444" -> "3459" 
-  "3474" -> "3472" 
-  "3427" -> "3426" 
-  "3431" -> "3438" 
-  "3438" -> "3475" 
-  "3445" -> "3444" 
-  "3449" -> "3456" 
-  "3456" -> "3475" 
-  "3432" -> "3431" 
-  "3450" -> "3449" 
-  "3433" -> "3435" 
-  "3435" -> "3432" 
-  "3451" -> "3453" 
-  "3453" -> "3450" 
-  "3413" -> "3419" 
+digraph "CallIntMethodV" {  
+"3465" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>858</SUB>> ]
+"3483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>859</SUB>> ]
+"3502" [label = <(soa,soa(env))<SUB>860</SUB>> ]
+"3504" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>861</SUB>> ]
+"3505" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>861</SUB>> ]
+"3506" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>861</SUB>> ]
+"3469" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>858</SUB>> ]
+"3487" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>859</SUB>> ]
+"3507" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>861</SUB>> ]
+"3512" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>861</SUB>> ]
+"3470" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>858</SUB>> ]
+"3474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>858</SUB>> ]
+"3481" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>858</SUB>> ]
+"3488" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>859</SUB>> ]
+"3492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>859</SUB>> ]
+"3499" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>859</SUB>> ]
+"3475" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>858</SUB>> ]
+"3493" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>859</SUB>> ]
+"3476" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>858</SUB>> ]
+"3478" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>858</SUB>> ]
+"3494" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>859</SUB>> ]
+"3496" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>859</SUB>> ]
+"3459" [label = <(METHOD,CallIntMethodV)<SUB>857</SUB>> ]
+"3513" [label = <(METHOD_RETURN,jint)<SUB>857</SUB>> ]
+  "3465" -> "3470" 
+  "3465" -> "3483" 
+  "3483" -> "3488" 
+  "3483" -> "3502" 
+  "3502" -> "3507" 
+  "3504" -> "3513" 
+  "3505" -> "3504" 
+  "3506" -> "3505" 
+  "3469" -> "3476" 
+  "3469" -> "3483" 
+  "3487" -> "3494" 
+  "3487" -> "3502" 
+  "3507" -> "3512" 
+  "3512" -> "3506" 
+  "3470" -> "3469" 
+  "3474" -> "3481" 
+  "3481" -> "3513" 
+  "3488" -> "3487" 
+  "3492" -> "3499" 
+  "3499" -> "3513" 
+  "3475" -> "3474" 
+  "3493" -> "3492" 
+  "3476" -> "3478" 
+  "3478" -> "3475" 
+  "3494" -> "3496" 
+  "3496" -> "3493" 
+  "3459" -> "3465" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 670-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 671-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 672-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 673-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 674-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 675-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 676-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 677-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 678-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 679-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/68-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/68-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/68-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/68-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,53 @@
-digraph "CallFloatMethodV" {  
-"3483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>914</SUB>> ]
-"3501" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>915</SUB>> ]
-"3520" [label = <(soa,soa(env))<SUB>916</SUB>> ]
-"3522" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>917</SUB>> ]
-"3523" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>917</SUB>> ]
-"3524" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>917</SUB>> ]
-"3487" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>914</SUB>> ]
-"3505" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>915</SUB>> ]
-"3525" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>917</SUB>> ]
-"3530" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>917</SUB>> ]
-"3488" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>914</SUB>> ]
-"3492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>914</SUB>> ]
-"3499" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>914</SUB>> ]
-"3506" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>915</SUB>> ]
-"3510" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>915</SUB>> ]
-"3517" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>915</SUB>> ]
-"3493" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>914</SUB>> ]
-"3511" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>915</SUB>> ]
-"3494" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>914</SUB>> ]
-"3496" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>914</SUB>> ]
-"3512" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>915</SUB>> ]
-"3514" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>915</SUB>> ]
-"3477" [label = <(METHOD,CallFloatMethodV)<SUB>913</SUB>> ]
-"3531" [label = <(METHOD_RETURN,jfloat)<SUB>913</SUB>> ]
-  "3483" -> "3488" 
-  "3483" -> "3501" 
-  "3501" -> "3506" 
-  "3501" -> "3520" 
-  "3520" -> "3525" 
-  "3522" -> "3531" 
-  "3523" -> "3522" 
-  "3524" -> "3523" 
-  "3487" -> "3494" 
-  "3487" -> "3501" 
-  "3505" -> "3512" 
-  "3505" -> "3520" 
-  "3525" -> "3530" 
-  "3530" -> "3524" 
-  "3488" -> "3487" 
-  "3492" -> "3499" 
-  "3499" -> "3531" 
-  "3506" -> "3505" 
-  "3510" -> "3517" 
-  "3517" -> "3531" 
-  "3493" -> "3492" 
-  "3511" -> "3510" 
-  "3494" -> "3496" 
-  "3496" -> "3493" 
-  "3512" -> "3514" 
-  "3514" -> "3511" 
-  "3477" -> "3483" 
+digraph "CallIntMethodA" {  
+"3521" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>865</SUB>> ]
+"3539" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>866</SUB>> ]
+"3558" [label = <(soa,soa(env))<SUB>867</SUB>> ]
+"3560" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>868</SUB>> ]
+"3561" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>868</SUB>> ]
+"3562" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>868</SUB>> ]
+"3525" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>865</SUB>> ]
+"3543" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>866</SUB>> ]
+"3563" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>868</SUB>> ]
+"3568" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>868</SUB>> ]
+"3526" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>865</SUB>> ]
+"3530" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>865</SUB>> ]
+"3537" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>865</SUB>> ]
+"3544" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>866</SUB>> ]
+"3548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>866</SUB>> ]
+"3555" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>866</SUB>> ]
+"3531" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>865</SUB>> ]
+"3549" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>866</SUB>> ]
+"3532" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>865</SUB>> ]
+"3534" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>865</SUB>> ]
+"3550" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>866</SUB>> ]
+"3552" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>866</SUB>> ]
+"3515" [label = <(METHOD,CallIntMethodA)<SUB>864</SUB>> ]
+"3569" [label = <(METHOD_RETURN,jint)<SUB>864</SUB>> ]
+  "3521" -> "3526" 
+  "3521" -> "3539" 
+  "3539" -> "3544" 
+  "3539" -> "3558" 
+  "3558" -> "3563" 
+  "3560" -> "3569" 
+  "3561" -> "3560" 
+  "3562" -> "3561" 
+  "3525" -> "3532" 
+  "3525" -> "3539" 
+  "3543" -> "3550" 
+  "3543" -> "3558" 
+  "3563" -> "3568" 
+  "3568" -> "3562" 
+  "3526" -> "3525" 
+  "3530" -> "3537" 
+  "3537" -> "3569" 
+  "3544" -> "3543" 
+  "3548" -> "3555" 
+  "3555" -> "3569" 
+  "3531" -> "3530" 
+  "3549" -> "3548" 
+  "3532" -> "3534" 
+  "3534" -> "3531" 
+  "3550" -> "3552" 
+  "3552" -> "3549" 
+  "3515" -> "3521" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 680-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 681-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 682-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 683-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 684-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 685-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 686-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 687-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out: 688-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/69-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/69-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/69-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/69-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,59 @@
-digraph "CallFloatMethodA" {  
-"3539" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>921</SUB>> ]
-"3557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>922</SUB>> ]
-"3576" [label = <(soa,soa(env))<SUB>923</SUB>> ]
-"3578" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>924</SUB>> ]
-"3579" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>924</SUB>> ]
-"3580" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>924</SUB>> ]
-"3543" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>921</SUB>> ]
-"3561" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>922</SUB>> ]
-"3581" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>924</SUB>> ]
-"3586" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>924</SUB>> ]
-"3544" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>921</SUB>> ]
-"3548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>921</SUB>> ]
-"3555" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>921</SUB>> ]
-"3562" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>922</SUB>> ]
-"3566" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>922</SUB>> ]
-"3573" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>922</SUB>> ]
-"3549" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>921</SUB>> ]
-"3567" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>922</SUB>> ]
-"3550" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>921</SUB>> ]
-"3552" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>921</SUB>> ]
-"3568" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>922</SUB>> ]
-"3570" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>922</SUB>> ]
-"3533" [label = <(METHOD,CallFloatMethodA)<SUB>920</SUB>> ]
-"3587" [label = <(METHOD_RETURN,jfloat)<SUB>920</SUB>> ]
-  "3539" -> "3544" 
-  "3539" -> "3557" 
-  "3557" -> "3562" 
-  "3557" -> "3576" 
-  "3576" -> "3581" 
-  "3578" -> "3587" 
-  "3579" -> "3578" 
-  "3580" -> "3579" 
-  "3543" -> "3550" 
-  "3543" -> "3557" 
-  "3561" -> "3568" 
-  "3561" -> "3576" 
-  "3581" -> "3586" 
-  "3586" -> "3580" 
-  "3544" -> "3543" 
-  "3548" -> "3555" 
-  "3555" -> "3587" 
-  "3562" -> "3561" 
-  "3566" -> "3573" 
-  "3573" -> "3587" 
-  "3549" -> "3548" 
-  "3567" -> "3566" 
-  "3550" -> "3552" 
-  "3552" -> "3549" 
-  "3568" -> "3570" 
-  "3570" -> "3567" 
-  "3533" -> "3539" 
+digraph "CallLongMethod" {  
+"3577" [label = <(va_start,va_start(ap, mid))<SUB>873</SUB>> ]
+"3580" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>874</SUB>> ]
+"3598" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>875</SUB>> ]
+"3617" [label = <(soa,soa(env))<SUB>876</SUB>> ]
+"3620" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>877</SUB>> ]
+"3626" [label = <(va_end,va_end(ap))<SUB>878</SUB>> ]
+"3628" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>879</SUB>> ]
+"3621" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>877</SUB>> ]
+"3629" [label = <(GetJ,result.GetJ())<SUB>879</SUB>> ]
+"3630" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>879</SUB>> ]
+"3584" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>874</SUB>> ]
+"3602" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>875</SUB>> ]
+"3632" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>879</SUB>> ]
+"3585" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>874</SUB>> ]
+"3589" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>874</SUB>> ]
+"3596" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>874</SUB>> ]
+"3603" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>875</SUB>> ]
+"3607" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>875</SUB>> ]
+"3614" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>875</SUB>> ]
+"3590" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>874</SUB>> ]
+"3608" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>875</SUB>> ]
+"3591" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>874</SUB>> ]
+"3593" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>874</SUB>> ]
+"3609" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>875</SUB>> ]
+"3611" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>875</SUB>> ]
+"3571" [label = <(METHOD,CallLongMethod)<SUB>871</SUB>> ]
+"3633" [label = <(METHOD_RETURN,jlong)<SUB>871</SUB>> ]
+  "3577" -> "3580" 
+  "3580" -> "3585" 
+  "3580" -> "3598" 
+  "3598" -> "3603" 
+  "3598" -> "3617" 
+  "3617" -> "3621" 
+  "3620" -> "3626" 
+  "3626" -> "3632" 
+  "3628" -> "3633" 
+  "3621" -> "3620" 
+  "3629" -> "3628" 
+  "3630" -> "3629" 
+  "3584" -> "3591" 
+  "3584" -> "3598" 
+  "3602" -> "3609" 
+  "3602" -> "3617" 
+  "3632" -> "3630" 
+  "3585" -> "3584" 
+  "3589" -> "3596" 
+  "3596" -> "3633" 
+  "3603" -> "3602" 
+  "3607" -> "3614" 
+  "3614" -> "3633" 
+  "3590" -> "3589" 
+  "3608" -> "3607" 
+  "3591" -> "3593" 
+  "3593" -> "3590" 
+  "3609" -> "3611" 
+  "3611" -> "3608" 
+  "3571" -> "3577" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/7-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/7-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/7-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/7-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "ReportInvalidJNINativeMethod" {  
-"285" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>187</SUB>> ]
-"292" [label = <(METHOD_RETURN,void)<SUB>187</SUB>> ]
-  "285" -> "292" 
+digraph "GetClassLoader" {  
+"161" [label = <(METHOD,GetClassLoader)<SUB>163</SUB>> ]
+"164" [label = <(METHOD_RETURN,ANY)<SUB>163</SUB>> ]
+  "161" -> "164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/70-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/70-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/70-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/70-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,59 +1,53 @@
-digraph "CallIntMethod" {  
-"3595" [label = <(va_start,va_start(ap, mid))<SUB>929</SUB>> ]
-"3598" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>930</SUB>> ]
-"3616" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>931</SUB>> ]
-"3635" [label = <(soa,soa(env))<SUB>932</SUB>> ]
-"3638" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>933</SUB>> ]
-"3644" [label = <(va_end,va_end(ap))<SUB>934</SUB>> ]
-"3646" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>935</SUB>> ]
-"3639" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>933</SUB>> ]
-"3647" [label = <(GetI,result.GetI())<SUB>935</SUB>> ]
-"3648" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>935</SUB>> ]
-"3602" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>930</SUB>> ]
-"3620" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>931</SUB>> ]
-"3650" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>935</SUB>> ]
-"3603" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>930</SUB>> ]
-"3607" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>930</SUB>> ]
-"3614" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>930</SUB>> ]
-"3621" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>931</SUB>> ]
-"3625" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>931</SUB>> ]
-"3632" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>931</SUB>> ]
-"3608" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>930</SUB>> ]
-"3626" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>931</SUB>> ]
-"3609" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>930</SUB>> ]
-"3611" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>930</SUB>> ]
-"3627" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>931</SUB>> ]
-"3629" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>931</SUB>> ]
-"3589" [label = <(METHOD,CallIntMethod)<SUB>927</SUB>> ]
-"3651" [label = <(METHOD_RETURN,jint)<SUB>927</SUB>> ]
-  "3595" -> "3598" 
-  "3598" -> "3603" 
-  "3598" -> "3616" 
-  "3616" -> "3621" 
-  "3616" -> "3635" 
-  "3635" -> "3639" 
-  "3638" -> "3644" 
-  "3644" -> "3650" 
-  "3646" -> "3651" 
-  "3639" -> "3638" 
-  "3647" -> "3646" 
-  "3648" -> "3647" 
-  "3602" -> "3609" 
-  "3602" -> "3616" 
-  "3620" -> "3627" 
-  "3620" -> "3635" 
-  "3650" -> "3648" 
-  "3603" -> "3602" 
-  "3607" -> "3614" 
-  "3614" -> "3651" 
-  "3621" -> "3620" 
-  "3625" -> "3632" 
-  "3632" -> "3651" 
-  "3608" -> "3607" 
-  "3626" -> "3625" 
-  "3609" -> "3611" 
-  "3611" -> "3608" 
-  "3627" -> "3629" 
-  "3629" -> "3626" 
-  "3589" -> "3595" 
+digraph "CallLongMethodV" {  
+"3641" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>883</SUB>> ]
+"3659" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>884</SUB>> ]
+"3678" [label = <(soa,soa(env))<SUB>885</SUB>> ]
+"3680" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>886</SUB>> ]
+"3681" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>886</SUB>> ]
+"3682" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>886</SUB>> ]
+"3645" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>883</SUB>> ]
+"3663" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>884</SUB>> ]
+"3683" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>886</SUB>> ]
+"3688" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>886</SUB>> ]
+"3646" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>883</SUB>> ]
+"3650" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>883</SUB>> ]
+"3657" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>883</SUB>> ]
+"3664" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>884</SUB>> ]
+"3668" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>884</SUB>> ]
+"3675" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>884</SUB>> ]
+"3651" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>883</SUB>> ]
+"3669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>884</SUB>> ]
+"3652" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>883</SUB>> ]
+"3654" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>883</SUB>> ]
+"3670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>884</SUB>> ]
+"3672" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>884</SUB>> ]
+"3635" [label = <(METHOD,CallLongMethodV)<SUB>882</SUB>> ]
+"3689" [label = <(METHOD_RETURN,jlong)<SUB>882</SUB>> ]
+  "3641" -> "3646" 
+  "3641" -> "3659" 
+  "3659" -> "3664" 
+  "3659" -> "3678" 
+  "3678" -> "3683" 
+  "3680" -> "3689" 
+  "3681" -> "3680" 
+  "3682" -> "3681" 
+  "3645" -> "3652" 
+  "3645" -> "3659" 
+  "3663" -> "3670" 
+  "3663" -> "3678" 
+  "3683" -> "3688" 
+  "3688" -> "3682" 
+  "3646" -> "3645" 
+  "3650" -> "3657" 
+  "3657" -> "3689" 
+  "3664" -> "3663" 
+  "3668" -> "3675" 
+  "3675" -> "3689" 
+  "3651" -> "3650" 
+  "3669" -> "3668" 
+  "3652" -> "3654" 
+  "3654" -> "3651" 
+  "3670" -> "3672" 
+  "3672" -> "3669" 
+  "3635" -> "3641" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/71-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/71-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/71-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/71-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,53 @@
-digraph "CallIntMethodV" {  
-"3659" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>939</SUB>> ]
-"3677" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>940</SUB>> ]
-"3696" [label = <(soa,soa(env))<SUB>941</SUB>> ]
-"3698" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>942</SUB>> ]
-"3699" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>942</SUB>> ]
-"3700" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>942</SUB>> ]
-"3663" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>939</SUB>> ]
-"3681" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>940</SUB>> ]
-"3701" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>942</SUB>> ]
-"3706" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>942</SUB>> ]
-"3664" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>939</SUB>> ]
-"3668" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>939</SUB>> ]
-"3675" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>939</SUB>> ]
-"3682" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>940</SUB>> ]
-"3686" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>940</SUB>> ]
-"3693" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>940</SUB>> ]
-"3669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>939</SUB>> ]
-"3687" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>940</SUB>> ]
-"3670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>939</SUB>> ]
-"3672" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>939</SUB>> ]
-"3688" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>940</SUB>> ]
-"3690" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>940</SUB>> ]
-"3653" [label = <(METHOD,CallIntMethodV)<SUB>938</SUB>> ]
-"3707" [label = <(METHOD_RETURN,jint)<SUB>938</SUB>> ]
-  "3659" -> "3664" 
-  "3659" -> "3677" 
-  "3677" -> "3682" 
-  "3677" -> "3696" 
-  "3696" -> "3701" 
-  "3698" -> "3707" 
-  "3699" -> "3698" 
-  "3700" -> "3699" 
-  "3663" -> "3670" 
-  "3663" -> "3677" 
-  "3681" -> "3688" 
-  "3681" -> "3696" 
-  "3701" -> "3706" 
-  "3706" -> "3700" 
-  "3664" -> "3663" 
-  "3668" -> "3675" 
-  "3675" -> "3707" 
-  "3682" -> "3681" 
-  "3686" -> "3693" 
-  "3693" -> "3707" 
-  "3669" -> "3668" 
-  "3687" -> "3686" 
-  "3670" -> "3672" 
-  "3672" -> "3669" 
-  "3688" -> "3690" 
-  "3690" -> "3687" 
-  "3653" -> "3659" 
+digraph "CallLongMethodA" {  
+"3697" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>890</SUB>> ]
+"3715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>891</SUB>> ]
+"3734" [label = <(soa,soa(env))<SUB>892</SUB>> ]
+"3736" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>893</SUB>> ]
+"3737" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>893</SUB>> ]
+"3738" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>893</SUB>> ]
+"3701" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>890</SUB>> ]
+"3719" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>891</SUB>> ]
+"3739" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>893</SUB>> ]
+"3744" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>893</SUB>> ]
+"3702" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>890</SUB>> ]
+"3706" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>890</SUB>> ]
+"3713" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>890</SUB>> ]
+"3720" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>891</SUB>> ]
+"3724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>891</SUB>> ]
+"3731" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>891</SUB>> ]
+"3707" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>890</SUB>> ]
+"3725" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>891</SUB>> ]
+"3708" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>890</SUB>> ]
+"3710" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>890</SUB>> ]
+"3726" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>891</SUB>> ]
+"3728" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>891</SUB>> ]
+"3691" [label = <(METHOD,CallLongMethodA)<SUB>889</SUB>> ]
+"3745" [label = <(METHOD_RETURN,jlong)<SUB>889</SUB>> ]
+  "3697" -> "3702" 
+  "3697" -> "3715" 
+  "3715" -> "3720" 
+  "3715" -> "3734" 
+  "3734" -> "3739" 
+  "3736" -> "3745" 
+  "3737" -> "3736" 
+  "3738" -> "3737" 
+  "3701" -> "3708" 
+  "3701" -> "3715" 
+  "3719" -> "3726" 
+  "3719" -> "3734" 
+  "3739" -> "3744" 
+  "3744" -> "3738" 
+  "3702" -> "3701" 
+  "3706" -> "3713" 
+  "3713" -> "3745" 
+  "3720" -> "3719" 
+  "3724" -> "3731" 
+  "3731" -> "3745" 
+  "3707" -> "3706" 
+  "3725" -> "3724" 
+  "3708" -> "3710" 
+  "3710" -> "3707" 
+  "3726" -> "3728" 
+  "3728" -> "3725" 
+  "3691" -> "3697" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/72-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/72-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/72-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/72-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,59 @@
-digraph "CallIntMethodA" {  
-"3715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>946</SUB>> ]
-"3733" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>947</SUB>> ]
-"3752" [label = <(soa,soa(env))<SUB>948</SUB>> ]
-"3754" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>949</SUB>> ]
-"3755" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>949</SUB>> ]
-"3756" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>949</SUB>> ]
-"3719" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>946</SUB>> ]
-"3737" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>947</SUB>> ]
-"3757" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>949</SUB>> ]
-"3762" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>949</SUB>> ]
-"3720" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>946</SUB>> ]
-"3724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>946</SUB>> ]
-"3731" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>946</SUB>> ]
-"3738" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>947</SUB>> ]
-"3742" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>947</SUB>> ]
-"3749" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>947</SUB>> ]
-"3725" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>946</SUB>> ]
-"3743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>947</SUB>> ]
-"3726" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>946</SUB>> ]
-"3728" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>946</SUB>> ]
-"3744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>947</SUB>> ]
-"3746" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>947</SUB>> ]
-"3709" [label = <(METHOD,CallIntMethodA)<SUB>945</SUB>> ]
-"3763" [label = <(METHOD_RETURN,jint)<SUB>945</SUB>> ]
-  "3715" -> "3720" 
-  "3715" -> "3733" 
-  "3733" -> "3738" 
-  "3733" -> "3752" 
-  "3752" -> "3757" 
-  "3754" -> "3763" 
-  "3755" -> "3754" 
-  "3756" -> "3755" 
-  "3719" -> "3726" 
-  "3719" -> "3733" 
-  "3737" -> "3744" 
-  "3737" -> "3752" 
-  "3757" -> "3762" 
-  "3762" -> "3756" 
-  "3720" -> "3719" 
-  "3724" -> "3731" 
-  "3731" -> "3763" 
-  "3738" -> "3737" 
-  "3742" -> "3749" 
-  "3749" -> "3763" 
-  "3725" -> "3724" 
-  "3743" -> "3742" 
-  "3726" -> "3728" 
-  "3728" -> "3725" 
-  "3744" -> "3746" 
-  "3746" -> "3743" 
-  "3709" -> "3715" 
+digraph "CallShortMethod" {  
+"3753" [label = <(va_start,va_start(ap, mid))<SUB>898</SUB>> ]
+"3756" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>899</SUB>> ]
+"3774" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>900</SUB>> ]
+"3793" [label = <(soa,soa(env))<SUB>901</SUB>> ]
+"3796" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>902</SUB>> ]
+"3802" [label = <(va_end,va_end(ap))<SUB>903</SUB>> ]
+"3804" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>904</SUB>> ]
+"3797" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>902</SUB>> ]
+"3805" [label = <(GetS,result.GetS())<SUB>904</SUB>> ]
+"3806" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>904</SUB>> ]
+"3760" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>899</SUB>> ]
+"3778" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>900</SUB>> ]
+"3808" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>904</SUB>> ]
+"3761" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>899</SUB>> ]
+"3765" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>899</SUB>> ]
+"3772" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>899</SUB>> ]
+"3779" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>900</SUB>> ]
+"3783" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>900</SUB>> ]
+"3790" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>900</SUB>> ]
+"3766" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>899</SUB>> ]
+"3784" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>900</SUB>> ]
+"3767" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>899</SUB>> ]
+"3769" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>899</SUB>> ]
+"3785" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>900</SUB>> ]
+"3787" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>900</SUB>> ]
+"3747" [label = <(METHOD,CallShortMethod)<SUB>896</SUB>> ]
+"3809" [label = <(METHOD_RETURN,jshort)<SUB>896</SUB>> ]
+  "3753" -> "3756" 
+  "3756" -> "3761" 
+  "3756" -> "3774" 
+  "3774" -> "3779" 
+  "3774" -> "3793" 
+  "3793" -> "3797" 
+  "3796" -> "3802" 
+  "3802" -> "3808" 
+  "3804" -> "3809" 
+  "3797" -> "3796" 
+  "3805" -> "3804" 
+  "3806" -> "3805" 
+  "3760" -> "3767" 
+  "3760" -> "3774" 
+  "3778" -> "3785" 
+  "3778" -> "3793" 
+  "3808" -> "3806" 
+  "3761" -> "3760" 
+  "3765" -> "3772" 
+  "3772" -> "3809" 
+  "3779" -> "3778" 
+  "3783" -> "3790" 
+  "3790" -> "3809" 
+  "3766" -> "3765" 
+  "3784" -> "3783" 
+  "3767" -> "3769" 
+  "3769" -> "3766" 
+  "3785" -> "3787" 
+  "3787" -> "3784" 
+  "3747" -> "3753" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/73-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/73-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/73-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/73-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,59 +1,53 @@
-digraph "CallLongMethod" {  
-"3771" [label = <(va_start,va_start(ap, mid))<SUB>954</SUB>> ]
-"3774" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>955</SUB>> ]
-"3792" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>956</SUB>> ]
-"3811" [label = <(soa,soa(env))<SUB>957</SUB>> ]
-"3814" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>958</SUB>> ]
-"3820" [label = <(va_end,va_end(ap))<SUB>959</SUB>> ]
-"3822" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>960</SUB>> ]
-"3815" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>958</SUB>> ]
-"3823" [label = <(GetJ,result.GetJ())<SUB>960</SUB>> ]
-"3824" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>960</SUB>> ]
-"3778" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>955</SUB>> ]
-"3796" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>956</SUB>> ]
-"3826" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>960</SUB>> ]
-"3779" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>955</SUB>> ]
-"3783" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>955</SUB>> ]
-"3790" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>955</SUB>> ]
-"3797" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>956</SUB>> ]
-"3801" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>956</SUB>> ]
-"3808" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>956</SUB>> ]
-"3784" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>955</SUB>> ]
-"3802" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>956</SUB>> ]
-"3785" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>955</SUB>> ]
-"3787" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>955</SUB>> ]
-"3803" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>956</SUB>> ]
-"3805" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>956</SUB>> ]
-"3765" [label = <(METHOD,CallLongMethod)<SUB>952</SUB>> ]
-"3827" [label = <(METHOD_RETURN,jlong)<SUB>952</SUB>> ]
-  "3771" -> "3774" 
-  "3774" -> "3779" 
-  "3774" -> "3792" 
-  "3792" -> "3797" 
-  "3792" -> "3811" 
-  "3811" -> "3815" 
-  "3814" -> "3820" 
-  "3820" -> "3826" 
-  "3822" -> "3827" 
-  "3815" -> "3814" 
-  "3823" -> "3822" 
-  "3824" -> "3823" 
-  "3778" -> "3785" 
-  "3778" -> "3792" 
-  "3796" -> "3803" 
-  "3796" -> "3811" 
-  "3826" -> "3824" 
-  "3779" -> "3778" 
-  "3783" -> "3790" 
-  "3790" -> "3827" 
-  "3797" -> "3796" 
-  "3801" -> "3808" 
-  "3808" -> "3827" 
-  "3784" -> "3783" 
-  "3802" -> "3801" 
-  "3785" -> "3787" 
-  "3787" -> "3784" 
-  "3803" -> "3805" 
-  "3805" -> "3802" 
-  "3765" -> "3771" 
+digraph "CallShortMethodV" {  
+"3817" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>908</SUB>> ]
+"3835" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>909</SUB>> ]
+"3854" [label = <(soa,soa(env))<SUB>910</SUB>> ]
+"3856" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>911</SUB>> ]
+"3857" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>911</SUB>> ]
+"3858" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>911</SUB>> ]
+"3821" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>908</SUB>> ]
+"3839" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>909</SUB>> ]
+"3859" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>911</SUB>> ]
+"3864" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>911</SUB>> ]
+"3822" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>908</SUB>> ]
+"3826" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>908</SUB>> ]
+"3833" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>908</SUB>> ]
+"3840" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>909</SUB>> ]
+"3844" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>909</SUB>> ]
+"3851" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>909</SUB>> ]
+"3827" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>908</SUB>> ]
+"3845" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>909</SUB>> ]
+"3828" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>908</SUB>> ]
+"3830" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>908</SUB>> ]
+"3846" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>909</SUB>> ]
+"3848" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>909</SUB>> ]
+"3811" [label = <(METHOD,CallShortMethodV)<SUB>907</SUB>> ]
+"3865" [label = <(METHOD_RETURN,jshort)<SUB>907</SUB>> ]
+  "3817" -> "3822" 
+  "3817" -> "3835" 
+  "3835" -> "3840" 
+  "3835" -> "3854" 
+  "3854" -> "3859" 
+  "3856" -> "3865" 
+  "3857" -> "3856" 
+  "3858" -> "3857" 
+  "3821" -> "3828" 
+  "3821" -> "3835" 
+  "3839" -> "3846" 
+  "3839" -> "3854" 
+  "3859" -> "3864" 
+  "3864" -> "3858" 
+  "3822" -> "3821" 
+  "3826" -> "3833" 
+  "3833" -> "3865" 
+  "3840" -> "3839" 
+  "3844" -> "3851" 
+  "3851" -> "3865" 
+  "3827" -> "3826" 
+  "3845" -> "3844" 
+  "3828" -> "3830" 
+  "3830" -> "3827" 
+  "3846" -> "3848" 
+  "3848" -> "3845" 
+  "3811" -> "3817" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/74-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/74-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/74-cfg.dot	2023-06-07 19:35:14.707385852 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/74-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,53 @@
-digraph "CallLongMethodV" {  
-"3835" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>964</SUB>> ]
-"3853" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>965</SUB>> ]
-"3872" [label = <(soa,soa(env))<SUB>966</SUB>> ]
-"3874" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>967</SUB>> ]
-"3875" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>967</SUB>> ]
-"3876" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>967</SUB>> ]
-"3839" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>964</SUB>> ]
-"3857" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>965</SUB>> ]
-"3877" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>967</SUB>> ]
-"3882" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>967</SUB>> ]
-"3840" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>964</SUB>> ]
-"3844" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>964</SUB>> ]
-"3851" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>964</SUB>> ]
-"3858" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>965</SUB>> ]
-"3862" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>965</SUB>> ]
-"3869" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>965</SUB>> ]
-"3845" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>964</SUB>> ]
-"3863" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>965</SUB>> ]
-"3846" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>964</SUB>> ]
-"3848" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>964</SUB>> ]
-"3864" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>965</SUB>> ]
-"3866" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>965</SUB>> ]
-"3829" [label = <(METHOD,CallLongMethodV)<SUB>963</SUB>> ]
-"3883" [label = <(METHOD_RETURN,jlong)<SUB>963</SUB>> ]
-  "3835" -> "3840" 
-  "3835" -> "3853" 
-  "3853" -> "3858" 
-  "3853" -> "3872" 
-  "3872" -> "3877" 
-  "3874" -> "3883" 
-  "3875" -> "3874" 
-  "3876" -> "3875" 
-  "3839" -> "3846" 
-  "3839" -> "3853" 
-  "3857" -> "3864" 
-  "3857" -> "3872" 
-  "3877" -> "3882" 
-  "3882" -> "3876" 
-  "3840" -> "3839" 
-  "3844" -> "3851" 
-  "3851" -> "3883" 
-  "3858" -> "3857" 
-  "3862" -> "3869" 
-  "3869" -> "3883" 
-  "3845" -> "3844" 
-  "3863" -> "3862" 
-  "3846" -> "3848" 
-  "3848" -> "3845" 
-  "3864" -> "3866" 
-  "3866" -> "3863" 
-  "3829" -> "3835" 
+digraph "CallShortMethodA" {  
+"3873" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>915</SUB>> ]
+"3891" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>916</SUB>> ]
+"3910" [label = <(soa,soa(env))<SUB>917</SUB>> ]
+"3912" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>918</SUB>> ]
+"3913" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>918</SUB>> ]
+"3914" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>918</SUB>> ]
+"3877" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>915</SUB>> ]
+"3895" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>916</SUB>> ]
+"3915" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>918</SUB>> ]
+"3920" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>918</SUB>> ]
+"3878" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>915</SUB>> ]
+"3882" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>915</SUB>> ]
+"3889" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>915</SUB>> ]
+"3896" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>916</SUB>> ]
+"3900" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>916</SUB>> ]
+"3907" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>916</SUB>> ]
+"3883" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>915</SUB>> ]
+"3901" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>916</SUB>> ]
+"3884" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>915</SUB>> ]
+"3886" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>915</SUB>> ]
+"3902" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>916</SUB>> ]
+"3904" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>916</SUB>> ]
+"3867" [label = <(METHOD,CallShortMethodA)<SUB>914</SUB>> ]
+"3921" [label = <(METHOD_RETURN,jshort)<SUB>914</SUB>> ]
+  "3873" -> "3878" 
+  "3873" -> "3891" 
+  "3891" -> "3896" 
+  "3891" -> "3910" 
+  "3910" -> "3915" 
+  "3912" -> "3921" 
+  "3913" -> "3912" 
+  "3914" -> "3913" 
+  "3877" -> "3884" 
+  "3877" -> "3891" 
+  "3895" -> "3902" 
+  "3895" -> "3910" 
+  "3915" -> "3920" 
+  "3920" -> "3914" 
+  "3878" -> "3877" 
+  "3882" -> "3889" 
+  "3889" -> "3921" 
+  "3896" -> "3895" 
+  "3900" -> "3907" 
+  "3907" -> "3921" 
+  "3883" -> "3882" 
+  "3901" -> "3900" 
+  "3884" -> "3886" 
+  "3886" -> "3883" 
+  "3902" -> "3904" 
+  "3904" -> "3901" 
+  "3867" -> "3873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/75-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/75-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/75-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/75-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,49 @@
-digraph "CallLongMethodA" {  
-"3891" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>971</SUB>> ]
-"3909" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>972</SUB>> ]
-"3928" [label = <(soa,soa(env))<SUB>973</SUB>> ]
-"3930" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>974</SUB>> ]
-"3931" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>974</SUB>> ]
-"3932" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>974</SUB>> ]
-"3895" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>971</SUB>> ]
-"3913" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>972</SUB>> ]
-"3933" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>974</SUB>> ]
-"3938" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>974</SUB>> ]
-"3896" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>971</SUB>> ]
-"3900" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>971</SUB>> ]
-"3907" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>971</SUB>> ]
-"3914" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>972</SUB>> ]
-"3918" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>972</SUB>> ]
-"3925" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>972</SUB>> ]
-"3901" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>971</SUB>> ]
-"3919" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>972</SUB>> ]
-"3902" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>971</SUB>> ]
-"3904" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>971</SUB>> ]
-"3920" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>972</SUB>> ]
-"3922" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>972</SUB>> ]
-"3885" [label = <(METHOD,CallLongMethodA)<SUB>970</SUB>> ]
-"3939" [label = <(METHOD_RETURN,jlong)<SUB>970</SUB>> ]
-  "3891" -> "3896" 
-  "3891" -> "3909" 
-  "3909" -> "3914" 
-  "3909" -> "3928" 
-  "3928" -> "3933" 
-  "3930" -> "3939" 
-  "3931" -> "3930" 
-  "3932" -> "3931" 
-  "3895" -> "3902" 
-  "3895" -> "3909" 
-  "3913" -> "3920" 
-  "3913" -> "3928" 
-  "3933" -> "3938" 
-  "3938" -> "3932" 
-  "3896" -> "3895" 
-  "3900" -> "3907" 
-  "3907" -> "3939" 
-  "3914" -> "3913" 
-  "3918" -> "3925" 
-  "3925" -> "3939" 
-  "3901" -> "3900" 
-  "3919" -> "3918" 
-  "3902" -> "3904" 
-  "3904" -> "3901" 
-  "3920" -> "3922" 
-  "3922" -> "3919" 
-  "3885" -> "3891" 
+digraph "CallVoidMethod" {  
+"3929" [label = <(va_start,va_start(ap, mid))<SUB>923</SUB>> ]
+"3932" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>924</SUB>> ]
+"3949" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>925</SUB>> ]
+"3967" [label = <(soa,soa(env))<SUB>926</SUB>> ]
+"3969" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>927</SUB>> ]
+"3974" [label = <(va_end,va_end(ap))<SUB>928</SUB>> ]
+"3936" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>924</SUB>> ]
+"3953" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>925</SUB>> ]
+"3937" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>924</SUB>> ]
+"3941" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>924</SUB>> ]
+"3948" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>924</SUB>> ]
+"3954" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>925</SUB>> ]
+"3958" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>925</SUB>> ]
+"3965" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>925</SUB>> ]
+"3942" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>924</SUB>> ]
+"3959" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>925</SUB>> ]
+"3943" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>924</SUB>> ]
+"3945" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>924</SUB>> ]
+"3960" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>925</SUB>> ]
+"3962" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>925</SUB>> ]
+"3923" [label = <(METHOD,CallVoidMethod)<SUB>921</SUB>> ]
+"3976" [label = <(METHOD_RETURN,void)<SUB>921</SUB>> ]
+  "3929" -> "3932" 
+  "3932" -> "3937" 
+  "3932" -> "3949" 
+  "3949" -> "3954" 
+  "3949" -> "3967" 
+  "3967" -> "3969" 
+  "3969" -> "3974" 
+  "3974" -> "3976" 
+  "3936" -> "3943" 
+  "3936" -> "3949" 
+  "3953" -> "3960" 
+  "3953" -> "3967" 
+  "3937" -> "3936" 
+  "3941" -> "3948" 
+  "3948" -> "3976" 
+  "3954" -> "3953" 
+  "3958" -> "3965" 
+  "3965" -> "3976" 
+  "3942" -> "3941" 
+  "3959" -> "3958" 
+  "3943" -> "3945" 
+  "3945" -> "3942" 
+  "3960" -> "3962" 
+  "3962" -> "3959" 
+  "3923" -> "3929" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/76-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/76-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/76-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/76-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,59 +1,45 @@
-digraph "CallShortMethod" {  
-"3947" [label = <(va_start,va_start(ap, mid))<SUB>979</SUB>> ]
-"3950" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>980</SUB>> ]
-"3968" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>981</SUB>> ]
-"3987" [label = <(soa,soa(env))<SUB>982</SUB>> ]
-"3990" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>983</SUB>> ]
-"3996" [label = <(va_end,va_end(ap))<SUB>984</SUB>> ]
-"3998" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>985</SUB>> ]
-"3991" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>983</SUB>> ]
-"3999" [label = <(GetS,result.GetS())<SUB>985</SUB>> ]
-"4000" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>985</SUB>> ]
-"3954" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>980</SUB>> ]
-"3972" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>981</SUB>> ]
-"4002" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>985</SUB>> ]
-"3955" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>980</SUB>> ]
-"3959" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>980</SUB>> ]
-"3966" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>980</SUB>> ]
-"3973" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>981</SUB>> ]
-"3977" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>981</SUB>> ]
-"3984" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>981</SUB>> ]
-"3960" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>980</SUB>> ]
-"3978" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>981</SUB>> ]
-"3961" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>980</SUB>> ]
-"3963" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>980</SUB>> ]
-"3979" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>981</SUB>> ]
-"3981" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>981</SUB>> ]
-"3941" [label = <(METHOD,CallShortMethod)<SUB>977</SUB>> ]
-"4003" [label = <(METHOD_RETURN,jshort)<SUB>977</SUB>> ]
-  "3947" -> "3950" 
-  "3950" -> "3955" 
-  "3950" -> "3968" 
-  "3968" -> "3973" 
-  "3968" -> "3987" 
-  "3987" -> "3991" 
-  "3990" -> "3996" 
-  "3996" -> "4002" 
-  "3998" -> "4003" 
-  "3991" -> "3990" 
-  "3999" -> "3998" 
-  "4000" -> "3999" 
-  "3954" -> "3961" 
-  "3954" -> "3968" 
-  "3972" -> "3979" 
-  "3972" -> "3987" 
-  "4002" -> "4000" 
-  "3955" -> "3954" 
-  "3959" -> "3966" 
-  "3966" -> "4003" 
-  "3973" -> "3972" 
-  "3977" -> "3984" 
-  "3984" -> "4003" 
-  "3960" -> "3959" 
-  "3978" -> "3977" 
-  "3961" -> "3963" 
-  "3963" -> "3960" 
-  "3979" -> "3981" 
-  "3981" -> "3978" 
-  "3941" -> "3947" 
+digraph "CallVoidMethodV" {  
+"3984" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>932</SUB>> ]
+"4001" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>933</SUB>> ]
+"4019" [label = <(soa,soa(env))<SUB>934</SUB>> ]
+"4021" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>935</SUB>> ]
+"3988" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>932</SUB>> ]
+"4005" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>933</SUB>> ]
+"3989" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>932</SUB>> ]
+"3993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>932</SUB>> ]
+"4000" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>932</SUB>> ]
+"4006" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>933</SUB>> ]
+"4010" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>933</SUB>> ]
+"4017" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>933</SUB>> ]
+"3994" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>932</SUB>> ]
+"4011" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>933</SUB>> ]
+"3995" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>932</SUB>> ]
+"3997" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>932</SUB>> ]
+"4012" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>933</SUB>> ]
+"4014" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>933</SUB>> ]
+"3978" [label = <(METHOD,CallVoidMethodV)<SUB>931</SUB>> ]
+"4026" [label = <(METHOD_RETURN,void)<SUB>931</SUB>> ]
+  "3984" -> "3989" 
+  "3984" -> "4001" 
+  "4001" -> "4006" 
+  "4001" -> "4019" 
+  "4019" -> "4021" 
+  "4021" -> "4026" 
+  "3988" -> "3995" 
+  "3988" -> "4001" 
+  "4005" -> "4012" 
+  "4005" -> "4019" 
+  "3989" -> "3988" 
+  "3993" -> "4000" 
+  "4000" -> "4026" 
+  "4006" -> "4005" 
+  "4010" -> "4017" 
+  "4017" -> "4026" 
+  "3994" -> "3993" 
+  "4011" -> "4010" 
+  "3995" -> "3997" 
+  "3997" -> "3994" 
+  "4012" -> "4014" 
+  "4014" -> "4011" 
+  "3978" -> "3984" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/77-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/77-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/77-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/77-cfg.dot	2023-06-07 19:35:21.247385051 +0330
@@ -1,53 +1,45 @@
-digraph "CallShortMethodV" {  
-"4011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>989</SUB>> ]
-"4029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>990</SUB>> ]
-"4048" [label = <(soa,soa(env))<SUB>991</SUB>> ]
-"4050" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>992</SUB>> ]
-"4051" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>992</SUB>> ]
-"4052" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>992</SUB>> ]
-"4015" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>989</SUB>> ]
-"4033" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>990</SUB>> ]
-"4053" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>992</SUB>> ]
-"4058" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>992</SUB>> ]
-"4016" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>989</SUB>> ]
-"4020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>989</SUB>> ]
-"4027" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>989</SUB>> ]
-"4034" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>990</SUB>> ]
-"4038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>990</SUB>> ]
-"4045" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>990</SUB>> ]
-"4021" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>989</SUB>> ]
-"4039" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>990</SUB>> ]
-"4022" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>989</SUB>> ]
-"4024" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>989</SUB>> ]
-"4040" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>990</SUB>> ]
-"4042" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>990</SUB>> ]
-"4005" [label = <(METHOD,CallShortMethodV)<SUB>988</SUB>> ]
-"4059" [label = <(METHOD_RETURN,jshort)<SUB>988</SUB>> ]
-  "4011" -> "4016" 
-  "4011" -> "4029" 
-  "4029" -> "4034" 
-  "4029" -> "4048" 
-  "4048" -> "4053" 
-  "4050" -> "4059" 
-  "4051" -> "4050" 
-  "4052" -> "4051" 
-  "4015" -> "4022" 
-  "4015" -> "4029" 
-  "4033" -> "4040" 
-  "4033" -> "4048" 
-  "4053" -> "4058" 
-  "4058" -> "4052" 
-  "4016" -> "4015" 
-  "4020" -> "4027" 
-  "4027" -> "4059" 
-  "4034" -> "4033" 
+digraph "CallVoidMethodA" {  
+"4034" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>939</SUB>> ]
+"4051" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>940</SUB>> ]
+"4069" [label = <(soa,soa(env))<SUB>941</SUB>> ]
+"4071" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>942</SUB>> ]
+"4038" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>939</SUB>> ]
+"4055" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>940</SUB>> ]
+"4039" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>939</SUB>> ]
+"4043" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>939</SUB>> ]
+"4050" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>939</SUB>> ]
+"4056" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>940</SUB>> ]
+"4060" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>940</SUB>> ]
+"4067" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>940</SUB>> ]
+"4044" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>939</SUB>> ]
+"4061" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>940</SUB>> ]
+"4045" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>939</SUB>> ]
+"4047" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>939</SUB>> ]
+"4062" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>940</SUB>> ]
+"4064" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>940</SUB>> ]
+"4028" [label = <(METHOD,CallVoidMethodA)<SUB>938</SUB>> ]
+"4076" [label = <(METHOD_RETURN,void)<SUB>938</SUB>> ]
+  "4034" -> "4039" 
+  "4034" -> "4051" 
+  "4051" -> "4056" 
+  "4051" -> "4069" 
+  "4069" -> "4071" 
+  "4071" -> "4076" 
   "4038" -> "4045" 
-  "4045" -> "4059" 
-  "4021" -> "4020" 
+  "4038" -> "4051" 
+  "4055" -> "4062" 
+  "4055" -> "4069" 
   "4039" -> "4038" 
-  "4022" -> "4024" 
-  "4024" -> "4021" 
-  "4040" -> "4042" 
-  "4042" -> "4039" 
-  "4005" -> "4011" 
+  "4043" -> "4050" 
+  "4050" -> "4076" 
+  "4056" -> "4055" 
+  "4060" -> "4067" 
+  "4067" -> "4076" 
+  "4044" -> "4043" 
+  "4061" -> "4060" 
+  "4045" -> "4047" 
+  "4047" -> "4044" 
+  "4062" -> "4064" 
+  "4064" -> "4061" 
+  "4028" -> "4034" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/78-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/78-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/78-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/78-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,53 +1,69 @@
-digraph "CallShortMethodA" {  
-"4067" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>996</SUB>> ]
-"4085" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>997</SUB>> ]
-"4104" [label = <(soa,soa(env))<SUB>998</SUB>> ]
-"4106" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>999</SUB>> ]
-"4107" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>999</SUB>> ]
-"4108" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>999</SUB>> ]
-"4071" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>996</SUB>> ]
-"4089" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>997</SUB>> ]
-"4109" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>999</SUB>> ]
-"4114" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>999</SUB>> ]
-"4072" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>996</SUB>> ]
-"4076" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>996</SUB>> ]
-"4083" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>996</SUB>> ]
-"4090" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>997</SUB>> ]
-"4094" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>997</SUB>> ]
-"4101" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>997</SUB>> ]
-"4077" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>996</SUB>> ]
-"4095" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>997</SUB>> ]
-"4078" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>996</SUB>> ]
-"4080" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>996</SUB>> ]
-"4096" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>997</SUB>> ]
-"4098" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>997</SUB>> ]
-"4061" [label = <(METHOD,CallShortMethodA)<SUB>995</SUB>> ]
-"4115" [label = <(METHOD_RETURN,jshort)<SUB>995</SUB>> ]
-  "4067" -> "4072" 
-  "4067" -> "4085" 
-  "4085" -> "4090" 
-  "4085" -> "4104" 
-  "4104" -> "4109" 
-  "4106" -> "4115" 
-  "4107" -> "4106" 
-  "4108" -> "4107" 
-  "4071" -> "4078" 
-  "4071" -> "4085" 
-  "4089" -> "4096" 
-  "4089" -> "4104" 
-  "4109" -> "4114" 
-  "4114" -> "4108" 
-  "4072" -> "4071" 
-  "4076" -> "4083" 
-  "4083" -> "4115" 
-  "4090" -> "4089" 
-  "4094" -> "4101" 
-  "4101" -> "4115" 
-  "4077" -> "4076" 
-  "4095" -> "4094" 
-  "4078" -> "4080" 
-  "4080" -> "4077" 
-  "4096" -> "4098" 
-  "4098" -> "4095" 
-  "4061" -> "4067" 
+digraph "CallNonvirtualObjectMethod" {  
+"4085" [label = <(va_start,va_start(ap, mid))<SUB>947</SUB>> ]
+"4088" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>948</SUB>> ]
+"4106" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>949</SUB>> ]
+"4125" [label = <(soa,soa(env))<SUB>950</SUB>> ]
+"4128" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>951</SUB>> ]
+"4135" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>952</SUB>> ]
+"4147" [label = <(va_end,va_end(ap))<SUB>953</SUB>> ]
+"4149" [label = <(RETURN,return local_result;,return local_result;)<SUB>954</SUB>> ]
+"4129" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>951</SUB>> ]
+"4137" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>952</SUB>> ]
+"4138" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>952</SUB>> ]
+"4143" [label = <(GetL,result.GetL())<SUB>952</SUB>> ]
+"4092" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>948</SUB>> ]
+"4110" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>949</SUB>> ]
+"4139" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>952</SUB>> ]
+"4144" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>952</SUB>> ]
+"4093" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>948</SUB>> ]
+"4097" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>948</SUB>> ]
+"4104" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>948</SUB>> ]
+"4111" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>949</SUB>> ]
+"4115" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>949</SUB>> ]
+"4122" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>949</SUB>> ]
+"4141" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>952</SUB>> ]
+"4146" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>952</SUB>> ]
+"4098" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>948</SUB>> ]
+"4116" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>949</SUB>> ]
+"4099" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>948</SUB>> ]
+"4101" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>948</SUB>> ]
+"4117" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>949</SUB>> ]
+"4119" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>949</SUB>> ]
+"4078" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>945</SUB>> ]
+"4151" [label = <(METHOD_RETURN,jobject)<SUB>945</SUB>> ]
+  "4085" -> "4088" 
+  "4088" -> "4093" 
+  "4088" -> "4106" 
+  "4106" -> "4111" 
+  "4106" -> "4125" 
+  "4125" -> "4129" 
+  "4128" -> "4141" 
+  "4135" -> "4147" 
+  "4147" -> "4149" 
+  "4149" -> "4151" 
+  "4129" -> "4128" 
+  "4137" -> "4135" 
+  "4138" -> "4146" 
+  "4143" -> "4137" 
+  "4092" -> "4099" 
+  "4092" -> "4106" 
+  "4110" -> "4117" 
+  "4110" -> "4125" 
+  "4139" -> "4138" 
+  "4144" -> "4143" 
+  "4093" -> "4092" 
+  "4097" -> "4104" 
+  "4104" -> "4151" 
+  "4111" -> "4110" 
+  "4115" -> "4122" 
+  "4122" -> "4151" 
+  "4141" -> "4139" 
+  "4146" -> "4144" 
+  "4098" -> "4097" 
+  "4116" -> "4115" 
+  "4099" -> "4101" 
+  "4101" -> "4098" 
+  "4117" -> "4119" 
+  "4119" -> "4116" 
+  "4078" -> "4085" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/79-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/79-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/79-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/79-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,49 +1,63 @@
-digraph "CallVoidMethod" {  
-"4123" [label = <(va_start,va_start(ap, mid))<SUB>1004</SUB>> ]
-"4126" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1005</SUB>> ]
-"4143" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1006</SUB>> ]
-"4161" [label = <(soa,soa(env))<SUB>1007</SUB>> ]
-"4163" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1008</SUB>> ]
-"4168" [label = <(va_end,va_end(ap))<SUB>1009</SUB>> ]
-"4130" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1005</SUB>> ]
-"4147" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1006</SUB>> ]
-"4131" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1005</SUB>> ]
-"4135" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1005</SUB>> ]
-"4142" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1005</SUB>> ]
-"4148" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1006</SUB>> ]
-"4152" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1006</SUB>> ]
-"4159" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1006</SUB>> ]
-"4136" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1005</SUB>> ]
-"4153" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1006</SUB>> ]
-"4137" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1005</SUB>> ]
-"4139" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1005</SUB>> ]
-"4154" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1006</SUB>> ]
-"4156" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1006</SUB>> ]
-"4117" [label = <(METHOD,CallVoidMethod)<SUB>1002</SUB>> ]
-"4170" [label = <(METHOD_RETURN,void)<SUB>1002</SUB>> ]
-  "4123" -> "4126" 
-  "4126" -> "4131" 
-  "4126" -> "4143" 
-  "4143" -> "4148" 
-  "4143" -> "4161" 
-  "4161" -> "4163" 
-  "4163" -> "4168" 
-  "4168" -> "4170" 
-  "4130" -> "4137" 
-  "4130" -> "4143" 
-  "4147" -> "4154" 
-  "4147" -> "4161" 
-  "4131" -> "4130" 
-  "4135" -> "4142" 
-  "4142" -> "4170" 
-  "4148" -> "4147" 
-  "4152" -> "4159" 
-  "4159" -> "4170" 
-  "4136" -> "4135" 
-  "4153" -> "4152" 
-  "4137" -> "4139" 
-  "4139" -> "4136" 
-  "4154" -> "4156" 
-  "4156" -> "4153" 
-  "4117" -> "4123" 
+digraph "CallNonvirtualObjectMethodV" {  
+"4160" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>959</SUB>> ]
+"4178" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>960</SUB>> ]
+"4197" [label = <(soa,soa(env))<SUB>961</SUB>> ]
+"4200" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>962</SUB>> ]
+"4206" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>963</SUB>> ]
+"4201" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>962</SUB>> ]
+"4207" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>963</SUB>> ]
+"4208" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>963</SUB>> ]
+"4213" [label = <(GetL,result.GetL())<SUB>963</SUB>> ]
+"4164" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>959</SUB>> ]
+"4182" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>960</SUB>> ]
+"4209" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>963</SUB>> ]
+"4214" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>963</SUB>> ]
+"4165" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>959</SUB>> ]
+"4169" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>959</SUB>> ]
+"4176" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>959</SUB>> ]
+"4183" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>960</SUB>> ]
+"4187" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>960</SUB>> ]
+"4194" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>960</SUB>> ]
+"4211" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>963</SUB>> ]
+"4216" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>963</SUB>> ]
+"4170" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>959</SUB>> ]
+"4188" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>960</SUB>> ]
+"4171" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>959</SUB>> ]
+"4173" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>959</SUB>> ]
+"4189" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>960</SUB>> ]
+"4191" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>960</SUB>> ]
+"4153" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>957</SUB>> ]
+"4217" [label = <(METHOD_RETURN,jobject)<SUB>957</SUB>> ]
+  "4160" -> "4165" 
+  "4160" -> "4178" 
+  "4178" -> "4183" 
+  "4178" -> "4197" 
+  "4197" -> "4201" 
+  "4200" -> "4211" 
+  "4206" -> "4217" 
+  "4201" -> "4200" 
+  "4207" -> "4206" 
+  "4208" -> "4216" 
+  "4213" -> "4207" 
+  "4164" -> "4171" 
+  "4164" -> "4178" 
+  "4182" -> "4189" 
+  "4182" -> "4197" 
+  "4209" -> "4208" 
+  "4214" -> "4213" 
+  "4165" -> "4164" 
+  "4169" -> "4176" 
+  "4176" -> "4217" 
+  "4183" -> "4182" 
+  "4187" -> "4194" 
+  "4194" -> "4217" 
+  "4211" -> "4209" 
+  "4216" -> "4214" 
+  "4170" -> "4169" 
+  "4188" -> "4187" 
+  "4171" -> "4173" 
+  "4173" -> "4170" 
+  "4189" -> "4191" 
+  "4191" -> "4188" 
+  "4153" -> "4160" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/8-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/8-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/8-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/8-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureInitialized" {  
-"298" [label = <(METHOD,EnsureInitialized)<SUB>203</SUB>> ]
-"302" [label = <(METHOD_RETURN,ANY)<SUB>203</SUB>> ]
-  "298" -> "302" 
+digraph "FindFieldID" {  
+"193" [label = <(METHOD,FindFieldID)<SUB>193</SUB>> ]
+"200" [label = <(METHOD_RETURN,jfieldID)<SUB>193</SUB>> ]
+  "193" -> "200" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/80-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/80-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/80-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/80-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,45 +1,63 @@
-digraph "CallVoidMethodV" {  
-"4178" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1013</SUB>> ]
-"4195" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1014</SUB>> ]
-"4213" [label = <(soa,soa(env))<SUB>1015</SUB>> ]
-"4215" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1016</SUB>> ]
-"4182" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1013</SUB>> ]
-"4199" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1014</SUB>> ]
-"4183" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1013</SUB>> ]
-"4187" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1013</SUB>> ]
-"4194" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1013</SUB>> ]
-"4200" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1014</SUB>> ]
-"4204" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1014</SUB>> ]
-"4211" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1014</SUB>> ]
-"4188" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1013</SUB>> ]
-"4205" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1014</SUB>> ]
-"4189" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1013</SUB>> ]
-"4191" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1013</SUB>> ]
-"4206" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1014</SUB>> ]
-"4208" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1014</SUB>> ]
-"4172" [label = <(METHOD,CallVoidMethodV)<SUB>1012</SUB>> ]
-"4220" [label = <(METHOD_RETURN,void)<SUB>1012</SUB>> ]
-  "4178" -> "4183" 
-  "4178" -> "4195" 
-  "4195" -> "4200" 
-  "4195" -> "4213" 
-  "4213" -> "4215" 
-  "4215" -> "4220" 
-  "4182" -> "4189" 
-  "4182" -> "4195" 
-  "4199" -> "4206" 
-  "4199" -> "4213" 
-  "4183" -> "4182" 
-  "4187" -> "4194" 
-  "4194" -> "4220" 
-  "4200" -> "4199" 
-  "4204" -> "4211" 
-  "4211" -> "4220" 
-  "4188" -> "4187" 
-  "4205" -> "4204" 
-  "4189" -> "4191" 
-  "4191" -> "4188" 
-  "4206" -> "4208" 
-  "4208" -> "4205" 
-  "4172" -> "4178" 
+digraph "CallNonvirtualObjectMethodA" {  
+"4226" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>968</SUB>> ]
+"4244" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>969</SUB>> ]
+"4263" [label = <(soa,soa(env))<SUB>970</SUB>> ]
+"4266" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>971</SUB>> ]
+"4272" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>972</SUB>> ]
+"4267" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>971</SUB>> ]
+"4273" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>972</SUB>> ]
+"4274" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>972</SUB>> ]
+"4279" [label = <(GetL,result.GetL())<SUB>972</SUB>> ]
+"4230" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>968</SUB>> ]
+"4248" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>969</SUB>> ]
+"4275" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>972</SUB>> ]
+"4280" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>972</SUB>> ]
+"4231" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>968</SUB>> ]
+"4235" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>968</SUB>> ]
+"4242" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>968</SUB>> ]
+"4249" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>969</SUB>> ]
+"4253" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>969</SUB>> ]
+"4260" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>969</SUB>> ]
+"4277" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>972</SUB>> ]
+"4282" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>972</SUB>> ]
+"4236" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>968</SUB>> ]
+"4254" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>969</SUB>> ]
+"4237" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>968</SUB>> ]
+"4239" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>968</SUB>> ]
+"4255" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>969</SUB>> ]
+"4257" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>969</SUB>> ]
+"4219" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>966</SUB>> ]
+"4283" [label = <(METHOD_RETURN,jobject)<SUB>966</SUB>> ]
+  "4226" -> "4231" 
+  "4226" -> "4244" 
+  "4244" -> "4249" 
+  "4244" -> "4263" 
+  "4263" -> "4267" 
+  "4266" -> "4277" 
+  "4272" -> "4283" 
+  "4267" -> "4266" 
+  "4273" -> "4272" 
+  "4274" -> "4282" 
+  "4279" -> "4273" 
+  "4230" -> "4237" 
+  "4230" -> "4244" 
+  "4248" -> "4255" 
+  "4248" -> "4263" 
+  "4275" -> "4274" 
+  "4280" -> "4279" 
+  "4231" -> "4230" 
+  "4235" -> "4242" 
+  "4242" -> "4283" 
+  "4249" -> "4248" 
+  "4253" -> "4260" 
+  "4260" -> "4283" 
+  "4277" -> "4275" 
+  "4282" -> "4280" 
+  "4236" -> "4235" 
+  "4254" -> "4253" 
+  "4237" -> "4239" 
+  "4239" -> "4236" 
+  "4255" -> "4257" 
+  "4257" -> "4254" 
+  "4219" -> "4226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/81-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/81-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/81-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/81-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,45 +1,59 @@
-digraph "CallVoidMethodA" {  
-"4228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1020</SUB>> ]
-"4245" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1021</SUB>> ]
-"4263" [label = <(soa,soa(env))<SUB>1022</SUB>> ]
-"4265" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1023</SUB>> ]
-"4232" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1020</SUB>> ]
-"4249" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1021</SUB>> ]
-"4233" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1020</SUB>> ]
-"4237" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1020</SUB>> ]
-"4244" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1020</SUB>> ]
-"4250" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1021</SUB>> ]
-"4254" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1021</SUB>> ]
-"4261" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1021</SUB>> ]
-"4238" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1020</SUB>> ]
-"4255" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1021</SUB>> ]
-"4239" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1020</SUB>> ]
-"4241" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1020</SUB>> ]
-"4256" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1021</SUB>> ]
-"4258" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1021</SUB>> ]
-"4222" [label = <(METHOD,CallVoidMethodA)<SUB>1019</SUB>> ]
-"4270" [label = <(METHOD_RETURN,void)<SUB>1019</SUB>> ]
-  "4228" -> "4233" 
-  "4228" -> "4245" 
-  "4245" -> "4250" 
-  "4245" -> "4263" 
-  "4263" -> "4265" 
-  "4265" -> "4270" 
-  "4232" -> "4239" 
-  "4232" -> "4245" 
-  "4249" -> "4256" 
-  "4249" -> "4263" 
-  "4233" -> "4232" 
-  "4237" -> "4244" 
-  "4244" -> "4270" 
-  "4250" -> "4249" 
-  "4254" -> "4261" 
-  "4261" -> "4270" 
-  "4238" -> "4237" 
-  "4255" -> "4254" 
-  "4239" -> "4241" 
-  "4241" -> "4238" 
-  "4256" -> "4258" 
-  "4258" -> "4255" 
-  "4222" -> "4228" 
+digraph "CallNonvirtualBooleanMethod" {  
+"4292" [label = <(va_start,va_start(ap, mid))<SUB>978</SUB>> ]
+"4295" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>979</SUB>> ]
+"4313" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>980</SUB>> ]
+"4332" [label = <(soa,soa(env))<SUB>981</SUB>> ]
+"4335" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>982</SUB>> ]
+"4341" [label = <(va_end,va_end(ap))<SUB>983</SUB>> ]
+"4343" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>984</SUB>> ]
+"4336" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>982</SUB>> ]
+"4344" [label = <(GetZ,result.GetZ())<SUB>984</SUB>> ]
+"4345" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>984</SUB>> ]
+"4299" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>979</SUB>> ]
+"4317" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>980</SUB>> ]
+"4347" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>984</SUB>> ]
+"4300" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>979</SUB>> ]
+"4304" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>979</SUB>> ]
+"4311" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>979</SUB>> ]
+"4318" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>980</SUB>> ]
+"4322" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>980</SUB>> ]
+"4329" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>980</SUB>> ]
+"4305" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>979</SUB>> ]
+"4323" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>980</SUB>> ]
+"4306" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>979</SUB>> ]
+"4308" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>979</SUB>> ]
+"4324" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>980</SUB>> ]
+"4326" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>980</SUB>> ]
+"4285" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>975</SUB>> ]
+"4348" [label = <(METHOD_RETURN,jboolean)<SUB>975</SUB>> ]
+  "4292" -> "4295" 
+  "4295" -> "4300" 
+  "4295" -> "4313" 
+  "4313" -> "4318" 
+  "4313" -> "4332" 
+  "4332" -> "4336" 
+  "4335" -> "4341" 
+  "4341" -> "4347" 
+  "4343" -> "4348" 
+  "4336" -> "4335" 
+  "4344" -> "4343" 
+  "4345" -> "4344" 
+  "4299" -> "4306" 
+  "4299" -> "4313" 
+  "4317" -> "4324" 
+  "4317" -> "4332" 
+  "4347" -> "4345" 
+  "4300" -> "4299" 
+  "4304" -> "4311" 
+  "4311" -> "4348" 
+  "4318" -> "4317" 
+  "4322" -> "4329" 
+  "4329" -> "4348" 
+  "4305" -> "4304" 
+  "4323" -> "4322" 
+  "4306" -> "4308" 
+  "4308" -> "4305" 
+  "4324" -> "4326" 
+  "4326" -> "4323" 
+  "4285" -> "4292" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/82-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/82-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/82-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/82-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,69 +1,53 @@
-digraph "CallNonvirtualObjectMethod" {  
-"4279" [label = <(va_start,va_start(ap, mid))<SUB>1028</SUB>> ]
-"4282" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1029</SUB>> ]
-"4300" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1030</SUB>> ]
-"4319" [label = <(soa,soa(env))<SUB>1031</SUB>> ]
-"4322" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1032</SUB>> ]
-"4329" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1033</SUB>> ]
-"4341" [label = <(va_end,va_end(ap))<SUB>1034</SUB>> ]
-"4343" [label = <(RETURN,return local_result;,return local_result;)<SUB>1035</SUB>> ]
-"4323" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1032</SUB>> ]
-"4331" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1033</SUB>> ]
-"4332" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1033</SUB>> ]
-"4337" [label = <(GetL,result.GetL())<SUB>1033</SUB>> ]
-"4286" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1029</SUB>> ]
-"4304" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1030</SUB>> ]
-"4333" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1033</SUB>> ]
-"4338" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1033</SUB>> ]
-"4287" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1029</SUB>> ]
-"4291" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1029</SUB>> ]
-"4298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1029</SUB>> ]
-"4305" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1030</SUB>> ]
-"4309" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1030</SUB>> ]
-"4316" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1030</SUB>> ]
-"4335" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1033</SUB>> ]
-"4340" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1033</SUB>> ]
-"4292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1029</SUB>> ]
-"4310" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1030</SUB>> ]
-"4293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1029</SUB>> ]
-"4295" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1029</SUB>> ]
-"4311" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1030</SUB>> ]
-"4313" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1030</SUB>> ]
-"4272" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1026</SUB>> ]
-"4345" [label = <(METHOD_RETURN,jobject)<SUB>1026</SUB>> ]
-  "4279" -> "4282" 
-  "4282" -> "4287" 
-  "4282" -> "4300" 
-  "4300" -> "4305" 
-  "4300" -> "4319" 
-  "4319" -> "4323" 
-  "4322" -> "4335" 
-  "4329" -> "4341" 
-  "4341" -> "4343" 
-  "4343" -> "4345" 
-  "4323" -> "4322" 
-  "4331" -> "4329" 
-  "4332" -> "4340" 
-  "4337" -> "4331" 
-  "4286" -> "4293" 
-  "4286" -> "4300" 
-  "4304" -> "4311" 
-  "4304" -> "4319" 
-  "4333" -> "4332" 
-  "4338" -> "4337" 
-  "4287" -> "4286" 
-  "4291" -> "4298" 
-  "4298" -> "4345" 
-  "4305" -> "4304" 
-  "4309" -> "4316" 
-  "4316" -> "4345" 
-  "4335" -> "4333" 
-  "4340" -> "4338" 
-  "4292" -> "4291" 
-  "4310" -> "4309" 
-  "4293" -> "4295" 
-  "4295" -> "4292" 
-  "4311" -> "4313" 
-  "4313" -> "4310" 
-  "4272" -> "4279" 
+digraph "CallNonvirtualBooleanMethodV" {  
+"4357" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>989</SUB>> ]
+"4375" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>990</SUB>> ]
+"4394" [label = <(soa,soa(env))<SUB>991</SUB>> ]
+"4396" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>992</SUB>> ]
+"4397" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>992</SUB>> ]
+"4398" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>992</SUB>> ]
+"4361" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>989</SUB>> ]
+"4379" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>990</SUB>> ]
+"4399" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>992</SUB>> ]
+"4404" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>992</SUB>> ]
+"4362" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>989</SUB>> ]
+"4366" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>989</SUB>> ]
+"4373" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>989</SUB>> ]
+"4380" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>990</SUB>> ]
+"4384" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>990</SUB>> ]
+"4391" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>990</SUB>> ]
+"4367" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>989</SUB>> ]
+"4385" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>990</SUB>> ]
+"4368" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>989</SUB>> ]
+"4370" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>989</SUB>> ]
+"4386" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>990</SUB>> ]
+"4388" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>990</SUB>> ]
+"4350" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>987</SUB>> ]
+"4405" [label = <(METHOD_RETURN,jboolean)<SUB>987</SUB>> ]
+  "4357" -> "4362" 
+  "4357" -> "4375" 
+  "4375" -> "4380" 
+  "4375" -> "4394" 
+  "4394" -> "4399" 
+  "4396" -> "4405" 
+  "4397" -> "4396" 
+  "4398" -> "4397" 
+  "4361" -> "4368" 
+  "4361" -> "4375" 
+  "4379" -> "4386" 
+  "4379" -> "4394" 
+  "4399" -> "4404" 
+  "4404" -> "4398" 
+  "4362" -> "4361" 
+  "4366" -> "4373" 
+  "4373" -> "4405" 
+  "4380" -> "4379" 
+  "4384" -> "4391" 
+  "4391" -> "4405" 
+  "4367" -> "4366" 
+  "4385" -> "4384" 
+  "4368" -> "4370" 
+  "4370" -> "4367" 
+  "4386" -> "4388" 
+  "4388" -> "4385" 
+  "4350" -> "4357" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/83-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/83-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/83-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/83-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,63 +1,53 @@
-digraph "CallNonvirtualObjectMethodV" {  
-"4354" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1040</SUB>> ]
-"4372" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1041</SUB>> ]
-"4391" [label = <(soa,soa(env))<SUB>1042</SUB>> ]
-"4394" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1043</SUB>> ]
-"4400" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1044</SUB>> ]
-"4395" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1043</SUB>> ]
-"4401" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1044</SUB>> ]
-"4402" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1044</SUB>> ]
-"4407" [label = <(GetL,result.GetL())<SUB>1044</SUB>> ]
-"4358" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1040</SUB>> ]
-"4376" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1041</SUB>> ]
-"4403" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1044</SUB>> ]
-"4408" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1044</SUB>> ]
-"4359" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1040</SUB>> ]
-"4363" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1040</SUB>> ]
-"4370" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1040</SUB>> ]
-"4377" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1041</SUB>> ]
-"4381" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1041</SUB>> ]
-"4388" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1041</SUB>> ]
-"4405" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1044</SUB>> ]
-"4410" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1044</SUB>> ]
-"4364" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1040</SUB>> ]
-"4382" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1041</SUB>> ]
-"4365" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1040</SUB>> ]
-"4367" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1040</SUB>> ]
-"4383" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1041</SUB>> ]
-"4385" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1041</SUB>> ]
-"4347" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1038</SUB>> ]
-"4411" [label = <(METHOD_RETURN,jobject)<SUB>1038</SUB>> ]
-  "4354" -> "4359" 
-  "4354" -> "4372" 
-  "4372" -> "4377" 
-  "4372" -> "4391" 
-  "4391" -> "4395" 
-  "4394" -> "4405" 
-  "4400" -> "4411" 
-  "4395" -> "4394" 
-  "4401" -> "4400" 
-  "4402" -> "4410" 
-  "4407" -> "4401" 
-  "4358" -> "4365" 
-  "4358" -> "4372" 
-  "4376" -> "4383" 
-  "4376" -> "4391" 
-  "4403" -> "4402" 
-  "4408" -> "4407" 
-  "4359" -> "4358" 
-  "4363" -> "4370" 
-  "4370" -> "4411" 
-  "4377" -> "4376" 
-  "4381" -> "4388" 
-  "4388" -> "4411" 
-  "4405" -> "4403" 
-  "4410" -> "4408" 
-  "4364" -> "4363" 
-  "4382" -> "4381" 
-  "4365" -> "4367" 
-  "4367" -> "4364" 
-  "4383" -> "4385" 
-  "4385" -> "4382" 
-  "4347" -> "4354" 
+digraph "CallNonvirtualBooleanMethodA" {  
+"4414" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>997</SUB>> ]
+"4432" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>998</SUB>> ]
+"4451" [label = <(soa,soa(env))<SUB>999</SUB>> ]
+"4453" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1000</SUB>> ]
+"4454" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1000</SUB>> ]
+"4455" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1000</SUB>> ]
+"4418" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>997</SUB>> ]
+"4436" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>998</SUB>> ]
+"4456" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1000</SUB>> ]
+"4461" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1000</SUB>> ]
+"4419" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>997</SUB>> ]
+"4423" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>997</SUB>> ]
+"4430" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>997</SUB>> ]
+"4437" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>998</SUB>> ]
+"4441" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>998</SUB>> ]
+"4448" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>998</SUB>> ]
+"4424" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>997</SUB>> ]
+"4442" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>998</SUB>> ]
+"4425" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>997</SUB>> ]
+"4427" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>997</SUB>> ]
+"4443" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>998</SUB>> ]
+"4445" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>998</SUB>> ]
+"4407" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>995</SUB>> ]
+"4462" [label = <(METHOD_RETURN,jboolean)<SUB>995</SUB>> ]
+  "4414" -> "4419" 
+  "4414" -> "4432" 
+  "4432" -> "4437" 
+  "4432" -> "4451" 
+  "4451" -> "4456" 
+  "4453" -> "4462" 
+  "4454" -> "4453" 
+  "4455" -> "4454" 
+  "4418" -> "4425" 
+  "4418" -> "4432" 
+  "4436" -> "4443" 
+  "4436" -> "4451" 
+  "4456" -> "4461" 
+  "4461" -> "4455" 
+  "4419" -> "4418" 
+  "4423" -> "4430" 
+  "4430" -> "4462" 
+  "4437" -> "4436" 
+  "4441" -> "4448" 
+  "4448" -> "4462" 
+  "4424" -> "4423" 
+  "4442" -> "4441" 
+  "4425" -> "4427" 
+  "4427" -> "4424" 
+  "4443" -> "4445" 
+  "4445" -> "4442" 
+  "4407" -> "4414" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/84-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/84-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/84-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/84-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,63 +1,59 @@
-digraph "CallNonvirtualObjectMethodA" {  
-"4420" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1049</SUB>> ]
-"4438" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1050</SUB>> ]
-"4457" [label = <(soa,soa(env))<SUB>1051</SUB>> ]
-"4460" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1052</SUB>> ]
-"4466" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1053</SUB>> ]
-"4461" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1052</SUB>> ]
-"4467" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1053</SUB>> ]
-"4468" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1053</SUB>> ]
-"4473" [label = <(GetL,result.GetL())<SUB>1053</SUB>> ]
-"4424" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1049</SUB>> ]
-"4442" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1050</SUB>> ]
-"4469" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1053</SUB>> ]
-"4474" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1053</SUB>> ]
-"4425" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1049</SUB>> ]
-"4429" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1049</SUB>> ]
-"4436" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1049</SUB>> ]
-"4443" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1050</SUB>> ]
-"4447" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1050</SUB>> ]
-"4454" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1050</SUB>> ]
-"4471" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1053</SUB>> ]
-"4476" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1053</SUB>> ]
-"4430" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1049</SUB>> ]
-"4448" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1050</SUB>> ]
-"4431" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1049</SUB>> ]
-"4433" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1049</SUB>> ]
-"4449" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1050</SUB>> ]
-"4451" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1050</SUB>> ]
-"4413" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1047</SUB>> ]
-"4477" [label = <(METHOD_RETURN,jobject)<SUB>1047</SUB>> ]
-  "4420" -> "4425" 
-  "4420" -> "4438" 
-  "4438" -> "4443" 
-  "4438" -> "4457" 
-  "4457" -> "4461" 
-  "4460" -> "4471" 
-  "4466" -> "4477" 
-  "4461" -> "4460" 
-  "4467" -> "4466" 
-  "4468" -> "4476" 
-  "4473" -> "4467" 
-  "4424" -> "4431" 
-  "4424" -> "4438" 
-  "4442" -> "4449" 
-  "4442" -> "4457" 
-  "4469" -> "4468" 
-  "4474" -> "4473" 
-  "4425" -> "4424" 
-  "4429" -> "4436" 
-  "4436" -> "4477" 
-  "4443" -> "4442" 
-  "4447" -> "4454" 
-  "4454" -> "4477" 
-  "4471" -> "4469" 
-  "4476" -> "4474" 
-  "4430" -> "4429" 
-  "4448" -> "4447" 
-  "4431" -> "4433" 
-  "4433" -> "4430" 
-  "4449" -> "4451" 
-  "4451" -> "4448" 
-  "4413" -> "4420" 
+digraph "CallNonvirtualByteMethod" {  
+"4471" [label = <(va_start,va_start(ap, mid))<SUB>1005</SUB>> ]
+"4474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1006</SUB>> ]
+"4492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1007</SUB>> ]
+"4511" [label = <(soa,soa(env))<SUB>1008</SUB>> ]
+"4514" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1009</SUB>> ]
+"4520" [label = <(va_end,va_end(ap))<SUB>1010</SUB>> ]
+"4522" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1011</SUB>> ]
+"4515" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1009</SUB>> ]
+"4523" [label = <(GetB,result.GetB())<SUB>1011</SUB>> ]
+"4524" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1011</SUB>> ]
+"4478" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1006</SUB>> ]
+"4496" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1007</SUB>> ]
+"4526" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1011</SUB>> ]
+"4479" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1006</SUB>> ]
+"4483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1006</SUB>> ]
+"4490" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1006</SUB>> ]
+"4497" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1007</SUB>> ]
+"4501" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1007</SUB>> ]
+"4508" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1007</SUB>> ]
+"4484" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1006</SUB>> ]
+"4502" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1007</SUB>> ]
+"4485" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1006</SUB>> ]
+"4487" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1006</SUB>> ]
+"4503" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1007</SUB>> ]
+"4505" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1007</SUB>> ]
+"4464" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1003</SUB>> ]
+"4527" [label = <(METHOD_RETURN,jbyte)<SUB>1003</SUB>> ]
+  "4471" -> "4474" 
+  "4474" -> "4479" 
+  "4474" -> "4492" 
+  "4492" -> "4497" 
+  "4492" -> "4511" 
+  "4511" -> "4515" 
+  "4514" -> "4520" 
+  "4520" -> "4526" 
+  "4522" -> "4527" 
+  "4515" -> "4514" 
+  "4523" -> "4522" 
+  "4524" -> "4523" 
+  "4478" -> "4485" 
+  "4478" -> "4492" 
+  "4496" -> "4503" 
+  "4496" -> "4511" 
+  "4526" -> "4524" 
+  "4479" -> "4478" 
+  "4483" -> "4490" 
+  "4490" -> "4527" 
+  "4497" -> "4496" 
+  "4501" -> "4508" 
+  "4508" -> "4527" 
+  "4484" -> "4483" 
+  "4502" -> "4501" 
+  "4485" -> "4487" 
+  "4487" -> "4484" 
+  "4503" -> "4505" 
+  "4505" -> "4502" 
+  "4464" -> "4471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/85-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/85-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/85-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/85-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualBooleanMethod" {  
-"4486" [label = <(va_start,va_start(ap, mid))<SUB>1059</SUB>> ]
-"4489" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
-"4507" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
-"4526" [label = <(soa,soa(env))<SUB>1062</SUB>> ]
-"4529" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1063</SUB>> ]
-"4535" [label = <(va_end,va_end(ap))<SUB>1064</SUB>> ]
-"4537" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1065</SUB>> ]
-"4530" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1063</SUB>> ]
-"4538" [label = <(GetZ,result.GetZ())<SUB>1065</SUB>> ]
-"4539" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1065</SUB>> ]
-"4493" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1060</SUB>> ]
-"4511" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1061</SUB>> ]
-"4541" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1065</SUB>> ]
-"4494" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1060</SUB>> ]
-"4498" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1060</SUB>> ]
-"4505" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
-"4512" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1061</SUB>> ]
-"4516" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1061</SUB>> ]
-"4523" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
-"4499" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1060</SUB>> ]
-"4517" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1061</SUB>> ]
-"4500" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1060</SUB>> ]
-"4502" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1060</SUB>> ]
-"4518" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1061</SUB>> ]
-"4520" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1061</SUB>> ]
-"4479" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1056</SUB>> ]
-"4542" [label = <(METHOD_RETURN,jboolean)<SUB>1056</SUB>> ]
-  "4486" -> "4489" 
-  "4489" -> "4494" 
-  "4489" -> "4507" 
-  "4507" -> "4512" 
-  "4507" -> "4526" 
-  "4526" -> "4530" 
-  "4529" -> "4535" 
-  "4535" -> "4541" 
-  "4537" -> "4542" 
-  "4530" -> "4529" 
-  "4538" -> "4537" 
-  "4539" -> "4538" 
-  "4493" -> "4500" 
-  "4493" -> "4507" 
-  "4511" -> "4518" 
-  "4511" -> "4526" 
-  "4541" -> "4539" 
-  "4494" -> "4493" 
-  "4498" -> "4505" 
-  "4505" -> "4542" 
-  "4512" -> "4511" 
-  "4516" -> "4523" 
-  "4523" -> "4542" 
-  "4499" -> "4498" 
-  "4517" -> "4516" 
-  "4500" -> "4502" 
-  "4502" -> "4499" 
-  "4518" -> "4520" 
-  "4520" -> "4517" 
-  "4479" -> "4486" 
+digraph "CallNonvirtualByteMethodV" {  
+"4536" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1016</SUB>> ]
+"4554" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1017</SUB>> ]
+"4573" [label = <(soa,soa(env))<SUB>1018</SUB>> ]
+"4575" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1019</SUB>> ]
+"4576" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1019</SUB>> ]
+"4577" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1019</SUB>> ]
+"4540" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1016</SUB>> ]
+"4558" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1017</SUB>> ]
+"4578" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1019</SUB>> ]
+"4583" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1019</SUB>> ]
+"4541" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1016</SUB>> ]
+"4545" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1016</SUB>> ]
+"4552" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1016</SUB>> ]
+"4559" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1017</SUB>> ]
+"4563" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1017</SUB>> ]
+"4570" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1017</SUB>> ]
+"4546" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1016</SUB>> ]
+"4564" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1017</SUB>> ]
+"4547" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1016</SUB>> ]
+"4549" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1016</SUB>> ]
+"4565" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1017</SUB>> ]
+"4567" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1017</SUB>> ]
+"4529" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1014</SUB>> ]
+"4584" [label = <(METHOD_RETURN,jbyte)<SUB>1014</SUB>> ]
+  "4536" -> "4541" 
+  "4536" -> "4554" 
+  "4554" -> "4559" 
+  "4554" -> "4573" 
+  "4573" -> "4578" 
+  "4575" -> "4584" 
+  "4576" -> "4575" 
+  "4577" -> "4576" 
+  "4540" -> "4547" 
+  "4540" -> "4554" 
+  "4558" -> "4565" 
+  "4558" -> "4573" 
+  "4578" -> "4583" 
+  "4583" -> "4577" 
+  "4541" -> "4540" 
+  "4545" -> "4552" 
+  "4552" -> "4584" 
+  "4559" -> "4558" 
+  "4563" -> "4570" 
+  "4570" -> "4584" 
+  "4546" -> "4545" 
+  "4564" -> "4563" 
+  "4547" -> "4549" 
+  "4549" -> "4546" 
+  "4565" -> "4567" 
+  "4567" -> "4564" 
+  "4529" -> "4536" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/86-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/86-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/86-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/86-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualBooleanMethodV" {  
-"4551" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"4569" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"4588" [label = <(soa,soa(env))<SUB>1072</SUB>> ]
-"4590" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1073</SUB>> ]
-"4591" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1073</SUB>> ]
-"4592" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1073</SUB>> ]
-"4555" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1070</SUB>> ]
-"4573" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1071</SUB>> ]
-"4593" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1073</SUB>> ]
-"4598" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1073</SUB>> ]
-"4556" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1070</SUB>> ]
-"4560" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1070</SUB>> ]
-"4567" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"4574" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1071</SUB>> ]
-"4578" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1071</SUB>> ]
-"4585" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"4561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1070</SUB>> ]
-"4579" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1071</SUB>> ]
-"4562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1070</SUB>> ]
-"4564" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1070</SUB>> ]
-"4580" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1071</SUB>> ]
-"4582" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1071</SUB>> ]
-"4544" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1068</SUB>> ]
-"4599" [label = <(METHOD_RETURN,jboolean)<SUB>1068</SUB>> ]
-  "4551" -> "4556" 
-  "4551" -> "4569" 
-  "4569" -> "4574" 
-  "4569" -> "4588" 
-  "4588" -> "4593" 
-  "4590" -> "4599" 
-  "4591" -> "4590" 
-  "4592" -> "4591" 
-  "4555" -> "4562" 
-  "4555" -> "4569" 
-  "4573" -> "4580" 
-  "4573" -> "4588" 
+digraph "CallNonvirtualByteMethodA" {  
+"4593" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1024</SUB>> ]
+"4611" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1025</SUB>> ]
+"4630" [label = <(soa,soa(env))<SUB>1026</SUB>> ]
+"4632" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1027</SUB>> ]
+"4633" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1027</SUB>> ]
+"4634" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1027</SUB>> ]
+"4597" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1024</SUB>> ]
+"4615" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1025</SUB>> ]
+"4635" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1027</SUB>> ]
+"4640" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1027</SUB>> ]
+"4598" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1024</SUB>> ]
+"4602" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1024</SUB>> ]
+"4609" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1024</SUB>> ]
+"4616" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1025</SUB>> ]
+"4620" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1025</SUB>> ]
+"4627" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1025</SUB>> ]
+"4603" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1024</SUB>> ]
+"4621" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1025</SUB>> ]
+"4604" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1024</SUB>> ]
+"4606" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1024</SUB>> ]
+"4622" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1025</SUB>> ]
+"4624" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1025</SUB>> ]
+"4586" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1022</SUB>> ]
+"4641" [label = <(METHOD_RETURN,jbyte)<SUB>1022</SUB>> ]
   "4593" -> "4598" 
-  "4598" -> "4592" 
-  "4556" -> "4555" 
-  "4560" -> "4567" 
-  "4567" -> "4599" 
-  "4574" -> "4573" 
-  "4578" -> "4585" 
-  "4585" -> "4599" 
-  "4561" -> "4560" 
-  "4579" -> "4578" 
-  "4562" -> "4564" 
-  "4564" -> "4561" 
-  "4580" -> "4582" 
-  "4582" -> "4579" 
-  "4544" -> "4551" 
+  "4593" -> "4611" 
+  "4611" -> "4616" 
+  "4611" -> "4630" 
+  "4630" -> "4635" 
+  "4632" -> "4641" 
+  "4633" -> "4632" 
+  "4634" -> "4633" 
+  "4597" -> "4604" 
+  "4597" -> "4611" 
+  "4615" -> "4622" 
+  "4615" -> "4630" 
+  "4635" -> "4640" 
+  "4640" -> "4634" 
+  "4598" -> "4597" 
+  "4602" -> "4609" 
+  "4609" -> "4641" 
+  "4616" -> "4615" 
+  "4620" -> "4627" 
+  "4627" -> "4641" 
+  "4603" -> "4602" 
+  "4621" -> "4620" 
+  "4604" -> "4606" 
+  "4606" -> "4603" 
+  "4622" -> "4624" 
+  "4624" -> "4621" 
+  "4586" -> "4593" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/87-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/87-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/87-cfg.dot	2023-06-07 19:35:14.717385850 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/87-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualBooleanMethodA" {  
-"4608" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
-"4626" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
-"4645" [label = <(soa,soa(env))<SUB>1080</SUB>> ]
-"4647" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1081</SUB>> ]
-"4648" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1081</SUB>> ]
-"4649" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1081</SUB>> ]
-"4612" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1078</SUB>> ]
-"4630" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1079</SUB>> ]
-"4650" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1081</SUB>> ]
-"4655" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1081</SUB>> ]
-"4613" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1078</SUB>> ]
-"4617" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1078</SUB>> ]
-"4624" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
-"4631" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1079</SUB>> ]
-"4635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1079</SUB>> ]
-"4642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
-"4618" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1078</SUB>> ]
-"4636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1079</SUB>> ]
-"4619" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1078</SUB>> ]
-"4621" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1078</SUB>> ]
-"4637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1079</SUB>> ]
-"4639" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1079</SUB>> ]
-"4601" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1076</SUB>> ]
-"4656" [label = <(METHOD_RETURN,jboolean)<SUB>1076</SUB>> ]
-  "4608" -> "4613" 
-  "4608" -> "4626" 
-  "4626" -> "4631" 
-  "4626" -> "4645" 
-  "4645" -> "4650" 
-  "4647" -> "4656" 
-  "4648" -> "4647" 
-  "4649" -> "4648" 
-  "4612" -> "4619" 
-  "4612" -> "4626" 
-  "4630" -> "4637" 
-  "4630" -> "4645" 
-  "4650" -> "4655" 
-  "4655" -> "4649" 
-  "4613" -> "4612" 
-  "4617" -> "4624" 
-  "4624" -> "4656" 
-  "4631" -> "4630" 
-  "4635" -> "4642" 
-  "4642" -> "4656" 
-  "4618" -> "4617" 
-  "4636" -> "4635" 
-  "4619" -> "4621" 
-  "4621" -> "4618" 
-  "4637" -> "4639" 
-  "4639" -> "4636" 
-  "4601" -> "4608" 
+digraph "CallNonvirtualCharMethod" {  
+"4650" [label = <(va_start,va_start(ap, mid))<SUB>1032</SUB>> ]
+"4653" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1033</SUB>> ]
+"4671" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1034</SUB>> ]
+"4690" [label = <(soa,soa(env))<SUB>1035</SUB>> ]
+"4693" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1036</SUB>> ]
+"4699" [label = <(va_end,va_end(ap))<SUB>1037</SUB>> ]
+"4701" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1038</SUB>> ]
+"4694" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1036</SUB>> ]
+"4702" [label = <(GetC,result.GetC())<SUB>1038</SUB>> ]
+"4703" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1038</SUB>> ]
+"4657" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1033</SUB>> ]
+"4675" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1034</SUB>> ]
+"4705" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1038</SUB>> ]
+"4658" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1033</SUB>> ]
+"4662" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1033</SUB>> ]
+"4669" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1033</SUB>> ]
+"4676" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1034</SUB>> ]
+"4680" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1034</SUB>> ]
+"4687" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1034</SUB>> ]
+"4663" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1033</SUB>> ]
+"4681" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1034</SUB>> ]
+"4664" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1033</SUB>> ]
+"4666" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1033</SUB>> ]
+"4682" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1034</SUB>> ]
+"4684" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1034</SUB>> ]
+"4643" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1030</SUB>> ]
+"4706" [label = <(METHOD_RETURN,jchar)<SUB>1030</SUB>> ]
+  "4650" -> "4653" 
+  "4653" -> "4658" 
+  "4653" -> "4671" 
+  "4671" -> "4676" 
+  "4671" -> "4690" 
+  "4690" -> "4694" 
+  "4693" -> "4699" 
+  "4699" -> "4705" 
+  "4701" -> "4706" 
+  "4694" -> "4693" 
+  "4702" -> "4701" 
+  "4703" -> "4702" 
+  "4657" -> "4664" 
+  "4657" -> "4671" 
+  "4675" -> "4682" 
+  "4675" -> "4690" 
+  "4705" -> "4703" 
+  "4658" -> "4657" 
+  "4662" -> "4669" 
+  "4669" -> "4706" 
+  "4676" -> "4675" 
+  "4680" -> "4687" 
+  "4687" -> "4706" 
+  "4663" -> "4662" 
+  "4681" -> "4680" 
+  "4664" -> "4666" 
+  "4666" -> "4663" 
+  "4682" -> "4684" 
+  "4684" -> "4681" 
+  "4643" -> "4650" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/88-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/88-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/88-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/88-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualByteMethod" {  
-"4665" [label = <(va_start,va_start(ap, mid))<SUB>1086</SUB>> ]
-"4668" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
-"4686" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
-"4705" [label = <(soa,soa(env))<SUB>1089</SUB>> ]
-"4708" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1090</SUB>> ]
-"4714" [label = <(va_end,va_end(ap))<SUB>1091</SUB>> ]
-"4716" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1092</SUB>> ]
-"4709" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1090</SUB>> ]
-"4717" [label = <(GetB,result.GetB())<SUB>1092</SUB>> ]
-"4718" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1092</SUB>> ]
-"4672" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1087</SUB>> ]
-"4690" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1088</SUB>> ]
-"4720" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1092</SUB>> ]
-"4673" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1087</SUB>> ]
-"4677" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1087</SUB>> ]
-"4684" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
-"4691" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1088</SUB>> ]
-"4695" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1088</SUB>> ]
-"4702" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
-"4678" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1087</SUB>> ]
-"4696" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1088</SUB>> ]
-"4679" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1087</SUB>> ]
-"4681" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1087</SUB>> ]
-"4697" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1088</SUB>> ]
-"4699" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1088</SUB>> ]
-"4658" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1084</SUB>> ]
-"4721" [label = <(METHOD_RETURN,jbyte)<SUB>1084</SUB>> ]
-  "4665" -> "4668" 
-  "4668" -> "4673" 
-  "4668" -> "4686" 
-  "4686" -> "4691" 
-  "4686" -> "4705" 
-  "4705" -> "4709" 
-  "4708" -> "4714" 
-  "4714" -> "4720" 
-  "4716" -> "4721" 
-  "4709" -> "4708" 
-  "4717" -> "4716" 
-  "4718" -> "4717" 
-  "4672" -> "4679" 
-  "4672" -> "4686" 
-  "4690" -> "4697" 
-  "4690" -> "4705" 
-  "4720" -> "4718" 
-  "4673" -> "4672" 
-  "4677" -> "4684" 
-  "4684" -> "4721" 
-  "4691" -> "4690" 
-  "4695" -> "4702" 
-  "4702" -> "4721" 
-  "4678" -> "4677" 
-  "4696" -> "4695" 
-  "4679" -> "4681" 
-  "4681" -> "4678" 
-  "4697" -> "4699" 
-  "4699" -> "4696" 
-  "4658" -> "4665" 
+digraph "CallNonvirtualCharMethodV" {  
+"4715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1043</SUB>> ]
+"4733" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1044</SUB>> ]
+"4752" [label = <(soa,soa(env))<SUB>1045</SUB>> ]
+"4754" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1046</SUB>> ]
+"4755" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1046</SUB>> ]
+"4756" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1046</SUB>> ]
+"4719" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1043</SUB>> ]
+"4737" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1044</SUB>> ]
+"4757" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1046</SUB>> ]
+"4762" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1046</SUB>> ]
+"4720" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1043</SUB>> ]
+"4724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1043</SUB>> ]
+"4731" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1043</SUB>> ]
+"4738" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1044</SUB>> ]
+"4742" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1044</SUB>> ]
+"4749" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1044</SUB>> ]
+"4725" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1043</SUB>> ]
+"4743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1044</SUB>> ]
+"4726" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1043</SUB>> ]
+"4728" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1043</SUB>> ]
+"4744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1044</SUB>> ]
+"4746" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1044</SUB>> ]
+"4708" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1041</SUB>> ]
+"4763" [label = <(METHOD_RETURN,jchar)<SUB>1041</SUB>> ]
+  "4715" -> "4720" 
+  "4715" -> "4733" 
+  "4733" -> "4738" 
+  "4733" -> "4752" 
+  "4752" -> "4757" 
+  "4754" -> "4763" 
+  "4755" -> "4754" 
+  "4756" -> "4755" 
+  "4719" -> "4726" 
+  "4719" -> "4733" 
+  "4737" -> "4744" 
+  "4737" -> "4752" 
+  "4757" -> "4762" 
+  "4762" -> "4756" 
+  "4720" -> "4719" 
+  "4724" -> "4731" 
+  "4731" -> "4763" 
+  "4738" -> "4737" 
+  "4742" -> "4749" 
+  "4749" -> "4763" 
+  "4725" -> "4724" 
+  "4743" -> "4742" 
+  "4726" -> "4728" 
+  "4728" -> "4725" 
+  "4744" -> "4746" 
+  "4746" -> "4743" 
+  "4708" -> "4715" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/89-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/89-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/89-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/89-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualByteMethodV" {  
-"4730" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
-"4748" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
-"4767" [label = <(soa,soa(env))<SUB>1099</SUB>> ]
-"4769" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1100</SUB>> ]
-"4770" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1100</SUB>> ]
-"4771" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1100</SUB>> ]
-"4734" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1097</SUB>> ]
-"4752" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1098</SUB>> ]
-"4772" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1100</SUB>> ]
-"4777" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1100</SUB>> ]
-"4735" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1097</SUB>> ]
-"4739" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1097</SUB>> ]
-"4746" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
-"4753" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1098</SUB>> ]
-"4757" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1098</SUB>> ]
-"4764" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
-"4740" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1097</SUB>> ]
-"4758" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1098</SUB>> ]
-"4741" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1097</SUB>> ]
-"4743" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1097</SUB>> ]
-"4759" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1098</SUB>> ]
-"4761" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1098</SUB>> ]
-"4723" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1095</SUB>> ]
-"4778" [label = <(METHOD_RETURN,jbyte)<SUB>1095</SUB>> ]
-  "4730" -> "4735" 
-  "4730" -> "4748" 
-  "4748" -> "4753" 
-  "4748" -> "4767" 
-  "4767" -> "4772" 
-  "4769" -> "4778" 
-  "4770" -> "4769" 
-  "4771" -> "4770" 
-  "4734" -> "4741" 
-  "4734" -> "4748" 
-  "4752" -> "4759" 
-  "4752" -> "4767" 
+digraph "CallNonvirtualCharMethodA" {  
+"4772" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1051</SUB>> ]
+"4790" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1052</SUB>> ]
+"4809" [label = <(soa,soa(env))<SUB>1053</SUB>> ]
+"4811" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1054</SUB>> ]
+"4812" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1054</SUB>> ]
+"4813" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1054</SUB>> ]
+"4776" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1051</SUB>> ]
+"4794" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1052</SUB>> ]
+"4814" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1054</SUB>> ]
+"4819" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1054</SUB>> ]
+"4777" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1051</SUB>> ]
+"4781" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1051</SUB>> ]
+"4788" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1051</SUB>> ]
+"4795" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1052</SUB>> ]
+"4799" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1052</SUB>> ]
+"4806" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1052</SUB>> ]
+"4782" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1051</SUB>> ]
+"4800" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1052</SUB>> ]
+"4783" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1051</SUB>> ]
+"4785" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1051</SUB>> ]
+"4801" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1052</SUB>> ]
+"4803" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1052</SUB>> ]
+"4765" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1049</SUB>> ]
+"4820" [label = <(METHOD_RETURN,jchar)<SUB>1049</SUB>> ]
   "4772" -> "4777" 
-  "4777" -> "4771" 
-  "4735" -> "4734" 
-  "4739" -> "4746" 
-  "4746" -> "4778" 
-  "4753" -> "4752" 
-  "4757" -> "4764" 
-  "4764" -> "4778" 
-  "4740" -> "4739" 
-  "4758" -> "4757" 
-  "4741" -> "4743" 
-  "4743" -> "4740" 
-  "4759" -> "4761" 
-  "4761" -> "4758" 
-  "4723" -> "4730" 
+  "4772" -> "4790" 
+  "4790" -> "4795" 
+  "4790" -> "4809" 
+  "4809" -> "4814" 
+  "4811" -> "4820" 
+  "4812" -> "4811" 
+  "4813" -> "4812" 
+  "4776" -> "4783" 
+  "4776" -> "4790" 
+  "4794" -> "4801" 
+  "4794" -> "4809" 
+  "4814" -> "4819" 
+  "4819" -> "4813" 
+  "4777" -> "4776" 
+  "4781" -> "4788" 
+  "4788" -> "4820" 
+  "4795" -> "4794" 
+  "4799" -> "4806" 
+  "4806" -> "4820" 
+  "4782" -> "4781" 
+  "4800" -> "4799" 
+  "4783" -> "4785" 
+  "4785" -> "4782" 
+  "4801" -> "4803" 
+  "4803" -> "4800" 
+  "4765" -> "4772" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/9-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/9-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/9-cfg.dot	2023-06-07 19:35:14.657385858 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/9-cfg.dot	2023-06-07 19:35:21.187385058 +0330
@@ -1,5 +1,5 @@
-digraph "hs" {  
-"306" [label = <(METHOD,hs)<SUB>208</SUB>> ]
-"309" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>208</SUB>> ]
-  "306" -> "309" 
+digraph "ThrowAIOOBE" {  
+"249" [label = <(METHOD,ThrowAIOOBE)<SUB>241</SUB>> ]
+"256" [label = <(METHOD_RETURN,void)<SUB>241</SUB>> ]
+  "249" -> "256" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/90-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/90-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/90-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/90-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualByteMethodA" {  
-"4787" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
-"4805" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
-"4824" [label = <(soa,soa(env))<SUB>1107</SUB>> ]
-"4826" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1108</SUB>> ]
-"4827" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1108</SUB>> ]
-"4828" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1108</SUB>> ]
-"4791" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1105</SUB>> ]
-"4809" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1106</SUB>> ]
-"4829" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1108</SUB>> ]
-"4834" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1108</SUB>> ]
-"4792" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1105</SUB>> ]
-"4796" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1105</SUB>> ]
-"4803" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
-"4810" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1106</SUB>> ]
-"4814" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1106</SUB>> ]
-"4821" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
-"4797" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1105</SUB>> ]
-"4815" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1106</SUB>> ]
-"4798" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1105</SUB>> ]
-"4800" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1105</SUB>> ]
-"4816" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1106</SUB>> ]
-"4818" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1106</SUB>> ]
-"4780" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1103</SUB>> ]
-"4835" [label = <(METHOD_RETURN,jbyte)<SUB>1103</SUB>> ]
-  "4787" -> "4792" 
-  "4787" -> "4805" 
-  "4805" -> "4810" 
-  "4805" -> "4824" 
-  "4824" -> "4829" 
-  "4826" -> "4835" 
-  "4827" -> "4826" 
-  "4828" -> "4827" 
-  "4791" -> "4798" 
-  "4791" -> "4805" 
-  "4809" -> "4816" 
-  "4809" -> "4824" 
-  "4829" -> "4834" 
-  "4834" -> "4828" 
-  "4792" -> "4791" 
-  "4796" -> "4803" 
-  "4803" -> "4835" 
-  "4810" -> "4809" 
-  "4814" -> "4821" 
-  "4821" -> "4835" 
-  "4797" -> "4796" 
-  "4815" -> "4814" 
-  "4798" -> "4800" 
-  "4800" -> "4797" 
-  "4816" -> "4818" 
-  "4818" -> "4815" 
-  "4780" -> "4787" 
+digraph "CallNonvirtualShortMethod" {  
+"4829" [label = <(va_start,va_start(ap, mid))<SUB>1059</SUB>> ]
+"4832" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
+"4850" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
+"4869" [label = <(soa,soa(env))<SUB>1062</SUB>> ]
+"4872" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1063</SUB>> ]
+"4878" [label = <(va_end,va_end(ap))<SUB>1064</SUB>> ]
+"4880" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1065</SUB>> ]
+"4873" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1063</SUB>> ]
+"4881" [label = <(GetS,result.GetS())<SUB>1065</SUB>> ]
+"4882" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1065</SUB>> ]
+"4836" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1060</SUB>> ]
+"4854" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1061</SUB>> ]
+"4884" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1065</SUB>> ]
+"4837" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1060</SUB>> ]
+"4841" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1060</SUB>> ]
+"4848" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
+"4855" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1061</SUB>> ]
+"4859" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1061</SUB>> ]
+"4866" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
+"4842" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1060</SUB>> ]
+"4860" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1061</SUB>> ]
+"4843" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1060</SUB>> ]
+"4845" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1060</SUB>> ]
+"4861" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1061</SUB>> ]
+"4863" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1061</SUB>> ]
+"4822" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1057</SUB>> ]
+"4885" [label = <(METHOD_RETURN,jshort)<SUB>1057</SUB>> ]
+  "4829" -> "4832" 
+  "4832" -> "4837" 
+  "4832" -> "4850" 
+  "4850" -> "4855" 
+  "4850" -> "4869" 
+  "4869" -> "4873" 
+  "4872" -> "4878" 
+  "4878" -> "4884" 
+  "4880" -> "4885" 
+  "4873" -> "4872" 
+  "4881" -> "4880" 
+  "4882" -> "4881" 
+  "4836" -> "4843" 
+  "4836" -> "4850" 
+  "4854" -> "4861" 
+  "4854" -> "4869" 
+  "4884" -> "4882" 
+  "4837" -> "4836" 
+  "4841" -> "4848" 
+  "4848" -> "4885" 
+  "4855" -> "4854" 
+  "4859" -> "4866" 
+  "4866" -> "4885" 
+  "4842" -> "4841" 
+  "4860" -> "4859" 
+  "4843" -> "4845" 
+  "4845" -> "4842" 
+  "4861" -> "4863" 
+  "4863" -> "4860" 
+  "4822" -> "4829" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/91-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/91-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/91-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/91-cfg.dot	2023-06-07 19:35:21.257385049 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualCharMethod" {  
-"4844" [label = <(va_start,va_start(ap, mid))<SUB>1113</SUB>> ]
-"4847" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
-"4865" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
-"4884" [label = <(soa,soa(env))<SUB>1116</SUB>> ]
-"4887" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1117</SUB>> ]
-"4893" [label = <(va_end,va_end(ap))<SUB>1118</SUB>> ]
-"4895" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1119</SUB>> ]
-"4888" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1117</SUB>> ]
-"4896" [label = <(GetC,result.GetC())<SUB>1119</SUB>> ]
-"4897" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1119</SUB>> ]
-"4851" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1114</SUB>> ]
-"4869" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1115</SUB>> ]
-"4899" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1119</SUB>> ]
-"4852" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1114</SUB>> ]
-"4856" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1114</SUB>> ]
-"4863" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
-"4870" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1115</SUB>> ]
-"4874" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1115</SUB>> ]
-"4881" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
-"4857" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1114</SUB>> ]
-"4875" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1115</SUB>> ]
-"4858" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1114</SUB>> ]
-"4860" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1114</SUB>> ]
-"4876" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1115</SUB>> ]
-"4878" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1115</SUB>> ]
-"4837" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1111</SUB>> ]
-"4900" [label = <(METHOD_RETURN,jchar)<SUB>1111</SUB>> ]
-  "4844" -> "4847" 
-  "4847" -> "4852" 
-  "4847" -> "4865" 
-  "4865" -> "4870" 
-  "4865" -> "4884" 
-  "4884" -> "4888" 
-  "4887" -> "4893" 
-  "4893" -> "4899" 
-  "4895" -> "4900" 
-  "4888" -> "4887" 
-  "4896" -> "4895" 
-  "4897" -> "4896" 
-  "4851" -> "4858" 
-  "4851" -> "4865" 
-  "4869" -> "4876" 
-  "4869" -> "4884" 
-  "4899" -> "4897" 
-  "4852" -> "4851" 
-  "4856" -> "4863" 
-  "4863" -> "4900" 
-  "4870" -> "4869" 
-  "4874" -> "4881" 
-  "4881" -> "4900" 
-  "4857" -> "4856" 
-  "4875" -> "4874" 
-  "4858" -> "4860" 
-  "4860" -> "4857" 
-  "4876" -> "4878" 
-  "4878" -> "4875" 
-  "4837" -> "4844" 
+digraph "CallNonvirtualShortMethodV" {  
+"4894" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
+"4912" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
+"4931" [label = <(soa,soa(env))<SUB>1072</SUB>> ]
+"4933" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1073</SUB>> ]
+"4934" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1073</SUB>> ]
+"4935" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1073</SUB>> ]
+"4898" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1070</SUB>> ]
+"4916" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1071</SUB>> ]
+"4936" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1073</SUB>> ]
+"4941" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1073</SUB>> ]
+"4899" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1070</SUB>> ]
+"4903" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1070</SUB>> ]
+"4910" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
+"4917" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1071</SUB>> ]
+"4921" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1071</SUB>> ]
+"4928" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
+"4904" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1070</SUB>> ]
+"4922" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1071</SUB>> ]
+"4905" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1070</SUB>> ]
+"4907" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1070</SUB>> ]
+"4923" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1071</SUB>> ]
+"4925" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1071</SUB>> ]
+"4887" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1068</SUB>> ]
+"4942" [label = <(METHOD_RETURN,jshort)<SUB>1068</SUB>> ]
+  "4894" -> "4899" 
+  "4894" -> "4912" 
+  "4912" -> "4917" 
+  "4912" -> "4931" 
+  "4931" -> "4936" 
+  "4933" -> "4942" 
+  "4934" -> "4933" 
+  "4935" -> "4934" 
+  "4898" -> "4905" 
+  "4898" -> "4912" 
+  "4916" -> "4923" 
+  "4916" -> "4931" 
+  "4936" -> "4941" 
+  "4941" -> "4935" 
+  "4899" -> "4898" 
+  "4903" -> "4910" 
+  "4910" -> "4942" 
+  "4917" -> "4916" 
+  "4921" -> "4928" 
+  "4928" -> "4942" 
+  "4904" -> "4903" 
+  "4922" -> "4921" 
+  "4905" -> "4907" 
+  "4907" -> "4904" 
+  "4923" -> "4925" 
+  "4925" -> "4922" 
+  "4887" -> "4894" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/92-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/92-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/92-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/92-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualCharMethodV" {  
-"4909" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
-"4927" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
-"4946" [label = <(soa,soa(env))<SUB>1126</SUB>> ]
-"4948" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1127</SUB>> ]
-"4949" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1127</SUB>> ]
-"4950" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1127</SUB>> ]
-"4913" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1124</SUB>> ]
-"4931" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1125</SUB>> ]
-"4951" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1127</SUB>> ]
-"4956" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1127</SUB>> ]
-"4914" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1124</SUB>> ]
-"4918" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1124</SUB>> ]
-"4925" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
-"4932" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1125</SUB>> ]
-"4936" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1125</SUB>> ]
-"4943" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
-"4919" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1124</SUB>> ]
-"4937" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1125</SUB>> ]
-"4920" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1124</SUB>> ]
-"4922" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1124</SUB>> ]
-"4938" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1125</SUB>> ]
-"4940" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1125</SUB>> ]
-"4902" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1122</SUB>> ]
-"4957" [label = <(METHOD_RETURN,jchar)<SUB>1122</SUB>> ]
-  "4909" -> "4914" 
-  "4909" -> "4927" 
-  "4927" -> "4932" 
-  "4927" -> "4946" 
-  "4946" -> "4951" 
-  "4948" -> "4957" 
-  "4949" -> "4948" 
-  "4950" -> "4949" 
-  "4913" -> "4920" 
-  "4913" -> "4927" 
-  "4931" -> "4938" 
-  "4931" -> "4946" 
+digraph "CallNonvirtualShortMethodA" {  
+"4951" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
+"4969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
+"4988" [label = <(soa,soa(env))<SUB>1080</SUB>> ]
+"4990" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1081</SUB>> ]
+"4991" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1081</SUB>> ]
+"4992" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1081</SUB>> ]
+"4955" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1078</SUB>> ]
+"4973" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1079</SUB>> ]
+"4993" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1081</SUB>> ]
+"4998" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1081</SUB>> ]
+"4956" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1078</SUB>> ]
+"4960" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1078</SUB>> ]
+"4967" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
+"4974" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1079</SUB>> ]
+"4978" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1079</SUB>> ]
+"4985" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
+"4961" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1078</SUB>> ]
+"4979" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1079</SUB>> ]
+"4962" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1078</SUB>> ]
+"4964" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1078</SUB>> ]
+"4980" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1079</SUB>> ]
+"4982" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1079</SUB>> ]
+"4944" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1076</SUB>> ]
+"4999" [label = <(METHOD_RETURN,jshort)<SUB>1076</SUB>> ]
   "4951" -> "4956" 
-  "4956" -> "4950" 
-  "4914" -> "4913" 
-  "4918" -> "4925" 
-  "4925" -> "4957" 
-  "4932" -> "4931" 
-  "4936" -> "4943" 
-  "4943" -> "4957" 
-  "4919" -> "4918" 
-  "4937" -> "4936" 
-  "4920" -> "4922" 
-  "4922" -> "4919" 
-  "4938" -> "4940" 
-  "4940" -> "4937" 
-  "4902" -> "4909" 
+  "4951" -> "4969" 
+  "4969" -> "4974" 
+  "4969" -> "4988" 
+  "4988" -> "4993" 
+  "4990" -> "4999" 
+  "4991" -> "4990" 
+  "4992" -> "4991" 
+  "4955" -> "4962" 
+  "4955" -> "4969" 
+  "4973" -> "4980" 
+  "4973" -> "4988" 
+  "4993" -> "4998" 
+  "4998" -> "4992" 
+  "4956" -> "4955" 
+  "4960" -> "4967" 
+  "4967" -> "4999" 
+  "4974" -> "4973" 
+  "4978" -> "4985" 
+  "4985" -> "4999" 
+  "4961" -> "4960" 
+  "4979" -> "4978" 
+  "4962" -> "4964" 
+  "4964" -> "4961" 
+  "4980" -> "4982" 
+  "4982" -> "4979" 
+  "4944" -> "4951" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/93-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/93-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/93-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/93-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualCharMethodA" {  
-"4966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
-"4984" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
-"5003" [label = <(soa,soa(env))<SUB>1134</SUB>> ]
-"5005" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1135</SUB>> ]
-"5006" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1135</SUB>> ]
-"5007" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1135</SUB>> ]
-"4970" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1132</SUB>> ]
-"4988" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1133</SUB>> ]
-"5008" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1135</SUB>> ]
-"5013" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1135</SUB>> ]
-"4971" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1132</SUB>> ]
-"4975" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1132</SUB>> ]
-"4982" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
-"4989" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1133</SUB>> ]
-"4993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1133</SUB>> ]
-"5000" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
-"4976" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1132</SUB>> ]
-"4994" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1133</SUB>> ]
-"4977" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1132</SUB>> ]
-"4979" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1132</SUB>> ]
-"4995" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1133</SUB>> ]
-"4997" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1133</SUB>> ]
-"4959" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1130</SUB>> ]
-"5014" [label = <(METHOD_RETURN,jchar)<SUB>1130</SUB>> ]
-  "4966" -> "4971" 
-  "4966" -> "4984" 
-  "4984" -> "4989" 
-  "4984" -> "5003" 
-  "5003" -> "5008" 
-  "5005" -> "5014" 
-  "5006" -> "5005" 
-  "5007" -> "5006" 
-  "4970" -> "4977" 
-  "4970" -> "4984" 
-  "4988" -> "4995" 
-  "4988" -> "5003" 
-  "5008" -> "5013" 
-  "5013" -> "5007" 
-  "4971" -> "4970" 
-  "4975" -> "4982" 
-  "4982" -> "5014" 
-  "4989" -> "4988" 
-  "4993" -> "5000" 
-  "5000" -> "5014" 
-  "4976" -> "4975" 
-  "4994" -> "4993" 
-  "4977" -> "4979" 
-  "4979" -> "4976" 
-  "4995" -> "4997" 
-  "4997" -> "4994" 
-  "4959" -> "4966" 
+digraph "CallNonvirtualIntMethod" {  
+"5008" [label = <(va_start,va_start(ap, mid))<SUB>1086</SUB>> ]
+"5011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
+"5029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
+"5048" [label = <(soa,soa(env))<SUB>1089</SUB>> ]
+"5051" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1090</SUB>> ]
+"5057" [label = <(va_end,va_end(ap))<SUB>1091</SUB>> ]
+"5059" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1092</SUB>> ]
+"5052" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1090</SUB>> ]
+"5060" [label = <(GetI,result.GetI())<SUB>1092</SUB>> ]
+"5061" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1092</SUB>> ]
+"5015" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1087</SUB>> ]
+"5033" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1088</SUB>> ]
+"5063" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1092</SUB>> ]
+"5016" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1087</SUB>> ]
+"5020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1087</SUB>> ]
+"5027" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
+"5034" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1088</SUB>> ]
+"5038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1088</SUB>> ]
+"5045" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
+"5021" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1087</SUB>> ]
+"5039" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1088</SUB>> ]
+"5022" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1087</SUB>> ]
+"5024" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1087</SUB>> ]
+"5040" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1088</SUB>> ]
+"5042" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1088</SUB>> ]
+"5001" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1084</SUB>> ]
+"5064" [label = <(METHOD_RETURN,jint)<SUB>1084</SUB>> ]
+  "5008" -> "5011" 
+  "5011" -> "5016" 
+  "5011" -> "5029" 
+  "5029" -> "5034" 
+  "5029" -> "5048" 
+  "5048" -> "5052" 
+  "5051" -> "5057" 
+  "5057" -> "5063" 
+  "5059" -> "5064" 
+  "5052" -> "5051" 
+  "5060" -> "5059" 
+  "5061" -> "5060" 
+  "5015" -> "5022" 
+  "5015" -> "5029" 
+  "5033" -> "5040" 
+  "5033" -> "5048" 
+  "5063" -> "5061" 
+  "5016" -> "5015" 
+  "5020" -> "5027" 
+  "5027" -> "5064" 
+  "5034" -> "5033" 
+  "5038" -> "5045" 
+  "5045" -> "5064" 
+  "5021" -> "5020" 
+  "5039" -> "5038" 
+  "5022" -> "5024" 
+  "5024" -> "5021" 
+  "5040" -> "5042" 
+  "5042" -> "5039" 
+  "5001" -> "5008" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/94-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/94-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/94-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/94-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualShortMethod" {  
-"5023" [label = <(va_start,va_start(ap, mid))<SUB>1140</SUB>> ]
-"5026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1141</SUB>> ]
-"5044" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1142</SUB>> ]
-"5063" [label = <(soa,soa(env))<SUB>1143</SUB>> ]
-"5066" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1144</SUB>> ]
-"5072" [label = <(va_end,va_end(ap))<SUB>1145</SUB>> ]
-"5074" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1146</SUB>> ]
-"5067" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1144</SUB>> ]
-"5075" [label = <(GetS,result.GetS())<SUB>1146</SUB>> ]
-"5076" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1146</SUB>> ]
-"5030" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1141</SUB>> ]
-"5048" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1142</SUB>> ]
-"5078" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1146</SUB>> ]
-"5031" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1141</SUB>> ]
-"5035" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1141</SUB>> ]
-"5042" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1141</SUB>> ]
-"5049" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1142</SUB>> ]
-"5053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1142</SUB>> ]
-"5060" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1142</SUB>> ]
-"5036" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1141</SUB>> ]
-"5054" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1142</SUB>> ]
-"5037" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1141</SUB>> ]
-"5039" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1141</SUB>> ]
-"5055" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1142</SUB>> ]
-"5057" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1142</SUB>> ]
-"5016" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1138</SUB>> ]
-"5079" [label = <(METHOD_RETURN,jshort)<SUB>1138</SUB>> ]
-  "5023" -> "5026" 
-  "5026" -> "5031" 
-  "5026" -> "5044" 
-  "5044" -> "5049" 
-  "5044" -> "5063" 
-  "5063" -> "5067" 
-  "5066" -> "5072" 
-  "5072" -> "5078" 
-  "5074" -> "5079" 
-  "5067" -> "5066" 
-  "5075" -> "5074" 
-  "5076" -> "5075" 
-  "5030" -> "5037" 
-  "5030" -> "5044" 
-  "5048" -> "5055" 
-  "5048" -> "5063" 
-  "5078" -> "5076" 
-  "5031" -> "5030" 
-  "5035" -> "5042" 
-  "5042" -> "5079" 
-  "5049" -> "5048" 
-  "5053" -> "5060" 
-  "5060" -> "5079" 
-  "5036" -> "5035" 
-  "5054" -> "5053" 
-  "5037" -> "5039" 
-  "5039" -> "5036" 
-  "5055" -> "5057" 
-  "5057" -> "5054" 
-  "5016" -> "5023" 
+digraph "CallNonvirtualIntMethodV" {  
+"5073" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
+"5091" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
+"5110" [label = <(soa,soa(env))<SUB>1099</SUB>> ]
+"5112" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1100</SUB>> ]
+"5113" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1100</SUB>> ]
+"5114" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1100</SUB>> ]
+"5077" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1097</SUB>> ]
+"5095" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1098</SUB>> ]
+"5115" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1100</SUB>> ]
+"5120" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1100</SUB>> ]
+"5078" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1097</SUB>> ]
+"5082" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1097</SUB>> ]
+"5089" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
+"5096" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1098</SUB>> ]
+"5100" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1098</SUB>> ]
+"5107" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
+"5083" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1097</SUB>> ]
+"5101" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1098</SUB>> ]
+"5084" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1097</SUB>> ]
+"5086" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1097</SUB>> ]
+"5102" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1098</SUB>> ]
+"5104" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1098</SUB>> ]
+"5066" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1095</SUB>> ]
+"5121" [label = <(METHOD_RETURN,jint)<SUB>1095</SUB>> ]
+  "5073" -> "5078" 
+  "5073" -> "5091" 
+  "5091" -> "5096" 
+  "5091" -> "5110" 
+  "5110" -> "5115" 
+  "5112" -> "5121" 
+  "5113" -> "5112" 
+  "5114" -> "5113" 
+  "5077" -> "5084" 
+  "5077" -> "5091" 
+  "5095" -> "5102" 
+  "5095" -> "5110" 
+  "5115" -> "5120" 
+  "5120" -> "5114" 
+  "5078" -> "5077" 
+  "5082" -> "5089" 
+  "5089" -> "5121" 
+  "5096" -> "5095" 
+  "5100" -> "5107" 
+  "5107" -> "5121" 
+  "5083" -> "5082" 
+  "5101" -> "5100" 
+  "5084" -> "5086" 
+  "5086" -> "5083" 
+  "5102" -> "5104" 
+  "5104" -> "5101" 
+  "5066" -> "5073" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/95-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/95-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/95-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/95-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualShortMethodV" {  
-"5088" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
-"5106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
-"5125" [label = <(soa,soa(env))<SUB>1153</SUB>> ]
-"5127" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1154</SUB>> ]
-"5128" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1154</SUB>> ]
-"5129" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1154</SUB>> ]
-"5092" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1151</SUB>> ]
-"5110" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1152</SUB>> ]
-"5130" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1154</SUB>> ]
-"5135" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1154</SUB>> ]
-"5093" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1151</SUB>> ]
-"5097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1151</SUB>> ]
-"5104" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
-"5111" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1152</SUB>> ]
-"5115" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1152</SUB>> ]
-"5122" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
-"5098" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1151</SUB>> ]
-"5116" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1152</SUB>> ]
-"5099" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1151</SUB>> ]
-"5101" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1151</SUB>> ]
-"5117" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1152</SUB>> ]
-"5119" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1152</SUB>> ]
-"5081" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1149</SUB>> ]
-"5136" [label = <(METHOD_RETURN,jshort)<SUB>1149</SUB>> ]
-  "5088" -> "5093" 
-  "5088" -> "5106" 
-  "5106" -> "5111" 
-  "5106" -> "5125" 
-  "5125" -> "5130" 
-  "5127" -> "5136" 
-  "5128" -> "5127" 
-  "5129" -> "5128" 
-  "5092" -> "5099" 
-  "5092" -> "5106" 
-  "5110" -> "5117" 
-  "5110" -> "5125" 
+digraph "CallNonvirtualIntMethodA" {  
+"5130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
+"5148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
+"5167" [label = <(soa,soa(env))<SUB>1107</SUB>> ]
+"5169" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1108</SUB>> ]
+"5170" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1108</SUB>> ]
+"5171" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1108</SUB>> ]
+"5134" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1105</SUB>> ]
+"5152" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1106</SUB>> ]
+"5172" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1108</SUB>> ]
+"5177" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1108</SUB>> ]
+"5135" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1105</SUB>> ]
+"5139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1105</SUB>> ]
+"5146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
+"5153" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1106</SUB>> ]
+"5157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1106</SUB>> ]
+"5164" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
+"5140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1105</SUB>> ]
+"5158" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1106</SUB>> ]
+"5141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1105</SUB>> ]
+"5143" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1105</SUB>> ]
+"5159" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1106</SUB>> ]
+"5161" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1106</SUB>> ]
+"5123" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1103</SUB>> ]
+"5178" [label = <(METHOD_RETURN,jint)<SUB>1103</SUB>> ]
   "5130" -> "5135" 
-  "5135" -> "5129" 
-  "5093" -> "5092" 
-  "5097" -> "5104" 
-  "5104" -> "5136" 
-  "5111" -> "5110" 
-  "5115" -> "5122" 
-  "5122" -> "5136" 
-  "5098" -> "5097" 
-  "5116" -> "5115" 
-  "5099" -> "5101" 
-  "5101" -> "5098" 
-  "5117" -> "5119" 
-  "5119" -> "5116" 
-  "5081" -> "5088" 
+  "5130" -> "5148" 
+  "5148" -> "5153" 
+  "5148" -> "5167" 
+  "5167" -> "5172" 
+  "5169" -> "5178" 
+  "5170" -> "5169" 
+  "5171" -> "5170" 
+  "5134" -> "5141" 
+  "5134" -> "5148" 
+  "5152" -> "5159" 
+  "5152" -> "5167" 
+  "5172" -> "5177" 
+  "5177" -> "5171" 
+  "5135" -> "5134" 
+  "5139" -> "5146" 
+  "5146" -> "5178" 
+  "5153" -> "5152" 
+  "5157" -> "5164" 
+  "5164" -> "5178" 
+  "5140" -> "5139" 
+  "5158" -> "5157" 
+  "5141" -> "5143" 
+  "5143" -> "5140" 
+  "5159" -> "5161" 
+  "5161" -> "5158" 
+  "5123" -> "5130" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/96-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/96-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/96-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/96-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualShortMethodA" {  
-"5145" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
-"5163" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
-"5182" [label = <(soa,soa(env))<SUB>1161</SUB>> ]
-"5184" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1162</SUB>> ]
-"5185" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1162</SUB>> ]
-"5186" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1162</SUB>> ]
-"5149" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1159</SUB>> ]
-"5167" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1160</SUB>> ]
-"5187" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1162</SUB>> ]
-"5192" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1162</SUB>> ]
-"5150" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1159</SUB>> ]
-"5154" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1159</SUB>> ]
-"5161" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
-"5168" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1160</SUB>> ]
-"5172" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1160</SUB>> ]
-"5179" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
-"5155" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1159</SUB>> ]
-"5173" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1160</SUB>> ]
-"5156" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1159</SUB>> ]
-"5158" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1159</SUB>> ]
-"5174" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1160</SUB>> ]
-"5176" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1160</SUB>> ]
-"5138" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1157</SUB>> ]
-"5193" [label = <(METHOD_RETURN,jshort)<SUB>1157</SUB>> ]
-  "5145" -> "5150" 
-  "5145" -> "5163" 
-  "5163" -> "5168" 
-  "5163" -> "5182" 
-  "5182" -> "5187" 
-  "5184" -> "5193" 
-  "5185" -> "5184" 
-  "5186" -> "5185" 
-  "5149" -> "5156" 
-  "5149" -> "5163" 
-  "5167" -> "5174" 
-  "5167" -> "5182" 
-  "5187" -> "5192" 
-  "5192" -> "5186" 
-  "5150" -> "5149" 
-  "5154" -> "5161" 
-  "5161" -> "5193" 
-  "5168" -> "5167" 
-  "5172" -> "5179" 
-  "5179" -> "5193" 
-  "5155" -> "5154" 
-  "5173" -> "5172" 
-  "5156" -> "5158" 
-  "5158" -> "5155" 
-  "5174" -> "5176" 
-  "5176" -> "5173" 
-  "5138" -> "5145" 
+digraph "CallNonvirtualLongMethod" {  
+"5187" [label = <(va_start,va_start(ap, mid))<SUB>1113</SUB>> ]
+"5190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
+"5208" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
+"5227" [label = <(soa,soa(env))<SUB>1116</SUB>> ]
+"5230" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1117</SUB>> ]
+"5236" [label = <(va_end,va_end(ap))<SUB>1118</SUB>> ]
+"5238" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1119</SUB>> ]
+"5231" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1117</SUB>> ]
+"5239" [label = <(GetJ,result.GetJ())<SUB>1119</SUB>> ]
+"5240" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1119</SUB>> ]
+"5194" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1114</SUB>> ]
+"5212" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1115</SUB>> ]
+"5242" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1119</SUB>> ]
+"5195" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1114</SUB>> ]
+"5199" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1114</SUB>> ]
+"5206" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
+"5213" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1115</SUB>> ]
+"5217" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1115</SUB>> ]
+"5224" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
+"5200" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1114</SUB>> ]
+"5218" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1115</SUB>> ]
+"5201" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1114</SUB>> ]
+"5203" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1114</SUB>> ]
+"5219" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1115</SUB>> ]
+"5221" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1115</SUB>> ]
+"5180" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1111</SUB>> ]
+"5243" [label = <(METHOD_RETURN,jlong)<SUB>1111</SUB>> ]
+  "5187" -> "5190" 
+  "5190" -> "5195" 
+  "5190" -> "5208" 
+  "5208" -> "5213" 
+  "5208" -> "5227" 
+  "5227" -> "5231" 
+  "5230" -> "5236" 
+  "5236" -> "5242" 
+  "5238" -> "5243" 
+  "5231" -> "5230" 
+  "5239" -> "5238" 
+  "5240" -> "5239" 
+  "5194" -> "5201" 
+  "5194" -> "5208" 
+  "5212" -> "5219" 
+  "5212" -> "5227" 
+  "5242" -> "5240" 
+  "5195" -> "5194" 
+  "5199" -> "5206" 
+  "5206" -> "5243" 
+  "5213" -> "5212" 
+  "5217" -> "5224" 
+  "5224" -> "5243" 
+  "5200" -> "5199" 
+  "5218" -> "5217" 
+  "5201" -> "5203" 
+  "5203" -> "5200" 
+  "5219" -> "5221" 
+  "5221" -> "5218" 
+  "5180" -> "5187" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/97-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/97-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/97-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/97-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,59 +1,53 @@
-digraph "CallNonvirtualIntMethod" {  
-"5202" [label = <(va_start,va_start(ap, mid))<SUB>1167</SUB>> ]
-"5205" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
-"5223" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
-"5242" [label = <(soa,soa(env))<SUB>1170</SUB>> ]
-"5245" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1171</SUB>> ]
-"5251" [label = <(va_end,va_end(ap))<SUB>1172</SUB>> ]
-"5253" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1173</SUB>> ]
-"5246" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1171</SUB>> ]
-"5254" [label = <(GetI,result.GetI())<SUB>1173</SUB>> ]
-"5255" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1173</SUB>> ]
-"5209" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1168</SUB>> ]
-"5227" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1169</SUB>> ]
-"5257" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1173</SUB>> ]
-"5210" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1168</SUB>> ]
-"5214" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1168</SUB>> ]
-"5221" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
-"5228" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1169</SUB>> ]
-"5232" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1169</SUB>> ]
-"5239" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
-"5215" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1168</SUB>> ]
-"5233" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1169</SUB>> ]
-"5216" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1168</SUB>> ]
-"5218" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1168</SUB>> ]
-"5234" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1169</SUB>> ]
-"5236" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1169</SUB>> ]
-"5195" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1165</SUB>> ]
-"5258" [label = <(METHOD_RETURN,jint)<SUB>1165</SUB>> ]
-  "5202" -> "5205" 
-  "5205" -> "5210" 
-  "5205" -> "5223" 
-  "5223" -> "5228" 
-  "5223" -> "5242" 
-  "5242" -> "5246" 
-  "5245" -> "5251" 
-  "5251" -> "5257" 
-  "5253" -> "5258" 
-  "5246" -> "5245" 
-  "5254" -> "5253" 
-  "5255" -> "5254" 
-  "5209" -> "5216" 
-  "5209" -> "5223" 
-  "5227" -> "5234" 
-  "5227" -> "5242" 
-  "5257" -> "5255" 
-  "5210" -> "5209" 
-  "5214" -> "5221" 
-  "5221" -> "5258" 
-  "5228" -> "5227" 
-  "5232" -> "5239" 
-  "5239" -> "5258" 
-  "5215" -> "5214" 
-  "5233" -> "5232" 
-  "5216" -> "5218" 
-  "5218" -> "5215" 
-  "5234" -> "5236" 
-  "5236" -> "5233" 
-  "5195" -> "5202" 
+digraph "CallNonvirtualLongMethodV" {  
+"5252" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
+"5270" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
+"5289" [label = <(soa,soa(env))<SUB>1126</SUB>> ]
+"5291" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1127</SUB>> ]
+"5292" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1127</SUB>> ]
+"5293" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1127</SUB>> ]
+"5256" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1124</SUB>> ]
+"5274" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1125</SUB>> ]
+"5294" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1127</SUB>> ]
+"5299" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1127</SUB>> ]
+"5257" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1124</SUB>> ]
+"5261" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1124</SUB>> ]
+"5268" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
+"5275" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1125</SUB>> ]
+"5279" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1125</SUB>> ]
+"5286" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
+"5262" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1124</SUB>> ]
+"5280" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1125</SUB>> ]
+"5263" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1124</SUB>> ]
+"5265" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1124</SUB>> ]
+"5281" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1125</SUB>> ]
+"5283" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1125</SUB>> ]
+"5245" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1122</SUB>> ]
+"5300" [label = <(METHOD_RETURN,jlong)<SUB>1122</SUB>> ]
+  "5252" -> "5257" 
+  "5252" -> "5270" 
+  "5270" -> "5275" 
+  "5270" -> "5289" 
+  "5289" -> "5294" 
+  "5291" -> "5300" 
+  "5292" -> "5291" 
+  "5293" -> "5292" 
+  "5256" -> "5263" 
+  "5256" -> "5270" 
+  "5274" -> "5281" 
+  "5274" -> "5289" 
+  "5294" -> "5299" 
+  "5299" -> "5293" 
+  "5257" -> "5256" 
+  "5261" -> "5268" 
+  "5268" -> "5300" 
+  "5275" -> "5274" 
+  "5279" -> "5286" 
+  "5286" -> "5300" 
+  "5262" -> "5261" 
+  "5280" -> "5279" 
+  "5263" -> "5265" 
+  "5265" -> "5262" 
+  "5281" -> "5283" 
+  "5283" -> "5280" 
+  "5245" -> "5252" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/98-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/98-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/98-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/98-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualIntMethodV" {  
-"5267" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
-"5285" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
-"5304" [label = <(soa,soa(env))<SUB>1180</SUB>> ]
-"5306" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1181</SUB>> ]
-"5307" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1181</SUB>> ]
-"5308" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1181</SUB>> ]
-"5271" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1178</SUB>> ]
-"5289" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1179</SUB>> ]
-"5309" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1181</SUB>> ]
-"5314" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1181</SUB>> ]
-"5272" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1178</SUB>> ]
-"5276" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1178</SUB>> ]
-"5283" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
-"5290" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1179</SUB>> ]
-"5294" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1179</SUB>> ]
-"5301" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
-"5277" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1178</SUB>> ]
-"5295" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1179</SUB>> ]
-"5278" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1178</SUB>> ]
-"5280" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1178</SUB>> ]
-"5296" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1179</SUB>> ]
-"5298" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1179</SUB>> ]
-"5260" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1176</SUB>> ]
-"5315" [label = <(METHOD_RETURN,jint)<SUB>1176</SUB>> ]
-  "5267" -> "5272" 
-  "5267" -> "5285" 
-  "5285" -> "5290" 
-  "5285" -> "5304" 
-  "5304" -> "5309" 
-  "5306" -> "5315" 
-  "5307" -> "5306" 
-  "5308" -> "5307" 
-  "5271" -> "5278" 
-  "5271" -> "5285" 
-  "5289" -> "5296" 
-  "5289" -> "5304" 
+digraph "CallNonvirtualLongMethodA" {  
+"5309" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
+"5327" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
+"5346" [label = <(soa,soa(env))<SUB>1134</SUB>> ]
+"5348" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1135</SUB>> ]
+"5349" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1135</SUB>> ]
+"5350" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1135</SUB>> ]
+"5313" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1132</SUB>> ]
+"5331" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1133</SUB>> ]
+"5351" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1135</SUB>> ]
+"5356" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1135</SUB>> ]
+"5314" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1132</SUB>> ]
+"5318" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1132</SUB>> ]
+"5325" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
+"5332" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1133</SUB>> ]
+"5336" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1133</SUB>> ]
+"5343" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
+"5319" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1132</SUB>> ]
+"5337" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1133</SUB>> ]
+"5320" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1132</SUB>> ]
+"5322" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1132</SUB>> ]
+"5338" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1133</SUB>> ]
+"5340" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1133</SUB>> ]
+"5302" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1130</SUB>> ]
+"5357" [label = <(METHOD_RETURN,jlong)<SUB>1130</SUB>> ]
   "5309" -> "5314" 
-  "5314" -> "5308" 
-  "5272" -> "5271" 
-  "5276" -> "5283" 
-  "5283" -> "5315" 
-  "5290" -> "5289" 
-  "5294" -> "5301" 
-  "5301" -> "5315" 
-  "5277" -> "5276" 
-  "5295" -> "5294" 
-  "5278" -> "5280" 
-  "5280" -> "5277" 
-  "5296" -> "5298" 
-  "5298" -> "5295" 
-  "5260" -> "5267" 
+  "5309" -> "5327" 
+  "5327" -> "5332" 
+  "5327" -> "5346" 
+  "5346" -> "5351" 
+  "5348" -> "5357" 
+  "5349" -> "5348" 
+  "5350" -> "5349" 
+  "5313" -> "5320" 
+  "5313" -> "5327" 
+  "5331" -> "5338" 
+  "5331" -> "5346" 
+  "5351" -> "5356" 
+  "5356" -> "5350" 
+  "5314" -> "5313" 
+  "5318" -> "5325" 
+  "5325" -> "5357" 
+  "5332" -> "5331" 
+  "5336" -> "5343" 
+  "5343" -> "5357" 
+  "5319" -> "5318" 
+  "5337" -> "5336" 
+  "5320" -> "5322" 
+  "5322" -> "5319" 
+  "5338" -> "5340" 
+  "5340" -> "5337" 
+  "5302" -> "5309" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/99-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/99-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/secure/out/99-cfg.dot	2023-06-07 19:35:14.727385851 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_6/vulnerable/out/99-cfg.dot	2023-06-07 19:35:21.267385048 +0330
@@ -1,53 +1,59 @@
-digraph "CallNonvirtualIntMethodA" {  
-"5324" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
-"5342" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
-"5361" [label = <(soa,soa(env))<SUB>1188</SUB>> ]
-"5363" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1189</SUB>> ]
-"5364" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1189</SUB>> ]
-"5365" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1189</SUB>> ]
-"5328" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1186</SUB>> ]
-"5346" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1187</SUB>> ]
-"5366" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1189</SUB>> ]
-"5371" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1189</SUB>> ]
-"5329" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1186</SUB>> ]
-"5333" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1186</SUB>> ]
-"5340" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
-"5347" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1187</SUB>> ]
-"5351" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1187</SUB>> ]
-"5358" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
-"5334" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1186</SUB>> ]
-"5352" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1187</SUB>> ]
-"5335" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1186</SUB>> ]
-"5337" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1186</SUB>> ]
-"5353" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1187</SUB>> ]
-"5355" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1187</SUB>> ]
-"5317" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1184</SUB>> ]
-"5372" [label = <(METHOD_RETURN,jint)<SUB>1184</SUB>> ]
-  "5324" -> "5329" 
-  "5324" -> "5342" 
-  "5342" -> "5347" 
-  "5342" -> "5361" 
-  "5361" -> "5366" 
-  "5363" -> "5372" 
-  "5364" -> "5363" 
-  "5365" -> "5364" 
-  "5328" -> "5335" 
-  "5328" -> "5342" 
-  "5346" -> "5353" 
-  "5346" -> "5361" 
-  "5366" -> "5371" 
-  "5371" -> "5365" 
-  "5329" -> "5328" 
-  "5333" -> "5340" 
-  "5340" -> "5372" 
-  "5347" -> "5346" 
-  "5351" -> "5358" 
-  "5358" -> "5372" 
-  "5334" -> "5333" 
-  "5352" -> "5351" 
-  "5335" -> "5337" 
-  "5337" -> "5334" 
-  "5353" -> "5355" 
-  "5355" -> "5352" 
-  "5317" -> "5324" 
+digraph "CallNonvirtualFloatMethod" {  
+"5366" [label = <(va_start,va_start(ap, mid))<SUB>1140</SUB>> ]
+"5369" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1141</SUB>> ]
+"5387" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1142</SUB>> ]
+"5406" [label = <(soa,soa(env))<SUB>1143</SUB>> ]
+"5409" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1144</SUB>> ]
+"5415" [label = <(va_end,va_end(ap))<SUB>1145</SUB>> ]
+"5417" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1146</SUB>> ]
+"5410" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1144</SUB>> ]
+"5418" [label = <(GetF,result.GetF())<SUB>1146</SUB>> ]
+"5419" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1146</SUB>> ]
+"5373" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1141</SUB>> ]
+"5391" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1142</SUB>> ]
+"5421" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1146</SUB>> ]
+"5374" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1141</SUB>> ]
+"5378" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;obj == null&quot;))<SUB>1141</SUB>> ]
+"5385" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1141</SUB>> ]
+"5392" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1142</SUB>> ]
+"5396" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbortF(__FUNCTION__, &quot;mid == null&quot;))<SUB>1142</SUB>> ]
+"5403" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1142</SUB>> ]
+"5379" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1141</SUB>> ]
+"5397" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1142</SUB>> ]
+"5380" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1141</SUB>> ]
+"5382" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1141</SUB>> ]
+"5398" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1142</SUB>> ]
+"5400" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1142</SUB>> ]
+"5359" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1138</SUB>> ]
+"5422" [label = <(METHOD_RETURN,jfloat)<SUB>1138</SUB>> ]
+  "5366" -> "5369" 
+  "5369" -> "5374" 
+  "5369" -> "5387" 
+  "5387" -> "5392" 
+  "5387" -> "5406" 
+  "5406" -> "5410" 
+  "5409" -> "5415" 
+  "5415" -> "5421" 
+  "5417" -> "5422" 
+  "5410" -> "5409" 
+  "5418" -> "5417" 
+  "5419" -> "5418" 
+  "5373" -> "5380" 
+  "5373" -> "5387" 
+  "5391" -> "5398" 
+  "5391" -> "5406" 
+  "5421" -> "5419" 
+  "5374" -> "5373" 
+  "5378" -> "5385" 
+  "5385" -> "5422" 
+  "5392" -> "5391" 
+  "5396" -> "5403" 
+  "5403" -> "5422" 
+  "5379" -> "5378" 
+  "5397" -> "5396" 
+  "5380" -> "5382" 
+  "5382" -> "5379" 
+  "5398" -> "5400" 
+  "5400" -> "5397" 
+  "5359" -> "5366" 
 }
